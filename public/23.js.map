{"version":3,"sources":["webpack:///./src/client/components/Viewer/Extensions/Dynamic/Viewing.Extension.IoT/IoT.Graph/smoothie.js","webpack:///./src/client/components/Viewer/Extensions/Dynamic/Viewing.Extension.IoT/IoT.Graph/IoT.Graph.js","webpack:///./src/client/components/Viewer/Extensions/Dynamic/Viewing.Extension.IoT/IoT.Graph/index.js"],"names":["Util","extend","arguments","i","length","key","hasOwnProperty","typeof_default","Array","TimeSeries","options","this","defaultOptions","clear","SmoothieChart","defaultChartOptions","seriesSet","currentValueRange","currentVisMinValue","lastRenderTimeMillis","resetBoundsInterval","resetBounds","prototype","data","maxValue","Number","NaN","minValue","value","append","timestamp","sumRepeatedTimeStampValues","splice","push","isNaN","Math","max","min","dropOldData","oldestValidTime","maxDataSetLength","removeCount","millisPerPixel","enableDpiScaling","yMinFormatter","precision","parseFloat","toFixed","yMaxFormatter","maxValueScale","interpolation","scaleSmoothing","grid","fillStyle","strokeStyle","lineWidth","sharpLines","millisPerLine","verticalSections","borderVisible","labels","disabled","fontSize","fontFamily","horizontalLines","AnimateCompatibility","requestAnimationFrame","callback","element","window","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","Date","getTime","call","cancelAnimationFrame","id","clearTimeout","defaultSeriesPresentationOptions","addTimeSeries","timeSeries","resetBoundsTimerId","setInterval","removeTimeSeries","numSeries","clearInterval","getTimeSeriesOptions","bringToFront","set","streamTo","canvas","delayMillis","delay","start","resize","devicePixelRatio","dpr","width","parseInt","getAttribute","height","originalWidth","floor","setAttribute","toString","style","getContext","scale","originalHeight","frame","animate","render","bind","stop","updateValueRange","chartOptions","chartMaxValue","chartMinValue","d","yRangeFunction","range","valueRangeDiff","minValueDiff","isAnimatingScale","abs","valueRange","time","nowMillis","maxIdleMillis","context","dimensions","top","left","clientWidth","clientHeight","valueToYPixel","offset","round","timeToXPixel","t","font","save","translate","beginPath","rect","clip","clearRect","fillRect","restore","gx","moveTo","lineTo","stroke","closePath","v","gy","strokeRect","hl","line","hly","color","dataSet","seriesOptions","firstX","lastX","lastY","x","y","bezierCurveTo","fill","maxValueString","minValueString","fillText","measureText","timestampFormatter","textUntilX","tx","ts","tsWidth","timeFormatter","date","pad2","number","getHours","getMinutes","getSeconds","IoTGraph","_this","classCallCheck_default","possibleConstructorReturn_default","getPrototypeOf_default","state","_this2","thresholdSeries","dataSeries","chart","props","intervalId","updateGraph","guid","_this3","threshold","randomBase","random","randomRange","setState","_this4","label","concat","tagId","name","react_default","a","createElement","className","ref","div","React","Component"],"mappings":"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","file":"23.js","sourcesContent":["// MIT License:\n//\n// Copyright (c) 2010-2013, Joe Walnes\n//               2013-2014, Drew Noakes\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n * Smoothie Charts - http://smoothiecharts.org/\n * (c) 2010-2013, Joe Walnes\n *     2013-2014, Drew Noakes\n *\n * v1.0: Main charting library, by Joe Walnes\n * v1.1: Auto scaling of axis, by Neil Dunn\n * v1.2: fps (frames per second) option, by Mathias Petterson\n * v1.3: Fix for divide by zero, by Paul Nikitochkin\n * v1.4: Set minimum, top-scale padding, remove timeseries, add optional timer to reset bounds, by Kelley Reynolds\n * v1.5: Set default frames per second to 50... smoother.\n *       .start(), .stop() methods for conserving CPU, by Dmitry Vyal\n *       options.interpolation = 'bezier' or 'line', by Dmitry Vyal\n *       options.maxValue to fix scale, by Dmitry Vyal\n * v1.6: minValue/maxValue will always get converted to floats, by Przemek Matylla\n * v1.7: options.grid.fillStyle may be a transparent color, by Dmitry A. Shashkin\n *       Smooth rescaling, by Kostas Michalopoulos\n * v1.8: Set max length to customize number of live points in the dataset with options.maxDataSetLength, by Krishna Narni\n * v1.9: Display timestamps along the bottom, by Nick and Stev-io\n *       (https://groups.google.com/forum/?fromgroups#!topic/smoothie-charts/-Ywse8FCpKI%5B1-25%5D)\n *       Refactored by Krishna Narni, to support timestamp formatting function\n * v1.10: Switch to requestAnimationFrame, removed the now obsoleted options.fps, by Gergely Imreh\n * v1.11: options.grid.sharpLines option added, by @drewnoakes\n *        Addressed warning seen in Firefox when seriesOption.fillStyle undefined, by @drewnoakes\n * v1.12: Support for horizontalLines added, by @drewnoakes\n *        Support for yRangeFunction callback added, by @drewnoakes\n * v1.13: Fixed typo (#32), by @alnikitich\n * v1.14: Timer cleared when last TimeSeries removed (#23), by @davidgaleano\n *        Fixed diagonal line on chart at start/end of data stream, by @drewnoakes\n * v1.15: Support for npm package (#18), by @dominictarr\n *        Fixed broken removeTimeSeries function (#24) by @davidgaleano\n *        Minor performance and tidying, by @drewnoakes\n * v1.16: Bug fix introduced in v1.14 relating to timer creation/clearance (#23), by @drewnoakes\n *        TimeSeries.append now deals with out-of-order timestamps, and can merge duplicates, by @zacwitte (#12)\n *        Documentation and some local variable renaming for clarity, by @drewnoakes\n * v1.17: Allow control over font size (#10), by @drewnoakes\n *        Timestamp text won't overlap, by @drewnoakes\n * v1.18: Allow control of max/min label precision, by @drewnoakes\n *        Added 'borderVisible' chart option, by @drewnoakes\n *        Allow drawing series with fill but no stroke (line), by @drewnoakes\n * v1.19: Avoid unnecessary repaints, and fixed flicker in old browsers having multiple charts in document (#40), by @asbai\n * v1.20: Add SmoothieChart.getTimeSeriesOptions and SmoothieChart.bringToFront functions, by @drewnoakes\n * v1.21: Add 'step' interpolation mode, by @drewnoakes\n * v1.22: Add support for different pixel ratios. Also add optional y limit formatters, by @copacetic\n * v1.23: Fix bug introduced in v1.22 (#44), by @drewnoakes\n * v1.24: Fix bug introduced in v1.23, re-adding parseFloat to y-axis formatter defaults, by @siggy_sf\n * v1.25: Fix bug seen when adding a data point to TimeSeries which is older than the current data, by @Nking92\n *        Draw time labels on top of series, by @comolosabia\n *        Add TimeSeries.clear function, by @drewnoakes\n * v1.26: Add support for resizing on high device pixel ratio screens, by @copacetic\n * v1.27: Fix bug introduced in v1.26 for non whole number devicePixelRatio values, by @zmbush\n */\n\n\n  var Util = {\n    extend: function() {\n      arguments[0] = arguments[0] || {};\n      for (var i = 1; i < arguments.length; i++)\n      {\n        for (var key in arguments[i])\n        {\n          if (arguments[i].hasOwnProperty(key))\n          {\n            if (typeof(arguments[i][key]) === 'object') {\n              if (arguments[i][key] instanceof Array) {\n                arguments[0][key] = arguments[i][key];\n              } else {\n                arguments[0][key] = Util.extend(arguments[0][key], arguments[i][key]);\n              }\n            } else {\n              arguments[0][key] = arguments[i][key];\n            }\n          }\n        }\n      }\n      return arguments[0];\n    }\n  };\n\n  /**\n   * Initialises a new <code>TimeSeries</code> with optional data options.\n   *\n   * Options are of the form (defaults shown):\n   *\n   * <pre>\n   * {\n   *   resetBounds: true,        // enables/disables automatic scaling of the y-axis\n   *   resetBoundsInterval: 3000 // the period between scaling calculations, in millis\n   * }\n   * </pre>\n   *\n   * Presentation options for TimeSeries are specified as an argument to <code>SmoothieChart.addTimeSeries</code>.\n   *\n   * @constructor\n   */\n  function TimeSeries(options) {\n    this.options = Util.extend({}, TimeSeries.defaultOptions, options);\n    this.clear();\n  }\n\n  TimeSeries.defaultOptions = {\n    resetBoundsInterval: 3000,\n    resetBounds: true\n  };\n\n  /**\n   * Clears all data and state from this TimeSeries object.\n   */\n  TimeSeries.prototype.clear = function() {\n    this.data = [];\n    this.maxValue = Number.NaN; // The maximum value ever seen in this TimeSeries.\n    this.minValue = Number.NaN; // The minimum value ever seen in this TimeSeries.\n  };\n\n  /**\n   * Recalculate the min/max values for this <code>TimeSeries</code> object.\n   *\n   * This causes the graph to scale itself in the y-axis.\n   */\n  TimeSeries.prototype.resetBounds = function() {\n    if (this.data.length) {\n      // Walk through all data points, finding the min/max value\n      this.maxValue = this.data[0][1];\n      this.minValue = this.data[0][1];\n      for (var i = 1; i < this.data.length; i++) {\n        var value = this.data[i][1];\n        if (value > this.maxValue) {\n          this.maxValue = value;\n        }\n        if (value < this.minValue) {\n          this.minValue = value;\n        }\n      }\n    } else {\n      // No data exists, so set min/max to NaN\n      this.maxValue = Number.NaN;\n      this.minValue = Number.NaN;\n    }\n  };\n\n  /**\n   * Adds a new data point to the <code>TimeSeries</code>, preserving chronological order.\n   *\n   * @param timestamp the position, in time, of this data point\n   * @param value the value of this data point\n   * @param sumRepeatedTimeStampValues if <code>timestamp</code> has an exact match in the series, this flag controls\n   * whether it is replaced, or the values summed (defaults to false.)\n   */\n  TimeSeries.prototype.append = function(timestamp, value, sumRepeatedTimeStampValues) {\n    // Rewind until we hit an older timestamp\n    var i = this.data.length - 1;\n    while (i >= 0 && this.data[i][0] > timestamp) {\n      i--;\n    }\n\n    if (i === -1) {\n      // This new item is the oldest data\n      this.data.splice(0, 0, [timestamp, value]);\n    } else if (this.data.length > 0 && this.data[i][0] === timestamp) {\n      // Update existing values in the array\n      if (sumRepeatedTimeStampValues) {\n        // Sum this value into the existing 'bucket'\n        this.data[i][1] += value;\n        value = this.data[i][1];\n      } else {\n        // Replace the previous value\n        this.data[i][1] = value;\n      }\n    } else if (i < this.data.length - 1) {\n      // Splice into the correct position to keep timestamps in order\n      this.data.splice(i + 1, 0, [timestamp, value]);\n    } else {\n      // Add to the end of the array\n      this.data.push([timestamp, value]);\n    }\n\n    this.maxValue = isNaN(this.maxValue) ? value : Math.max(this.maxValue, value);\n    this.minValue = isNaN(this.minValue) ? value : Math.min(this.minValue, value);\n  };\n\n  TimeSeries.prototype.dropOldData = function(oldestValidTime, maxDataSetLength) {\n    // We must always keep one expired data point as we need this to draw the\n    // line that comes into the chart from the left, but any points prior to that can be removed.\n    var removeCount = 0;\n    while (this.data.length - removeCount >= maxDataSetLength && this.data[removeCount + 1][0] < oldestValidTime) {\n      removeCount++;\n    }\n    if (removeCount !== 0) {\n      this.data.splice(0, removeCount);\n    }\n  };\n\n  /**\n   * Initialises a new <code>SmoothieChart</code>.\n   *\n   * Options are optional, and should be of the form below. Just specify the values you\n   * need and the rest will be given sensible defaults as shown:\n   *\n   * <pre>\n   * {\n   *   minValue: undefined,                      // specify to clamp the lower y-axis to a given value\n   *   maxValue: undefined,                      // specify to clamp the upper y-axis to a given value\n   *   maxValueScale: 1,                         // allows proportional padding to be added above the chart. for 10% padding, specify 1.1.\n   *   yRangeFunction: undefined,                // function({min: , max: }) { return {min: , max: }; }\n   *   scaleSmoothing: 0.125,                    // controls the rate at which y-value zoom animation occurs\n   *   millisPerPixel: 20,                       // sets the speed at which the chart pans by\n   *   enableDpiScaling: true,                   // support rendering at different DPI depending on the device\n   *   yMinFormatter: function(min, precision) { // callback function that formats the min y value label\n   *     return parseFloat(min).toFixed(precision);\n   *   },\n   *   yMaxFormatter: function(max, precision) { // callback function that formats the max y value label\n   *     return parseFloat(max).toFixed(precision);\n   *   },\n   *   maxDataSetLength: 2,\n   *   interpolation: 'bezier'                   // one of 'bezier', 'linear', or 'step'\n   *   timestampFormatter: null,                 // optional function to format time stamps for bottom of chart\n   *                                             // you may use SmoothieChart.timeFormatter, or your own: function(date) { return ''; }\n   *   horizontalLines: [],                      // [ { value: 0, color: '#ffffff', lineWidth: 1 } ]\n   *   grid:\n   *   {\n   *     fillStyle: '#000000',                   // the background colour of the chart\n   *     lineWidth: 1,                           // the pixel width of grid lines\n   *     strokeStyle: '#777777',                 // colour of grid lines\n   *     millisPerLine: 1000,                    // distance between vertical grid lines\n   *     sharpLines: false,                      // controls whether grid lines are 1px sharp, or softened\n   *     verticalSections: 2,                    // number of vertical sections marked out by horizontal grid lines\n   *     borderVisible: true                     // whether the grid lines trace the border of the chart or not\n   *   },\n   *   labels\n   *   {\n   *     disabled: false,                        // enables/disables labels showing the min/max values\n   *     fillStyle: '#ffffff',                   // colour for text of labels,\n   *     fontSize: 15,\n   *     fontFamily: 'sans-serif',\n   *     precision: 2\n   *   }\n   * }\n   * </pre>\n   *\n   * @constructor\n   */\n  function SmoothieChart(options) {\n    this.options = Util.extend({}, SmoothieChart.defaultChartOptions, options);\n    this.seriesSet = [];\n    this.currentValueRange = 1;\n    this.currentVisMinValue = 0;\n    this.lastRenderTimeMillis = 0;\n  }\n\n  SmoothieChart.defaultChartOptions = {\n    millisPerPixel: 20,\n    enableDpiScaling: true,\n    yMinFormatter: function(min, precision) {\n      return parseFloat(min).toFixed(precision);\n    },\n    yMaxFormatter: function(max, precision) {\n      return parseFloat(max).toFixed(precision);\n    },\n    maxValueScale: 1,\n    interpolation: 'bezier',\n    scaleSmoothing: 0.125,\n    maxDataSetLength: 2,\n    grid: {\n      fillStyle: '#000000',\n      strokeStyle: '#777777',\n      lineWidth: 1,\n      sharpLines: false,\n      millisPerLine: 1000,\n      verticalSections: 2,\n      borderVisible: true\n    },\n    labels: {\n      fillStyle: '#ffffff',\n      disabled: false,\n      fontSize: 10,\n      fontFamily: 'monospace',\n      precision: 2\n    },\n    horizontalLines: []\n  };\n\n  // Based on http://inspirit.github.com/jsfeat/js/compatibility.js\n  SmoothieChart.AnimateCompatibility = (function() {\n    var requestAnimationFrame = function(callback, element) {\n          var requestAnimationFrame =\n            window.requestAnimationFrame        ||\n            window.webkitRequestAnimationFrame  ||\n            window.mozRequestAnimationFrame     ||\n            window.oRequestAnimationFrame       ||\n            window.msRequestAnimationFrame      ||\n            function(callback) {\n              return window.setTimeout(function() {\n                callback(new Date().getTime());\n              }, 16);\n            };\n          return requestAnimationFrame.call(window, callback, element);\n        },\n        cancelAnimationFrame = function(id) {\n          var cancelAnimationFrame =\n            window.cancelAnimationFrame ||\n            function(id) {\n              clearTimeout(id);\n            };\n          return cancelAnimationFrame.call(window, id);\n        };\n\n    return {\n      requestAnimationFrame: requestAnimationFrame,\n      cancelAnimationFrame: cancelAnimationFrame\n    };\n  })();\n\n  SmoothieChart.defaultSeriesPresentationOptions = {\n    lineWidth: 1,\n    strokeStyle: '#ffffff'\n  };\n\n  /**\n   * Adds a <code>TimeSeries</code> to this chart, with optional presentation options.\n   *\n   * Presentation options should be of the form (defaults shown):\n   *\n   * <pre>\n   * {\n   *   lineWidth: 1,\n   *   strokeStyle: '#ffffff',\n   *   fillStyle: undefined\n   * }\n   * </pre>\n   */\n  SmoothieChart.prototype.addTimeSeries = function(timeSeries, options) {\n    this.seriesSet.push({timeSeries: timeSeries, options: Util.extend({}, SmoothieChart.defaultSeriesPresentationOptions, options)});\n    if (timeSeries.options.resetBounds && timeSeries.options.resetBoundsInterval > 0) {\n      timeSeries.resetBoundsTimerId = setInterval(\n        function() {\n          timeSeries.resetBounds();\n        },\n        timeSeries.options.resetBoundsInterval\n      );\n    }\n  };\n\n  /**\n   * Removes the specified <code>TimeSeries</code> from the chart.\n   */\n  SmoothieChart.prototype.removeTimeSeries = function(timeSeries) {\n    // Find the correct timeseries to remove, and remove it\n    var numSeries = this.seriesSet.length;\n    for (var i = 0; i < numSeries; i++) {\n      if (this.seriesSet[i].timeSeries === timeSeries) {\n        this.seriesSet.splice(i, 1);\n        break;\n      }\n    }\n    // If a timer was operating for that timeseries, remove it\n    if (timeSeries.resetBoundsTimerId) {\n      // Stop resetting the bounds, if we were\n      clearInterval(timeSeries.resetBoundsTimerId);\n    }\n  };\n\n  /**\n   * Gets render options for the specified <code>TimeSeries</code>.\n   *\n   * As you may use a single <code>TimeSeries</code> in multiple charts with different formatting in each usage,\n   * these settings are stored in the chart.\n   */\n  SmoothieChart.prototype.getTimeSeriesOptions = function(timeSeries) {\n    // Find the correct timeseries to remove, and remove it\n    var numSeries = this.seriesSet.length;\n    for (var i = 0; i < numSeries; i++) {\n      if (this.seriesSet[i].timeSeries === timeSeries) {\n        return this.seriesSet[i].options;\n      }\n    }\n  };\n\n  /**\n   * Brings the specified <code>TimeSeries</code> to the top of the chart. It will be rendered last.\n   */\n  SmoothieChart.prototype.bringToFront = function(timeSeries) {\n    // Find the correct timeseries to remove, and remove it\n    var numSeries = this.seriesSet.length;\n    for (var i = 0; i < numSeries; i++) {\n      if (this.seriesSet[i].timeSeries === timeSeries) {\n        var set = this.seriesSet.splice(i, 1);\n        this.seriesSet.push(set[0]);\n        break;\n      }\n    }\n  };\n\n  /**\n   * Instructs the <code>SmoothieChart</code> to start rendering to the provided canvas, with specified delay.\n   *\n   * @param canvas the target canvas element\n   * @param delayMillis an amount of time to wait before a data point is shown. This can prevent the end of the series\n   * from appearing on screen, with new values flashing into view, at the expense of some latency.\n   */\n  SmoothieChart.prototype.streamTo = function(canvas, delayMillis) {\n    this.canvas = canvas;\n    this.delay = delayMillis;\n    this.start();\n  };\n\n  /**\n   * Make sure the canvas has the optimal resolution for the device's pixel ratio.\n   */\n  SmoothieChart.prototype.resize = function() {\n    // TODO this function doesn't handle the value of enableDpiScaling changing during execution\n    if (!this.options.enableDpiScaling || !window || window.devicePixelRatio === 1)\n      return;\n\n    var dpr = window.devicePixelRatio;\n    var width = parseInt(this.canvas.getAttribute('width'));\n    var height = parseInt(this.canvas.getAttribute('height'));\n\n    if (!this.originalWidth || (Math.floor(this.originalWidth * dpr) !== width)) {\n      this.originalWidth = width;\n      this.canvas.setAttribute('width', (Math.floor(width * dpr)).toString());\n      this.canvas.style.width = width + 'px';\n      this.canvas.getContext('2d').scale(dpr, dpr);\n    }\n\n    if (!this.originalHeight || (Math.floor(this.originalHeight * dpr) !== height)) {\n      this.originalHeight = height;\n      this.canvas.setAttribute('height', (Math.floor(height * dpr)).toString());\n      this.canvas.style.height = height + 'px';\n      this.canvas.getContext('2d').scale(dpr, dpr);\n    }\n  };\n\n  /**\n   * Starts the animation of this chart.\n   */\n  SmoothieChart.prototype.start = function() {\n    if (this.frame) {\n      // We're already running, so just return\n      return;\n    }\n\n    // Renders a frame, and queues the next frame for later rendering\n    var animate = function() {\n      this.frame = SmoothieChart.AnimateCompatibility.requestAnimationFrame(function() {\n        this.render();\n        animate();\n      }.bind(this));\n    }.bind(this);\n\n    animate();\n  };\n\n  /**\n   * Stops the animation of this chart.\n   */\n  SmoothieChart.prototype.stop = function() {\n    if (this.frame) {\n      SmoothieChart.AnimateCompatibility.cancelAnimationFrame(this.frame);\n      delete this.frame;\n    }\n  };\n\n  SmoothieChart.prototype.updateValueRange = function() {\n    // Calculate the current scale of the chart, from all time series.\n    var chartOptions = this.options,\n        chartMaxValue = Number.NaN,\n        chartMinValue = Number.NaN;\n\n    for (var d = 0; d < this.seriesSet.length; d++) {\n      // TODO(ndunn): We could calculate / track these values as they stream in.\n      var timeSeries = this.seriesSet[d].timeSeries;\n      if (!isNaN(timeSeries.maxValue)) {\n        chartMaxValue = !isNaN(chartMaxValue) ? Math.max(chartMaxValue, timeSeries.maxValue) : timeSeries.maxValue;\n      }\n\n      if (!isNaN(timeSeries.minValue)) {\n        chartMinValue = !isNaN(chartMinValue) ? Math.min(chartMinValue, timeSeries.minValue) : timeSeries.minValue;\n      }\n    }\n\n    // Scale the chartMaxValue to add padding at the top if required\n    if (chartOptions.maxValue != null) {\n      chartMaxValue = chartOptions.maxValue;\n    } else {\n      chartMaxValue *= chartOptions.maxValueScale;\n    }\n\n    // Set the minimum if we've specified one\n    if (chartOptions.minValue != null) {\n      chartMinValue = chartOptions.minValue;\n    }\n\n    // If a custom range function is set, call it\n    if (this.options.yRangeFunction) {\n      var range = this.options.yRangeFunction({min: chartMinValue, max: chartMaxValue});\n      chartMinValue = range.min;\n      chartMaxValue = range.max;\n    }\n\n    if (!isNaN(chartMaxValue) && !isNaN(chartMinValue)) {\n      var targetValueRange = chartMaxValue - chartMinValue;\n      var valueRangeDiff = (targetValueRange - this.currentValueRange);\n      var minValueDiff = (chartMinValue - this.currentVisMinValue);\n      this.isAnimatingScale = Math.abs(valueRangeDiff) > 0.1 || Math.abs(minValueDiff) > 0.1;\n      this.currentValueRange += chartOptions.scaleSmoothing * valueRangeDiff;\n      this.currentVisMinValue += chartOptions.scaleSmoothing * minValueDiff;\n    }\n\n    this.valueRange = { min: chartMinValue, max: chartMaxValue };\n  };\n\n  SmoothieChart.prototype.render = function(canvas, time) {\n    var nowMillis = new Date().getTime();\n\n    if (!this.isAnimatingScale) {\n      // We're not animating. We can use the last render time and the scroll speed to work out whether\n      // we actually need to paint anything yet. If not, we can return immediately.\n\n      // Render at least every 1/6th of a second. The canvas may be resized, which there is\n      // no reliable way to detect.\n      var maxIdleMillis = Math.min(1000/6, this.options.millisPerPixel);\n\n      if (nowMillis - this.lastRenderTimeMillis < maxIdleMillis) {\n        return;\n      }\n    }\n\n    this.resize();\n\n    this.lastRenderTimeMillis = nowMillis;\n\n    canvas = canvas || this.canvas;\n    time = time || nowMillis - (this.delay || 0);\n\n    // Round time down to pixel granularity, so motion appears smoother.\n    time -= time % this.options.millisPerPixel;\n\n    var context = canvas.getContext('2d'),\n        chartOptions = this.options,\n        dimensions = { top: 0, left: 0, width: canvas.clientWidth, height: canvas.clientHeight },\n        // Calculate the threshold time for the oldest data points.\n        oldestValidTime = time - (dimensions.width * chartOptions.millisPerPixel),\n        valueToYPixel = function(value) {\n          var offset = value - this.currentVisMinValue;\n          return this.currentValueRange === 0\n            ? dimensions.height\n            : dimensions.height - (Math.round((offset / this.currentValueRange) * dimensions.height));\n        }.bind(this),\n        timeToXPixel = function(t) {\n          return Math.round(dimensions.width - ((time - t) / chartOptions.millisPerPixel));\n        };\n\n    this.updateValueRange();\n\n    context.font = chartOptions.labels.fontSize + 'px ' + chartOptions.labels.fontFamily;\n\n    // Save the state of the canvas context, any transformations applied in this method\n    // will get removed from the stack at the end of this method when .restore() is called.\n    context.save();\n\n    // Move the origin.\n    context.translate(dimensions.left, dimensions.top);\n\n    // Create a clipped rectangle - anything we draw will be constrained to this rectangle.\n    // This prevents the occasional pixels from curves near the edges overrunning and creating\n    // screen cheese (that phrase should need no explanation).\n    context.beginPath();\n    context.rect(0, 0, dimensions.width, dimensions.height);\n    context.clip();\n\n    // Clear the working area.\n    context.save();\n    context.fillStyle = chartOptions.grid.fillStyle;\n    context.clearRect(0, 0, dimensions.width, dimensions.height);\n    context.fillRect(0, 0, dimensions.width, dimensions.height);\n    context.restore();\n\n    // Grid lines...\n    context.save();\n    context.lineWidth = chartOptions.grid.lineWidth;\n    context.strokeStyle = chartOptions.grid.strokeStyle;\n    // Vertical (time) dividers.\n    if (chartOptions.grid.millisPerLine > 0) {\n      context.beginPath();\n      for (var t = time - (time % chartOptions.grid.millisPerLine);\n           t >= oldestValidTime;\n           t -= chartOptions.grid.millisPerLine) {\n        var gx = timeToXPixel(t);\n        if (chartOptions.grid.sharpLines) {\n          gx -= 0.5;\n        }\n        context.moveTo(gx, 0);\n        context.lineTo(gx, dimensions.height);\n      }\n      context.stroke();\n      context.closePath();\n    }\n\n    // Horizontal (value) dividers.\n    for (var v = 1; v < chartOptions.grid.verticalSections; v++) {\n      var gy = Math.round(v * dimensions.height / chartOptions.grid.verticalSections);\n      if (chartOptions.grid.sharpLines) {\n        gy -= 0.5;\n      }\n      context.beginPath();\n      context.moveTo(0, gy);\n      context.lineTo(dimensions.width, gy);\n      context.stroke();\n      context.closePath();\n    }\n    // Bounding rectangle.\n    if (chartOptions.grid.borderVisible) {\n      context.beginPath();\n      context.strokeRect(0, 0, dimensions.width, dimensions.height);\n      context.closePath();\n    }\n    context.restore();\n\n    // Draw any horizontal lines...\n    if (chartOptions.horizontalLines && chartOptions.horizontalLines.length) {\n      for (var hl = 0; hl < chartOptions.horizontalLines.length; hl++) {\n        var line = chartOptions.horizontalLines[hl],\n            hly = Math.round(valueToYPixel(line.value)) - 0.5;\n        context.strokeStyle = line.color || '#ffffff';\n        context.lineWidth = line.lineWidth || 1;\n        context.beginPath();\n        context.moveTo(0, hly);\n        context.lineTo(dimensions.width, hly);\n        context.stroke();\n        context.closePath();\n      }\n    }\n\n    // For each data set...\n    for (var d = 0; d < this.seriesSet.length; d++) {\n      context.save();\n      var timeSeries = this.seriesSet[d].timeSeries,\n          dataSet = timeSeries.data,\n          seriesOptions = this.seriesSet[d].options;\n\n      // Delete old data that's moved off the left of the chart.\n      timeSeries.dropOldData(oldestValidTime, chartOptions.maxDataSetLength);\n\n      // Set style for this dataSet.\n      context.lineWidth = seriesOptions.lineWidth;\n      context.strokeStyle = seriesOptions.strokeStyle;\n      // Draw the line...\n      context.beginPath();\n      // Retain lastX, lastY for calculating the control points of bezier curves.\n      var firstX = 0, lastX = 0, lastY = 0;\n      for (var i = 0; i < dataSet.length && dataSet.length !== 1; i++) {\n        var x = timeToXPixel(dataSet[i][0]),\n            y = valueToYPixel(dataSet[i][1]);\n\n        if (i === 0) {\n          firstX = x;\n          context.moveTo(x, y);\n        } else {\n          switch (chartOptions.interpolation) {\n            case \"linear\":\n            case \"line\": {\n              context.lineTo(x,y);\n              break;\n            }\n            case \"bezier\":\n            default: {\n              // Great explanation of Bezier curves: http://en.wikipedia.org/wiki/Bezier_curve#Quadratic_curves\n              //\n              // Assuming A was the last point in the line plotted and B is the new point,\n              // we draw a curve with control points P and Q as below.\n              //\n              // A---P\n              //     |\n              //     |\n              //     |\n              //     Q---B\n              //\n              // Importantly, A and P are at the same y coordinate, as are B and Q. This is\n              // so adjacent curves appear to flow as one.\n              //\n              context.bezierCurveTo( // startPoint (A) is implicit from last iteration of loop\n                Math.round((lastX + x) / 2), lastY, // controlPoint1 (P)\n                Math.round((lastX + x)) / 2, y, // controlPoint2 (Q)\n                x, y); // endPoint (B)\n              break;\n            }\n            case \"step\": {\n              context.lineTo(x,lastY);\n              context.lineTo(x,y);\n              break;\n            }\n          }\n        }\n\n        lastX = x; lastY = y;\n      }\n\n      if (dataSet.length > 1) {\n        if (seriesOptions.fillStyle) {\n          // Close up the fill region.\n          context.lineTo(dimensions.width + seriesOptions.lineWidth + 1, lastY);\n          context.lineTo(dimensions.width + seriesOptions.lineWidth + 1, dimensions.height + seriesOptions.lineWidth + 1);\n          context.lineTo(firstX, dimensions.height + seriesOptions.lineWidth);\n          context.fillStyle = seriesOptions.fillStyle;\n          context.fill();\n        }\n\n        if (seriesOptions.strokeStyle && seriesOptions.strokeStyle !== 'none') {\n          context.stroke();\n        }\n        context.closePath();\n      }\n      context.restore();\n    }\n\n    // Draw the axis values on the chart.\n    if (!chartOptions.labels.disabled && !isNaN(this.valueRange.min) && !isNaN(this.valueRange.max)) {\n      var maxValueString = chartOptions.yMaxFormatter(this.valueRange.max, chartOptions.labels.precision),\n          minValueString = chartOptions.yMinFormatter(this.valueRange.min, chartOptions.labels.precision);\n      context.fillStyle = chartOptions.labels.fillStyle;\n      context.fillText(maxValueString, dimensions.width - context.measureText(maxValueString).width - 2, chartOptions.labels.fontSize);\n      context.fillText(minValueString, dimensions.width - context.measureText(minValueString).width - 2, dimensions.height - 2);\n    }\n\n    // Display timestamps along x-axis at the bottom of the chart.\n    if (chartOptions.timestampFormatter && chartOptions.grid.millisPerLine > 0) {\n      var textUntilX = dimensions.width - context.measureText(minValueString).width + 4;\n      for (var t = time - (time % chartOptions.grid.millisPerLine);\n           t >= oldestValidTime;\n           t -= chartOptions.grid.millisPerLine) {\n        var gx = timeToXPixel(t);\n        // Only draw the timestamp if it won't overlap with the previously drawn one.\n        if (gx < textUntilX) {\n          // Formats the timestamp based on user specified formatting function\n          // SmoothieChart.timeFormatter function above is one such formatting option\n          var tx = new Date(t),\n            ts = chartOptions.timestampFormatter(tx),\n            tsWidth = context.measureText(ts).width;\n          textUntilX = gx - tsWidth - 2;\n          context.fillStyle = chartOptions.labels.fillStyle;\n          context.fillText(ts, gx - tsWidth, dimensions.height - 2);\n        }\n      }\n    }\n\n    context.restore(); // See .save() above.\n  };\n\n  // Sample timestamp formatting function\n  SmoothieChart.timeFormatter = function(date) {\n    function pad2(number) { return (number < 10 ? '0' : '') + number }\n    return pad2(date.getHours()) + ':' + pad2(date.getMinutes()) + ':' + pad2(date.getSeconds());\n  };\n\nexport {SmoothieChart, TimeSeries}\n","import  {SmoothieChart,TimeSeries} from './smoothie'\nimport React from 'react'\n\n/////////////////////////////////////////////////////////////////\n//\n//\n/////////////////////////////////////////////////////////////////\nexport default class IoTGraph extends React.Component {\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  constructor () {\n\n    super()\n\n    this.state = {\n      value: 0\n    }\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  componentDidMount () {\n\n    this.thresholdSeries = new TimeSeries()\n\n    this.dataSeries = new TimeSeries()\n\n    this.chart = new SmoothieChart({\n      yRangeFunction: () => {\n        return {\n          min: this.props.min,\n          max: this.props.max\n        }\n      }\n    })\n\n    this.intervalId = 0\n\n    this.chart.addTimeSeries(this.thresholdSeries, {\n      strokeStyle: 'rgba(255, 0, 0, 1)',\n      fillStyle: 'rgba(255, 0, 0, 0.0)',\n      lineWidth: 1\n    })\n\n    this.chart.addTimeSeries(this.dataSeries, {\n      strokeStyle: 'rgba(0, 255, 0, 1)',\n      fillStyle: 'rgba(0, 255, 0, 0.2)',\n      lineWidth: 1\n    })\n\n    this.chart.streamTo(this.canvas, 100)\n\n    this.updateGraph(this.props)\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  componentWillUnmount () {\n\n    clearInterval(this.intervalId)\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  componentWillReceiveProps (props) {\n\n    if (props.guid !== this.props.guid) {\n\n      this.updateGraph(props)\n    }\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  updateGraph (props) {\n\n    clearInterval(this.intervalId)\n\n    this.thresholdSeries.clear()\n    this.dataSeries.clear()\n\n    this.intervalId = setInterval(() => {\n\n      const t = new Date().getTime()\n      this.thresholdSeries.append(t, this.props.threshold)\n\n      const value = this.props.value ||\n        props.randomBase + (0.5 - Math.random()) * props.randomRange\n\n      this.setState({\n        value\n      })\n\n      this.dataSeries.append(t, value)\n    }, 1000)\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  render () {\n\n    const width = isNaN(this.props.dimensions.width)\n      ? 100 : this.props.dimensions.width\n\n    const height = isNaN(this.props.dimensions.height)\n      ? 100 : Math.floor((this.props.dimensions.height - 1)/3)\n\n    const label =\n      `Tag ${this.props.tagId} - ` +\n      ` ${this.props.name}: ${this.state.value.toFixed(2)}`\n\n    const style = {height}\n\n    return (\n      <div style={style}>\n        <div className=\"graph-title\">\n          <label>\n            { label }\n          </label>\n        </div>\n        <canvas className=\"graph\" width={width} height={height-30}\n          ref={ (div) => this.canvas = div }> \n        </canvas> \n      </div>\n    )\n  }\n}\n","import IoTGraph from './IoT.Graph'\n\nexport default IoTGraph\n"],"sourceRoot":""}