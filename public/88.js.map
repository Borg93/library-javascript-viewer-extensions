{"version":3,"sources":["webpack:///./src/client/components/Viewer/Extensions/Dynamic/Viewing.Extension.Physics.Core/index.js","webpack:///./src/client/components/Viewer/Extensions/Dynamic/Viewing.Extension.Physics.Core/Viewing.Extension.Physics.Core.js","webpack:///./src/client/components/Viewer/Extensions/Viewer.MultiModelExtensionBase/index.js","webpack:///./src/client/components/Viewer/Extensions/Viewer.MultiModelExtensionBase/Viewer.MultiModelExtensionBase.js","webpack:///./node_modules/@babel/runtime/helpers/get.js","webpack:///./node_modules/@babel/runtime/helpers/superPropBase.js"],"names":["__webpack_require__","r","__webpack_exports__","PhysicsCoreExtension","viewer","_this","options","arguments","length","undefined","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default","call","softBodyHelpers","Ammo","btSoftBodyHelpers","update","bind","_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5___default","timeSkew","gravity","stopwatch","Stopwatch","world","createWorld","console","log","runAnimation","_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_7___default","prototype","off","model","getComponentStates","componentStates","rigidBodies","map","componentState","body","_this2","createComponentRigidBody","setRigidBodyState","forEach","rigidBody","addRigidBody","softBodies","push","dbId","find","initialState","softBody","addSoftBody","g","collisionConfiguration","btSoftBodyRigidBodyCollisionConfiguration","dispatcher","btCollisionDispatcher","broadphase","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","softBodySolver","btDefaultSoftBodySolver","btSoftRigidDynamicsWorld","btVector3","setGravity","transform","vertices","getComponentVertices","scale","position","quaternion","hull","btConvexHullShape","vertex","addPoint","x","y","z","fragId","renderProxy","impl","getRenderProxy","THREE","Quaternion","Vector3","matrixWorld","decompose","_this3","vertexArray","Toolkit","getLeafFragIds","geometry","attributes","stride","vb","vbstride","positions","array","indices","index","ib","offsets","count","start","oi","ol","i","il","a","b","c","vA","vB","vC","fromArray","parseArray","str","separator","split","element","parseFloat","getLeafNodes","dbIds","tasks","_ref","_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee2","vLinear","mass","fragIds","wrap","_context2","prev","next","getProperty","sent","_this4","getFragmentTransform","abrupt","displayValue","vAngular","stop","_x3","apply","Promise","all","state","_this5","inertia","shape","createCollisionShape","calculateLocalInertia","btTransform","setIdentity","motionState","btDefaultMotionState","rbInfo","btRigidBodyConstructionInfo","fragProxies","fragProxy","getFragmentProxy","getAnimTransform","btRigidBody","grounded","type","setOrigin","setRotation","btQuaternion","w","setMotionState","setLinearVelocity","setAngularVelocity","setActivationState","setMassProps","getAngularVelocity","getLinearVelocity","angular","linear","velocity","getCenterOfMassTransform","rotation","getRotation","origin","getOrigin","offset","applyQuaternion","updateAnimTransform","mesh","set","run","window","cancelAnimationFrame","animId","running","_this6","dt","getElapsedMs","skew","stepSimulation","Math","sqrt","updateComponentTransform","updateMeshTransform","sceneUpdated","requestAnimationFrame","emit","_this7","MultiModelExtensionBase","Autodesk","Viewing","theExtensionManager","registerExtension","ExtensionId","_Viewer_MultiModelExtensionBase__WEBPACK_IMPORTED_MODULE_0__","defaultOptions","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default","Object","assign","serviceContext","onModelCompletedLoad","onObjectTreeCreated","onModelRootLoaded","onExtensionLoaded","onModelActivated","onGeometryLoaded","onToolbarCreated","onModelBeginLoad","onModelUnloaded","onSelection","__onModelRootLoaded","__onModelActivated","__onModelUnloaded","__onModelLoaded","models","modelQueue","getModels","guid","initializeEvents","viewerEvents","event","removeEventListener","id","handler","eventSink","viewerEvent","OBJECT_TREE_CREATED_EVENT","GEOMETRY_LOADED_EVENT","then","args","concat","_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default","filter","on","EXTENSION_LOADED_EVENT","MODEL_ROOT_LOADED_EVENT","TOOLBAR_CREATED_EVENT","AGGREGATE_SELECTION_CHANGED_EVENT","eventId","eventTasks","Array","isArray","resolve","addEventListener","__handler","EventsEmitter","Composer","Extension","superPropBase","_get","target","property","receiver","Reflect","get","module","exports","base","desc","getOwnPropertyDescriptor","value","getPrototypeOf","object","hasOwnProperty"],"mappings":"4FAAAA,EAAAC,EAAAC,GAAAF,EAAA,MAEeE,EAAA,wSCSTC,cAMJ,SAAAA,EAAaC,GAAsB,IAAAC,EAAdC,EAAcC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAAI,OAAAG,IAAAC,KAAAR,IAEjCE,EAAAO,IAAAD,KAAAE,IAAAV,GAAAW,KAAAH,KAAOP,EAAQE,KAEVS,gBAAkB,IAAIC,KAAKC,kBAEhCZ,EAAKa,OAASb,EAAKa,OAAOC,KAAZC,IAAAf,IAEdA,EAAKgB,SAAWf,EAAQe,UAAY,EAEpChB,EAAKiB,QAAUhB,EAAQgB,UAAY,IAEnCjB,EAAKkB,UAAY,IAAIC,IAErBnB,EAAKoB,MAAQpB,EAAKqB,YAChBrB,EAAKiB,SAf0BjB,8DAmCjC,OAFAsB,QAAQC,IAAI,0CAEL,mCAiBP,OARAD,QAAQC,IAAI,2CAEZjB,KAAKkB,cAAa,GAElBC,IAAAjB,IAAAV,EAAA4B,WAAA,SAAApB,MAAAG,KAAAH,MAEAA,KAAKqB,OAEE,4DAOcC,gGAGbtB,KAAKuB,mBAAmBD,UAD1BE,SAGNxB,KAAKyB,YAAcD,EAAgBE,IACjC,SAACC,GAEC,IAAMC,EAAOC,EAAKC,yBAChBH,GAIF,OAFAE,EAAKE,kBAAkBH,EAAMD,GAEtBC,IAGX5B,KAAKyB,YAAYO,QAAQ,SAACC,GAExBJ,EAAKf,MAAMoB,aAAaD,KAG1BjC,KAAKmC,WAAa,kIAONF,GAEZjC,KAAKc,MAAMoB,aAAaD,GAExBjC,KAAKyB,YAAYW,KAAKH,wCAOVI,GAEZ,OAAOC,IAAKtC,KAAKyB,YAAa,SAACG,GAE7B,OAAOS,IAAST,EAAKW,aAAaF,2CAQzBG,GAEXxC,KAAKc,MAAM2B,YAAYD,EAAU,GAAI,GAErCxC,KAAKmC,WAAWC,KAAKI,uCAOVE,GAEX,IAAMC,EACJ,IAAItC,KAAKuC,0CAELC,EACJ,IAAIxC,KAAKyC,sBACPH,GAEEI,EAAa,IAAI1C,KAAK2C,iBAEtBC,EACJ,IAAI5C,KAAK6C,oCAELC,EACJ,IAAI9C,KAAK+C,wBAELtC,EAAQ,IAAIT,KAAKgD,yBACrBR,EAAYE,EAAYE,EACxBN,EACAQ,GAEIxC,EAAU,IAAIN,KAAKiD,UAAU,EAAG,EAAGZ,GAIzC,OAFA5B,EAAMyC,WAAW5C,GAEVG,qCAOGH,GAEVX,KAAKW,QAAUA,EAEfX,KAAKc,MAAMyC,WACT,IAAIlD,KAAKiD,UACP,EAAG,EAAGtD,KAAKW,8CAOJD,GAEXV,KAAKU,SAAWA,+CAOI2B,EAAMmB,GAE1B,IAAMC,EAAWzD,KAAK0D,qBAAqBrB,GAEdsB,GAASH,EAA/BI,SAA+BJ,EAArBK,WAAqBL,EAATG,OAEvBG,EAAO,IAAIzD,KAAK0D,kBAUtB,OARAN,EAASzB,QAAQ,SAACgC,GAChBF,EAAKG,SACH,IAAI5D,KAAKiD,UACPU,EAAOE,EAAIP,EAAMO,EACjBF,EAAOG,EAAIR,EAAMQ,EACjBH,EAAOI,EAAIT,EAAMS,MAGhBN,+CAOaO,GAEpB,IAAMC,EAActE,KAAKP,OAAO8E,KAAKC,eACnCxE,KAAKP,OAAO6B,MAAO+C,GAEfR,EAAa,IAAIY,MAAMC,WACvBd,EAAW,IAAIa,MAAME,QACrBhB,EAAQ,IAAIc,MAAME,QAOxB,OALAL,EAAYM,YAAYC,UACtBjB,EACAC,EACAF,GAEK,CACLE,aACAD,WACAD,sDAQkBtB,GAAM,IAAAyC,EAAA9E,KAEpB+E,EAAc,GAwDpB,OAtDgBC,IAAQC,eACtBjF,KAAKP,OAAO6B,MAAOe,GAEbL,QAAQ,SAACqC,GAwBf,IAtBA,IAIMa,EAHJJ,EAAKrF,OAAO8E,KAAKC,eACfM,EAAKrF,OAAO6B,MAAO+C,GAEMa,SAEvBC,EAAaD,EAASC,WAEtBC,EAASF,EAASG,GAAKH,EAASI,SAAW,EAE3CC,EAAYL,EAASG,GACvBH,EAASG,GACTF,EAAWvB,SAAS4B,MAElBC,EAAUN,EAAWO,MAAMF,OAASN,EAASS,GAE7CC,EAAU,CAAC,CACfC,MAAOJ,EAAQ5F,OACf6F,MAAO,EACPI,MAAO,IAGAC,EAAK,EAAGC,EAAKJ,EAAQ/F,OAAQkG,EAAKC,IAAMD,EAM/C,IAJA,IAAID,EAAQF,EAAQG,GAAID,MACpBD,EAAQD,EAAQG,GAAIF,MACpBH,EAAQE,EAAQG,GAAIL,MAEfO,EAAIH,EAAOI,EAAKJ,EAAQD,EAAOI,EAAIC,EAAID,GAAK,EAAG,CAErD,IAAME,EAAIT,EAAQD,EAAQQ,GACpBG,EAAIV,EAAQD,EAAQQ,EAAI,GACxBI,EAAIX,EAAQD,EAAQQ,EAAI,GAExBK,EAAK,IAAI7B,MAAME,QACf4B,EAAK,IAAI9B,MAAME,QACf6B,EAAK,IAAI/B,MAAME,QAErB2B,EAAGG,UAAUlB,EAAWY,EAAIf,GAC5BmB,EAAGE,UAAUlB,EAAWa,EAAIhB,GAC5BoB,EAAGC,UAAUlB,EAAWc,EAAIjB,GAE5BL,EAAY3C,KAAKkE,GACjBvB,EAAY3C,KAAKmE,GACjBxB,EAAY3C,KAAKoE,MAKjBzB,+DAOiBzD,2FAElBoF,EAAa,SAACC,GAAyB,IAApBC,EAAoBhH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAR,IACnC,OAAO+G,EAAIE,MAAMD,GAAWlF,IAAI,SAACoF,GAC/B,OAAOC,WAAWD,eAIF9B,IAAQgC,aAAa1F,iBAAnC2F,SAEAC,EAAQD,EAAMvF,IAAN,eAAAyF,EAAAC,IAAAC,EAAAlB,EAAAmB,KAAU,SAAAC,EAAMlF,GAAN,IAAAmF,EAAAC,EAAAC,EAAAlE,EAAA,OAAA6D,EAAAlB,EAAAwB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAEA9C,IAAQ+C,YAC5BzG,EAAOe,EAAM,QAAS,SAHF,cAEhBmF,EAFgBI,EAAAI,KAAAJ,EAAAE,KAAA,EAKH9C,IAAQ+C,YACzBzG,EAAOe,EAAM,UAAW,GANJ,cAKhBoF,EALgBG,EAAAI,KAQhBN,EAAU1C,IAAQC,eACtBgD,EAAKxI,OAAO6B,MAAOe,GAEfmB,EACJyE,EAAKC,qBAAqBR,EAAQ,IAZdE,EAAAO,OAAA,SAcf,CACLX,QAASd,EAAWc,EAAQY,cAC5BX,KAAMA,EAAKW,aACXC,SAAU,CAAC,EAAE,EAAE,GACf7E,YACAkE,UACArF,SApBoB,wBAAAuF,EAAAU,SAAAf,MAAV,gBAAAgB,GAAA,OAAApB,EAAAqB,MAAAxI,KAAAJ,YAAA,aAwBD6I,EAAQC,IAAIxB,iLAODyB,GAAO,IAAAC,EAAA5I,KAEzB6I,EAAU,IAAIxI,KAAKiD,UAAU,EAAG,EAAG,GAEnCwF,EAAQ9I,KAAK+I,qBACjBJ,EAAMtG,KAAMsG,EAAMnF,WAEpBsF,EAAME,sBACJL,EAAMlB,KAAMoB,GAEd,IAAMrF,EAAY,IAAInD,KAAK4I,YAE3BzF,EAAU0F,cAEV,IAAMC,EACJ,IAAI9I,KAAK+I,qBACP5F,GAEE6F,EACJ,IAAIhJ,KAAKiJ,4BACPX,EAAMlB,KACN0B,EACAL,EACAD,GAEEU,EAAcZ,EAAMjB,QAAQhG,IAAI,SAAC2C,GAErC,IAAMmF,EACJZ,EAAKnJ,OAAO8E,KAAKkF,iBACfb,EAAKnJ,OAAO6B,MAAO+C,GAIvB,OAFAmF,EAAUE,mBAEHF,IAGH5H,EAAO,IAAIvB,KAAKsJ,YAAYN,GAYlC,OAVAzH,EAAKgI,SAA2B,IAAfjB,EAAMlB,KAEvB7F,EAAK2H,YAAcA,EAEnB3H,EAAKW,aAAeoG,EAEpB/G,EAAKS,KAAOsG,EAAMtG,KAElBT,EAAKiI,KAAO,YAELjI,4CAOUA,EAAM+G,GAEvB,IAAMnF,EAAY,IAAInD,KAAK4I,YAE3BzF,EAAU0F,cAEV1F,EAAUsG,UACR,IAAIzJ,KAAKiD,UACPqF,EAAMnF,UAAUI,SAASM,EACzByE,EAAMnF,UAAUI,SAASO,EACzBwE,EAAMnF,UAAUI,SAASQ,IAE7BZ,EAAUuG,YACR,IAAI1J,KAAK2J,aACPrB,EAAMnF,UAAUK,WAAWK,EAC3ByE,EAAMnF,UAAUK,WAAWM,EAC3BwE,EAAMnF,UAAUK,WAAWO,EAC3BuE,EAAMnF,UAAUK,WAAWoG,IAE/B,IAAMd,EACJ,IAAI9I,KAAK+I,qBACP5F,GAEJ5B,EAAKsI,eAAef,GAEpBvH,EAAKuI,kBACH,IAAI9J,KAAKiD,UACPqF,EAAMnB,QAAQ,GACdmB,EAAMnB,QAAQ,GACdmB,EAAMnB,QAAQ,KAElB5F,EAAKwI,mBACH,IAAI/J,KAAKiD,UACPqF,EAAMN,SAAS,GACfM,EAAMN,SAAS,GACfM,EAAMN,SAAS,mDAOEzG,EAAM+G,GAE3B,IAAMnF,EAAY,IAAInD,KAAK4I,YAE3BzF,EAAU0F,cAEV1F,EAAUsG,UACR,IAAIzJ,KAAKiD,UACPqF,EAAM/E,SAASM,EACfyE,EAAM/E,SAASO,EACfwE,EAAM/E,SAASQ,IAEnBZ,EAAUuG,YACR,IAAI1J,KAAK2J,aACPrB,EAAM9E,WAAWK,EACjByE,EAAM9E,WAAWM,EACjBwE,EAAM9E,WAAWO,EACjBuE,EAAM9E,WAAWoG,IAErB,IAAMd,EACJ,IAAI9I,KAAK+I,qBACP5F,GAEJ5B,EAAKsI,eAAef,GAEpBvH,EAAKyI,mBAAmB,2CAOTzI,EAAMgI,GAErB,IAAMf,EAAU,IAAIxI,KAAKiD,UAAU,EAAG,EAAG,GAEzC,GAAIsG,EAEFhI,EAAK0I,aAAc,EAAKzB,GAExBjH,EAAKgI,UAAW,MAEX,CAEL,IAAMnC,EAAO7F,EAAKW,aAAakF,KAE/B7F,EAAK0I,aAAc7C,EAAMoB,GAEzBjH,EAAKgI,SAAqB,IAATnC,gDAQC7F,GAEpB,IAAMyG,EAAWzG,EAAK2I,qBAEhB/C,EAAU5F,EAAK4I,oBAErB,MAAO,CACLC,QAAS,CACPvG,EAAGmE,EAASnE,IACZC,EAAGkE,EAASlE,IACZC,EAAGiE,EAASjE,KAEdsG,OAAQ,CACNxG,EAAGsD,EAAQtD,IACXC,EAAGqD,EAAQrD,IACXC,EAAGoD,EAAQpD,mDASKxC,EAAM+I,GAE1B/I,EAAKwI,mBACH,IAAI/J,KAAKiD,UACPqH,EAASF,QAAQvG,EACjByG,EAASF,QAAQtG,EACjBwG,EAASF,QAAQrG,IAErBxC,EAAKuI,kBACH,IAAI9J,KAAKiD,UACPqH,EAASD,OAAOxG,EAChByG,EAASD,OAAOvG,EAChBwG,EAASD,OAAOtG,IAEpBxC,EAAKyI,mBAAmB,oDAOAzI,GAExB,IAAM4B,EAAY5B,EAAKgJ,2BAEjBC,EAAWrH,EAAUsH,cAErBC,EAASvH,EAAUwH,YAEnBpH,EAAW,IAAIa,MAAME,QACzBoG,EAAO7G,IACP6G,EAAO5G,IACP4G,EAAO3G,KAEH6G,EAAS,IAAIxG,MAAME,QACvB/C,EAAKW,aAAaiB,UAAUI,SAASM,EACrCtC,EAAKW,aAAaiB,UAAUI,SAASO,EACrCvC,EAAKW,aAAaiB,UAAUI,SAASQ,GAEvCxC,EAAK2H,YAAYvH,QAAQ,SAACwH,GAExBA,EAAU3F,WACR,IAAIY,MAAMC,WACRmG,EAAS3G,IACT2G,EAAS1G,IACT0G,EAASzG,IACTyG,EAASZ,KAEbgB,EAAOC,gBAAgB1B,EAAU3F,YAEjC2F,EAAU5F,SAASM,EAAIN,EAASM,EAAI+G,EAAO/G,EAC3CsF,EAAU5F,SAASO,EAAIP,EAASO,EAAI8G,EAAO9G,EAC3CqF,EAAU5F,SAASQ,EAAIR,EAASQ,EAAI6G,EAAO7G,EAE3CoF,EAAU2B,oEAQOvJ,GAEnB,IAAM4B,EAAY5B,EAAKgJ,2BAEjBC,EAAWrH,EAAUsH,cAErBC,EAASvH,EAAUwH,YAEnBI,EAAOxJ,EAAKwJ,KAElBA,EAAKxH,SAASyH,IACZN,EAAO7G,IACP6G,EAAO5G,IACP4G,EAAO3G,KAETgH,EAAKvH,WAAWwH,IACdR,EAAS3G,IACT2G,EAAS1G,IACT0G,EAASzG,IACTyG,EAASZ,0CAOCqB,GAEZC,OAAOC,qBAAqBxL,KAAKyL,QAEjCzL,KAAK0L,QAAUJ,EAEXA,GAEFtL,KAAKO,0CAQC,IAAAoL,EAAA3L,KAER,GAAIA,KAAK0L,QAAS,CAEhB,IAAME,EAAK5L,KAAKY,UAAUiL,eAEpBC,EAAuB,IAAhB9L,KAAKU,SAElBV,KAAKc,MAAMiL,eACTH,EAAKI,KAAKC,KAAKH,GACfE,KAAKC,KAAKH,IAEZ9L,KAAKyB,YAAYO,QAAQ,SAACJ,GAExB,IAAKA,EAAKgI,SAER,OAAQhI,EAAKiI,MAEX,IAAK,YACH8B,EAAKO,yBAAyBtK,GAC9B,MAEF,IAAK,OACH+J,EAAKQ,oBAAoBvK,MAMjC5B,KAAKmC,WAAWH,QAAQ,SAACJ,MAKzB5B,KAAKP,OAAO8E,KAAK6H,cAAa,GAE9BpM,KAAKyL,OACHF,OAAOc,sBACLrM,KAAKO,QAETP,KAAKsM,KAAK,oDAQL,IAAAC,EAAAvM,KAEPA,KAAKyB,YAAYO,QAAQ,SAACJ,GAEnBA,EAAKgI,WAER2C,EAAKxK,kBACHH,EAAMA,EAAKW,cAERgK,EAAKb,SAERa,EAAKL,yBAAyBtK,GAGhCA,EAAKyI,mBAAmB,MAI5BrK,KAAKP,OAAO8E,KAAK6H,cAAa,oDAS9BpM,KAAKyB,YAAYO,QAAQ,SAACJ,GAExBA,EAAKyI,mBAAmB,4CAQZ1B,0CAhqBd,MAAO,wCA9BwB6D,KAktBnCC,SAASC,QAAQC,oBAAoBC,kBACnCpN,EAAqBqN,YACrBrN,GAEaA,EAAf,iECjuBA,IAAAsN,EAAAzN,EAAA,KAEemN,MAAf,wMCAqBA,cAOnB,SAAAA,EAAa/M,GAA2C,IAAAC,EAAnCC,EAAmCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzB,GAAImN,EAAqBnN,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAAIoN,IAAAhN,KAAAwM,GAEtD9M,EAAAuN,IAAAjN,KAAAkN,IAAAV,GAAArM,KAAAH,KAAOP,IAEP0N,OAAOC,OAAP3M,IAAAf,GAAoBC,EAAQ0N,gBAE5B3N,EAAK4N,qBAAuB5N,EAAK4N,qBAAqB9M,KAA1BC,IAAAf,IAC5BA,EAAK6N,oBAAuB7N,EAAK6N,oBAAoB/M,KAAzBC,IAAAf,IAC5BA,EAAK8N,kBAAuB9N,EAAK8N,kBAAkBhN,KAAvBC,IAAAf,IAC5BA,EAAK+N,kBAAuB/N,EAAK+N,kBAAkBjN,KAAvBC,IAAAf,IAC5BA,EAAKgO,iBAAuBhO,EAAKgO,iBAAiBlN,KAAtBC,IAAAf,IAC5BA,EAAKiO,iBAAuBjO,EAAKiO,iBAAiBnN,KAAtBC,IAAAf,IAC5BA,EAAKkO,iBAAuBlO,EAAKkO,iBAAiBpN,KAAtBC,IAAAf,IAC5BA,EAAKmO,iBAAuBnO,EAAKmO,iBAAiBrN,KAAtBC,IAAAf,IAC5BA,EAAKoO,gBAAuBpO,EAAKoO,gBAAgBtN,KAArBC,IAAAf,IAC5BA,EAAKqO,YAAuBrO,EAAKqO,YAAYvN,KAAjBC,IAAAf,IAE5BA,EAAKsO,oBAAuBtO,EAAKsO,oBAAoBxN,KAAzBC,IAAAf,IAC5BA,EAAKuO,mBAAuBvO,EAAKuO,mBAAmBzN,KAAxBC,IAAAf,IAC5BA,EAAKwO,kBAAuBxO,EAAKwO,kBAAkB1N,KAAvBC,IAAAf,IAC5BA,EAAKyO,gBAAuBzO,EAAKyO,gBAAgB3N,KAArBC,IAAAf,IAE5BA,EAAKqN,eAAiBA,EAEtBrN,EAAKC,QAAUwN,OAAOC,OAAO,GAC3BL,EACApN,GAEFD,EAAKD,OAASA,EAId,IAAM2O,EAAS3O,EAAO8E,KAAK8J,aAAaC,YAhCc,OAkCtD5O,EAAK0O,OAASA,EAAO1M,IAAI,SAACJ,GAIxB,OAFAA,EAAMiN,KAAOjN,EAAMiN,MAAQ7O,EAAK6O,OAEzBjN,IAGT5B,EAAK8O,mBAzCiD9O,sDA2DtD,OAAO,mCAOC,IAAAmC,EAAA7B,KAsBR,OApBAA,KAAKyO,aAAazM,QAAQ,SAAC0M,GAEzB7M,EAAKpC,OAAOkP,oBACVD,EAAME,GAAI/M,EAAK6M,EAAMG,YAGrB7O,KAAK8O,YAEP9O,KAAK8O,UAAUzN,IAAI,kBACjBrB,KAAKiO,oBAEPjO,KAAK8O,UAAUzN,IAAI,iBACjBrB,KAAKkO,mBAEPlO,KAAK8O,UAAUzN,IAAI,eACjBrB,KAAKmO,kBAGTnO,KAAKqB,OAEE,mCAQa,IAAd1B,EAAcC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAOhB,OALAI,KAAKL,QAAUwN,OAAOC,OAAO,GAC3BpN,KAAK+M,eACL/M,KAAKL,QACLA,IAEK,4CAOU+O,6CAWDA,6CAUAA,gDAYGA,GAAO,IAAA5J,EAAA9E,KAE1BA,KAAK+O,YAAY,CAEftC,SAASC,QAAQsC,0BACjBvC,SAASC,QAAQuC,wBAEhBC,KAAK,SAACC,GAEPrK,EAAKwI,qBAAsB6B,EAAK,gDAIjBT,gDAYEA,6CASHA,iDAUIA,6CASJA,4CAUDA,wCASJA,4CASIA,GAEf1O,KAAKoO,OAAL,GAAAgB,OAAAC,IAAkBrP,KAAKoO,QAAvB,CAA+BM,EAAMpN,QAErCtB,KAAK6N,iBAAkBa,8CAGLA,GAElB1O,KAAK0N,iBAAkBgB,6CAGNA,GAEjB1O,KAAKoO,OAASpO,KAAKoO,OAAOkB,OAAO,SAAChO,GAEhC,OAAOA,EAAMiN,OAASG,EAAMpN,MAAMiN,OAGpCvO,KAAK8N,gBAAgBY,8CASH,IAAAzG,EAAAjI,KAEdA,KAAKL,QAAQmP,YAGf9O,KAAK8O,UAAY9O,KAAKL,QAAQmP,UAE9B9O,KAAK8O,UAAUS,GAAG,eAChBvP,KAAKmO,iBAEPnO,KAAK8O,UAAUS,GAAG,kBAChBvP,KAAKiO,oBAEPjO,KAAK8O,UAAUS,GAAG,iBAChBvP,KAAKkO,oBAGTlO,KAAKyO,aAAe,CAClB,CACEG,GAAInC,SAASC,QAAQ8C,uBACrBX,QAAS,qBAEX,CACED,GAAInC,SAASC,QAAQsC,0BACrBH,QAAS,uBAEX,CACED,GAAInC,SAASC,QAAQ+C,wBACrBZ,QAAS,uBAEX,CACED,GAAInC,SAASC,QAAQ+C,wBACrBZ,QAAS,qBAEX,CACED,GAAInC,SAASC,QAAQuC,sBACrBJ,QAAS,oBAEX,CACED,GAAInC,SAASC,QAAQgD,sBACrBb,QAAS,oBAEX,CACED,GAAInC,SAASC,QAAQiD,kCACrBd,QAAS,gBAIb7O,KAAKyO,aAAazM,QAAQ,SAAC0M,GAEzBzG,EAAK8G,YAAYL,EAAME,GAAI3G,EAAKyG,EAAMG,gDAQ7Be,EAASf,GAAS,IAAAjG,EAAA5I,KAE7B,IAAI6O,EAAJ,CAMA,IAGMgB,GAHeC,MAAMC,QAAQH,GAC/BA,EAAU,CAACA,IAEiBlO,IAAI,SAACkN,GACnC,OAAO,IAAInG,EAAS,SAACuH,GAKnBpH,EAAKnJ,OAAOwQ,iBAAkBrB,EAJZ,SAAZsB,EAAaf,GACjBvG,EAAKnJ,OAAOkP,oBAAqBC,EAAIsB,GACrCF,EAASb,SAMf,OAAO1G,EAAQC,IAAKmH,GAjBlB7P,KAAKP,OAAOwQ,iBAAkBL,EAASf,yCAxQzC,MAAO,0DAxDTsB,EAAcC,SAAU3D,SAASC,QAAQ2D,oDCH3C,IAAAC,EAAoBjR,EAAQ,KAE5B,SAAAkR,EAAAC,EAAAC,EAAAC,GAiBA,MAhBA,oBAAAC,iBAAAC,IACAC,EAAAC,QAAAP,EAAAI,QAAAC,IAEAC,EAAAC,QAAAP,EAAA,SAAAC,EAAAC,EAAAC,GACA,IAAAK,EAAAT,EAAAE,EAAAC,GACA,GAAAM,EAAA,CACA,IAAAC,EAAA7D,OAAA8D,yBAAAF,EAAAN,GAEA,OAAAO,EAAAJ,IACAI,EAAAJ,IAAAzQ,KAAAuQ,GAGAM,EAAAE,QAIAX,EAAAC,EAAAC,EAAAC,GAAAF,GAGAK,EAAAC,QAAAP,uBCtBA,IAAAY,EAAqB9R,EAAQ,GAW7BwR,EAAAC,QATA,SAAAM,EAAAX,GACA,MAAAtD,OAAA/L,UAAAiQ,eAAAlR,KAAAiR,EAAAX,IAEA,QADAW,EAAAD,EAAAC,MAIA,OAAAA","file":"88.js","sourcesContent":["import './Viewing.Extension.Physics.Core'\n\nexport default 'Viewing.Extension.Physics.Core'\n","/////////////////////////////////////////////////////////\n// Viewing.Extension.Physics.Core\n// by Philippe Leefsma, July 2017\n//\n/////////////////////////////////////////////////////////\nimport MultiModelExtensionBase from 'Viewer.MultiModelExtensionBase'\nimport EventsEmitter from 'EventsEmitter'\nimport Toolkit from 'Viewer.Toolkit'\nimport find from 'lodash/find'\nimport Stopwatch from 'Stopwatch'\n\nclass PhysicsCoreExtension extends MultiModelExtensionBase {\n\n  /////////////////////////////////////////////////////////\n  // Class constructor\n  //\n  /////////////////////////////////////////////////////////\n  constructor (viewer, options = {}) {\n\n    super (viewer, options)\n\n    this.softBodyHelpers = new Ammo.btSoftBodyHelpers()\n\n    this.update = this.update.bind(this)\n\n    this.timeSkew = options.timeSkew || 1.0\n\n    this.gravity = options.gravity || -9.8\n\n    this.stopwatch = new Stopwatch()\n\n    this.world = this.createWorld(\n      this.gravity)\n  }\n\n  /////////////////////////////////////////////////////////\n  // Extension Id\n  //\n  /////////////////////////////////////////////////////////\n  static get ExtensionId() {\n\n    return 'Viewing.Extension.Physics.Core'\n  }\n\n  /////////////////////////////////////////////////////////\n  // Load callback\n  //\n  /////////////////////////////////////////////////////////\n  load () {\n\n    console.log('Viewing.Extension.Physics.Core loaded')\n\n    return true\n  }\n\n  /////////////////////////////////////////////////////////\n  // Unload callback\n  //\n  /////////////////////////////////////////////////////////\n  unload () {\n\n    console.log('Viewing.Extension.Physics.Core unloaded')\n\n    this.runAnimation(false)\n\n    super.unload ()\n\n    this.off()\n\n    return true\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  async loadPhysicModel (model) {\n\n    const componentStates =\n      await this.getComponentStates(model)\n\n    this.rigidBodies = componentStates.map(\n      (componentState) => {\n\n        const body = this.createComponentRigidBody(\n          componentState)\n\n        this.setRigidBodyState(body, componentState)\n\n        return body\n      })\n\n    this.rigidBodies.forEach((rigidBody) => {\n\n      this.world.addRigidBody(rigidBody)\n    })\n\n    this.softBodies = []\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  addRigidBody (rigidBody) {\n\n    this.world.addRigidBody(rigidBody)\n\n    this.rigidBodies.push(rigidBody)\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  getRigidBody (dbId) {\n\n    return find(this.rigidBodies, (body) => {\n\n      return dbId === body.initialState.dbId\n    })\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  addSoftBody (softBody) {\n\n    this.world.addSoftBody(softBody, 1, -1)\n\n    this.softBodies.push(softBody)\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  createWorld (g) {\n\n    const collisionConfiguration =\n      new Ammo.btSoftBodyRigidBodyCollisionConfiguration()\n\n    const dispatcher =\n      new Ammo.btCollisionDispatcher(\n        collisionConfiguration)\n\n    const broadphase = new Ammo.btDbvtBroadphase\n\n    const solver =\n      new Ammo.btSequentialImpulseConstraintSolver()\n\n    const softBodySolver =\n      new Ammo.btDefaultSoftBodySolver()\n\n    const world = new Ammo.btSoftRigidDynamicsWorld(\n      dispatcher, broadphase, solver,\n      collisionConfiguration,\n      softBodySolver)\n\n    const gravity = new Ammo.btVector3(0, 0, g)\n\n    world.setGravity(gravity)\n\n    return world\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  setGravity (gravity) {\n\n    this.gravity = gravity\n\n    this.world.setGravity(\n      new Ammo.btVector3(\n        0, 0, this.gravity))\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  setTimeSkew (timeSkew) {\n\n    this.timeSkew = timeSkew\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  createCollisionShape (dbId, transform) {\n\n    const vertices = this.getComponentVertices(dbId)\n\n    const {position, quaternion, scale} = transform\n\n    const hull = new Ammo.btConvexHullShape()\n\n    vertices.forEach((vertex) => {\n      hull.addPoint(\n        new Ammo.btVector3(\n          vertex.x * scale.x,\n          vertex.y * scale.y,\n          vertex.z * scale.z))\n    })\n\n    return hull\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  getFragmentTransform (fragId) {\n\n    const renderProxy = this.viewer.impl.getRenderProxy(\n      this.viewer.model, fragId)\n\n    const quaternion = new THREE.Quaternion()\n    const position = new THREE.Vector3()\n    const scale = new THREE.Vector3()\n\n    renderProxy.matrixWorld.decompose(\n      position,\n      quaternion,\n      scale)\n\n    return {\n      quaternion,\n      position,\n      scale\n    }\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  getComponentVertices (dbId) {\n\n    const vertexArray = []\n\n    const fragIds = Toolkit.getLeafFragIds(\n      this.viewer.model, dbId)\n\n    fragIds.forEach((fragId) => {\n\n      const renderProxy =\n        this.viewer.impl.getRenderProxy(\n          this.viewer.model, fragId)\n\n      const geometry = renderProxy.geometry\n\n      const attributes = geometry.attributes\n\n      const stride = geometry.vb ? geometry.vbstride : 3\n\n      const positions = geometry.vb\n        ? geometry.vb\n        : attributes.position.array\n\n      const indices = attributes.index.array || geometry.ib\n\n      const offsets = [{\n        count: indices.length,\n        index: 0,\n        start: 0\n      }]\n\n      for (var oi = 0, ol = offsets.length; oi < ol; ++oi) {\n\n        var start = offsets[oi].start\n        var count = offsets[oi].count\n        var index = offsets[oi].index\n\n        for (var i = start, il = start + count; i < il; i += 3) {\n\n           const a = index + indices[i]\n           const b = index + indices[i + 1]\n           const c = index + indices[i + 2]\n\n           const vA = new THREE.Vector3()\n           const vB = new THREE.Vector3()\n           const vC = new THREE.Vector3()\n\n           vA.fromArray(positions, a * stride)\n           vB.fromArray(positions, b * stride)\n           vC.fromArray(positions, c * stride)\n\n           vertexArray.push(vA)\n           vertexArray.push(vB)\n           vertexArray.push(vC)\n         }\n      }\n    })\n\n    return vertexArray\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  async getComponentStates (model) {\n\n    const parseArray = (str, separator = ';') => {\n      return str.split(separator).map((element) => {\n        return parseFloat(element)\n      })\n    }\n\n    const dbIds = await Toolkit.getLeafNodes(model)\n\n    const tasks = dbIds.map(async(dbId) => {\n\n      const vLinear = await Toolkit.getProperty (\n        model, dbId, 'vInit', '0;0;0')\n\n      const mass = await Toolkit.getProperty (\n        model, dbId, 'LMVMass', 1.0)\n\n      const fragIds = Toolkit.getLeafFragIds(\n        this.viewer.model, dbId)\n\n      const transform =\n        this.getFragmentTransform(fragIds[0])\n\n      return {\n        vLinear: parseArray(vLinear.displayValue),\n        mass: mass.displayValue,\n        vAngular: [0,0,0],\n        transform,\n        fragIds,\n        dbId\n      }\n    })\n\n    return await Promise.all(tasks)\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  createComponentRigidBody (state) {\n\n    const inertia = new Ammo.btVector3(0, 0, 0)\n\n    const shape = this.createCollisionShape(\n      state.dbId, state.transform)\n\n    shape.calculateLocalInertia(\n      state.mass, inertia)\n\n    const transform = new Ammo.btTransform\n\n    transform.setIdentity()\n\n    const motionState =\n      new Ammo.btDefaultMotionState(\n        transform)\n\n    const rbInfo =\n      new Ammo.btRigidBodyConstructionInfo(\n        state.mass,\n        motionState,\n        shape,\n        inertia)\n\n    const fragProxies = state.fragIds.map((fragId) => {\n\n      const fragProxy =\n        this.viewer.impl.getFragmentProxy(\n          this.viewer.model, fragId)\n\n      fragProxy.getAnimTransform()\n\n      return fragProxy\n    })\n\n    const body = new Ammo.btRigidBody(rbInfo)\n\n    body.grounded = (state.mass === 0.0)\n\n    body.fragProxies = fragProxies\n\n    body.initialState = state\n\n    body.dbId = state.dbId\n\n    body.type = 'COMPONENT'\n\n    return body\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  setRigidBodyState (body, state) {\n\n    const transform = new Ammo.btTransform\n\n    transform.setIdentity()\n\n    transform.setOrigin(\n      new Ammo.btVector3(\n        state.transform.position.x,\n        state.transform.position.y,\n        state.transform.position.z))\n\n    transform.setRotation(\n      new Ammo.btQuaternion(\n        state.transform.quaternion.x,\n        state.transform.quaternion.y,\n        state.transform.quaternion.z,\n        state.transform.quaternion.w))\n\n    const motionState =\n      new Ammo.btDefaultMotionState(\n        transform)\n\n    body.setMotionState(motionState)\n\n    body.setLinearVelocity(\n      new Ammo.btVector3(\n        state.vLinear[0],\n        state.vLinear[1],\n        state.vLinear[2]))\n\n    body.setAngularVelocity(\n      new Ammo.btVector3(\n        state.vAngular[0],\n        state.vAngular[1],\n        state.vAngular[2]))\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  setRigidBodyTransform (body, state) {\n\n    const transform = new Ammo.btTransform\n\n    transform.setIdentity()\n\n    transform.setOrigin(\n      new Ammo.btVector3(\n        state.position.x,\n        state.position.y,\n        state.position.z))\n\n    transform.setRotation(\n      new Ammo.btQuaternion(\n        state.quaternion.x,\n        state.quaternion.y,\n        state.quaternion.z,\n        state.quaternion.w))\n\n    const motionState =\n      new Ammo.btDefaultMotionState(\n        transform)\n\n    body.setMotionState(motionState)\n\n    body.setActivationState(4)\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  groundRigidBody (body, grounded) {\n\n    const inertia = new Ammo.btVector3(0, 0, 0)\n\n    if (grounded) {\n\n      body.setMassProps (0.0, inertia)\n\n      body.grounded = true\n\n    } else {\n\n      const mass = body.initialState.mass\n\n      body.setMassProps (mass, inertia)\n\n      body.grounded = (mass === 0)\n    }\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  getRigidBodyVelocity (body) {\n\n    const vAngular = body.getAngularVelocity()\n\n    const vLinear = body.getLinearVelocity()\n\n    return {\n      angular: {\n        x: vAngular.x(),\n        y: vAngular.y(),\n        z: vAngular.z()\n      },\n      linear: {\n        x: vLinear.x(),\n        y: vLinear.y(),\n        z: vLinear.z()\n      }\n    }\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  setRigidBodyVelocity (body, velocity) {\n\n    body.setAngularVelocity(\n      new Ammo.btVector3(\n        velocity.angular.x,\n        velocity.angular.y,\n        velocity.angular.z))\n\n    body.setLinearVelocity(\n      new Ammo.btVector3(\n        velocity.linear.x,\n        velocity.linear.y,\n        velocity.linear.z))\n\n    body.setActivationState(4)\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  updateComponentTransform (body) {\n\n    const transform = body.getCenterOfMassTransform()\n\n    const rotation = transform.getRotation()\n\n    const origin = transform.getOrigin()\n\n    const position = new THREE.Vector3(\n      origin.x(),\n      origin.y(),\n      origin.z())\n\n    const offset = new THREE.Vector3(\n      body.initialState.transform.position.x,\n      body.initialState.transform.position.y,\n      body.initialState.transform.position.z)\n\n    body.fragProxies.forEach((fragProxy) => {\n\n      fragProxy.quaternion =\n        new THREE.Quaternion(\n          rotation.x(),\n          rotation.y(),\n          rotation.z(),\n          rotation.w())\n\n      offset.applyQuaternion(fragProxy.quaternion)\n\n      fragProxy.position.x = position.x - offset.x\n      fragProxy.position.y = position.y - offset.y\n      fragProxy.position.z = position.z - offset.z\n\n      fragProxy.updateAnimTransform()\n    })\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  updateMeshTransform (body) {\n\n    const transform = body.getCenterOfMassTransform()\n\n    const rotation = transform.getRotation()\n\n    const origin = transform.getOrigin()\n\n    const mesh = body.mesh\n\n    mesh.position.set(\n      origin.x(),\n      origin.y(),\n      origin.z())\n\n    mesh.quaternion.set(\n      rotation.x(),\n      rotation.y(),\n      rotation.z(),\n      rotation.w())\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  runAnimation (run) {\n\n    window.cancelAnimationFrame(this.animId)\n\n    this.running = run\n\n    if (run) {\n\n      this.update()\n    }\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  update () {\n\n    if (this.running) {\n\n      const dt = this.stopwatch.getElapsedMs()\n\n      const skew = this.timeSkew * 500\n\n      this.world.stepSimulation(\n        dt * Math.sqrt(skew),\n        Math.sqrt(skew))\n\n      this.rigidBodies.forEach((body) => {\n\n        if (!body.grounded) {\n\n          switch (body.type) {\n\n            case 'COMPONENT':\n              this.updateComponentTransform(body)\n              break\n\n            case 'MESH':\n              this.updateMeshTransform(body)\n              break\n          }\n        }\n      })\n\n      this.softBodies.forEach((body) => {\n\n\n      })\n\n      this.viewer.impl.sceneUpdated(true)\n\n      this.animId =\n        window.requestAnimationFrame(\n          this.update)\n\n      this.emit('simulation.step')\n    }\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  reset () {\n\n    this.rigidBodies.forEach((body) => {\n\n      if (!body.grounded) {\n\n        this.setRigidBodyState(\n          body, body.initialState)\n\n        if (!this.running) {\n\n          this.updateComponentTransform(body)\n        }\n\n        body.setActivationState(4)\n      }\n    })\n\n    this.viewer.impl.sceneUpdated(true)\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  activateAllRigidBodies () {\n\n    this.rigidBodies.forEach((body) => {\n\n      body.setActivationState(4)\n    })\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  createSoftBody (state) {\n\n    //const btVector3\th=s*0.5;\n    //const btVector3\tc []={\tp+h*btVector3(-1,-1,-1),\n    //  p+h*btVector3(+1,-1,-1),\n    //  p+h*btVector3(-1,+1,-1),\n    //  p+h*btVector3(+1,+1,-1),\n    //  p+h*btVector3(-1,-1,+1),\n    //  p+h*btVector3(+1,-1,+1),\n    //  p+h*btVector3(-1,+1,+1),\n    //  p+h*btVector3(+1,+1,+1)};\n\n\n      //const btSoftBody = Ammo.btSoftBodyHelpers.CreateFromConvexHull(pdemo->m_softBodyWorldInfo,c,8)\n\n      //psb->generateBendingConstraints(2);\n      //pdemo->getSoftDynamicsWorld()->addSoftBody(psb);\n  }\n}\n\nAutodesk.Viewing.theExtensionManager.registerExtension(\n  PhysicsCoreExtension.ExtensionId,\n  PhysicsCoreExtension)\n\nexport default PhysicsCoreExtension.ExtensionId\n\n\n\n\n","import MultiModelExtensionBase from './Viewer.MultiModelExtensionBase'\n\nexport default MultiModelExtensionBase\n","import EventsEmitter from 'EventsEmitter'\n\nexport default class MultiModelExtensionBase extends\n  EventsEmitter.Composer (Autodesk.Viewing.Extension) {\n\n  /////////////////////////////////////////////////////////\n  // Class constructor\n  //\n  /////////////////////////////////////////////////////////\n  constructor (viewer, options = {}, defaultOptions = {}) {\n\n    super (viewer)\n    // bindings\n    Object.assign(this, options.serviceContext)\n\n    this.onModelCompletedLoad = this.onModelCompletedLoad.bind(this)\n    this.onObjectTreeCreated  = this.onObjectTreeCreated.bind(this)\n    this.onModelRootLoaded    = this.onModelRootLoaded.bind(this)\n    this.onExtensionLoaded    = this.onExtensionLoaded.bind(this)\n    this.onModelActivated     = this.onModelActivated.bind(this)\n    this.onGeometryLoaded     = this.onGeometryLoaded.bind(this)\n    this.onToolbarCreated     = this.onToolbarCreated.bind(this)\n    this.onModelBeginLoad     = this.onModelBeginLoad.bind(this)\n    this.onModelUnloaded      = this.onModelUnloaded.bind(this)\n    this.onSelection          = this.onSelection.bind(this)\n\n    this.__onModelRootLoaded  = this.__onModelRootLoaded.bind(this)\n    this.__onModelActivated   = this.__onModelActivated.bind(this)\n    this.__onModelUnloaded    = this.__onModelUnloaded.bind(this)\n    this.__onModelLoaded      = this.__onModelLoaded.bind(this)\n\n    this.defaultOptions = defaultOptions\n\n    this.options = Object.assign({},\n      defaultOptions,\n      options)\n\n    this.viewer = viewer\n\n    // read the modelQueue to detect currently loaded models\n    // when the extension gets loaded\n    const models = viewer.impl.modelQueue().getModels()\n\n    this.models = models.map((model) => {\n\n      model.guid = model.guid || this.guid()\n\n      return model\n    })\n\n    this.initializeEvents ()\n  }\n\n  /////////////////////////////////////////////////////////\n  // Extension Id\n  //\n  /////////////////////////////////////////////////////////\n  static get ExtensionId() {\n\n    return 'Viewing.Extension.MultiModelExtensionBase'\n  }\n\n  /////////////////////////////////////////////////////////\n  // Load callback\n  //\n  /////////////////////////////////////////////////////////\n  load () {\n\n    return true\n  }\n\n  /////////////////////////////////////////////////////////\n  // Unload callback\n  //\n  /////////////////////////////////////////////////////////\n  unload () {\n\n    this.viewerEvents.forEach((event) => {\n\n      this.viewer.removeEventListener(\n        event.id, this[event.handler])\n    })\n\n    if (this.eventSink) {\n\n      this.eventSink.off('model.activated',\n        this.__onModelActivated)\n\n      this.eventSink.off('model.unloaded',\n        this.__onModelUnloaded)\n\n      this.eventSink.off('model.loaded',\n        this.__onModelLoaded)\n    }\n\n    this.off()\n\n    return true\n  }\n\n  /////////////////////////////////////////////////////////\n  // Reload callback, in case the extension is re-loaded\n  // more than once\n  //\n  /////////////////////////////////////////////////////////\n  reload (options = {}) {\n\n    this.options = Object.assign({},\n      this.defaultOptions,\n      this.options,\n      options)\n\n    return true\n  }\n\n  /////////////////////////////////////////////////////////\n  // Invoked when extension gets loaded\n  //\n  /////////////////////////////////////////////////////////\n  onExtensionLoaded (event) {\n\n    //console.log('MultiModelExtensionBase.onExtensionLoaded')\n  }\n\n  /////////////////////////////////////////////////////////\n  // Invoked when the model starts to load\n  // The geometry and instanceTree may not be available\n  // at this time\n  //\n  /////////////////////////////////////////////////////////\n  onModelBeginLoad (event) {\n\n    //console.log('MultiModelExtensionBase.onModelBeginLoad')\n  }\n\n  /////////////////////////////////////////////////////////\n  // Triggered by ModelLoader extension when a model is\n  // selected in a multi-model environment\n  //\n  /////////////////////////////////////////////////////////\n  onModelActivated (event) {\n\n    //console.log('MultiModelExtensionBase.onModelActivated')\n  }\n\n  /////////////////////////////////////////////////////////\n  // Invoked when model root node has been loaded\n  // Extensions that do require access to full\n  // model geometry or component tree may use that\n  // event to know a new model has been loaded\n  //\n  /////////////////////////////////////////////////////////\n  __onModelRootLoaded (event) {\n\n    this.viewerEvent([\n\n      Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT,\n      Autodesk.Viewing.GEOMETRY_LOADED_EVENT\n\n    ]).then((args) => {\n\n      this.onModelCompletedLoad (args[0])\n    })\n  }\n\n  onModelRootLoaded (event) {\n\n    //console.log('MultiModelExtensionBase.onModelRootLoaded')\n  }\n\n  /////////////////////////////////////////////////////////\n  // Invoked when object tree is fully loaded.\n  // Extensions that are interested in using the\n  // instanceTree need to use that event to make sure\n  // it is available\n  //\n  ////////////////////////////////////////////////////////\n  onObjectTreeCreated (event) {\n\n    //console.log('MultiModelExtensionBase.onObjectTreeCreated')\n  }\n\n  /////////////////////////////////////////////////////////\n  // Invoked when geometry is fully loaded\n  //\n  /////////////////////////////////////////////////////////\n  onGeometryLoaded (event) {\n\n    //console.log('MultiModelExtensionBase.onGeometryLoaded')\n  }\n\n  /////////////////////////////////////////////////////////\n  // Invoked after onObjectTreeCreated and onGeometryLoaded\n  // have both been fired\n  //\n  /////////////////////////////////////////////////////////\n  onModelCompletedLoad (event) {\n\n    //console.log('MultiModelExtensionBase.onModelCompletedLoad')\n  }\n\n  /////////////////////////////////////////////////////////\n  // Invoked once the viewer toolbar has been created\n  //\n  /////////////////////////////////////////////////////////\n  onToolbarCreated (event) {\n\n    //console.log('MultiModelExtensionBase.onToolbarCreated')\n  }\n\n  /////////////////////////////////////////////////////////\n  // Triggered by ModelLoader extension when a model has\n  // been unloaded as per user request\n  //\n  /////////////////////////////////////////////////////////\n  onModelUnloaded (event) {\n\n    //console.log('MultiModelExtensionBase.onModelUnloaded')\n  }\n\n  /////////////////////////////////////////////////////////\n  // Invoked when a model is being selected\n  //\n  /////////////////////////////////////////////////////////\n  onSelection (event) {\n\n    //console.log('MultiModelExtensionBase.onSelection')\n  }\n\n  /////////////////////////////////////////////////////////\n  //Sink Events\n  //\n  /////////////////////////////////////////////////////////\n  __onModelLoaded (event) {\n\n    this.models = [...this.models, event.model]\n\n    this.onModelBeginLoad (event)\n  }\n\n  __onModelActivated (event) {\n\n    this.onModelActivated (event)\n  }\n\n  __onModelUnloaded (event) {\n\n    this.models = this.models.filter((model) => {\n\n      return model.guid !== event.model.guid\n    })\n\n    this.onModelUnloaded(event)\n  }\n\n  /////////////////////////////////////////////////////////\n  // Initialize all events for the extension\n  // Each event will invoke a predefined handler\n  // implemented or not by the derived extension\n  //\n  /////////////////////////////////////////////////////////\n  initializeEvents () {\n\n    if (this.options.eventSink) {\n\n      // event object passed in options\n      this.eventSink = this.options.eventSink\n\n      this.eventSink.on('model.loaded',\n        this.__onModelLoaded)\n\n      this.eventSink.on('model.activated',\n        this.__onModelActivated)\n\n      this.eventSink.on('model.unloaded',\n        this.__onModelUnloaded)\n    }\n\n    this.viewerEvents = [\n      {\n        id: Autodesk.Viewing.EXTENSION_LOADED_EVENT,\n        handler: 'onExtensionLoaded'\n      },\n      {\n        id: Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT,\n        handler: 'onObjectTreeCreated'\n      },\n      {\n        id: Autodesk.Viewing.MODEL_ROOT_LOADED_EVENT,\n        handler: '__onModelRootLoaded'\n      },\n      {\n        id: Autodesk.Viewing.MODEL_ROOT_LOADED_EVENT,\n        handler: 'onModelRootLoaded'\n      },\n      {\n        id: Autodesk.Viewing.GEOMETRY_LOADED_EVENT,\n        handler: 'onGeometryLoaded'\n      },\n      {\n        id: Autodesk.Viewing.TOOLBAR_CREATED_EVENT,\n        handler: 'onToolbarCreated'\n      },\n      {\n        id: Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT,\n        handler: 'onSelection'\n      }\n    ]\n\n    this.viewerEvents.forEach((event) => {\n\n      this.viewerEvent(event.id, this[event.handler])\n    })\n  }\n\n  /////////////////////////////////////////////////////////\n  // Async viewer event\n  //\n  /////////////////////////////////////////////////////////\n  viewerEvent (eventId, handler) {\n\n    if (handler) {\n\n      this.viewer.addEventListener (eventId, handler)\n      return\n    }\n\n    const eventIdArray = Array.isArray(eventId)\n      ? eventId : [eventId]\n\n    const eventTasks = eventIdArray.map((id) => {\n      return new Promise ((resolve) => {\n        const __handler = (args) => {\n          this.viewer.removeEventListener (id, __handler)\n          resolve (args)\n        }\n        this.viewer.addEventListener (id, __handler)\n      })\n    })\n\n    return Promise.all (eventTasks)\n  }\n}\n","var superPropBase = require(\"./superPropBase\");\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    module.exports = _get = Reflect.get;\n  } else {\n    module.exports = _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nmodule.exports = _get;","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nmodule.exports = _superPropBase;"],"sourceRoot":""}