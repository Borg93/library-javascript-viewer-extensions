{"version":3,"sources":["webpack:///./src/client/components/Viewer/Viewer.Toolkit/index.js","webpack:///./src/client/components/Viewer/Viewer.Toolkit/Viewer.Toolkit.js"],"names":["_Viewer_Toolkit__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","ViewerToolkit","Toolkit","format","arguments","length","undefined","d","Date","getTime","guid","replace","c","r","Math","random","floor","toString","urn","Promise","resolve","reject","paramUrn","startsWith","Autodesk","Viewing","Document","load","doc","error","roles","rootItem","getRootItem","items","roleArray","Array","isArray","forEach","role","concat","_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default","getSubItemsWithProperties","type","id","className","tooltip","handler","button","UI","Button","icon","style","fontSize","setToolTip","onClick","viewer","ctrlGroupName","viewerToolbar","getToolbar","ctrlGroup","ControlGroup","addControl","model","dbIds","instanceTree","getData","getFragmentMap","getRootId","dbIdArray","leafIds","dbId","getLeafNodeIdsRec","childCount","enumNodeChildren","childId","push","ex","_ref","_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2___default","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","a","mark","_callee2","i","_ret","wrap","_context2","prev","next","delegateYield","_callee","it","fragIds","leafFragIds","_context","getLeafNodes","t0","sent","enumNodeFragments","fragId","getLeafFragIds","abrupt","v","stop","_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default","t1","_x","_x2","apply","this","leafId","fragments","dbId2fragId","_ref2","_callee3","fragList","fragbBox","nodebBox","_context3","getFragIds","getFragmentList","THREE","Box3","getWorldBounds","union","_x3","_x4","requestedProps","dbIdInt","parseInt","isNaN","propTasks","map","displayName","getProperty","all","then","properties","getProperties","result","defaultValue","prop","displayValue","Error","_ref3","_callee4","propertyTasks","propertyResults","_context4","activeModel","propertyResult","indexOf","sort","_x5","_x6","propFilter","_this","_ref4","_callee5","propRes","filteredRes","propFilterArray","_context5","filter","res","getBulkProperties","console","log","_x7","_x8","components","defaultProp","_ref5","_callee6","results","componentsMap","_context6","getBulkPropertiesAsync","Object","assign","value","split","_x9","_x10","root","taskFunc","tasks","runTaskOnDataTreeRec","node","parent","children","childNode","task","min","max","material","overlayId","geometry","Geometry","vertices","Vector3","x","y","z","lines","Line","LinePieces","impl","addOverlay","invalidate","setMaterial","createNodeFunc","_buildModelTreeRec","name","getNodeName","rootId","rootNode","taskResults","executeTaskOnModelTreeRec","hide","targetIds","visibilityManager","setNodeOff","show","isolate","targetLeafIds","leafTasks","resolveLeaf","_context8","axis","angle","center","quaternion","Quaternion","setFromAxisAngle","fragProxy","getFragmentProxy","getAnimTransform","position","applyQuaternion","add","multiplyQuaternions","updateAnimTransform","state","immediate","onStateRestored","removeEventListener","VIEWER_STATE_RESTORED_EVENT","pivot","viewport","pivotPoint","setTimeout","navigation","setPivotPoint","addEventListener","restoreState","parentId","faceFilter","matrixWorld","meshGeometry","renderProxy","getRenderProxy","attributes","positions","vb","array","indices","index","ib","stride","vbstride","offsets","count","start","oi","ol","il","b","vA","vB","vC","fromArray","faceIdx","face","Face3","faces","applyMatrix","buildComponentGeometry","computeFaceNormals","computeVertexNormals","mesh","Mesh","scale","excludedFragIds","svf","mc","getVisibleBounds","pt","nodeAccess","nodeBoxes","scaledExplodeDepth","maxDepth","explodeDepth","currentSegmentFraction","tmpBox","Float32Array","explodeRec","nodeId","depth","cx","cy","cz","ox","oy","oz","oscale","getNodeBox","mycx","mycy","mycz","boxes","nbFrags","getCount","box_offset","getUserAgent","navigator","userAgent","isAndroid","match","isBlackBerry","isIOS","isOpera","isWindows","isWindowsDesktop","isWindowsMobile","isAny"],"mappings":"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","file":"1.js","sourcesContent":["import ViewerToolkit from './Viewer.Toolkit'\n\nexport default ViewerToolkit\n","\n\nexport default class Toolkit {\n\n  ///////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////\n  static guid(format = 'xxxxxxxxxxxx') {\n\n    var d = new Date().getTime();\n\n    var guid = format.replace(\n      /[xy]/g,\n      function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16);\n      });\n\n    return guid;\n  }\n\n  /////////////////////////////////////////////\n  //mobile detection\n  //\n  /////////////////////////////////////////////\n  static get mobile() {\n\n    return {\n\n      getUserAgent: function () {\n        return navigator.userAgent;\n      },\n      isAndroid: function () {\n        return this.getUserAgent().match(/Android/i);\n      },\n      isBlackBerry: function () {\n        return this.getUserAgent().match(/BlackBerry/i);\n      },\n      isIOS: function () {\n        return this.getUserAgent().match(/iPhone|iPad|iPod/i);\n      },\n      isOpera: function () {\n        return this.getUserAgent().match(/Opera Mini/i);\n      },\n      isWindows: function () {\n        return this.isWindowsDesktop() || this.isWindowsMobile();\n      },\n      isWindowsMobile: function () {\n        return this.getUserAgent().match(/IEMobile/i);\n      },\n      isWindowsDesktop: function () {\n        return this.getUserAgent().match(/WPDesktop/i);\n      },\n      isAny: function () {\n\n        return this.isAndroid() ||\n          this.isBlackBerry() ||\n          this.isIOS() ||\n          this.isWindowsMobile();\n      }\n    }\n  }\n\n  /////////////////////////////////////////////////////////\n  // Load a document from URN\n  //\n  /////////////////////////////////////////////////////////\n  static loadDocument (urn) {\n\n    return new Promise((resolve, reject) => {\n\n      const paramUrn = !urn.startsWith('urn:')\n        ? 'urn:' + urn\n        : urn\n\n      Autodesk.Viewing.Document.load(paramUrn, (doc) => {\n\n        resolve (doc)\n\n      }, (error) => {\n\n        reject (error)\n      })\n    })\n  }\n\n  /////////////////////////////////////////////////////////\n  // Return viewables\n  //\n  /////////////////////////////////////////////////////////\n  static getViewableItems (doc, roles = ['3d', '2d']) {\n\n    const rootItem = doc.getRootItem()\n\n    let items = []\n\n    const roleArray = roles\n      ? (Array.isArray(roles) ? roles : [roles])\n      : []\n\n    roleArray.forEach((role) => {\n\n      items = [ ...items,\n        ...Autodesk.Viewing.Document.getSubItemsWithProperties(\n          rootItem, { type: 'geometry', role }, true) ]\n    })\n\n    return items\n  }\n\n  /////////////////////////////////////////////////////////\n  // Toolbar button\n  //\n  /////////////////////////////////////////////////////////\n  static createButton(id, className, tooltip, handler) {\n\n    var button = new Autodesk.Viewing.UI.Button(id)\n\n    button.icon.style.fontSize = '24px'\n\n    button.icon.className = className\n\n    button.setToolTip(tooltip)\n\n    button.onClick = handler\n\n    return button\n  }\n\n  /////////////////////////////////////////////////////////\n  // Control group\n  //\n  /////////////////////////////////////////////////////////\n  static createControlGroup (viewer, ctrlGroupName) {\n\n    var viewerToolbar = viewer.getToolbar(true)\n\n    if (viewerToolbar) {\n\n      var ctrlGroup =  new Autodesk.Viewing.UI.ControlGroup(\n        ctrlGroupName)\n\n      viewerToolbar.addControl(ctrlGroup)\n\n      return ctrlGroup\n    }\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  static getLeafNodes (model, dbIds) {\n\n    return new Promise((resolve, reject) => {\n\n      try {\n\n        const instanceTree =\n          model.getData().instanceTree ||\n          model.getFragmentMap()\n\n        dbIds = dbIds || instanceTree.getRootId()\n\n        const dbIdArray = Array.isArray(dbIds)\n          ? dbIds\n          : [dbIds]\n\n        const leafIds = []\n\n        const getLeafNodeIdsRec = (id) => {\n\n          let childCount = 0;\n\n          instanceTree.enumNodeChildren(id, (childId) => {\n            getLeafNodeIdsRec(childId)\n            ++childCount\n          })\n\n          if (childCount === 0) {\n\n            leafIds.push(id)\n          }\n        }\n\n        dbIdArray.forEach((dbId) => {\n          getLeafNodeIdsRec(dbId)\n        })\n\n        return resolve(leafIds)\n\n      } catch(ex){\n\n        return reject(ex)\n      }\n    })\n  }\n\n  /////////////////////////////////////////////////////////\n  // get node fragIds\n  //\n  /////////////////////////////////////////////////////////\n  static getFragIds (model, dbIds) {\n\n    return new Promise(async(resolve, reject) => {\n\n      try {\n\n        const it = model.getData().instanceTree\n\n        dbIds = dbIds || it.getRootId()\n\n        const dbIdArray = Array.isArray(dbIds)\n          ? dbIds : [dbIds]\n\n        const leafIds = it\n          ? await Toolkit.getLeafNodes(model, dbIdArray)\n          : dbIdArray\n\n        let fragIds = []\n\n        for(var i=0; i< leafIds.length; ++i) {\n\n          if (it) {\n\n            it.enumNodeFragments(\n              leafIds[i], (fragId) => {\n                fragIds.push(fragId)\n              })\n\n          } else {\n\n            const leafFragIds =\n              Toolkit.getLeafFragIds(\n                model, leafIds[i])\n\n            fragIds = [\n              ...fragIds,\n              ...leafFragIds\n            ]\n          }\n        }\n\n        return resolve(fragIds)\n\n      } catch(ex) {\n\n        return reject(ex)\n      }\n    })\n  }\n\n  /////////////////////////////////////////////////////////\n  // get leaf node fragIds\n  //\n  /////////////////////////////////////////////////////////\n  static getLeafFragIds (model, leafId) {\n\n   if (model.getData().instanceTree) {\n\n     const it = model.getData().instanceTree\n\n     const fragIds = []\n\n     it.enumNodeFragments(\n       leafId, (fragId) => {\n         fragIds.push(fragId)\n       })\n\n     return fragIds\n\n   } else {\n\n     const fragments = model.getData().fragments\n\n     const fragIds = fragments.dbId2fragId[leafId]\n\n     return !Array.isArray(fragIds)\n       ? [fragIds]\n       : fragIds\n   }\n  }\n\n  /////////////////////////////////////////////////////////\n  // Node bounding box\n  //\n  /////////////////////////////////////////////////////////\n  static getWorldBoundingBox (model, dbId) {\n\n    return new Promise(async(resolve, reject) => {\n\n      try {\n\n        var fragIds =\n          await Toolkit.getFragIds(\n            model, dbId)\n\n        if (!fragIds.length) {\n\n          return reject('No geometry, invalid dbId?')\n        }\n\n        var fragList = model.getFragmentList()\n\n        var fragbBox = new THREE.Box3()\n        var nodebBox = new THREE.Box3()\n\n        fragIds.forEach(function(fragId) {\n\n          fragList.getWorldBounds(fragId, fragbBox)\n          nodebBox.union(fragbBox)\n        })\n\n        return resolve(nodebBox)\n\n      } catch(ex){\n\n        return reject(ex)\n      }\n    })\n  }\n\n  /////////////////////////////////////////////////////////\n  // Gets properties from component\n  //\n  /////////////////////////////////////////////////////////\n  static getProperties (model, dbId, requestedProps = null) {\n\n    return new Promise((resolve, reject) => {\n\n      try {\n\n        const dbIdInt = parseInt(dbId)\n\n        if (isNaN(dbIdInt)) {\n\n          return reject(dbId + ' is not a valid integer')\n        }\n\n        if (requestedProps) {\n\n          const propTasks = requestedProps.map((displayName) => {\n\n            return Toolkit.getProperty(\n              model, dbIdInt, displayName, 'Not Available')\n          })\n\n          Promise.all(propTasks).then((properties) => {\n\n            resolve(properties)\n          })\n\n        } else {\n\n          model.getProperties(dbIdInt, (result) => {\n\n            if (result.properties) {\n\n              return resolve(\n                result.properties)\n            }\n\n            return reject('No Properties')\n          })\n        }\n\n      } catch (ex) {\n\n          return reject(ex)\n      }\n    })\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  static getProperty (model, dbId, displayName, defaultValue) {\n\n    return new Promise((resolve, reject) => {\n\n      try {\n\n        model.getProperties(dbId, (result) => {\n\n          if (result.properties) {\n\n            result.properties.forEach((prop) => {\n\n              prop.dbId = dbId\n\n              if (typeof displayName === 'function') {\n\n                if (displayName (prop.displayName)){\n\n                  resolve(prop)\n                }\n\n              } else if (displayName === prop.displayName) {\n\n                resolve(prop)\n              }\n            })\n\n            if (defaultValue) {\n\n              return resolve({\n                displayValue: defaultValue,\n                displayName,\n                dbId\n              })\n            }\n\n            reject(new Error('Not Found'))\n\n          } else {\n\n            reject(new Error('Error getting properties'));\n          }\n        })\n\n      } catch(ex){\n\n        return reject(ex)\n      }\n    })\n  }\n\n  /////////////////////////////////////////////////////////\n  // Gets all existing properties from component  dbIds\n  //\n  /////////////////////////////////////////////////////////\n  static getPropertyList (viewer, dbIds, model = null) {\n\n    return new Promise(async(resolve, reject) => {\n\n      try {\n\n        model = model || viewer.activeModel || viewer.model\n\n        var propertyTasks = dbIds.map((dbId) => {\n\n          return Toolkit.getProperties(model, dbId)\n        })\n\n        var propertyResults = await Promise.all(\n          propertyTasks)\n\n        var properties = []\n\n        propertyResults.forEach((propertyResult) => {\n\n          propertyResult.forEach((prop) => {\n\n            if (properties.indexOf(prop.displayName) < 0){\n\n              properties.push(prop.displayName)\n            }\n          })\n        })\n\n        return resolve(properties.sort())\n\n      } catch (ex) {\n\n        return reject(ex)\n      }\n    })\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  static getBulkPropertiesAsync (model, dbIds, propFilter) {\n\n    return new Promise(async(resolve, reject) => {\n\n      if (typeof propFilter === 'function') {\n\n        const propTasks = dbIds.map((dbId) => {\n\n          return this.getProperty(\n            model, dbId, propFilter, 'Not Found')\n        })\n\n        const propRes = await Promise.all(propTasks)\n\n        const filteredRes = propRes.filter((res) => {\n\n          return res.displayValue !== 'Not Found'\n        })\n\n        resolve(filteredRes.map((res) => {\n\n          return {\n            properties: [res],\n            dbId: res.dbId\n          }\n        }))\n\n      } else {\n\n        const propFilterArray = Array.isArray (propFilter)\n          ? propFilter : [propFilter]\n\n        model.getBulkProperties(dbIds, propFilterArray, (result) => {\n\n          resolve (result)\n\n        }, (error) => {\n          console.log(error)\n          reject(error)\n        })\n      }\n    })\n  }\n\n  /////////////////////////////////////////////////////////\n  // Maps components by property\n  //\n  /////////////////////////////////////////////////////////\n  static mapComponentsByProp (model, propFilter, components, defaultProp) {\n\n    return new Promise(async (resolve, reject) => {\n\n      try {\n      //  components = components || await Toolkit.getLeafNodes(model)\n        const results = await Toolkit.getBulkPropertiesAsync(\n          model, components, propFilter)\n\n        const propertyResults = results.map((result) => {\n\n          const prop = result.properties[0]\n\n          return Object.assign({}, prop, {\n            dbId: result.dbId\n          })\n        })\n\n        var componentsMap = {};\n\n        propertyResults.forEach((result) => {\n\n          var value = result.displayValue;\n\n          if (typeof value == 'string') {\n\n            value = value.split(':')[0]\n          }\n\n          if (!componentsMap[value]) {\n\n            componentsMap[value] = []\n          }\n\n          componentsMap[value].push(result.dbId)\n        })\n\n        return resolve(componentsMap)\n\n      } catch (ex) {\n\n        return reject(ex)\n      }\n    })\n  }\n\n  /////////////////////////////////////////////////////////////\n  // Runs recursively the argument task on each node\n  // of the data tree\n  //\n  /////////////////////////////////////////////////////////////\n  static runTaskOnDataTree(root, taskFunc) {\n\n    var tasks = [];\n\n    var runTaskOnDataTreeRec = (node, parent=null)=> {\n\n      if (node.children) {\n\n        node.children.forEach((childNode)=> {\n\n          runTaskOnDataTreeRec(childNode, node);\n        });\n      }\n\n      var task = taskFunc(node, parent);\n\n      tasks.push(task);\n    }\n\n    runTaskOnDataTreeRec(root);\n\n    return Promise.all(tasks);\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  static drawBox (viewer, min, max, material, overlayId) {\n\n    const geometry = new THREE.Geometry()\n\n    geometry.vertices.push(new THREE.Vector3(min.x, min.y, min.z))\n    geometry.vertices.push(new THREE.Vector3(max.x, min.y, min.z))\n\n    geometry.vertices.push(new THREE.Vector3(max.x, min.y, min.z))\n    geometry.vertices.push(new THREE.Vector3(max.x, min.y, max.z))\n\n    geometry.vertices.push(new THREE.Vector3(max.x, min.y, max.z))\n    geometry.vertices.push(new THREE.Vector3(min.x, min.y, max.z))\n\n    geometry.vertices.push(new THREE.Vector3(min.x, min.y, max.z))\n    geometry.vertices.push(new THREE.Vector3(min.x, min.y, min.z))\n\n    geometry.vertices.push(new THREE.Vector3(min.x, max.y, max.z))\n    geometry.vertices.push(new THREE.Vector3(max.x, max.y, max.z))\n\n    geometry.vertices.push(new THREE.Vector3(max.x, max.y, max.z))\n    geometry.vertices.push(new THREE.Vector3(max.x, max.y, min.z))\n\n    geometry.vertices.push(new THREE.Vector3(max.x, max.y, min.z))\n    geometry.vertices.push(new THREE.Vector3(min.x, max.y, min.z))\n\n    geometry.vertices.push(new THREE.Vector3(min.x, max.y, min.z))\n    geometry.vertices.push(new THREE.Vector3(min.x, max.y, max.z))\n\n    geometry.vertices.push(new THREE.Vector3(min.x, min.y, min.z))\n    geometry.vertices.push(new THREE.Vector3(min.x, max.y, min.z))\n\n    geometry.vertices.push(new THREE.Vector3(max.x, min.y, min.z))\n    geometry.vertices.push(new THREE.Vector3(max.x, max.y, min.z))\n\n    geometry.vertices.push(new THREE.Vector3(max.x, min.y, max.z))\n    geometry.vertices.push(new THREE.Vector3(max.x, max.y, max.z))\n\n    geometry.vertices.push(new THREE.Vector3(min.x, min.y, max.z))\n    geometry.vertices.push(new THREE.Vector3(min.x, max.y, max.z))\n\n    const lines = new THREE.Line(geometry,\n      material, THREE.LinePieces)\n\n    viewer.impl.addOverlay(overlayId, lines)\n\n    viewer.impl.invalidate(\n      true, true, true)\n\n    return lines\n  }\n\n  /////////////////////////////////////////////////////////\n  // Set component material\n  //\n  /////////////////////////////////////////////////////////\n  static async setMaterial(model, dbId, material) {\n\n    const fragIds = await Toolkit.getFragIds(\n      model, dbId)\n\n    const fragList = model.getFragmentList()\n\n    fragIds.forEach((fragId) => {\n\n      fragList.setMaterial(fragId, material)\n    })\n  }\n\n  /////////////////////////////////////////////////////////\n  // Recursively builds the model tree\n  //\n  /////////////////////////////////////////////////////////\n  static buildModelTree (model, createNodeFunc = null){\n\n    //builds model tree recursively\n    function _buildModelTreeRec(node){\n\n      instanceTree.enumNodeChildren(node.dbId,\n        function(childId) {\n\n          var childNode = null;\n\n          if(createNodeFunc){\n\n            childNode = createNodeFunc(childId);\n\n          } else {\n\n            node.children = node.children || [];\n\n            childNode = {\n              dbId: childId,\n              name: instanceTree.getNodeName(childId)\n            }\n\n            node.children.push(childNode)\n          }\n\n          _buildModelTreeRec(childNode)\n        })\n    }\n\n    //get model instance tree and root component\n    var instanceTree = model.getData().instanceTree\n\n    var rootId = instanceTree.getRootId()\n\n    var rootNode = {\n      dbId: rootId,\n      name: instanceTree.getNodeName(rootId)\n    }\n\n    _buildModelTreeRec(rootNode)\n\n    return rootNode\n  }\n\n  /////////////////////////////////////////////////////////\n  // Recursively execute task on model tree\n  //\n  /////////////////////////////////////////////////////////\n  static executeTaskOnModelTree (model, task) {\n\n    const taskResults = []\n\n    function executeTaskOnModelTreeRec(dbId){\n\n      instanceTree.enumNodeChildren(dbId,\n        function(childId) {\n\n          taskResults.push(task(model, childId))\n\n          executeTaskOnModelTreeRec(childId)\n        })\n    }\n\n    //get model instance tree and root component\n    const instanceTree = model.getData().instanceTree\n\n    const rootId = instanceTree.getRootId()\n\n    executeTaskOnModelTreeRec(rootId)\n\n    return taskResults\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  static hide (viewer, dbIds = [], model = null) {\n\n    try {\n\n      model = model || viewer.activeModel || viewer.model\n\n      viewer.hide (dbIds)\n\n      const targetIds = Array.isArray(dbIds) ? dbIds : [dbIds]\n\n      const tasks = targetIds.map((dbId) => {\n\n        return new Promise((resolve) => {\n\n          viewer.impl.visibilityManager.setNodeOff(\n            dbId, true)\n\n          resolve()\n        })\n      })\n\n      return Promise.all(tasks)\n\n    } catch (ex) {\n\n      return Promise.reject(ex)\n    }\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  static show (viewer, dbIds = [], model = null) {\n\n    try {\n\n      model = model || viewer.activeModel || viewer.model\n\n      viewer.show (dbIds)\n\n      const targetIds = Array.isArray(dbIds) ? dbIds : [dbIds]\n\n      targetIds.forEach((dbId) => {\n\n        viewer.impl.visibilityManager.setNodeOff(\n          dbId, false)\n      })\n\n      return Promise.resolve()\n\n    } catch (ex) {\n\n      return Promise.reject(ex)\n    }\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  static async isolateFull (viewer, dbIds = [], model = null) {\n\n    try {\n\n      model = model || viewer.activeModel || viewer.model\n\n      const vizMng = viewer.impl.visibilityManager\n\n      vizMng.isolate(dbIds, model)\n\n      const targetIds = Array.isArray(dbIds) ? dbIds : [dbIds]\n\n      const targetLeafIds = await Toolkit.getLeafNodes(\n        model, targetIds)\n\n      const leafIds = await Toolkit.getLeafNodes (model)\n\n      const leafTasks = leafIds.map((dbId) => {\n\n        return new Promise((resolveLeaf) => {\n\n          const show = !targetLeafIds.length  ||\n            targetLeafIds.indexOf(dbId) > -1\n\n          viewer[show?'show':'hide'](dbId,model)\n          //vizMng.setNodeOff(dbId, !show, model)\n\n          resolveLeaf()\n        })\n      })\n\n      return Promise.all(leafTasks)\n\n    } catch (ex) {\n\n      return Promise.reject(ex)\n    }\n  }\n\n  ///////////////////////////////////////////////////////////////////\n  // Rotate selected fragments\n  //\n  ///////////////////////////////////////////////////////////////////\n  static rotateFragments (viewer, fragIds, axis, angle, center, model = null) {\n\n    var quaternion = new THREE.Quaternion()\n\n    quaternion.setFromAxisAngle(axis, angle)\n\n    model = model || viewer.activeModel || viewer.model\n\n    fragIds.forEach((fragId) => {\n\n      var fragProxy = viewer.impl.getFragmentProxy(\n        model, fragId)\n\n      fragProxy.getAnimTransform()\n\n      var position = new THREE.Vector3(\n        fragProxy.position.x - center.x,\n        fragProxy.position.y - center.y,\n        fragProxy.position.z - center.z)\n\n      position.applyQuaternion(quaternion)\n\n      position.add(center)\n\n      fragProxy.position = position\n\n      fragProxy.quaternion.multiplyQuaternions(\n        quaternion, fragProxy.quaternion)\n\n      fragProxy.updateAnimTransform()\n    })\n  }\n\n  /////////////////////////////////////////////////////////\n  // A fix for viewer.restoreState\n  // that also restores pivotPoint\n  //\n  /////////////////////////////////////////////////////////\n  static restoreStateWithPivot (\n    viewer, state, filter = null, immediate = false) {\n\n    const onStateRestored = () => {\n\n      viewer.removeEventListener(\n        Autodesk.Viewing.VIEWER_STATE_RESTORED_EVENT,\n        onStateRestored)\n\n      const pivot = state.viewport.pivotPoint\n\n      setTimeout(() => {\n\n        viewer.navigation.setPivotPoint(\n          new THREE.Vector3(\n            pivot[0], pivot[1], pivot[2]))\n      }, immediate ? 0 : 1250)\n    }\n\n    viewer.addEventListener(\n      Autodesk.Viewing.VIEWER_STATE_RESTORED_EVENT,\n      onStateRestored)\n\n    viewer.restoreState(state, filter, immediate)\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  static getComponentsByParentName (name, model) {\n\n    const instanceTree = model.getData().instanceTree\n\n    const rootId = instanceTree.getRootId()\n\n    let parentId = 0\n\n    instanceTree.enumNodeChildren(rootId,\n      (childId) => {\n\n        const nodeName = instanceTree.getNodeName(childId)\n\n        if (nodeName.indexOf(name) > -1) {\n\n          parentId = childId\n        }\n      })\n\n    return parentId > 0\n      ? Toolkit.getLeafNodes(model, parentId)\n      : []\n  }\n\n  /////////////////////////////////////////////////////////\n  // Creates a standard THREE.Mesh out of a Viewer\n  // component\n  //\n  /////////////////////////////////////////////////////////\n  static buildComponentGeometry (\n    viewer, model, dbId, faceFilter) {\n\n    // first we assume the component dbId is a leaf\n    // component: ie has no child so contains\n    // geometry. This util method will return all fragIds\n    // associated with that specific dbId\n    const fragIds = Toolkit.getLeafFragIds(model, dbId)\n\n    let matrixWorld = null\n\n    const meshGeometry = new THREE.Geometry()\n\n    fragIds.forEach((fragId) => {\n\n      // for each fragId, get the proxy in order to access\n      // THREE geometry\n      const renderProxy =\n        viewer.impl.getRenderProxy(\n          model, fragId)\n\n      matrixWorld = matrixWorld || renderProxy.matrixWorld\n\n      const geometry = renderProxy.geometry\n\n      const attributes = geometry.attributes\n\n      const positions = geometry.vb\n        ? geometry.vb\n        : attributes.position.array\n\n      const indices = attributes.index.array || geometry.ib\n\n      const stride = geometry.vb ? geometry.vbstride : 3\n\n      const offsets = [{\n        count: indices.length,\n        index: 0,\n        start: 0\n      }]\n\n      for (var oi = 0, ol = offsets.length; oi < ol; ++oi) {\n\n        var start = offsets[oi].start\n        var count = offsets[oi].count\n        var index = offsets[oi].index\n\n        for (var i = start, il = start + count; i < il; i += 3) {\n\n          const a = index + indices[i]\n          const b = index + indices[i + 1]\n          const c = index + indices[i + 2]\n\n          const vA = new THREE.Vector3()\n          const vB = new THREE.Vector3()\n          const vC = new THREE.Vector3()\n\n          vA.fromArray(positions, a * stride)\n          vB.fromArray(positions, b * stride)\n          vC.fromArray(positions, c * stride)\n\n          if (!faceFilter || faceFilter(vA, vB, vC)) {\n\n            const faceIdx = meshGeometry.vertices.length\n\n            meshGeometry.vertices.push(vA)\n            meshGeometry.vertices.push(vB)\n            meshGeometry.vertices.push(vC)\n\n            const face = new THREE.Face3(\n              faceIdx, faceIdx + 1, faceIdx + 2)\n\n            meshGeometry.faces.push(face)\n          }\n        }\n      }\n    })\n\n    meshGeometry.applyMatrix(matrixWorld)\n\n    return meshGeometry\n  }\n\n  /////////////////////////////////////////////////////////\n  // Creates a standard THREE.Mesh out of a Viewer\n  // component\n  //\n  /////////////////////////////////////////////////////////\n  static buildComponentMesh (\n    viewer, model, dbId, faceFilter, material) {\n\n    const meshGeometry =\n      Toolkit.buildComponentGeometry(\n        viewer, model, dbId, faceFilter)\n\n    meshGeometry.computeFaceNormals()\n    meshGeometry.computeVertexNormals()\n\n    // creates THREE.Mesh\n    const mesh = new THREE.Mesh(\n      meshGeometry, material)\n\n    mesh.dbId = dbId\n\n    return mesh\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  static selectiveExplode (viewer, scale, excludedFragIds, model = null) {\n\n    model = model || viewer.activeModel || viewer.model\n\n    var svf = model.getData();\n\n    var mc = model.getVisibleBounds(true).center();\n\n    var fragList = model.getFragmentList();\n\n    var pt = new THREE.Vector3();\n\n    //Input scale is in the range 0-1, where 0\n    //means no displacement, and 1 maximum reasonable displacement.\n    scale *= 2;\n\n    //If we have a full part hierarchy we can use a\n    //better grouping strategy when exploding\n    if (svf.instanceTree && svf.instanceTree.nodeAccess.nodeBoxes && scale !== 0) {\n\n      var scaledExplodeDepth = scale * (svf.instanceTree.maxDepth - 1) + 1;\n      var explodeDepth = 0 | scaledExplodeDepth;\n      var currentSegmentFraction = scaledExplodeDepth - explodeDepth;\n\n      var it = svf.instanceTree;\n      var tmpBox = new Float32Array(6);\n\n      (function explodeRec(nodeId, depth, cx, cy, cz, ox, oy, oz) {\n\n        var oscale = scale * 2;\n\n        // smooth transition of this tree depth\n        // from non-exploded to exploded state\n        if (depth == explodeDepth)\n          oscale *= currentSegmentFraction;\n\n        it.getNodeBox(nodeId, tmpBox);\n\n        var mycx = 0.5 * (tmpBox[0] + tmpBox[3]);\n        var mycy = 0.5 * (tmpBox[1] + tmpBox[4]);\n        var mycz = 0.5 * (tmpBox[2] + tmpBox[5]);\n\n        if (depth > 0 && depth <= explodeDepth) {\n          var dx = (mycx - cx) * oscale;\n          var dy = (mycy - cy) * oscale;\n          var dz = (mycz - cz) * oscale;\n\n          //var omax = Math.max(dx, Math.max(dy, dz));\n          ox += dx;\n          oy += dy;\n          oz += dz;\n        }\n\n        svf.instanceTree.enumNodeChildren(nodeId, function(dbId) {\n\n          explodeRec(dbId, depth+1, mycx, mycy, mycz, ox, oy, oz);\n\n        }, false);\n\n        svf.instanceTree.enumNodeFragments(nodeId, function(fragId) {\n\n          if (excludedFragIds.indexOf(fragId.toString()) < 0) {\n\n            pt.x = ox;\n            pt.y = oy;\n            pt.z = oz;\n\n            fragList.updateAnimTransform(fragId, null, null, pt);\n          }\n\n        }, false);\n\n      })(svf.instanceTree.getRootId(), 0, mc.x, mc.y, mc.x, 0, 0, 0);\n\n    } else {\n\n      var boxes = fragList.fragments.boxes;\n\n      var nbFrags = fragList.getCount()\n\n      for (var fragId = 0; fragId < nbFrags; ++fragId) {\n\n        if(excludedFragIds.indexOf(fragId.toString()) < 0) {\n\n          if (scale == 0) {\n\n            fragList.updateAnimTransform(fragId);\n\n          } else {\n\n            var box_offset = fragId * 6;\n\n            var cx = 0.5 * (boxes[box_offset] + boxes[box_offset + 3]);\n            var cy = 0.5 * (boxes[box_offset + 1] + boxes[box_offset + 4]);\n            var cz = 0.5 * (boxes[box_offset + 2] + boxes[box_offset + 5]);\n\n            cx = scale * (cx - mc.x);\n            cy = scale * (cy - mc.y);\n            cz = scale * (cz - mc.z);\n\n            pt.x = cx;\n            pt.y = cy;\n            pt.z = cz;\n\n            fragList.updateAnimTransform(fragId, null, null, pt);\n          }\n        }\n      }\n    }\n  }\n}\n"],"sourceRoot":""}