{"version":3,"sources":["webpack:///./src/client/components/Viewer/Extensions/Dynamic/Viewing.Extension.BoundingBox/Viewing.Extension.BoundingBox.js","webpack:///./src/client/components/Viewer/Extensions/Dynamic/Viewing.Extension.BoundingBox/index.js","webpack:///./src/client/components/Viewer/Extensions/Viewer.MultiModelExtensionBase/index.js","webpack:///./src/client/components/Viewer/Extensions/Viewer.MultiModelExtensionBase/Viewer.MultiModelExtensionBase.js","webpack:///./node_modules/@babel/runtime/helpers/get.js","webpack:///./node_modules/@babel/runtime/helpers/superPropBase.js"],"names":["BoundingBoxExtension","viewer","options","_this","classCallCheck_default","this","possibleConstructorReturn_default","getPrototypeOf_default","call","onContextMenu","bind","assertThisInitialized_default","linesMaterial","createMaterial","lineGroups","color","arguments","length","undefined","opacity","THREE","LineBasicMaterial","Color","transparent","depthWrite","depthTest","linewidth","_this2","impl","createOverlayScene","loadDynamicExtension","then","ctxMenuExtension","addHandler","console","log","removeOverlayScene","get_default","prototype","loader","show","event","selections","selection","model","selectedDbId","dbIdArray","Toolkit","getWorldBoundingBox","bbox","drawBox","geometry","Geometry","min","max","vertices","push","Vector3","x","y","z","lines","Line","LinePieces","addOverlay","invalidate","_this3","menu","title","target","forEach","removeOverlay","MultiModelExtensionBase","Autodesk","Viewing","theExtensionManager","registerExtension","ExtensionId","__webpack_exports__","_Viewer_MultiModelExtensionBase__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","defaultOptions","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default","Object","assign","_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5___default","serviceContext","onModelCompletedLoad","onObjectTreeCreated","onModelRootLoaded","onExtensionLoaded","onModelActivated","onGeometryLoaded","onToolbarCreated","onModelBeginLoad","onModelUnloaded","onSelection","__onModelRootLoaded","__onModelActivated","__onModelUnloaded","__onModelLoaded","models","modelQueue","getModels","map","guid","initializeEvents","viewerEvents","removeEventListener","id","handler","eventSink","off","viewerEvent","OBJECT_TREE_CREATED_EVENT","GEOMETRY_LOADED_EVENT","args","concat","_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default","filter","_this4","on","EXTENSION_LOADED_EVENT","MODEL_ROOT_LOADED_EVENT","TOOLBAR_CREATED_EVENT","AGGREGATE_SELECTION_CHANGED_EVENT","eventId","_this5","eventTasks","Array","isArray","Promise","resolve","addEventListener","__handler","all","EventsEmitter","Composer","Extension","superPropBase","_get","property","receiver","Reflect","get","module","exports","base","desc","getOwnPropertyDescriptor","value","getPrototypeOf","object","hasOwnProperty"],"mappings":"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","file":"94.js","sourcesContent":["/// //////////////////////////////////////////////////////////////\n// BoundingBox Viewer Extension\n// By Philippe Leefsma, Autodesk Inc, August 2017\n//\n/// //////////////////////////////////////////////////////////////\nimport MultiModelExtensionBase from 'Viewer.MultiModelExtensionBase'\nimport Toolkit from 'Viewer.Toolkit'\n\nclass BoundingBoxExtension extends MultiModelExtensionBase {\n  /// //////////////////////////////////////////////////////\n  // Class constructor\n  //\n  /// //////////////////////////////////////////////////////\n  constructor (viewer, options) {\n    super(viewer, options)\n\n    this.onContextMenu = this.onContextMenu.bind(this)\n\n    this.linesMaterial = this.createMaterial(0x0000FF)\n\n    this.lineGroups = []\n  }\n\n  /// //////////////////////////////////////////////////////\n  //\n  //\n  /// //////////////////////////////////////////////////////\n  createMaterial (color = 0x000000, opacity = 1.0) {\n    return new THREE.LineBasicMaterial({\n      color: new THREE.Color(color),\n      transparent: true,\n      depthWrite: false,\n      depthTest: true,\n      linewidth: 10,\n      opacity\n    })\n  }\n\n  /// //////////////////////////////////////////////////////\n  // Load callback\n  //\n  /// //////////////////////////////////////////////////////\n  load () {\n    this.viewer.impl.createOverlayScene(\n      'boundingBox', this.linesMaterial)\n\n    this.viewer.loadDynamicExtension(\n      'Viewing.Extension.ContextMenu').then(\n      (ctxMenuExtension) => {\n        ctxMenuExtension.addHandler(\n          this.onContextMenu)\n      })\n\n    console.log('Viewing.Extension.BoundingBox loaded')\n\n    return true\n  }\n\n  /// //////////////////////////////////////////////////////\n  //\n  //\n  /// //////////////////////////////////////////////////////\n  get className () {\n    return 'bounding-box'\n  }\n\n  /// //////////////////////////////////////////////////////\n  // Extension Id\n  //\n  /// //////////////////////////////////////////////////////\n  static get ExtensionId () {\n    return 'Viewing.Extension.BoundingBox'\n  }\n\n  /// //////////////////////////////////////////////////////\n  // Unload callback\n  //\n  /// //////////////////////////////////////////////////////\n  unload () {\n    console.log('Viewing.Extension.BoundingBox unloaded')\n\n    this.viewer.impl.removeOverlayScene('boundingBox')\n\n    super.unload()\n\n    return true\n  }\n\n  /// //////////////////////////////////////////////////////\n  //\n  //\n  /// //////////////////////////////////////////////////////\n  onModelRootLoaded () {\n    this.options.loader.show(false)\n  }\n\n  /// //////////////////////////////////////////////////////\n  //\n  //\n  /// //////////////////////////////////////////////////////\n  async onSelection (event) {\n    if (event.selections.length) {\n      const selection = event.selections[0]\n\n      const model = selection.model\n\n      this.selectedDbId = selection.dbIdArray[0]\n\n      const bbox =\n        await Toolkit.getWorldBoundingBox(\n          model, this.selectedDbId)\n\n      this.drawBox(bbox)\n    }\n  }\n\n  /// //////////////////////////////////////////////////////\n  //\n  //\n  /// //////////////////////////////////////////////////////\n  drawBox (bbox) {\n    const geometry = new THREE.Geometry()\n\n    const { min, max } = bbox\n\n    geometry.vertices.push(new THREE.Vector3(min.x, min.y, min.z))\n    geometry.vertices.push(new THREE.Vector3(max.x, min.y, min.z))\n\n    geometry.vertices.push(new THREE.Vector3(max.x, min.y, min.z))\n    geometry.vertices.push(new THREE.Vector3(max.x, min.y, max.z))\n\n    geometry.vertices.push(new THREE.Vector3(max.x, min.y, max.z))\n    geometry.vertices.push(new THREE.Vector3(min.x, min.y, max.z))\n\n    geometry.vertices.push(new THREE.Vector3(min.x, min.y, max.z))\n    geometry.vertices.push(new THREE.Vector3(min.x, min.y, min.z))\n\n    geometry.vertices.push(new THREE.Vector3(min.x, max.y, max.z))\n    geometry.vertices.push(new THREE.Vector3(max.x, max.y, max.z))\n\n    geometry.vertices.push(new THREE.Vector3(max.x, max.y, max.z))\n    geometry.vertices.push(new THREE.Vector3(max.x, max.y, min.z))\n\n    geometry.vertices.push(new THREE.Vector3(max.x, max.y, min.z))\n    geometry.vertices.push(new THREE.Vector3(min.x, max.y, min.z))\n\n    geometry.vertices.push(new THREE.Vector3(min.x, max.y, min.z))\n    geometry.vertices.push(new THREE.Vector3(min.x, max.y, max.z))\n\n    geometry.vertices.push(new THREE.Vector3(min.x, min.y, min.z))\n    geometry.vertices.push(new THREE.Vector3(min.x, max.y, min.z))\n\n    geometry.vertices.push(new THREE.Vector3(max.x, min.y, min.z))\n    geometry.vertices.push(new THREE.Vector3(max.x, max.y, min.z))\n\n    geometry.vertices.push(new THREE.Vector3(max.x, min.y, max.z))\n    geometry.vertices.push(new THREE.Vector3(max.x, max.y, max.z))\n\n    geometry.vertices.push(new THREE.Vector3(min.x, min.y, max.z))\n    geometry.vertices.push(new THREE.Vector3(min.x, max.y, max.z))\n\n    const lines = new THREE.Line(geometry,\n      this.linesMaterial,\n      THREE.LinePieces)\n\n    this.lineGroups.push(lines)\n\n    this.viewer.impl.addOverlay('boundingBox', lines)\n\n    this.viewer.impl.invalidate(\n      true, true, true)\n  }\n\n  /// //////////////////////////////////////////////////////\n  //\n  //\n  /// //////////////////////////////////////////////////////\n  onContextMenu (event) {\n    if (this.lineGroups.length) {\n      event.menu.push({\n        title: 'Clear All BoundingBoxes',\n        target: () => {\n          this.lineGroups.forEach((lines) => {\n            this.viewer.impl.removeOverlay('boundingBox', lines)\n          })\n\n          this.viewer.impl.invalidate(\n            true, true, true)\n\n          this.lineGroups = []\n        }\n      })\n    }\n  }\n}\n\nAutodesk.Viewing.theExtensionManager.registerExtension(\n  BoundingBoxExtension.ExtensionId,\n  BoundingBoxExtension)\n\nexport default 'Viewing.Extension.BoundingBox'\n","import './Viewing.Extension.BoundingBox'\n\nexport default 'Viewing.Extension.BoundingBox'\n","import MultiModelExtensionBase from './Viewer.MultiModelExtensionBase'\n\nexport default MultiModelExtensionBase\n","import EventsEmitter from 'EventsEmitter'\n\nexport default class MultiModelExtensionBase extends\n  EventsEmitter.Composer(Autodesk.Viewing.Extension) {\n  /// //////////////////////////////////////////////////////\n  // Class constructor\n  //\n  /// //////////////////////////////////////////////////////\n  constructor (viewer, options = {}, defaultOptions = {}) {\n    super(viewer)\n    // bindings\n    Object.assign(this, options.serviceContext)\n\n    this.onModelCompletedLoad = this.onModelCompletedLoad.bind(this)\n    this.onObjectTreeCreated = this.onObjectTreeCreated.bind(this)\n    this.onModelRootLoaded = this.onModelRootLoaded.bind(this)\n    this.onExtensionLoaded = this.onExtensionLoaded.bind(this)\n    this.onModelActivated = this.onModelActivated.bind(this)\n    this.onGeometryLoaded = this.onGeometryLoaded.bind(this)\n    this.onToolbarCreated = this.onToolbarCreated.bind(this)\n    this.onModelBeginLoad = this.onModelBeginLoad.bind(this)\n    this.onModelUnloaded = this.onModelUnloaded.bind(this)\n    this.onSelection = this.onSelection.bind(this)\n\n    this.__onModelRootLoaded = this.__onModelRootLoaded.bind(this)\n    this.__onModelActivated = this.__onModelActivated.bind(this)\n    this.__onModelUnloaded = this.__onModelUnloaded.bind(this)\n    this.__onModelLoaded = this.__onModelLoaded.bind(this)\n\n    this.defaultOptions = defaultOptions\n\n    this.options = Object.assign({},\n      defaultOptions,\n      options)\n\n    this.viewer = viewer\n\n    // read the modelQueue to detect currently loaded models\n    // when the extension gets loaded\n    const models = viewer.impl.modelQueue().getModels()\n\n    this.models = models.map((model) => {\n      model.guid = model.guid || this.guid()\n\n      return model\n    })\n\n    this.initializeEvents()\n  }\n\n  /// //////////////////////////////////////////////////////\n  // Extension Id\n  //\n  /// //////////////////////////////////////////////////////\n  static get ExtensionId () {\n    return 'Viewing.Extension.MultiModelExtensionBase'\n  }\n\n  /// //////////////////////////////////////////////////////\n  // Load callback\n  //\n  /// //////////////////////////////////////////////////////\n  load () {\n    return true\n  }\n\n  /// //////////////////////////////////////////////////////\n  // Unload callback\n  //\n  /// //////////////////////////////////////////////////////\n  unload () {\n    this.viewerEvents.forEach((event) => {\n      this.viewer.removeEventListener(\n        event.id, this[event.handler])\n    })\n\n    if (this.eventSink) {\n      this.eventSink.off('model.activated',\n        this.__onModelActivated)\n\n      this.eventSink.off('model.unloaded',\n        this.__onModelUnloaded)\n\n      this.eventSink.off('model.loaded',\n        this.__onModelLoaded)\n    }\n\n    this.off()\n\n    return true\n  }\n\n  /// //////////////////////////////////////////////////////\n  // Reload callback, in case the extension is re-loaded\n  // more than once\n  //\n  /// //////////////////////////////////////////////////////\n  reload (options = {}) {\n    this.options = Object.assign({},\n      this.defaultOptions,\n      this.options,\n      options)\n\n    return true\n  }\n\n  /// //////////////////////////////////////////////////////\n  // Invoked when extension gets loaded\n  //\n  /// //////////////////////////////////////////////////////\n  onExtensionLoaded (event) {\n\n    // console.log('MultiModelExtensionBase.onExtensionLoaded')\n  }\n\n  /// //////////////////////////////////////////////////////\n  // Invoked when the model starts to load\n  // The geometry and instanceTree may not be available\n  // at this time\n  //\n  /// //////////////////////////////////////////////////////\n  onModelBeginLoad (event) {\n\n    // console.log('MultiModelExtensionBase.onModelBeginLoad')\n  }\n\n  /// //////////////////////////////////////////////////////\n  // Triggered by ModelLoader extension when a model is\n  // selected in a multi-model environment\n  //\n  /// //////////////////////////////////////////////////////\n  onModelActivated (event) {\n\n    // console.log('MultiModelExtensionBase.onModelActivated')\n  }\n\n  /// //////////////////////////////////////////////////////\n  // Invoked when model root node has been loaded\n  // Extensions that do require access to full\n  // model geometry or component tree may use that\n  // event to know a new model has been loaded\n  //\n  /// //////////////////////////////////////////////////////\n  __onModelRootLoaded (event) {\n    this.viewerEvent([\n\n      Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT,\n      Autodesk.Viewing.GEOMETRY_LOADED_EVENT\n\n    ]).then((args) => {\n      this.onModelCompletedLoad(args[0])\n    })\n  }\n\n  onModelRootLoaded (event) {\n\n    // console.log('MultiModelExtensionBase.onModelRootLoaded')\n  }\n\n  /// //////////////////////////////////////////////////////\n  // Invoked when object tree is fully loaded.\n  // Extensions that are interested in using the\n  // instanceTree need to use that event to make sure\n  // it is available\n  //\n  /// /////////////////////////////////////////////////////\n  onObjectTreeCreated (event) {\n\n    // console.log('MultiModelExtensionBase.onObjectTreeCreated')\n  }\n\n  /// //////////////////////////////////////////////////////\n  // Invoked when geometry is fully loaded\n  //\n  /// //////////////////////////////////////////////////////\n  onGeometryLoaded (event) {\n\n    // console.log('MultiModelExtensionBase.onGeometryLoaded')\n  }\n\n  /// //////////////////////////////////////////////////////\n  // Invoked after onObjectTreeCreated and onGeometryLoaded\n  // have both been fired\n  //\n  /// //////////////////////////////////////////////////////\n  onModelCompletedLoad (event) {\n\n    // console.log('MultiModelExtensionBase.onModelCompletedLoad')\n  }\n\n  /// //////////////////////////////////////////////////////\n  // Invoked once the viewer toolbar has been created\n  //\n  /// //////////////////////////////////////////////////////\n  onToolbarCreated (event) {\n\n    // console.log('MultiModelExtensionBase.onToolbarCreated')\n  }\n\n  /// //////////////////////////////////////////////////////\n  // Triggered by ModelLoader extension when a model has\n  // been unloaded as per user request\n  //\n  /// //////////////////////////////////////////////////////\n  onModelUnloaded (event) {\n\n    // console.log('MultiModelExtensionBase.onModelUnloaded')\n  }\n\n  /// //////////////////////////////////////////////////////\n  // Invoked when a model is being selected\n  //\n  /// //////////////////////////////////////////////////////\n  onSelection (event) {\n\n    // console.log('MultiModelExtensionBase.onSelection')\n  }\n\n  /// //////////////////////////////////////////////////////\n  // Sink Events\n  //\n  /// //////////////////////////////////////////////////////\n  __onModelLoaded (event) {\n    this.models = [...this.models, event.model]\n\n    this.onModelBeginLoad(event)\n  }\n\n  __onModelActivated (event) {\n    this.onModelActivated(event)\n  }\n\n  __onModelUnloaded (event) {\n    this.models = this.models.filter((model) => {\n      return model.guid !== event.model.guid\n    })\n\n    this.onModelUnloaded(event)\n  }\n\n  /// //////////////////////////////////////////////////////\n  // Initialize all events for the extension\n  // Each event will invoke a predefined handler\n  // implemented or not by the derived extension\n  //\n  /// //////////////////////////////////////////////////////\n  initializeEvents () {\n    if (this.options.eventSink) {\n      // event object passed in options\n      this.eventSink = this.options.eventSink\n\n      this.eventSink.on('model.loaded',\n        this.__onModelLoaded)\n\n      this.eventSink.on('model.activated',\n        this.__onModelActivated)\n\n      this.eventSink.on('model.unloaded',\n        this.__onModelUnloaded)\n    }\n\n    this.viewerEvents = [\n      {\n        id: Autodesk.Viewing.EXTENSION_LOADED_EVENT,\n        handler: 'onExtensionLoaded'\n      },\n      {\n        id: Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT,\n        handler: 'onObjectTreeCreated'\n      },\n      {\n        id: Autodesk.Viewing.MODEL_ROOT_LOADED_EVENT,\n        handler: '__onModelRootLoaded'\n      },\n      {\n        id: Autodesk.Viewing.MODEL_ROOT_LOADED_EVENT,\n        handler: 'onModelRootLoaded'\n      },\n      {\n        id: Autodesk.Viewing.GEOMETRY_LOADED_EVENT,\n        handler: 'onGeometryLoaded'\n      },\n      {\n        id: Autodesk.Viewing.TOOLBAR_CREATED_EVENT,\n        handler: 'onToolbarCreated'\n      },\n      {\n        id: Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT,\n        handler: 'onSelection'\n      }\n    ]\n\n    this.viewerEvents.forEach((event) => {\n      this.viewerEvent(event.id, this[event.handler])\n    })\n  }\n\n  /// //////////////////////////////////////////////////////\n  // Async viewer event\n  //\n  /// //////////////////////////////////////////////////////\n  viewerEvent (eventId, handler) {\n    if (handler) {\n      this.viewer.addEventListener(eventId, handler)\n      return\n    }\n\n    const eventIdArray = Array.isArray(eventId)\n      ? eventId : [eventId]\n\n    const eventTasks = eventIdArray.map((id) => {\n      return new Promise((resolve) => {\n        const __handler = (args) => {\n          this.viewer.removeEventListener(id, __handler)\n          resolve(args)\n        }\n        this.viewer.addEventListener(id, __handler)\n      })\n    })\n\n    return Promise.all(eventTasks)\n  }\n}\n","var superPropBase = require(\"./superPropBase\");\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    module.exports = _get = Reflect.get;\n  } else {\n    module.exports = _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nmodule.exports = _get;","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nmodule.exports = _superPropBase;"],"sourceRoot":""}