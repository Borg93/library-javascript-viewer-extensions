{"version":3,"sources":["webpack:///./src/client/components/Views/Database/components/DatabaseView.scss?42b6","webpack:///./src/client/components/Views/Database/components/DatabaseView.scss","webpack:///./src/client/components/Views/Database/components/DatabaseView.js","webpack:///./src/client/components/Views/Database/index.js"],"names":["content","__webpack_require__","module","i","locals","exports","push","DatabaseView","props","_this","classCallCheck_default","this","possibleConstructorReturn_default","getPrototypeOf_default","call","onViewerCreated","bind","assertThisInitialized_default","onError","setNavbarState","links","settings","error","responseJSON","browserHistory","viewer","loader","addEventListener","Autodesk","Viewing","MODEL_ROOT_LOADED_EVENT","show","params","queryString","parse","location","search","react_default","a","createElement","className","Viewer_Configurator","setViewerEnv","modelId","id","appState","showLoader","database","React","Component","mapDispatchToProps","connect","state","Object","assign","app","View"],"mappings":"gFAGA,IAAAA,EAAcC,EAAQ,MACtB,iBAAAD,MAAA,EAA4CE,EAAAC,EAASH,EAAA,MAExCC,EAAQ,GAARA,CAAmED,EAAA,IAChFA,EAAAI,SAAAF,EAAAG,QAAAL,EAAAI,+BCPAF,EAAAG,QAA2BJ,EAAQ,GAARA,EAAuE,IAElGK,KAAA,CAAcJ,EAAAC,EAAS,+HAA6H,iNC0ErII,cAjEb,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,IAAAC,KAAAJ,IAClBE,EAAAG,IAAAD,KAAAE,IAAAN,GAAAO,KAAAH,KAAMH,KACDO,gBAAkBN,EAAKM,gBAAgBC,KAArBC,IAAAR,IACvBA,EAAKS,QAAUT,EAAKS,QAAQF,KAAbC,IAAAR,IAHGA,oEAWlBE,KAAKH,MAAMW,eAAe,CACxBC,MAAO,CACLC,UAAU,qCASPC,GACoB,cAAvBA,EAAMC,cACRC,IAAelB,KAAK,gDAQPmB,EAAQC,GACvBD,EAAOE,iBACLC,SAASC,QAAQC,wBAAyB,WACxCJ,EAAOK,MAAK,sCAShB,IAAMC,EAASC,IAAYC,MAAMvB,KAAKH,MAAM2B,SAASC,QAErD,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAEbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEtB,eAAgBR,KAAKH,MAAMW,eAC3BJ,gBAAiBJ,KAAKI,gBACtB2B,aAAc/B,KAAKH,MAAMkC,aACzBC,QAASX,EAAOY,GAChBC,SAAUlC,KAAKH,MAAMqC,SACrBV,SAAUxB,KAAKH,MAAM2B,SACrBjB,QAASP,KAAKO,QACd4B,YAAU,EACVC,SAAS,iBA/DQC,IAAMC,2BCG3BC,EAAqB,CACzB/B,mBACAuB,kBASaS,sBANS,SAACC,GAAD,OACtBC,OAAOC,OAAO,GAAIF,EAAM3B,OAAQ,CAC9BoB,SAAUO,EAAMG,OAMlBL,EAFaC,CAEOK","file":"108.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../node_modules/postcss-loader/src/index.js??ref--6-2!../../../../../../node_modules/sass-loader/lib/loader.js!./DatabaseView.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../node_modules/postcss-loader/src/index.js??ref--6-2!../../../../../../node_modules/sass-loader/lib/loader.js!./DatabaseView.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../node_modules/postcss-loader/src/index.js??ref--6-2!../../../../../../node_modules/sass-loader/lib/loader.js!./DatabaseView.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".database-view {\\n  height: 100%; }\\n\\n.configurator-toolbar {\\n  position: absolute;\\n  bottom: 100px;\\n  right: 105px; }\\n\", \"\"]);\n","import ViewerConfigurator from 'Viewer.Configurator'\nimport { history as browserHistory } from 'BrowserContext'\nimport './DatabaseView.scss'\nimport React from 'react'\nimport queryString from 'query-string'\n\nclass DatabaseView extends React.Component {\n  /// //////////////////////////////////////////////////////\n  //\n  //\n  /// //////////////////////////////////////////////////////\n  constructor (props) {\n    super(props)\n    this.onViewerCreated = this.onViewerCreated.bind(this)\n    this.onError = this.onError.bind(this)\n  }\n\n  /// //////////////////////////////////////////////////////\n  //\n  //\n  /// //////////////////////////////////////////////////////\n  componentWillMount () {\n    this.props.setNavbarState({\n      links: {\n        settings: false\n      }\n    })\n  }\n\n  /// //////////////////////////////////////////////////////\n  //\n  //\n  /// //////////////////////////////////////////////////////\n  onError (error) {\n    if (error.responseJSON === 'Not Found') {\n      browserHistory.push('/404')\n    }\n  }\n\n  /// //////////////////////////////////////////////////////\n  //\n  //\n  /// //////////////////////////////////////////////////////\n  onViewerCreated (viewer, loader) {\n    viewer.addEventListener(\n      Autodesk.Viewing.MODEL_ROOT_LOADED_EVENT, () => {\n        loader.show(false)\n      })\n  }\n\n  /// //////////////////////////////////////////////////////\n  //\n  //\n  /// //////////////////////////////////////////////////////\n  render () {\n    const params = queryString.parse(this.props.location.search)\n\n    return (\n      <div className='database-view'>\n\n        <ViewerConfigurator\n          setNavbarState={this.props.setNavbarState}\n          onViewerCreated={this.onViewerCreated}\n          setViewerEnv={this.props.setViewerEnv}\n          modelId={params.id}\n          appState={this.props.appState}\n          location={this.props.location}\n          onError={this.onError}\n          showLoader\n          database='rcdb'\n        />\n      </div>\n    )\n  }\n}\n\nexport default DatabaseView\n","import View from './components/DatabaseView'\n\nimport { connect } from 'react-redux'\n\nimport {\n  setNavbarState,\n  setViewerEnv\n} from '../../../store/app'\n\nconst mapDispatchToProps = {\n  setNavbarState,\n  setViewerEnv\n}\n\nconst mapStateToProps = (state) => (\n  Object.assign({}, state.viewer, {\n    appState: state.app\n  })\n)\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps)(View)\n"],"sourceRoot":""}