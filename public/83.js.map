{"version":3,"sources":["webpack:///./src/client/components/Viewer/Extensions/Dynamic/Viewing.Extension.ShaderMaterial/texture.png","webpack:///./src/client/components/Viewer/Extensions/Dynamic/Viewing.Extension.ShaderMaterial/Viewing.Extension.ShaderMaterial.scss?03b0","webpack:///./src/client/components/Viewer/Extensions/Dynamic/Viewing.Extension.ShaderMaterial/Viewing.Extension.ShaderMaterial.scss","webpack:///./src/client/components/Viewer/Extensions/Dynamic/Viewing.Extension.ShaderMaterial/Viewing.Extension.ShaderMaterial.js","webpack:///./src/client/components/Viewer/Extensions/Dynamic/Viewing.Extension.ShaderMaterial/index.js","webpack:///./src/client/components/Viewer/Extensions/Viewer.MultiModelExtensionBase/index.js","webpack:///./src/client/components/Viewer/Extensions/Viewer.MultiModelExtensionBase/Viewer.MultiModelExtensionBase.js","webpack:///./node_modules/@babel/runtime/helpers/get.js","webpack:///./node_modules/@babel/runtime/helpers/superPropBase.js"],"names":["module","exports","__webpack_require__","p","content","i","locals","push","ShaderMaterialExtension","viewer","options","_this","classCallCheck_default","this","possibleConstructorReturn_default","getPrototypeOf_default","call","update","bind","assertThisInitialized_default","stopwatch","Stopwatch","shaderParams","side","THREE","DoubleSide","fragmentShader","vertexShader","attributes","uniforms","texture","value","generateTexture","type","material","createShaderMaterial","Object","assign","name","updateActive","console","log","get_default","prototype","shader","ShaderMaterial","impl","getMaterials","addMaterial","size","pixels","j","color","Math","random","pixel","parseInt","dataTexture","DataTexture","Uint8Array","from","RGBAFormat","UnsignedByteType","UVMapping","minFilter","LinearMipMapLinearFilter","magFilter","LinearFilter","needsUpdate","geometry","computeBoundingBox","_geometry$boundingBox","boundingBox","min","max","range","Vector2","x","y","offset","uvs","faceVertexUvs","offX","offY","incX","incY","splice","length","faces","forEach","face","v1","vertices","a","v2","b","v3","c","abs","uvsNeedUpdate","event","selections","selection","dbId","dbIdArray","model","mesh","Toolkit","buildComponentMesh","calculateUVsGeo","hide","scene","add","sceneUpdated","clearSelection","fragIds","fragList","getFragmentList","fragId","setMaterial","requestAnimationFrame","dt","getElapsedMs","param","PI","invalidate","MultiModelExtensionBase","Autodesk","Viewing","theExtensionManager","registerExtension","ExtensionId","__webpack_exports__","_Viewer_MultiModelExtensionBase__WEBPACK_IMPORTED_MODULE_0__","arguments","undefined","defaultOptions","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default","_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5___default","serviceContext","onModelCompletedLoad","onObjectTreeCreated","onModelRootLoaded","onExtensionLoaded","onModelActivated","onGeometryLoaded","onToolbarCreated","onModelBeginLoad","onModelUnloaded","onSelection","__onModelRootLoaded","__onModelActivated","__onModelUnloaded","__onModelLoaded","models","modelQueue","getModels","map","guid","initializeEvents","_this2","viewerEvents","removeEventListener","id","handler","eventSink","off","_this3","viewerEvent","OBJECT_TREE_CREATED_EVENT","GEOMETRY_LOADED_EVENT","then","args","concat","_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default","filter","_this4","on","EXTENSION_LOADED_EVENT","MODEL_ROOT_LOADED_EVENT","TOOLBAR_CREATED_EVENT","AGGREGATE_SELECTION_CHANGED_EVENT","eventId","_this5","eventTasks","Array","isArray","Promise","resolve","addEventListener","__handler","all","EventsEmitter","Composer","Extension","superPropBase","_get","target","property","receiver","Reflect","get","base","desc","getOwnPropertyDescriptor","getPrototypeOf","object","hasOwnProperty"],"mappings":"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","file":"83.js","sourcesContent":["module.exports = __webpack_public_path__ + \"a91f7a1f684a8cae1c93a3e15fda6826.png\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/postcss-loader/src/index.js??ref--6-2!../../../../../../../node_modules/sass-loader/lib/loader.js!./Viewing.Extension.ShaderMaterial.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/postcss-loader/src/index.js??ref--6-2!../../../../../../../node_modules/sass-loader/lib/loader.js!./Viewing.Extension.ShaderMaterial.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/postcss-loader/src/index.js??ref--6-2!../../../../../../../node_modules/sass-loader/lib/loader.js!./Viewing.Extension.ShaderMaterial.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \"\", \"\"]);\n","/////////////////////////////////////////////////////////\n// ShaderMaterial Extension\n// By Philippe Leefsma, February 2016\n//\n/////////////////////////////////////////////////////////\nimport MultiModelExtensionBase from 'Viewer.MultiModelExtensionBase'\nimport Toolkit from 'Viewer.Toolkit'\nimport texture from './texture.png'\nimport Stopwatch from 'Stopwatch'\n\nclass ShaderMaterialExtension extends MultiModelExtensionBase {\n\n  /////////////////////////////////////////////////////////\n  // Class constructor\n  //\n  /////////////////////////////////////////////////////////\n  constructor (viewer, options) {\n\n    super (viewer, options)\n\n    this.update = this.update.bind(this)\n\n    this.stopwatch = new Stopwatch()\n  }\n\n  /////////////////////////////////////////////////////////\n  // Extension Id\n  //\n  /////////////////////////////////////////////////////////\n  static get ExtensionId() {\n\n    return 'Viewing.Extension.ShaderMaterial'\n  }\n\n  /////////////////////////////////////////////////////////\n  // Load callback\n  //\n  /////////////////////////////////////////////////////////\n  load() {\n\n    const vertexShader = `\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n    `\n\n    const fragmentShader = `\n      uniform sampler2D texture;\n      //uniform float param;\n      varying vec2 vUv;\n      void main() {\n        vec4 tex = texture2D(texture, vUv);\n        //float r = cos(param);\n        //float g = sin(param);\n        //float b = cos(param) * sin(param);\n        //gl_FragColor = vec4(vUv.x, 0, 0, 1.0);\n        //gl_FragColor = vec4(1.0, 0.0, 0.0 , 1.0);\n        gl_FragColor = tex;\n      }\n    `\n\n    const shaderParams = {\n        side: THREE.DoubleSide,\n        fragmentShader,\n        vertexShader,\n        attributes: {\n\n        },\n        uniforms: {\n          //resolution: {\n          //  value: 1\n          //},\n          texture: {\n            value: this.generateTexture(12),\n            type: 't'\n          }\n          //param: {\n          //  value: Math.PI,\n          //  type: 'f'\n          //}\n        }\n      }\n\n    this.material = this.createShaderMaterial(\n      Object.assign({}, shaderParams, {\n        name: 'shader-material'\n      }))\n\n    this.updateActive = true\n\n    //this.update ()\n\n    console.log('Viewing.Extension.ShaderMaterial loaded')\n\n    return true\n  }\n\n  /////////////////////////////////////////////////////////\n  // Unload callback\n  //\n  /////////////////////////////////////////////////////////\n  unload() {\n\n    console.log('Viewing.Extension.ShaderMaterial unloaded')\n\n    this.updateActive = false\n\n    super.unload()\n\n    return true\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  createShaderMaterial (shader) {\n\n    const material = new THREE.ShaderMaterial(shader)\n\n    const materials = this.viewer.impl.getMaterials()\n\n    materials.addMaterial(\n      shader.name,\n      material,\n      true)\n\n    return material\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  generateTexture (size) {\n\n    const pixels = []\n\n    for (let i = 0; i < size; ++i) {\n      for (let j = 0; j < size ; ++j) {\n        const color = Math.random()\n        const pixel = parseInt(color * 0xff)\n        pixels.push(pixel, 0xff - pixel, 0, 0xff)\n      }\n    }\n\n    const dataTexture = new THREE.DataTexture (\n      Uint8Array.from (pixels),\n      size, size,\n      THREE.RGBAFormat,\n      THREE.UnsignedByteType,\n      THREE.UVMapping\n    )\n\n    dataTexture.minFilter = THREE.LinearMipMapLinearFilter\n    dataTexture.magFilter = THREE.LinearFilter // THREE.LinearFilter // THREE.NearestFilter\n    dataTexture.needsUpdate = true\n\n    return dataTexture\n  }\n\n  calculateUVsGeo (geometry, size) {\n\n    geometry.computeBoundingBox()\n\n    const {min, max} = geometry.boundingBox\n\n    const range = new THREE.Vector2(\n      max.x - min.x,\n      max.y - min.y)\n\n    const offset = new THREE.Vector2(\n      0 - min.x,\n      0 - min.y)\n\n    const uvs = geometry.faceVertexUvs[0]\n\n    const offX = range.x / (2 * size)\n    const offY = range.y / (2 * size)\n    const incX = range.x / size\n    const incY = range.y / size\n\n    uvs.splice(0, uvs.length)\n\n    geometry.faces.forEach((face) => {\n\n      const v1 = geometry.vertices[face.a]\n      const v2 = geometry.vertices[face.b]\n      const v3 = geometry.vertices[face.c]\n\n      uvs.push([\n        new THREE.Vector2(\n          Math.abs((offX + v1.x + offset.x - incX) / range.x),\n          Math.abs((offY + v1.y + offset.y - incY) / range.y)),\n        new THREE.Vector2(\n          Math.abs((offX + v2.x + offset.x - incX) / range.x),\n          Math.abs((offY + v2.y + offset.y - incY) / range.y)),\n        new THREE.Vector2(\n          Math.abs((offX + v3.x + offset.x - incX) / range.x),\n          Math.abs((offY + v3.y + offset.y - incY) / range.y))\n      ])\n    })\n\n    geometry.uvsNeedUpdate = true\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  async onSelection (event) {\n\n    if (event.selections && event.selections.length) {\n\n      const selection = event.selections[0]\n\n      const dbId = selection.dbIdArray[0]\n\n      const model = this.viewer.model\n\n      //const material = new THREE.MeshPhongMaterial({\n      //  specular: new THREE.Color(0xff0000),\n      //  color: new THREE.Color(0xff0000),\n      //  side: THREE.DoubleSide\n      //})\n      //\n      //const materials = this.viewer.impl.getMaterials()\n      //\n      //materials.addMaterial(\n      //  'test-material',\n      //  material,\n      //  true)\n\n      const mesh = Toolkit.buildComponentMesh(\n        this.viewer, model, dbId, null,\n        this.material)\n\n      this.calculateUVsGeo(mesh.geometry, 12)\n\n      //const fragIds = await Toolkit.getFragIds (\n      //  selection.model, dbId)\n      //\n      //this.setMaterial(selection.model,\n      //  fragIds, this.material)\n\n      Toolkit.hide(this.viewer, dbId, model)\n\n      this.viewer.impl.scene.add(mesh)\n\n      this.viewer.impl.sceneUpdated(true)\n\n      this.viewer.clearSelection()\n    }\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  setMaterial (model, fragIds, material) {\n\n    const fragList = model.getFragmentList()\n\n    fragIds.forEach((fragId) => {\n\n      fragList.setMaterial(fragId, material)\n    })\n  }\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  update () {\n\n    if (this.updateActive) {\n\n      requestAnimationFrame (this.update)\n\n      const dt = this.stopwatch.getElapsedMs() * 0.001\n\n      const param = this.material.uniforms.param\n\n      param.value = (param.value + dt) % (2 * Math.PI)\n\n      param.needsUpdate = true\n\n      this.viewer.impl.invalidate (true)\n    }\n  }\n}\n\nAutodesk.Viewing.theExtensionManager.registerExtension(\n  ShaderMaterialExtension.ExtensionId,\n  ShaderMaterialExtension)\n","import './Viewing.Extension.ShaderMaterial'\nimport './Viewing.Extension.ShaderMaterial.scss'\n\nexport default 'Viewing.Extension.ShaderMaterial'\n","import MultiModelExtensionBase from './Viewer.MultiModelExtensionBase'\n\nexport default MultiModelExtensionBase\n","import EventsEmitter from 'EventsEmitter'\n\nexport default class MultiModelExtensionBase extends\n  EventsEmitter.Composer (Autodesk.Viewing.Extension) {\n\n  /////////////////////////////////////////////////////////\n  // Class constructor\n  //\n  /////////////////////////////////////////////////////////\n  constructor (viewer, options = {}, defaultOptions = {}) {\n\n    super (viewer)\n    // bindings\n    Object.assign(this, options.serviceContext)\n\n    this.onModelCompletedLoad = this.onModelCompletedLoad.bind(this)\n    this.onObjectTreeCreated  = this.onObjectTreeCreated.bind(this)\n    this.onModelRootLoaded    = this.onModelRootLoaded.bind(this)\n    this.onExtensionLoaded    = this.onExtensionLoaded.bind(this)\n    this.onModelActivated     = this.onModelActivated.bind(this)\n    this.onGeometryLoaded     = this.onGeometryLoaded.bind(this)\n    this.onToolbarCreated     = this.onToolbarCreated.bind(this)\n    this.onModelBeginLoad     = this.onModelBeginLoad.bind(this)\n    this.onModelUnloaded      = this.onModelUnloaded.bind(this)\n    this.onSelection          = this.onSelection.bind(this)\n\n    this.__onModelRootLoaded  = this.__onModelRootLoaded.bind(this)\n    this.__onModelActivated   = this.__onModelActivated.bind(this)\n    this.__onModelUnloaded    = this.__onModelUnloaded.bind(this)\n    this.__onModelLoaded      = this.__onModelLoaded.bind(this)\n\n    this.defaultOptions = defaultOptions\n\n    this.options = Object.assign({},\n      defaultOptions,\n      options)\n\n    this.viewer = viewer\n\n    // read the modelQueue to detect currently loaded models\n    // when the extension gets loaded\n    const models = viewer.impl.modelQueue().getModels()\n\n    this.models = models.map((model) => {\n\n      model.guid = model.guid || this.guid()\n\n      return model\n    })\n\n    this.initializeEvents ()\n  }\n\n  /////////////////////////////////////////////////////////\n  // Extension Id\n  //\n  /////////////////////////////////////////////////////////\n  static get ExtensionId() {\n\n    return 'Viewing.Extension.MultiModelExtensionBase'\n  }\n\n  /////////////////////////////////////////////////////////\n  // Load callback\n  //\n  /////////////////////////////////////////////////////////\n  load () {\n\n    return true\n  }\n\n  /////////////////////////////////////////////////////////\n  // Unload callback\n  //\n  /////////////////////////////////////////////////////////\n  unload () {\n\n    this.viewerEvents.forEach((event) => {\n\n      this.viewer.removeEventListener(\n        event.id, this[event.handler])\n    })\n\n    if (this.eventSink) {\n\n      this.eventSink.off('model.activated',\n        this.__onModelActivated)\n\n      this.eventSink.off('model.unloaded',\n        this.__onModelUnloaded)\n\n      this.eventSink.off('model.loaded',\n        this.__onModelLoaded)\n    }\n\n    this.off()\n\n    return true\n  }\n\n  /////////////////////////////////////////////////////////\n  // Reload callback, in case the extension is re-loaded\n  // more than once\n  //\n  /////////////////////////////////////////////////////////\n  reload (options = {}) {\n\n    this.options = Object.assign({},\n      this.defaultOptions,\n      this.options,\n      options)\n\n    return true\n  }\n\n  /////////////////////////////////////////////////////////\n  // Invoked when extension gets loaded\n  //\n  /////////////////////////////////////////////////////////\n  onExtensionLoaded (event) {\n\n    //console.log('MultiModelExtensionBase.onExtensionLoaded')\n  }\n\n  /////////////////////////////////////////////////////////\n  // Invoked when the model starts to load\n  // The geometry and instanceTree may not be available\n  // at this time\n  //\n  /////////////////////////////////////////////////////////\n  onModelBeginLoad (event) {\n\n    //console.log('MultiModelExtensionBase.onModelBeginLoad')\n  }\n\n  /////////////////////////////////////////////////////////\n  // Triggered by ModelLoader extension when a model is\n  // selected in a multi-model environment\n  //\n  /////////////////////////////////////////////////////////\n  onModelActivated (event) {\n\n    //console.log('MultiModelExtensionBase.onModelActivated')\n  }\n\n  /////////////////////////////////////////////////////////\n  // Invoked when model root node has been loaded\n  // Extensions that do require access to full\n  // model geometry or component tree may use that\n  // event to know a new model has been loaded\n  //\n  /////////////////////////////////////////////////////////\n  __onModelRootLoaded (event) {\n\n    this.viewerEvent([\n\n      Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT,\n      Autodesk.Viewing.GEOMETRY_LOADED_EVENT\n\n    ]).then((args) => {\n\n      this.onModelCompletedLoad (args[0])\n    })\n  }\n\n  onModelRootLoaded (event) {\n\n    //console.log('MultiModelExtensionBase.onModelRootLoaded')\n  }\n\n  /////////////////////////////////////////////////////////\n  // Invoked when object tree is fully loaded.\n  // Extensions that are interested in using the\n  // instanceTree need to use that event to make sure\n  // it is available\n  //\n  ////////////////////////////////////////////////////////\n  onObjectTreeCreated (event) {\n\n    //console.log('MultiModelExtensionBase.onObjectTreeCreated')\n  }\n\n  /////////////////////////////////////////////////////////\n  // Invoked when geometry is fully loaded\n  //\n  /////////////////////////////////////////////////////////\n  onGeometryLoaded (event) {\n\n    //console.log('MultiModelExtensionBase.onGeometryLoaded')\n  }\n\n  /////////////////////////////////////////////////////////\n  // Invoked after onObjectTreeCreated and onGeometryLoaded\n  // have both been fired\n  //\n  /////////////////////////////////////////////////////////\n  onModelCompletedLoad (event) {\n\n    //console.log('MultiModelExtensionBase.onModelCompletedLoad')\n  }\n\n  /////////////////////////////////////////////////////////\n  // Invoked once the viewer toolbar has been created\n  //\n  /////////////////////////////////////////////////////////\n  onToolbarCreated (event) {\n\n    //console.log('MultiModelExtensionBase.onToolbarCreated')\n  }\n\n  /////////////////////////////////////////////////////////\n  // Triggered by ModelLoader extension when a model has\n  // been unloaded as per user request\n  //\n  /////////////////////////////////////////////////////////\n  onModelUnloaded (event) {\n\n    //console.log('MultiModelExtensionBase.onModelUnloaded')\n  }\n\n  /////////////////////////////////////////////////////////\n  // Invoked when a model is being selected\n  //\n  /////////////////////////////////////////////////////////\n  onSelection (event) {\n\n    //console.log('MultiModelExtensionBase.onSelection')\n  }\n\n  /////////////////////////////////////////////////////////\n  //Sink Events\n  //\n  /////////////////////////////////////////////////////////\n  __onModelLoaded (event) {\n\n    this.models = [...this.models, event.model]\n\n    this.onModelBeginLoad (event)\n  }\n\n  __onModelActivated (event) {\n\n    this.onModelActivated (event)\n  }\n\n  __onModelUnloaded (event) {\n\n    this.models = this.models.filter((model) => {\n\n      return model.guid !== event.model.guid\n    })\n\n    this.onModelUnloaded(event)\n  }\n\n  /////////////////////////////////////////////////////////\n  // Initialize all events for the extension\n  // Each event will invoke a predefined handler\n  // implemented or not by the derived extension\n  //\n  /////////////////////////////////////////////////////////\n  initializeEvents () {\n\n    if (this.options.eventSink) {\n\n      // event object passed in options\n      this.eventSink = this.options.eventSink\n\n      this.eventSink.on('model.loaded',\n        this.__onModelLoaded)\n\n      this.eventSink.on('model.activated',\n        this.__onModelActivated)\n\n      this.eventSink.on('model.unloaded',\n        this.__onModelUnloaded)\n    }\n\n    this.viewerEvents = [\n      {\n        id: Autodesk.Viewing.EXTENSION_LOADED_EVENT,\n        handler: 'onExtensionLoaded'\n      },\n      {\n        id: Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT,\n        handler: 'onObjectTreeCreated'\n      },\n      {\n        id: Autodesk.Viewing.MODEL_ROOT_LOADED_EVENT,\n        handler: '__onModelRootLoaded'\n      },\n      {\n        id: Autodesk.Viewing.MODEL_ROOT_LOADED_EVENT,\n        handler: 'onModelRootLoaded'\n      },\n      {\n        id: Autodesk.Viewing.GEOMETRY_LOADED_EVENT,\n        handler: 'onGeometryLoaded'\n      },\n      {\n        id: Autodesk.Viewing.TOOLBAR_CREATED_EVENT,\n        handler: 'onToolbarCreated'\n      },\n      {\n        id: Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT,\n        handler: 'onSelection'\n      }\n    ]\n\n    this.viewerEvents.forEach((event) => {\n\n      this.viewerEvent(event.id, this[event.handler])\n    })\n  }\n\n  /////////////////////////////////////////////////////////\n  // Async viewer event\n  //\n  /////////////////////////////////////////////////////////\n  viewerEvent (eventId, handler) {\n\n    if (handler) {\n\n      this.viewer.addEventListener (eventId, handler)\n      return\n    }\n\n    const eventIdArray = Array.isArray(eventId)\n      ? eventId : [eventId]\n\n    const eventTasks = eventIdArray.map((id) => {\n      return new Promise ((resolve) => {\n        const __handler = (args) => {\n          this.viewer.removeEventListener (id, __handler)\n          resolve (args)\n        }\n        this.viewer.addEventListener (id, __handler)\n      })\n    })\n\n    return Promise.all (eventTasks)\n  }\n}\n","var superPropBase = require(\"./superPropBase\");\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    module.exports = _get = Reflect.get;\n  } else {\n    module.exports = _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nmodule.exports = _get;","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nmodule.exports = _superPropBase;"],"sourceRoot":""}