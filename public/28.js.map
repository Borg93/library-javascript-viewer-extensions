{"version":3,"sources":["webpack:///./node_modules/three-js/three.js","webpack:///./node_modules/three-js/addons/AdaptiveToneMappingPass.js","webpack:///./node_modules/three-js/addons/BasicShader.js","webpack:///./node_modules/three-js/addons/BleachBypassShader.js","webpack:///./node_modules/three-js/addons/BlendShader.js","webpack:///./node_modules/three-js/addons/BloomPass.js","webpack:///./node_modules/three-js/addons/BokehPass.js","webpack:///./node_modules/three-js/addons/BokehShader.js","webpack:///./node_modules/three-js/addons/BokehShader2.js","webpack:///./node_modules/three-js/addons/BrightnessContrastShader.js","webpack:///./node_modules/three-js/addons/CanvasRenderer.js","webpack:///./node_modules/three-js/addons/ColorCorrectionShader.js","webpack:///./node_modules/three-js/addons/ColorifyShader.js","webpack:///./node_modules/three-js/addons/ConvolutionShader.js","webpack:///./node_modules/three-js/addons/CopyShader.js","webpack:///./node_modules/three-js/addons/DDSLoader.js","webpack:///./node_modules/three-js/addons/DOFMipMapShader.js","webpack:///./node_modules/three-js/addons/DigitalGlitch.js","webpack:///./node_modules/three-js/addons/DotScreenPass.js","webpack:///./node_modules/three-js/addons/DotScreenShader.js","webpack:///./node_modules/three-js/addons/EdgeShader.js","webpack:///./node_modules/three-js/addons/EdgeShader2.js","webpack:///./node_modules/three-js/addons/EffectComposer.js","webpack:///./node_modules/three-js/addons/FXAAShader.js","webpack:///./node_modules/three-js/addons/FilmPass.js","webpack:///./node_modules/three-js/addons/FilmShader.js","webpack:///./node_modules/three-js/addons/FocusShader.js","webpack:///./node_modules/three-js/addons/FresnelShader.js","webpack:///./node_modules/three-js/addons/GammaCorrectionShader.js","webpack:///./node_modules/three-js/addons/GlitchPass.js","webpack:///./node_modules/three-js/addons/HorizontalBlurShader.js","webpack:///./node_modules/three-js/addons/HorizontalTiltShiftShader.js","webpack:///./node_modules/three-js/addons/HueSaturationShader.js","webpack:///./node_modules/three-js/addons/JSONLoader.js","webpack:///./node_modules/three-js/addons/KaleidoShader.js","webpack:///./node_modules/three-js/addons/LuminosityShader.js","webpack:///./node_modules/three-js/addons/MTLLoader.js","webpack:///./node_modules/three-js/addons/MarchingCubes.js","webpack:///./node_modules/three-js/addons/MaskPass.js","webpack:///./node_modules/three-js/addons/MirrorShader.js","webpack:///./node_modules/three-js/addons/NormalMapShader.js","webpack:///./node_modules/three-js/addons/OBJLoader.js","webpack:///./node_modules/three-js/addons/OceanShaders.js","webpack:///./node_modules/three-js/addons/OrbitControls.js","webpack:///./node_modules/three-js/addons/ParallaxShader.js","webpack:///./node_modules/three-js/addons/Projector.js","webpack:///./node_modules/three-js/addons/RGBShiftShader.js","webpack:///./node_modules/three-js/addons/RenderPass.js","webpack:///./node_modules/three-js/addons/SSAOShader.js","webpack:///./node_modules/three-js/addons/SVGLoader.js","webpack:///./node_modules/three-js/addons/SavePass.js","webpack:///./node_modules/three-js/addons/SepiaShader.js","webpack:///./node_modules/three-js/addons/ShaderPass.js","webpack:///./node_modules/three-js/addons/TechnicolorShader.js","webpack:///./node_modules/three-js/addons/TexturePass.js","webpack:///./node_modules/three-js/addons/ToneMapShader.js","webpack:///./node_modules/three-js/addons/TriangleBlurShader.js","webpack:///./node_modules/three-js/addons/UnpackDepthRGBAShader.js","webpack:///./node_modules/three-js/addons/VerticalBlurShader.js","webpack:///./node_modules/three-js/addons/VerticalTiltShiftShader.js","webpack:///./node_modules/three-js/addons/VignetteShader.js","webpack:///./node_modules/@babel/runtime/helpers/get.js","webpack:///./node_modules/@babel/runtime/helpers/superPropBase.js","webpack:///./node_modules/react-contenteditable/lib/react-contenteditable.js","webpack:///./node_modules/fast-deep-equal/index.js","webpack:///(webpack)/buildin/amd-define.js","webpack:///(webpack)/buildin/amd-options.js","webpack:///./node_modules/core-js/library/modules/_is-array.js","webpack:///./node_modules/three-js/index.js"],"names":["__WEBPACK_AMD_DEFINE_RESULT__","self","v1","r","min","max","matrix","quaternion","q","startP","startEnd","points","closestPoint","x","y","z","v","segCenter","segDir","diff","box","p1","p2","sphere","v0","position","scale","m1","q1","obj","context","focus","fov","aspect","near","far","eyeRight","eyeLeft","color","textureLoader","materialLoader","offsetMatrix","matrixPosition","radians","axis","vector","THREE","REVISION","undefined","Number","EPSILON","Math","pow","sign","Function","prototype","name","Object","defineProperty","get","this","toString","match","assign","target","TypeError","output","index","arguments","length","source","nextKey","hasOwnProperty","call","MOUSE","LEFT","MIDDLE","RIGHT","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","FrontSide","BackSide","DoubleSide","FlatShading","SmoothShading","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","Color","g","b","set","setRGB","constructor","value","copy","setHex","setStyle","setScalar","scalar","hex","floor","setHSL","hue2rgb","p","t","h","s","l","euclideanModulo","clamp","style","handleAlpha","string","parseFloat","console","warn","m","exec","components","parseInt","size","charAt","ColorKeywords","clone","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","sqrt","getHex","getHexString","slice","getHSL","optionalTarget","hue","saturation","hsl","lightness","delta","getStyle","offsetHSL","add","addColors","color1","color2","addScalar","sub","multiply","multiplyScalar","lerp","alpha","equals","c","fromArray","array","offset","toArray","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","Quaternion","w","_x","_y","_z","_w","onChangeCallback","setFromEuler","euler","update","Euler","Error","c1","cos","c2","c3","s1","sin","s2","s3","order","setFromAxisAngle","angle","halfAngle","setFromRotationMatrix","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","vFrom","vTo","Vector3","dot","abs","crossVectors","normalize","inverse","conjugate","lengthSq","multiplyQuaternions","premultiply","a","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","slerp","qb","cosHalfTheta","sinHalfTheta","halfTheta","atan2","ratioA","ratioB","onChange","callback","qa","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","len","tDir","f","Vector2","width","height","setX","setY","setComponent","getComponent","addVectors","addScaledVector","subVectors","subScalar","isFinite","divide","divideScalar","clampScalar","minVal","maxVal","clampLength","ceil","round","roundToZero","negate","lengthManhattan","PI","distanceTo","distanceToSquared","dx","dy","distanceToManhattan","setLength","lerpVectors","v2","fromAttribute","attribute","itemSize","rotateAround","center","setZ","multiplyVectors","applyEuler","error","applyQuaternion","applyAxisAngle","applyMatrix3","e","applyMatrix4","applyProjection","d","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","Matrix4","multiplyMatrices","projectionMatrix","getInverse","matrixWorld","unproject","transformDirection","cross","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","reflect","normal","angleTo","theta","acos","dz","setFromSpherical","sinPhiRadius","phi","radius","setFromMatrixPosition","setFromMatrixColumn","setFromMatrixScale","sx","sy","sz","temp","Vector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","xx","yy","zz","xy","xz","yz","_order","DefaultOrder","RotationOrders","asin","setFromQuaternion","makeRotationFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","Line3","start","end","line","distanceSq","distance","at","result","closestPointToPointParameter","point","clampToLine","startEnd2","closestPointToPoint","Box2","Infinity","setFromPoints","makeEmpty","i","il","expandByPoint","setFromCenterAndSize","halfSize","isEmpty","expandByVector","expandByScalar","containsPoint","containsBox","getParameter","intersectsBox","clampPoint","distanceToPoint","intersect","union","translate","Box3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromObject","object","scope","updateMatrixWorld","traverse","node","geometry","Geometry","vertices","BufferGeometry","attributes","stride","InterleavedBufferAttribute","data","intersectsSphere","intersectsPlane","plane","constant","getBoundingSphere","Sphere","Matrix3","Float32Array","n11","n12","n13","n21","n22","n23","n31","n32","n33","identity","me","setFromMatrix4","applyToVector3Array","j","applyToBuffer","buffer","getX","getY","getZ","setXYZ","determinant","throwOnDegenerate","t11","t12","t13","det","msg","detInv","transpose","tmp","flattenToArrayOffset","getNormalMatrix","matrix4","transposeIntoArray","n14","n24","n34","n41","n42","n43","n44","copyPosition","extractBasis","xAxis","yAxis","zAxis","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","x2","y2","z2","wx","wy","wz","lookAt","eye","up","n","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","multiplyToArray","getPosition","setPosition","t14","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","tx","ty","makeScale","compose","decompose","invSX","invSY","invSZ","makeFrustum","left","right","bottom","top","makePerspective","ymax","DEG2RAD","ymin","xmin","xmax","makeOrthographic","Ray","origin","direction","ray","recast","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","b1","invDet","intersectSphere","tca","d2","radius2","thc","t0","t1","distanceToPlane","denominator","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","edge1","edge2","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","Frustum","p0","p3","p4","p5","planes","Plane","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","intersectsObject","boundingSphere","computeBoundingSphere","intersectsSprite","sprite","negRadius","d1","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","orthoPoint","perpendicularMagnitude","intersectLine","intersectsLine","startSign","endSign","coplanarPoint","optionalNormalMatrix","referencePoint","normalMatrix","Spherical","other","makeSafe","vec3","RAD2DEG","generateUUID","chars","split","uuid","Array","rnd","random","join","mapLinear","a1","a2","b2","smoothstep","smootherstep","random16","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","isPowerOfTwo","nearestPowerOfTwo","log","LN2","nextPowerOfTwo","Spline","intPoint","weight","w2","w3","pa","pb","pc","pd","v3","interpolate","t2","t3","initFromArray","getPoint","k","getControlPointsArray","coords","getLength","nSubDivisions","nSamples","oldIntPoint","oldPosition","tmpVec","chunkLengths","totalLength","chunks","total","reparametrizeByArcLength","samplingCoef","indexCurrent","indexNext","realDistance","sampling","newpoints","sl","push","Triangle","resultLengthSq","barycoordFromPoint","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","setFromPointsAndIndices","i0","i1","i2","triangle","area","midpoint","edgeList","projectedPoint","minDistance","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","valueSize","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","settings","DefaultSettings_","getSettings_","copySampleValue_","values","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","create","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","DiscreteInterpolant","LinearInterpolant","offset1","offset0","weight1","weight0","QuaternionLinearInterpolant","Clock","autoStart","startTime","oldTime","elapsedTime","running","performance","Date","now","stop","getElapsedTime","getDelta","newTime","EventDispatcher","addEventListener","type","listener","_listeners","listeners","indexOf","hasEventListener","removeEventListener","listenerArray","splice","dispatchEvent","event","Layers","mask","channel","enable","toggle","disable","test","layers","ascSort","intersectObject","raycaster","intersects","recursive","visible","raycast","children","Raycaster","params","Mesh","Line","LOD","Points","threshold","Sprite","defineProperties","PointCloud","linePrecision","setFromCamera","PerspectiveCamera","OrthographicCamera","sort","intersectObjects","objects","isArray","Object3D","Object3DIdCount","parent","DefaultUp","rotation","enumerable","modelViewMatrix","matrixAutoUpdate","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","castShadow","receiveShadow","frustumCulled","renderOrder","userData","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateX","rotateY","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","remove","getObjectById","id","getObjectByProperty","getObjectByName","getWorldPosition","getWorldQuaternion","getWorldRotation","getWorldScale","getWorldDirection","traverseVisible","traverseAncestors","updateMatrix","force","toJSON","meta","isRootObject","geometries","materials","textures","images","metadata","version","generator","JSON","stringify","material","extractFromCache","cache","key","parse","child","Face3","materialIndex","vertexNormals","vertexColors","BufferAttribute","normalized","dynamic","updateRange","count","needsUpdate","setDynamic","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyIndicesArray","indices","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","getW","setXY","setXYZW","Int8Attribute","Int8Array","Uint8Attribute","Uint8Array","Uint8ClampedAttribute","Uint8ClampedArray","Int16Attribute","Int16Array","Uint16Attribute","Uint16Array","Int32Attribute","Int32Array","Uint32Attribute","Uint32Array","Float32Attribute","Float64Attribute","Float64Array","DynamicBufferAttribute","InstancedBufferAttribute","meshPerAttribute","InterleavedBuffer","InstancedInterleavedBuffer","interleavedBuffer","GeometryIdCount","faces","faceVertexUvs","morphTargets","morphNormals","skinWeights","skinIndices","lineDistances","boundingBox","elementsNeedUpdate","verticesNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","face","jl","computeBoundingBox","fromBufferGeometry","positions","normals","uvs","uv","uvs2","uv2","tempNormals","tempUVs","tempUVs2","addFace","groups","group","computeFaceNormals","cb","ab","fl","vA","vB","vC","computeVertexNormals","areaWeighted","vl","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","computeTangents","computeLineDistances","merge","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","uvCopy","mergeMesh","mesh","mergeVertices","verticesMap","unique","changes","precision","faceIndicesToRemove","idx","sortFacesByMaterialIndex","_id","newUvs1","newUvs2","parameters","vertex","normalsHash","colorsHash","uvsHash","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","enabled","hash","uvsCopy","kl","dispose","DirectGeometry","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","morphTarget","morphNormal","morphAttributes","drawRange","getIndex","setIndex","addAttribute","getAttribute","removeAttribute","addGroup","clearGroups","setDrawRange","updateFromObject","direct","__directGeometry","lineDistance","fromDirectGeometry","isNaN","pA","pB","pC","normalizeNormals","attributeArray1","attribute2","attributeArray2","toNonIndexed","geometry2","array2","MaxIndex","InstancedBufferGeometry","maxInstancedCount","instances","Uniform","onUpdate","onUpdateCallback","AnimationAction","_new","mixer","clip","localRoot","_mixer","_clip","_localRoot","tracks","nTracks","interpolants","interpolantSettings","interpolant","createInterpolant","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","loop","_loopCount","_startTime","time","timeScale","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","play","_activateAction","_deactivateAction","reset","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setLoop","mode","setEffectiveWeight","getEffectiveWeight","fadeIn","duration","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","times","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","deltaTime","timeDirection","accuIndex","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","accumulate","interpolantValue","loopCount","_setEndings","handle_stop","pingPong","loopDelta","pending","atStart","atEnd","weightNow","weightThen","AnimationClip","resetDuration","trim","optimize","track","json","jsonTracks","frameTime","fps","KeyframeTrack","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","AnimationUtils","getKeyframeOrder","sortedArray","NumberKeyframeTrack","findByName","objectOrClipArray","clipArray","o","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","parseAnimation","animation","bones","nodeName","addNonemptyTrack","trackType","trackName","animationKeys","propertyName","destTracks","flattenJSON","clipName","hierarchyTracks","hierarchy","keys","morphTargetNames","morphTargetName","animationKey","boneName","VectorKeyframeTrack","QuaternionKeyframeTrack","AnimationMixer","root","_initMemoryManager","_accuIndex","clipAction","optionalRoot","rootUuid","clipObject","clipUuid","actionsForClip","_actionsByClip","prototypeAction","existingAction","actionByRoot","knownActions","newAction","_Action","_bindAction","_addInactiveAction","stopAllAction","actions","_actions","nActions","_nActiveActions","bindings","_bindings","nBindings","_nActiveBindings","useCount","apply","uncacheClip","actionsByClip","actionsToRemove","cacheIndex","lastInactiveAction","pop","_removeInactiveBindingsForAction","uncacheRoot","_removeInactiveAction","bindingByName","_bindingsByRootAndName","binding","restoreOriginalState","_removeInactiveBinding","uncacheAction","bindingsByRoot","bindingsByName","referenceCount","_addInactiveBinding","path","parsedPath","PropertyMixer","PropertyBinding","ValueTypeName","getValueSize","_lendBinding","saveOriginalState","_lendAction","_takeBackBinding","_takeBackAction","_controlInterpolants","_nActiveControlInterpolants","stats","inUse","controlInterpolants","knownActionsForClip","lastKnownAction","byClipCacheIndex","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","propBinding","rootNode","lastInactiveBinding","remove_empty_map","_","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","AnimationObjectGroup","var_args","_objects","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","bindingsPerObject","nObjects","nCachedObjects","indicesByUUID","paths","parsedPaths","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","lastIndex","last","subscribe_","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","arraySlice","from","to","isTypedArray","subarray","convertArray","forceClone","BYTES_PER_ELEMENT","ArrayBuffer","isView","DataView","nValues","srcOffset","jsonKeys","valuePropertyName","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","validate","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","message","getInterpolation","shift","timeOffset","endTime","nKeys","valid","prevTime","currTime","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","_getTrackTypeForValueTypeName","typeName","toLowerCase","ColorKeyframeTrack","BooleanKeyframeTrack","StringKeyframeTrack","parseTrackName","findNode","getValue","targetArray","bind","setValue","sourceArray","targetObject","objectName","propertyIndex","_getValue_unavailable","_setValue_unavailable","objectIndex","skeleton","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","resolvedProperty","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","unbind","_getValue_unbound","_setValue_unbound","dest","Composite","targetGroup","optionalParsedPath","_targetGroup","firstValidIndex","re","matches","results","bone","searchSkeleton","searchNodeSubtree","childNode","subTreeNode","mixFunction","bufferType","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","currentWeight","mix","originalValueOffset","Audio","createBufferSource","onended","onEnded","gain","createGain","connect","getInput","autoplay","playbackRate","isPlaying","hasPlaybackControl","sourceType","filters","getOutput","setNodeSource","audioNode","setBuffer","audioBuffer","pause","currentTime","disconnect","getFilters","setFilters","getFilter","setFilter","filter","setPlaybackRate","getPlaybackRate","getLoop","getVolume","setVolume","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getFrequencyData","getByteFrequencyData","getAverageFrequency","window","AudioContext","webkitAudioContext","PositionalAudio","panner","createPanner","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","AudioListener","destination","removeFilter","getMasterVolume","setMasterVolume","orientation","setOrientation","Camera","matrixWorldInverse","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","options","format","magFilter","minFilter","renderTarget","WebGLRenderTargetCube","updateCubeMap","renderer","scene","generateMipmaps","texture","activeCubeFace","render","setRenderTarget","zoom","view","updateProjectionMatrix","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","cx","cy","zoomW","zoomH","scaleW","scaleH","filmGauge","filmOffset","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","skew","StereoCamera","cameraL","cameraR","eyeSepOnProjection","Light","intensity","groundColor","decay","penumbra","LightShadow","bias","mapSize","map","AmbientLight","DirectionalLight","shadow","DirectionalLightShadow","light","HemisphereLight","skyColor","PointLight","power","SpotLight","SpotLightShadow","AudioLoader","manager","DefaultLoadingManager","load","url","onLoad","onProgress","onError","loader","XHRLoader","setResponseType","decodeAudioData","Cache","files","file","clear","Loader","onLoadStart","onLoadProgress","onLoadComplete","crossOrigin","extractUrlBase","initMaterials","texturePath","createMaterial","TextureLoader","MaterialLoader","loadTexture","repeat","wrap","anisotropy","fullPath","Handlers","setCrossOrigin","wrapS","wrapT","blending","specular","emissive","shininess","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","emissiveMap","mapEmissiveRepeat","mapEmissiveOffset","mapEmissiveWrap","mapEmissiveAnisotropy","lightMap","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","aoMap","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","bumpMap","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","bumpScale","normalMap","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","normalScale","specularMap","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","metalnessMap","mapMetalnessRepeat","mapMetalnessOffset","mapMetalnessWrap","mapMetalnessAnisotropy","roughnessMap","mapRoughnessRepeat","mapRoughnessOffset","mapRoughnessWrap","mapRoughnessAnisotropy","alphaMap","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","side","opacity","transparent","setTextures","handlers","regex","cached","itemStart","setTimeout","itemEnd","request","XMLHttpRequest","overrideMimeType","open","response","status","itemError","responseType","withCredentials","send","setPath","setWithCredentials","FontLoader","text","substring","font","Font","ImageLoader","image","document","createElementNS","onload","URL","revokeObjectURL","src","blob","createObjectURL","JSONLoader","setTexturePath","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","hasMaterial","faceA","faceB","uvLayer","nUvLayers","parseModel","influencesPerVertex","parseSkin","dstVertices","srcVertices","morphColors","parseMorphing","outputAnimations","concat","morphAnimationClips","parseAnimations","LoadingManager","isLoading","itemsLoaded","itemsTotal","onStart","BufferGeometryLoader","TYPED_ARRAYS","typedArray","drawcalls","offsets","getTexture","roughness","metalness","uniforms","vertexShader","fragmentShader","shading","alphaTest","depthTest","depthWrite","colorWrite","wireframe","wireframeLinewidth","sizeAttenuation","displacementMap","displacementScale","displacementBias","emissiveIntensity","envMap","combine","reflectivity","lightMapIntensity","aoMapIntensity","ObjectLoader","lastIndexOf","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","geometryLoader","bufferGeometryLoader","widthSegments","heightSegments","depth","depthSegments","segments","thetaStart","thetaLength","radiusTop","radiusBottom","radialSegments","openEnded","phiStart","phiLength","detail","innerRadius","outerRadius","thetaSegments","phiSegments","tube","tubularSegments","arc","loadImage","parseConstant","Texture","mapping","flipY","getGeometry","getMaterial","Scene","SkinnedMesh","Group","levels","level","addLevel","isJPEG","search","CubeTextureLoader","urls","CubeTexture","loaded","DataTextureLoader","BinaryTextureLoader","_parser","DataTexture","texData","mipmaps","mipmapCount","CompressedTextureLoader","CompressedTexture","texDatas","isCubemap","Material","MaterialIdCount","fog","lights","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","clippingPlanes","clipShadows","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","premultipliedAlpha","overdraw","_needsUpdate","setValues","newValue","currentValue","isRoot","srcPlanes","dstPlanes","LineBasicMaterial","linewidth","linecap","linejoin","LineDashedMaterial","dashSize","gapSize","MeshBasicMaterial","refractionRatio","wireframeLinecap","wireframeLinejoin","skinning","MeshDepthMaterial","depthPacking","MeshLambertMaterial","MeshNormalMaterial","MeshPhongMaterial","MeshStandardMaterial","defines","STANDARD","envMapIntensity","MeshPhysicalMaterial","PHYSICAL","clearCoat","clearCoatRoughness","MultiMaterial","PointsMaterial","ShaderMaterial","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","UniformsUtils","RawShaderMaterial","SpriteMaterial","ShadowMaterial","UniformsLib","ShaderChunk","encoding","TextureIdCount","sourceFile","DEFAULT_IMAGE","DEFAULT_MAPPING","premultiplyAlpha","unpackAlignment","canvas","toDataURL","getContext","drawImage","getDataURL","transformUv","DepthTexture","CanvasTexture","VideoTexture","video","requestAnimationFrame","readyState","HAVE_CURRENT_DATA","inverseMatrix","localThreshold","localThresholdSq","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","LineSegments","precisionSq","vStart","vEnd","interSegment","interRay","step","faceIndex","nbVertices","drawMode","updateMorphTargets","setDrawMode","morphTargetBase","morphTargetInfluences","morphTargetDictionary","ml","getMorphTargetIndexByName","tempA","tempB","tempC","uvA","uvB","uvC","barycoord","intersectionPoint","intersectionPointWorld","uvIntersection","uv1","uv3","checkIntersection","checkBufferGeometryIntersection","intersection","fvA","fvB","fvC","isFaceMaterial","faceMaterial","morphInfluences","tl","influence","targets","uvs_f","Bone","skin","Skeleton","boneInverses","useVertexTexture","identityMatrix","boneTextureWidth","boneTextureHeight","boneMatrices","boneTexture","calculateInverses","bl","pose","bindMode","bindMatrix","bindMatrixInverse","gbone","pos","rotq","scl","normalizeSkinWeights","sw","vec","skinWeight","getObjectForDistance","LensFlare","lensFlares","positionScreen","customUpdateCallback","updateLensFlares","flare","vecX","vecY","wantedRotation","background","overrideMaterial","autoUpdate","Fog","FogExp2","density","merged","uniforms_src","uniforms_dst","parameter_src","common","diffuse","offsetRepeat","flipEnvMap","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","directionalLights","properties","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","spotShadowMap","spotShadowMatrix","pointLights","pointShadowMap","pointShadowMatrix","hemisphereLights","ShaderLib","basic","lambert","phong","standard","dashed","totalSize","cube","tCube","tFlip","equirect","tEquirect","distanceRGBA","lightPos","WebGLRenderer","_canvas","_context","_alpha","_depth","_stencil","stencil","_antialias","antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","opaqueObjects","opaqueObjectsLastIndex","transparentObjects","transparentObjectsLastIndex","sprites","domElement","autoClear","autoClearColor","autoClearDepth","autoClearStencil","sortObjects","localClippingEnabled","gammaInput","gammaOutput","physicallyCorrectLights","toneMapping","toneMappingExposure","toneMappingWhitePoint","maxMorphTargets","maxMorphNormals","_gl","_this","_currentProgram","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentGeometryProgram","_currentCamera","_currentScissor","_currentScissorTest","_currentViewport","_usedTextureUnits","_clearColor","_clearAlpha","_width","_height","_pixelRatio","_scissor","_scissorTest","_viewport","_frustum","_clipping","WebGLClipping","_clippingEnabled","_localClippingEnabled","_sphere","_projScreenMatrix","_vector3","_lights","ambient","directional","spot","hemi","shadows","_infoRender","calls","info","memory","programs","getShaderPrecisionFormat","rangeMin","rangeMax","onContextLost","WebGLExtensions","capabilities","WebGLCapabilities","state","WebGLState","paramThreeToGL","WebGLProperties","WebGLTextures","WebGLObjects","programCache","WebGLPrograms","lightCache","WebGLLights","bufferRenderer","WebGLBufferRenderer","indexedBufferRenderer","WebGLIndexedBufferRenderer","backgroundCamera","backgroundCamera2","backgroundPlaneMesh","PlaneBufferGeometry","backgroundBoxShader","backgroundBoxMesh","BoxBufferGeometry","getTargetPixelRatio","glClearColor","clearColor","setDefaultGLState","init","scissor","viewport","resetGLState","shadowMap","WebGLShadowMap","warned","spritePlugin","SpritePlugin","lensFlarePlugin","LensFlarePlugin","preventDefault","onMaterialDispose","releaseMaterialProgramReference","delete","deallocateMaterial","programInfo","program","releaseProgram","absNumericalSort","painterSortStable","reversePainterSortStable","pushRenderItem","renderItem","isSphereViewable","numPlanes","negRad","renderObjects","renderList","ImmediateRenderObject","setMaterial","setProgram","renderBufferImmediate","renderBufferDirect","CULL_FACE","setFlipSided","setBlending","setDepthFunc","setDepthTest","setDepthWrite","setColorWrite","setPolygonOffset","materialProperties","useCache","setState","numClippingPlanes","lightsHash","getParameters","code","getProgramCode","programChange","shaderID","shader","__webglShader","acquireProgram","getAttributes","numSupportedMorphTargets","numSupportedMorphNormals","uniform","progUniforms","getUniforms","uniformsList","WebGLUniforms","seqWithValue","seq","dynamicUniforms","splitDynamic","initMaterial","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","useProgram","logarithmicDepthBuffer","uCamPos","cameraPosition","setOptional","floatVertexTextures","refreshUniformsFog","uvScaleMap","WebGLRenderTarget","refreshUniformsCommon","refreshUniformsLine","refreshUniformsDash","clientHeight","refreshUniformsPoints","refreshUniformsLambert","refreshUniformsPhong","refreshUniformsStandard","refreshUniformsPhysical","upload","dynUniforms","evalDynamic","extension","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","NEAREST","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UNSIGNED_BYTE","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","HALF_FLOAT_OES","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","DEPTH_COMPONENT","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","MIN_EXT","MAX_EXT","getContextAttributes","forceContextLoss","loseContext","getMaxAnisotropy","getPrecision","getPixelRatio","setPixelRatio","setSize","getSize","updateStyle","setViewport","setScissor","setScissorTest","boolean","getClearColor","setClearColor","getClearAlpha","setClearAlpha","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearDepth","clearStencil","clearTarget","initAttributes","buffers","hasPositions","createBuffer","hasNormals","hasUvs","hasColors","bindBuffer","ARRAY_BUFFER","bufferData","positionArray","DYNAMIC_DRAW","enableAttribute","vertexAttribPointer","normalArray","nx","ny","nz","uvArray","colorArray","disableUnusedAttributes","drawArrays","TRIANGLES","updateBuffers","geometryProgram","activeInfluences","getWireframeAttribute","startIndex","geometryAttributes","programAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","getAttributeBuffer","enableAttributeAndDivisor","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","ELEMENT_ARRAY_BUFFER","dataCount","rangeStart","rangeCount","groupStart","groupCount","drawStart","drawEnd","drawCount","setLineWidth","setMode","LINES","TRIANGLE_STRIP","TRIANGLE_FAN","lineWidth","LINE_STRIP","POINTS","renderInstances","forceClear","projectObject","isObjectViewable","groupMaterial","beginShadows","lightShadowsLength","setupShadows","ll","viewMatrix","directionalLength","pointLength","spotLength","hemiLength","setupLights","endShadows","updateRenderTargetMipmap","setFaceCulling","cullFace","frontFaceDirection","setCullFace","allocTextureUnit","textureUnit","maxTextures","setTexture2D","slot","setTexture","setTextureCube","setTextureCubeDynamic","getCurrentRenderTarget","__webglFramebuffer","setupRenderTarget","framebuffer","isCube","renderTargetProperties","scissorTest","bindFramebuffer","FRAMEBUFFER","textureProperties","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_CUBE_MAP_POSITIVE_X","__webglTexture","activeMipMapLevel","readRenderTargetPixels","restore","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","depthBuffer","stencilBuffer","depthTexture","drawArraysInstancedANGLE","globalState","numGlobalPlanes","renderingShadows","viewNormalMatrix","resetGlobalState","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","i4","enableLocalClipping","fromCache","nGlobal","lGlobal","clippingState","drawElements","drawElementsInstancedANGLE","gl","getExtension","maxAnisotropy","getMaxPrecision","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","MAX_TEXTURE_MAX_ANISOTROPY_EXT","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","_maxPrecision","WebGLGeometries","onGeometryDispose","buffergeometry","deleteAttribute","deleteAttributes","property","bufferproperty","__webglBuffer","deleteBuffer","removeAttributeBuffer","_bufferGeometry","updateAttribute","attributeProperties","usage","STATIC_DRAW","bufferSubData","updateBuffer","checkEdge","edges","list","TypeArray","WebGLProgram","programIdCount","getEncodingComponents","getTexelDecodingFunction","functionName","getToneMappingFunction","toneMappingName","filterEmptyLine","replaceLightNums","replace","numDirLights","numSpotLights","numPointLights","numHemiLights","parseIncludes","include","unrollLoops","snippet","unroll","shadowMapTypeDefine","shadowMapType","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","prefixVertex","prefixFragment","gammaFactorDefine","customExtensions","rendererExtensions","envMapCubeUV","flatShading","generateExtensions","customDefines","generateDefines","createProgram","supportsVertexTextures","maxBones","doubleSided","flipSided","shadowMapEnabled","useFog","fogExp","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","vertexGlsl","fragmentGlsl","glVertexShader","WebGLShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","cachedUniforms","cachedAttributes","programLog","getProgramInfoLog","vertexLog","getShaderInfoLog","fragmentLog","runnable","haveDiagnostics","getProgramParameter","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","prefix","deleteShader","identifiers","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","fetchAttributeLocations","destroy","deleteProgram","usedTimes","shaderIDs","parameterNames","getTextureEncodingFromMap","gammaOverrideLinear","nClipPlanes","nVertexUniforms","allocateBones","currentRenderTarget","envMapMode","pl","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","lines","addLineNumbers","_renderer","_state","_lightShadows","_shadowMapSize","_maxShadowMapSize","_lookTarget","_lightPositionWorld","_renderList","_MorphingFlag","_SkinningFlag","_NumberOfMaterialVariants","_depthMaterials","_distanceMaterials","_materialCache","cubeDirections","cubeUps","cube2DViewPorts","depthMaterialTemplate","distanceShader","distanceUniforms","useMorphing","useSkinning","depthMaterial","distanceMaterial","USE_SHADOWMAP","getDepthMaterial","isPointLight","lightPositionWorld","materialVariants","customMaterial","customDepthMaterial","customDistanceMaterial","variantIndex","keyA","keyB","materialsForVariant","cachedMaterial","renderSingleSided","renderReverseSided","shadowCamera","faceCount","BLEND","vpWidth","vpHeight","pars","shadowMatrix","vpDimensions","clearAlpha","WebGLColorBuffer","WebGLDepthBuffer","WebGLStencilBuffer","maxVertexAttributes","newAttributes","enabledAttributes","attributeDivisors","compressedTextureFormats","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","currentScissorTest","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","createTexture","bindTexture","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","texImage2D","emptyTextures","TEXTURE_2D","TEXTURE_CUBE_MAP","DEPTH_TEST","enableVertexAttribArray","vertexAttribDivisorANGLE","disableVertexAttribArray","getCompressedTextureFormats","formats","COMPRESSED_TEXTURE_FORMATS","blendEquationSeparate","blendFuncSeparate","blendFunc","setMask","setTest","setFunc","setStencilTest","stencilTest","setStencilWrite","stencilWrite","setStencilFunc","stencilFunc","stencilRef","stencilMask","setStencilOp","stencilFail","stencilZFail","stencilZPass","setOp","frontFace","CW","CCW","BACK","FRONT","FRONT_AND_BACK","factor","units","POLYGON_OFFSET_FILL","getScissorTest","SCISSOR_TEST","activeTexture","webglSlot","TEXTURE0","webglType","webglTexture","boundTexture","compressedTexImage2D","setClear","locked","currentColorMask","currentColorClear","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","STENCIL_TEST","stencilOp","_infoMemory","_isWebGL2","WebGL2RenderingContext","clampToMaxSize","maxSize","filterFallback","onTextureDispose","__image__webglTextureCube","deleteTexture","__webglInit","deallocateTexture","onRenderTargetDispose","deleteFramebuffer","__webglDepthbuffer","deleteRenderbuffer","deallocateRenderTarget","__version","complete","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","textureNeedsPowerOfTwo","HTMLImageElement","HTMLCanvasElement","makePowerOfTwo","isPowerOfTwoImage","glFormat","glType","setTextureParameters","mipmap","internalFormat","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","generateMipmap","uploadTexture","textureType","TEXTURE_WRAP_S","TEXTURE_WRAP_T","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","setupFrameBufferTexture","attachment","textureTarget","setupRenderBufferStorage","renderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","RGBA4","setupDepthRenderbuffer","webglDepthTexture","setupDepthTexture","createRenderbuffer","isCompressed","isDataTexture","cubeImage","isTargetPowerOfTwo","createFramebuffer","emptyTexture","emptyCubeTexture","UniformContainer","arrayCacheF32","arrayCacheI32","flatten","nBlocks","blockSize","firstElem","allocTexUnits","setValue1f","uniform1f","addr","setValue1i","uniform1i","setValue2fv","uniform2fv","uniform2f","setValue3fv","uniform3f","uniform3fv","setValue4fv","uniform4fv","uniform4f","setValue2fm","uniformMatrix2fv","setValue3fm","uniformMatrix3fv","setValue4fm","uniformMatrix4fv","setValueT1","unit","setValueT6","setValue2iv","uniform2iv","setValue3iv","uniform3iv","setValue4iv","uniform4iv","setValue1fv","uniform1fv","setValue1iv","uniform1iv","setValueV2a","setValueV3a","setValueV4a","setValueM2a","setValueM3a","setValueM4a","setValueT1a","setValueT6a","SingleUniform","activeInfo","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","RePathPart","addUniform","container","uniformObject","parseUniform","pathLength","matchEnd","idIsIndex","subscript","next","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","flares","vertexBuffer","elementBuffer","tempTexture","occlusionTexture","renderType","occlusionMap","screenPosition","tempPosition","invAspect","halfViewportWidth","halfViewportHeight","screenPositionPixels","validArea","TEXTURE1","copyTexImage2D","spritePosition","spriteRotation","spriteScale","uvOffset","uvScale","fogType","fillStyle","fillRect","oldFogType","sceneFogType","Face4","LineStrip","LinePieces","MeshFaceMaterial","Particle","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","isIntersectionBox","isIntersectionSphere","multiplyVector3","multiplyVector3Array","extractPosition","multiplyVector4","rotateAxis","crossVector","rotateByAxis","isIntersectionLine","isIntersectionPlane","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","getChildByName","renderDepth","eulerOrder","useQuaternion","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraNear","shadowCameraFar","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","addIndex","addDrawCall","indexOffset","clearDrawCalls","computeOffsets","wrapAround","wrapRGB","metal","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","shadowMapCullFace","getData","GeometryUtils","geometry1","ImageUtils","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","Projector","projectVector","unprojectVector","pickingRay","CanvasRenderer","CurveUtils","tangentQuadraticBezier","tangentCubicBezier","tangentSpline","SceneUtils","createMultiMaterialObject","detach","attach","ShapeUtils","contour","triangulate","snip","verts","px","py","aX","aY","bX","bY","cX","cY","cCROSSap","bCROSScp","vertIndices","nv","triangulateShape","holes","removeDupEndPts","point_in_segment_2D_colin","inSegPt1","inSegPt2","inOtherPt","intersect_segments_2D","inSeg1Pt1","inSeg1Pt2","inSeg2Pt1","inSeg2Pt2","inExcludeAdjacentSegs","seg1dx","seg1dy","seg2dx","seg2dy","seg1seg2dx","seg1seg2dy","limit","perpSeg1","perpSeg2","factorSeg1","seg1min","seg1max","seg1minVal","seg1maxVal","seg2min","seg2max","seg2minVal","seg2maxVal","seg1Pt","seg2Pt","isPointInsideAngle","inVertex","inLegFromPt","inLegToPt","legFromPtX","legFromPtY","legToPtX","legToPtY","otherPtX","otherPtY","from2toAngle","from2otherAngle","other2toAngle","forEach","allPointsMap","allpoints","hl","shapeWithoutHoles","hole","shape","isCutLineInsideAngles","inShapeIdx","inHoleIdx","lastShapeIdx","prevShapeIdx","nextShapeIdx","insideAngle","lastHoleIdx","prevHoleIdx","nextHoleIdx","intersectsShapeEdge","inShapePt","inHolePt","sIdx","nextIdx","indepHoles","intersectsHoleEdge","ihIdx","chkHole","hIdx","holeIndex","shapeIndex","shapePt","holePt","holeIdx","cutKey","tmpShape1","tmpShape2","tmpHole1","tmpHole2","failedCuts","minShapeIndex","counter","h2","removeHoles","triangles","isClockWise","pts","b2p0","b2p1","b2p2","b3","b3p0","b3p1","b3p2","b3p3","Curve","getPointAt","getUtoTmapping","getPoints","divisions","getSpacedPoints","lengths","getLengths","cacheArcLengths","current","sum","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","pt1","getTangentAt","getPointFunc","CurvePath","curves","autoClose","curve","closePath","startPoint","endPoint","LineCurve","curveLengths","getCurveLengths","segmentLength","lens","cacheLengths","sums","resolution","EllipseCurve","SplineCurve","createPointsGeometry","createGeometry","createSpacedPointsGeometry","generateShapes","createPath","glyph","glyphs","cpx","cpy","cpx0","cpy0","cpx1","cpy1","cpx2","cpy2","laste","ShapePath","outline","_cachedOutline","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","ha","String","ret","createPaths","shapes","toShapes","Path","currentPoint","fromPoints","aCPx","aCPy","QuadraticBezierCurve","aCP1x","aCP1y","aCP2x","aCP2y","CubicBezierCurve","splineThru","npts","aRadius","aStartAngle","aEndAngle","aClockwise","absarc","absellipse","ellipse","xRadius","yRadius","aRotation","firstPoint","lastPoint","subPaths","currentPath","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","Shape","isPointInsidePolygon","inPt","inPolygon","polyLen","inside","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sLen","sho","ho","hole_unassigned","s2Idx","froms","tos","extrude","ExtrudeGeometry","makeGeometry","ShapeGeometry","getPointsHoles","holesPts","extractAllPoints","extractPoints","point0","point1","point2","point3","twoPi","deltaAngle","samePoints","ArcCurve","LineCurve3","QuadraticBezierCurve3","CubicBezierCurve3","SplineCurve3","CatmullRomCurve3","CubicPoly","pz","c0","initNonuniformCatmullRom","x3","dt0","dt1","dt2","initCatmullRom","tension","calc","closed","ClosedSplineCurve3","BoxGeometry","CubeGeometry","vertexCount","calculateVertexCount","indexCount","vertexBufferOffset","uvBufferOffset","indexBufferOffset","numberOfVertices","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","CircleGeometry","CircleBufferGeometry","ii","segment","CylinderBufferGeometry","nbCap","calculateIndexCount","indexArray","halfHeight","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","tanTheta","indexRow","i3","generateTorso","CylinderGeometry","ConeBufferGeometry","ConeGeometry","EdgesGeometry","thresholdAngle","thresholdDot","edge","sortFunction","vert1","vert2","face1","face2","addShapeList","addShape","extrudePts","splineTube","binormal","position2","ahole","amount","bevelThickness","bevelSize","bevelSegments","bevelEnabled","curveSegments","steps","extrudePath","extrudeByPath","uvgen","UVGenerator","WorldUVGenerator","frames","TubeGeometry","FrenetFrames","shapesOffset","shapePoints","reverse","scalePt2","pt","bs","vert","vlen","flen","getBevelVec","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","binormals","sidewalls","layeroffset","slen1","slen2","f4","f3","generateTopUV","wallContour","stepIndex","stepsLength","contourIndex1","contourIndex2","generateSideWallUV","layer","buildLidFaces","buildSideFaces","indexA","indexB","indexC","indexD","LatheBufferGeometry","base","inverseSegments","n1","n2","LatheGeometry","PlaneGeometry","width_half","height_half","segment_width","segment_height","offset2","RingBufferGeometry","radiusStep","thetaSegmentLevel","RingGeometry","SphereGeometry","SphereBufferGeometry","thetaEnd","verticesRow","v4","TextGeometry","TorusBufferGeometry","TorusGeometry","TorusKnotBufferGeometry","P1","P2","B","T","N","calculatePositionOnCurve","cu","su","quOverP","cs","TorusKnotGeometry","heightScale","taper","NoTaper","ip","jp","uva","uvb","uvc","uvd","grid","numpoints","pos2","tangents","SinusoidalTaper","smallest","tz","mat","MAX_VALUE","initialNormal3","PolyhedronGeometry","that","prepare","centroid","subdivide","azimuth","inclination","make","azi","correctUV","cols","aj","bj","rows","DodecahedronGeometry","IcosahedronGeometry","OctahedronGeometry","TetrahedronGeometry","ParametricGeometry","func","slices","stacks","sliceCount","WireframeGeometry","numEdges","ol","numTris","AxisHelper","ArrowHelper","lineGeometry","coneGeometry","headLength","headWidth","cone","setDirection","setColor","BoxHelper","BoundingBoxHelper","CameraHelper","pointMap","addLine","addPoint","setPoint","DirectionalLightHelper","lightPlane","targetLine","EdgesHelper","FaceNormalsHelper","nNormals","objGeometry","GridHelper","setColors","HemisphereLightHelper","sphereSize","lightSphere","PointLightHelper","SkeletonHelper","getBoneList","boneList","matrixWorldInv","boneMatrix","SpotLightHelper","vector2","coneLength","coneWidth","VertexNormalsHelper","objPos","objNorm","WireframeHelper","renderCallback","MorphBlendMesh","animationsMap","animationsList","numFrames","endFrame","createAnimation","setAnimationWeight","lastFrame","currentFrame","active","directionBackwards","mirroredLoop","autoCreateAnimations","firstAnimation","frameRanges","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","playAnimation","stopAnimation","keyframe","__webpack_require__","exports","module","AdaptiveToneMappingPass","adaptive","needsInit","luminanceRT","previousLuminanceRT","currentLuminanceRT","CopyShader","copyShader","copyUniforms","materialCopy","LuminosityShader","materialLuminance","adaptLuminanceShader","MIP_LEVEL_1X1","toFixed","lastLum","currentLum","tau","materialAdaptiveLum","ToneMapShader","materialToneMap","needsSwap","quad","writeBuffer","readBuffer","maskActive","tDiffuse","luminanceMap","setAdaptive","setAdaptionRate","rate","setMaxLuminance","maxLum","maxLuminance","setAverageLuminance","avgLum","averageLuminance","setMiddleGrey","middleGrey","BasicShader","BleachBypassShader","BlendShader","tDiffuse1","tDiffuse2","mixRatio","BloomPass","strength","kernelSize","sigma","renderTargetX","renderTargetY","ConvolutionShader","convolutionShader","convolutionUniforms","blurX","buildKernel","materialConvolution","KERNEL_SIZE_FLOAT","KERNEL_SIZE_INT","blurY","BokehPass","aperture","maxblur","innerWidth","innerHeight","renderTargetColor","renderTargetDepth","materialDepth","BokehShader","bokehShader","bokehUniforms","materialBokeh","renderToScreen","camera2","scene2","quad2","tColor","tDepth","textureWidth","textureHeight","focalDepth","fstop","showFocus","manualdof","vignetting","depthblur","fringe","znear","zfar","noise","dithering","pentagon","shaderFocus","focusCoords","BrightnessContrastShader","brightness","contrast","SpriteCanvasMaterial","_renderData","_elements","_v1","_v2","_v3","_v1x","_v1y","_v2x","_v2y","_v3x","_v3y","_uvs","_uv1x","_uv1y","_uv2x","_uv2y","_uv3x","_uv3y","_projector","createElement","_canvasWidth","_canvasHeight","_canvasWidthHalf","_canvasHeightHalf","_viewportX","_viewportY","_viewportWidth","_viewportHeight","_contextGlobalAlpha","_contextGlobalCompositeOperation","_contextStrokeStyle","_contextFillStyle","_contextLineWidth","_contextLineCap","_contextLineJoin","_contextLineDash","_color","RenderableVertex","_diffuseColor","_emissiveColor","_lightColor","_patterns","_clipBox","_clearBox","_elemBox","_ambientLight","_directionalLights","_pointLights","_centroid","_normal","_normalViewMatrix","renderSprite","element","setOpacity","dist","textureToPattern","setFillStyle","bitmap","ox","oy","save","rotate","setStrokeStyle","renderLine","beginPath","setLineCap","setLineJoin","colorStyle1","colorStyle2","grad","createLinearGradient","addColorStop","exception","stroke","setLineDash","renderFace3","positionWorld","lightPosition","calculateLight","normalModel","strokePath","fillPath","patternPath","vertexNormalsModel","fill","setTransform","repeatX","repeatY","createPattern","u0","u1","u2","idet","transform","expand","pixels","globalAlpha","globalCompositeOperation","lineCap","lineJoin","strokeStyle","sortElements","setClearColorHex","clearRect","projectScene","lightColor","calculateLights","el","RenderableSprite","RenderableLine","RenderableFace","ColorCorrectionShader","powRGB","mulRGB","addRGB","ColorifyShader","uImageIncrement","cKernel","gauss","exp","halfWidth","DDSLoader","loadMipmaps","dds","fourCCToInt32","charCodeAt","loadARGBMip","dataOffset","dataLength","srcBuffer","byteArray","blockBytes","FOURCC_DXT1","FOURCC_DXT3","FOURCC_DXT5","FOURCC_ETC1","header","fourCC","isRGBAUncompressed","fromCharCode","caps2","DOFMipMapShader","DigitalGlitch","tDisp","byp","seed","seed_x","seed_y","distortion_x","distortion_y","col_s","DotScreenPass","DotScreenShader","tSize","EdgeShader","EdgeShader2","EffectComposer","pixelRatio","renderTarget1","renderTarget2","passes","copyPass","ShaderPass","swapBuffers","addPass","pass","insertPass","MaskPass","ClearMaskPass","FXAAShader","FilmPass","noiseIntensity","scanlinesIntensity","scanlinesCount","grayscale","FilmShader","nIntensity","sIntensity","sCount","FocusShader","screenWidth","screenHeight","sampleDistance","waveFactor","FresnelShader","mRefractionRatio","mFresnelBias","mFresnelPower","mFresnelScale","GammaCorrectionShader","GlitchPass","dt_size","generateHeightmap","goWild","curF","generateTrigger","randX","data_arr","val","HorizontalBlurShader","HorizontalTiltShiftShader","HueSaturationShader","statusDomElement","_statusDomElement","KaleidoShader","sides","MTLLoader","setBaseUrl","baseUrl","setMaterialOptions","materialOptions","delimiter_pattern","materialsInfo","ss","materialCreator","MaterialCreator","setManager","setMaterials","materialsArray","nameLookup","convert","converted","mn","covmat","prop","lprop","normalizeRGB","ignoreZeroRGBs","preload","materialName","getAsArray","createMaterial_","MarchingCubes","enableUvs","enableColors","isolation","size2","size3","halfsize","yd","zd","field","normal_cache","vlist","nlist","maxCount","VIntX","pout","nout","isol","valp1","valp2","mu","nc","VIntY","q2","VIntZ","compNorm","q3","polygonize","fx","fy","fz","q1y","q1z","qyz","q1yz","cubeindex","field0","field1","field2","field3","field4","field5","field6","field7","edgeTable","fx2","fy2","fz2","o2","o3","numtris","triTable","posnormtriv","norm","begin","addBall","ballx","bally","ballz","subtract","zs","ys","xs","min_z","max_z","min_y","max_y","min_x","y_offset","z_offset","max_x","addPlaneX","xdiv","cxy","addPlaneY","ydiv","addPlaneZ","zdiv","cz","cyz","smin2","generateGeometry","geo","na","nb","nfaces","writeValue","clearValue","REPLACE","KEEP","MirrorShader","NormalMapShader","heightMap","OBJLoader","foundObjects","addObject","smooth","parseVertexIndex","parseNormalIndex","parseUVIndex","addVertex","addNormal","addUV","ua","ub","uc","ud","nd","ia","ib","ic","vertex_pattern","normal_pattern","uv_pattern","face_pattern1","face_pattern2","face_pattern3","face_pattern4","object_pattern","smoothing_pattern","timeEnd","varying","vUV","u_input","u_transformSize","u_subtransformSize","u_wind","u_resolution","u_size","u_phases","u_deltaTime","u_choppiness","u_initialSpectrum","u_displacementMap","u_normalMap","u_geometrySize","u_projectionMatrix","u_viewMatrix","u_cameraPosition","u_skyColor","u_oceanColor","u_sunDirection","u_exposure","vPos","OrbitControls","quat","quatInverse","lastPosition","lastQuaternion","minZoom","maxZoom","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","UP","BOTTOM","mouseButtons","ORBIT","ZOOM","PAN","target0","position0","zoom0","getPolarAngle","spherical","getAzimuthalAngle","changeEvent","STATE","NONE","rotateLeft","sphericalDelta","panOffset","zoomChanged","EPS","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","onKeyDown","startEvent","endEvent","ROTATE","DOLLY","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","rotateUp","panLeft","objectMatrix","panUp","pan","deltaX","deltaY","body","targetDistance","clientWidth","dollyIn","dollyScale","dollyOut","button","clientX","clientY","handleMouseDownRotate","handleMouseDownDolly","handleMouseDownPan","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","stopPropagation","wheelDelta","handleMouseWheel","keyCode","handleKeyDown","touches","pageX","pageY","handleTouchStartRotate","handleTouchStartDolly","handleTouchStartPan","handleTouchMoveRotate","handleTouchMoveDolly","handleTouchMovePan","noZoom","noRotate","noPan","noKeys","staticMoving","dynamicDampingFactor","ParallaxShader","modes","none","steep","occlusion","relief","parallaxScale","parallaxMinLayers","parallaxMaxLayers","RenderableObject","vertexNormalsLength","_object","_objectCount","_vertex","_vertexCount","_face","_faceCount","_line","_lineCount","_sprite","_spriteCount","_modelMatrix","_objectPool","_objectPoolLength","_vertexPool","_vertexPoolLength","_facePool","_facePoolLength","_linePool","_linePoolLength","_spritePool","_spritePoolLength","_vector4","_boundingBox","_points3","_viewMatrix","_viewProjectionMatrix","_modelViewProjectionMatrix","_normalMatrix","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVertex","invW","checkTriangleVisibility","checkBackfaceCulling","setObject","pushVertex","getNextVertexInPool","pushNormal","pushUv","pushLine","getNextLineInPool","pushTriangle","getNextFaceInPool","getNextSpriteInPool","painterSort","clipLine","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","getNextObjectInPool","objectMaterials","targetVertex","nl","RGBShiftShader","RenderPass","oldClearColor","oldClearAlpha","SSAOShader","cameraNear","cameraFar","onlyAO","aoClamp","lumInfluence","SVGLoader","parser","DOMParser","svgString","doc","parseFromString","documentElement","SavePass","textureID","renderTargetParameters","SepiaShader","TechnicolorShader","TexturePass","TriangleBlurShader","UnpackDepthRGBAShader","VerticalBlurShader","VerticalTiltShiftShader","VignetteShader","darkness","superPropBase","_get","receiver","Reflect","desc","getOwnPropertyDescriptor","getPrototypeOf","extendStatics","__extends","setPrototypeOf","__proto__","__","__assign","__rest","getOwnPropertySymbols","propertyIsEnumerable","__importStar","mod","__esModule","__importDefault","default","React","fast_deep_equal_1","PropTypes","normalizeHtml","str","replaceCaret","findLastTextNode","nodeType","Node","TEXT_NODE","childNodes","textNode","isTargetFocused","activeElement","nodeValue","sel","getSelection","createRange","setStart","collapse","removeAllRanges","addRange","HTMLElement","ContentEditable","_super","lastHtml","props","html","innerRef","createRef","getEl","emitChange","originalEvt","innerHTML","evt","_a","tagName","ref","onInput","onBlur","onKeyUp","contentEditable","disabled","dangerouslySetInnerHTML","__html","shouldComponentUpdate","nextProps","className","componentDidUpdate","propTypes","isRequired","bool","oneOfType","Component","keyList","hasProp","equal","arrA","arrB","dateA","dateB","getTime","regexpA","RegExp","regexpB","__webpack_amd_options__","cof","arg","addons","addonIndex","addon"],"mappings":"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AAAC,EAAA/D,IAEA6D,EAAA79F,MAAAxP,KAAAuQ,GAIA5nB,GAAA6kH,EACAniH,EAAAyhB,MAAA,IAQAugG,GAIA7nI,KAAAy2E,KAAAi+B,IAIAx1G,EAAAyjI,cAAAhjI,UAAAE,OAAA+9B,OAAA1+B,EAAAo5E,sBAAA34E,WACAT,EAAAyjI,cAAAhjI,UAAAqJ,YAAA9J,EAAAyjI,cAWAzjI,EAAAqmI,UAAA,IAAAp8F,WAAA,CACA,kCACA,wCACA,oCACA,wCACA,mCACA,wCACA,oCACA,wCACA,oCACA,wCACA,qCACA,wCACA,mCACA,wCACA,oCACA,wCACA,wCACA,oCACA,wCACA,mCACA,wCACA,qCACA,wCACA,oCACA,wCACA,oCACA,wCACA,mCACA,wCACA,oCACA,wCACA,oCAEAjqC,EAAA4mI,SAAA,IAAA38F,WAAA,EACA,+CACA,6CACA,6CACA,0CACA,8CACA,2CACA,2CACA,yCACA,8CACA,4CACA,2CACA,0CACA,6CACA,2CACA,0CACA,6CACA,6CACA,0CACA,0CACA,uCACA,2CACA,wCACA,wCACA,qCACA,2CACA,yCACA,wCACA,uCACA,0CACA,wCACA,wCACA,2CACA,6CACA,0CACA,0CACA,uCACA,2CACA,wCACA,wCACA,qCACA,2CACA,yCACA,wCACA,qCACA,0CACA,uCACA,wCACA,0CACA,0CACA,uCACA,uCACA,0CACA,wCACA,qCACA,qCACA,wCACA,wCACA,qCACA,qCACA,yCACA,uCACA,qCACA,qCACA,6CACA,8CACA,2CACA,2CACA,wCACA,0CACA,uCACA,uCACA,oCACA,4CACA,0CACA,yCACA,uCACA,wCACA,uCACA,qCACA,yCACA,2CACA,wCACA,wCACA,qCACA,uCACA,oCACA,oCACA,iCACA,yCACA,sCACA,sCACA,qCACA,sCACA,sCACA,kCACA,sCACA,4CACA,yCACA,yCACA,qCACA,uCACA,oCACA,0CACA,uCACA,0CACA,uCACA,sCACA,oCACA,qCACA,mCACA,wCACA,2CACA,0CACA,uCACA,sCACA,yCACA,oCACA,iCACA,uCACA,0CACA,uCACA,oCACA,oCACA,uCACA,kCACA,2CACA,sCACA,8CACA,8CACA,2CACA,2CACA,wCACA,4CACA,yCACA,yCACA,wCACA,0CACA,uCACA,uCACA,oCACA,yCACA,sCACA,uCACA,0CACA,2CACA,wCACA,wCACA,qCACA,yCACA,uCACA,uCACA,oCACA,uCACA,0CACA,oCACA,uCACA,qCACA,yCACA,mCACA,4CACA,2CACA,wCACA,wCACA,qCACA,yCACA,sCACA,uCACA,mCACA,uCACA,oCACA,oCACA,iCACA,qCACA,kCACA,sCACA,wCACA,yCACA,qCACA,uCACA,wCACA,wCACA,oCACA,oCACA,uCACA,oCACA,uCACA,iCACA,0CACA,kCACA,sCACA,2CACA,8CACA,6CACA,0CACA,0CACA,uCACA,yCACA,qCACA,qCACA,kCACA,wCACA,qCACA,sCACA,kCACA,0CACA,uCACA,uCACA,0CACA,0CACA,wCACA,wCACA,qCACA,qCACA,sCACA,mCACA,2CACA,qCACA,wCACA,mCACA,qCACA,uCACA,0CACA,oCACA,6CACA,2CACA,uCACA,wCACA,qCACA,uCACA,oCACA,yCACA,sCACA,qCACA,mCACA,sCACA,2CACA,uCACA,oCACA,0CACA,6CACA,6CACA,0CACA,2CACA,6CACA,0CACA,sCACA,4CACA,8CACA,yCACA,2CACA,sCACA,8CACA,0CACA,6CACA,8CACA,sECliCA6kF,EAAAD,QAAA,SAAA7uH,GAMAA,EAAAw/H,SAAA,SAAAzvE,EAAAvvC,GAEA1f,KAAAivD,QACAjvD,KAAA0f,SAEA1f,KAAA4vC,SAAA,EACA5vC,KAAAwzD,OAAA,EACAxzD,KAAAsvH,WAAA,EAEAtvH,KAAAmZ,SAAA,GAIAja,EAAAw/H,SAAA/+H,UAAA,CAEA0vD,OAAA,SAAAL,EAAAwgE,EAAAC,EAAAzjH,GAEA,IASAi8H,EAAAC,EATAhqI,EAAA8wD,EAAA9wD,QAIAA,EAAAs8F,WAAA,YACAt8F,EAAA48F,WAAA,GAMA96F,KAAAmZ,SAEA8uH,EAAA,EACAC,EAAA,IAIAD,EAAA,EACAC,EAA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","file":"28.js","sourcesContent":["(function( self ){\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar THREE = { REVISION: '79' };\n\n\t// Polyfills\n\n\tif ( Number.EPSILON === undefined ) {\n\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n\t}\n\n\t//\n\n\tif ( Math.sign === undefined ) {\n\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\t\tMath.sign = function ( x ) {\n\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t\t};\n\n\t}\n\n\tif ( Function.prototype.name === undefined ) {\n\n\t\t// Missing in IE9-11.\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\t\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tif ( Object.assign === undefined ) {\n\n\t\t// Missing in IE.\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t\t( function () {\n\n\t\t\tObject.assign = function ( target ) {\n\n\t\t\t\t'use strict';\n\n\t\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t\t}\n\n\t\t\t\tvar output = Object( target );\n\n\t\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn output;\n\n\t\t\t};\n\n\t\t} )();\n\n\t}\n\n\t//\n\n\tObject.assign( THREE, {\n\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button\n\n\t\tMOUSE: { LEFT: 0, MIDDLE: 1, RIGHT: 2 },\n\n\t\t// GL STATE CONSTANTS\n\n\t\tCullFaceNone: 0,\n\t\tCullFaceBack: 1,\n\t\tCullFaceFront: 2,\n\t\tCullFaceFrontBack: 3,\n\n\t\tFrontFaceDirectionCW: 0,\n\t\tFrontFaceDirectionCCW: 1,\n\n\t\t// SHADOWING TYPES\n\n\t\tBasicShadowMap: 0,\n\t\tPCFShadowMap: 1,\n\t\tPCFSoftShadowMap: 2,\n\n\t\t// MATERIAL CONSTANTS\n\n\t\t// side\n\n\t\tFrontSide: 0,\n\t\tBackSide: 1,\n\t\tDoubleSide: 2,\n\n\t\t// shading\n\n\t\tFlatShading: 1,\n\t\tSmoothShading: 2,\n\n\t\t// colors\n\n\t\tNoColors: 0,\n\t\tFaceColors: 1,\n\t\tVertexColors: 2,\n\n\t\t// blending modes\n\n\t\tNoBlending: 0,\n\t\tNormalBlending: 1,\n\t\tAdditiveBlending: 2,\n\t\tSubtractiveBlending: 3,\n\t\tMultiplyBlending: 4,\n\t\tCustomBlending: 5,\n\n\t\t// custom blending equations\n\t\t// (numbers start from 100 not to clash with other\n\t\t// mappings to OpenGL constants defined in Texture.js)\n\n\t\tAddEquation: 100,\n\t\tSubtractEquation: 101,\n\t\tReverseSubtractEquation: 102,\n\t\tMinEquation: 103,\n\t\tMaxEquation: 104,\n\n\t\t// custom blending destination factors\n\n\t\tZeroFactor: 200,\n\t\tOneFactor: 201,\n\t\tSrcColorFactor: 202,\n\t\tOneMinusSrcColorFactor: 203,\n\t\tSrcAlphaFactor: 204,\n\t\tOneMinusSrcAlphaFactor: 205,\n\t\tDstAlphaFactor: 206,\n\t\tOneMinusDstAlphaFactor: 207,\n\n\t\t// custom blending source factors\n\n\t\t//ZeroFactor: 200,\n\t\t//OneFactor: 201,\n\t\t//SrcAlphaFactor: 204,\n\t\t//OneMinusSrcAlphaFactor: 205,\n\t\t//DstAlphaFactor: 206,\n\t\t//OneMinusDstAlphaFactor: 207,\n\t\tDstColorFactor: 208,\n\t\tOneMinusDstColorFactor: 209,\n\t\tSrcAlphaSaturateFactor: 210,\n\n\t\t// depth modes\n\n\t\tNeverDepth: 0,\n\t\tAlwaysDepth: 1,\n\t\tLessDepth: 2,\n\t\tLessEqualDepth: 3,\n\t\tEqualDepth: 4,\n\t\tGreaterEqualDepth: 5,\n\t\tGreaterDepth: 6,\n\t\tNotEqualDepth: 7,\n\n\n\t\t// TEXTURE CONSTANTS\n\n\t\tMultiplyOperation: 0,\n\t\tMixOperation: 1,\n\t\tAddOperation: 2,\n\n\t\t// Tone Mapping modes\n\n\t\tNoToneMapping: 0, // do not do any tone mapping, not even exposure (required for special purpose passes.)\n\t\tLinearToneMapping: 1, // only apply exposure.\n\t\tReinhardToneMapping: 2,\n\t\tUncharted2ToneMapping: 3, // John Hable\n\t\tCineonToneMapping: 4, // optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\n\n\t\t// Mapping modes\n\n\t\tUVMapping: 300,\n\n\t\tCubeReflectionMapping: 301,\n\t\tCubeRefractionMapping: 302,\n\n\t\tEquirectangularReflectionMapping: 303,\n\t\tEquirectangularRefractionMapping: 304,\n\n\t\tSphericalReflectionMapping: 305,\n\t\tCubeUVReflectionMapping: 306,\n\t\tCubeUVRefractionMapping: 307,\n\n\t\t// Wrapping modes\n\n\t\tRepeatWrapping: 1000,\n\t\tClampToEdgeWrapping: 1001,\n\t\tMirroredRepeatWrapping: 1002,\n\n\t\t// Filters\n\n\t\tNearestFilter: 1003,\n\t\tNearestMipMapNearestFilter: 1004,\n\t\tNearestMipMapLinearFilter: 1005,\n\t\tLinearFilter: 1006,\n\t\tLinearMipMapNearestFilter: 1007,\n\t\tLinearMipMapLinearFilter: 1008,\n\n\t\t// Data types\n\n\t\tUnsignedByteType: 1009,\n\t\tByteType: 1010,\n\t\tShortType: 1011,\n\t\tUnsignedShortType: 1012,\n\t\tIntType: 1013,\n\t\tUnsignedIntType: 1014,\n\t\tFloatType: 1015,\n\t\tHalfFloatType: 1025,\n\n\t\t// Pixel types\n\n\t\t//UnsignedByteType: 1009,\n\t\tUnsignedShort4444Type: 1016,\n\t\tUnsignedShort5551Type: 1017,\n\t\tUnsignedShort565Type: 1018,\n\n\t\t// Pixel formats\n\n\t\tAlphaFormat: 1019,\n\t\tRGBFormat: 1020,\n\t\tRGBAFormat: 1021,\n\t\tLuminanceFormat: 1022,\n\t\tLuminanceAlphaFormat: 1023,\n\t\t// THREE.RGBEFormat handled as THREE.RGBAFormat in shaders\n\t\tRGBEFormat: THREE.RGBAFormat, //1024;\n\t\tDepthFormat: 1026,\n\n\t\t// DDS / ST3C Compressed texture formats\n\n\t\tRGB_S3TC_DXT1_Format: 2001,\n\t\tRGBA_S3TC_DXT1_Format: 2002,\n\t\tRGBA_S3TC_DXT3_Format: 2003,\n\t\tRGBA_S3TC_DXT5_Format: 2004,\n\n\t\t// PVRTC compressed texture formats\n\n\t\tRGB_PVRTC_4BPPV1_Format: 2100,\n\t\tRGB_PVRTC_2BPPV1_Format: 2101,\n\t\tRGBA_PVRTC_4BPPV1_Format: 2102,\n\t\tRGBA_PVRTC_2BPPV1_Format: 2103,\n\n\t\t// ETC compressed texture formats\n\n\t\tRGB_ETC1_Format: 2151,\n\n\t\t// Loop styles for AnimationAction\n\n\t\tLoopOnce: 2200,\n\t\tLoopRepeat: 2201,\n\t\tLoopPingPong: 2202,\n\n\t\t// Interpolation\n\n\t\tInterpolateDiscrete: 2300,\n\t\tInterpolateLinear: 2301,\n\t\tInterpolateSmooth: 2302,\n\n\t\t// Interpolant ending modes\n\n\t\tZeroCurvatureEnding: 2400,\n\t\tZeroSlopeEnding: 2401,\n\t\tWrapAroundEnding: 2402,\n\n\t\t// Triangle Draw modes\n\n\t\tTrianglesDrawMode: 0,\n\t\tTriangleStripDrawMode: 1,\n\t\tTriangleFanDrawMode: 2,\n\n\t\t// Texture Encodings\n\n\t\tLinearEncoding: 3000, // No encoding at all.\n\t\tsRGBEncoding: 3001,\n\t\tGammaEncoding: 3007, // uses GAMMA_FACTOR, for backwards compatibility with WebGLRenderer.gammaInput/gammaOutput\n\n\t\t// The following Texture Encodings are for RGB-only (no alpha) HDR light emission sources.\n\t\t// These encodings should not specified as output encodings except in rare situations.\n\t\tRGBEEncoding: 3002, // AKA Radiance.\n\t\tLogLuvEncoding: 3003,\n\t\tRGBM7Encoding: 3004,\n\t\tRGBM16Encoding: 3005,\n\t\tRGBDEncoding: 3006, // MaxRange is 256.\n\n\t\t// Depth packing strategies\n\n\t\tBasicDepthPacking: 3200, // for writing to float textures for high precision or for visualizing results in RGB buffers\n\t\tRGBADepthPacking: 3201 // for packing into RGBA buffers.\n\n\t} );\n\n\t// File:src/math/Color.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.Color = function ( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t};\n\n\tTHREE.Color.prototype = {\n\n\t\tconstructor: THREE.Color,\n\n\t\tr: 1, g: 1, b: 1,\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value instanceof THREE.Color ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\t\tthis.setHex( value );\n\n\t\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\t\tthis.setStyle( value );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\n\t\t},\n\n\t\tsetHex: function ( hex ) {\n\n\t\t\thex = Math.floor( hex );\n\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRGB: function ( r, g, b ) {\n\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHSL: function () {\n\n\t\t\tfunction hue2rgb( p, q, t ) {\n\n\t\t\t\tif ( t < 0 ) t += 1;\n\t\t\t\tif ( t > 1 ) t -= 1;\n\t\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\t\t\t\tif ( t < 1 / 2 ) return q;\n\t\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\t\t\t\treturn p;\n\n\t\t\t}\n\n\t\t\treturn function setHSL( h, s, l ) {\n\n\t\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\t\th = THREE.Math.euclideanModulo( h, 1 );\n\t\t\t\ts = THREE.Math.clamp( s, 0, 1 );\n\t\t\t\tl = THREE.Math.clamp( l, 0, 1 );\n\n\t\t\t\tif ( s === 0 ) {\n\n\t\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetStyle: function ( style ) {\n\n\t\t\tfunction handleAlpha( string ) {\n\n\t\t\t\tif ( string === undefined ) return;\n\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar m;\n\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t\t// rgb / hsl\n\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[ 1 ];\n\t\t\t\tvar components = m[ 2 ];\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t\t// hex color\n\n\t\t\t\tvar hex = m[ 1 ];\n\t\t\t\tvar size = hex.length;\n\n\t\t\t\tif ( size === 3 ) {\n\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( style && style.length > 0 ) {\n\n\t\t\t\t// color keywords\n\t\t\t\tvar hex = THREE.ColorKeywords[ style ];\n\n\t\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t\t// red\n\t\t\t\t\tthis.setHex( hex );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// unknown color\n\t\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t\t},\n\n\t\tcopy: function ( color ) {\n\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertGammaToLinear: function () {\n\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\t\tthis.r = r * r;\n\t\t\tthis.g = g * g;\n\t\t\tthis.b = b * b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToGamma: function () {\n\n\t\t\tthis.r = Math.sqrt( this.r );\n\t\t\tthis.g = Math.sqrt( this.g );\n\t\t\tthis.b = Math.sqrt( this.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetHex: function () {\n\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t\t},\n\n\t\tgetHexString: function () {\n\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t\t},\n\n\t\tgetHSL: function ( optionalTarget ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\t\tvar max = Math.max( r, g, b );\n\t\t\tvar min = Math.min( r, g, b );\n\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\t\tif ( min === max ) {\n\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\n\t\t\t} else {\n\n\t\t\t\tvar delta = max - min;\n\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\t\tswitch ( max ) {\n\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\n\t\t\t}\n\n\t\t\thsl.h = hue;\n\t\t\thsl.s = saturation;\n\t\t\thsl.l = lightness;\n\n\t\t\treturn hsl;\n\n\t\t},\n\n\t\tgetStyle: function () {\n\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t\t},\n\n\t\toffsetHSL: function ( h, s, l ) {\n\n\t\t\tvar hsl = this.getHSL();\n\n\t\t\thsl.h += h; hsl.s += s; hsl.l += l;\n\n\t\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( color ) {\n\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddColors: function ( color1, color2 ) {\n\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function( color ) {\n\n\t\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( color ) {\n\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( color, alpha ) {\n\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( c ) {\n\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.r = array[ offset ];\n\t\t\tthis.g = array[ offset + 1 ];\n\t\t\tthis.b = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.r;\n\t\t\tarray[ offset + 1 ] = this.g;\n\t\t\tarray[ offset + 2 ] = this.b;\n\n\t\t\treturn array;\n\n\t\t}\n\n\t};\n\n\tTHREE.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n\t// File:src/math/Quaternion.js\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tTHREE.Quaternion = function ( x, y, z, w ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._w = ( w !== undefined ) ? w : 1;\n\n\t};\n\n\tTHREE.Quaternion.prototype = {\n\n\t\tconstructor: THREE.Quaternion,\n\n\t\tget x () {\n\n\t\t\treturn this._x;\n\n\t\t},\n\n\t\tset x ( value ) {\n\n\t\t\tthis._x = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t},\n\n\t\tget y () {\n\n\t\t\treturn this._y;\n\n\t\t},\n\n\t\tset y ( value ) {\n\n\t\t\tthis._y = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t},\n\n\t\tget z () {\n\n\t\t\treturn this._z;\n\n\t\t},\n\n\t\tset z ( value ) {\n\n\t\t\tthis._z = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t},\n\n\t\tget w () {\n\n\t\t\treturn this._w;\n\n\t\t},\n\n\t\tset w ( value ) {\n\n\t\t\tthis._w = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t},\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t\t},\n\n\t\tcopy: function ( quaternion ) {\n\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromEuler: function ( euler, update ) {\n\n\t\t\tif ( euler instanceof THREE.Euler === false ) {\n\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tvar c1 = Math.cos( euler._x / 2 );\n\t\t\tvar c2 = Math.cos( euler._y / 2 );\n\t\t\tvar c3 = Math.cos( euler._z / 2 );\n\t\t\tvar s1 = Math.sin( euler._x / 2 );\n\t\t\tvar s2 = Math.sin( euler._y / 2 );\n\t\t\tvar s3 = Math.sin( euler._z / 2 );\n\n\t\t\tvar order = euler.order;\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t}\n\n\t\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos( halfAngle );\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\t\ttrace = m11 + m22 + m33,\n\t\t\t\ts;\n\n\t\t\tif ( trace > 0 ) {\n\n\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t\t} else if ( m22 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t\t} else {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\t\tthis._z = 0.25 * s;\n\n\t\t\t}\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromUnitVectors: function () {\n\n\t\t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\n\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\t\tvar v1, r;\n\n\t\t\tvar EPS = 0.000001;\n\n\t\t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\t\tr = vFrom.dot( vTo ) + 1;\n\n\t\t\t\tif ( r < EPS ) {\n\n\t\t\t\t\tr = 0;\n\n\t\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv1.crossVectors( vFrom, vTo );\n\n\t\t\t\t}\n\n\t\t\t\tthis._x = v1.x;\n\t\t\t\tthis._y = v1.y;\n\t\t\t\tthis._z = v1.z;\n\t\t\t\tthis._w = r;\n\n\t\t\t\treturn this.normalize();\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tinverse: function () {\n\n\t\t\treturn this.conjugate().normalize();\n\n\t\t},\n\n\t\tconjugate: function () {\n\n\t\t\tthis._x *= - 1;\n\t\t\tthis._y *= - 1;\n\t\t\tthis._z *= - 1;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tvar l = this.length();\n\n\t\t\tif ( l === 0 ) {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\n\t\t\t} else {\n\n\t\t\t\tl = 1 / l;\n\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\n\t\t\t}\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( q, p ) {\n\n\t\t\tif ( p !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions( this, q );\n\n\t\t},\n\n\t\tpremultiply: function ( q ) {\n\n\t\t\treturn this.multiplyQuaternions( q, this );\n\n\t\t},\n\n\t\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tslerp: function ( qb, t ) {\n\n\t\t\tif ( t === 0 ) return this;\n\t\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\t\tthis._w = - qb._w;\n\t\t\t\tthis._x = - qb._x;\n\t\t\t\tthis._y = - qb._y;\n\t\t\t\tthis._z = - qb._z;\n\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t\t} else {\n\n\t\t\t\tthis.copy( qb );\n\n\t\t\t}\n\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\n\t\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\n\t\t\t\tthis._w = 0.5 * ( w + this._w );\n\t\t\t\tthis._x = 0.5 * ( x + this._x );\n\t\t\t\tthis._y = 0.5 * ( y + this._y );\n\t\t\t\tthis._z = 0.5 * ( z + this._z );\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( quaternion ) {\n\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis._x = array[ offset ];\n\t\t\tthis._y = array[ offset + 1 ];\n\t\t\tthis._z = array[ offset + 2 ];\n\t\t\tthis._w = array[ offset + 3 ];\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tonChange: function ( callback ) {\n\n\t\t\tthis.onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonChangeCallback: function () {}\n\n\t};\n\n\tObject.assign( THREE.Quaternion, {\n\n\t\tslerp: function( qa, qb, qm, t ) {\n\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t\t},\n\n\t\tslerpFlat: function(\n\t\t\t\tdst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\t\tvar s = 1 - t,\n\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t\t}\n\n\t\t\t\tvar tDir = t * dir;\n\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t\t// Normalize in case we just did a lerp:\n\t\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdst[ dstOffset ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\n\t\t}\n\n\t} );\n\n\t// File:src/math/Vector2.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author egraether / http://egraether.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tTHREE.Vector2 = function ( x, y ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\n\t};\n\n\tTHREE.Vector2.prototype = {\n\n\t\tconstructor: THREE.Vector2,\n\n\t\tget width() {\n\n\t\t\treturn this.x;\n\n\t\t},\n\n\t\tset width( value ) {\n\n\t\t\tthis.x = value;\n\n\t\t},\n\n\t\tget height() {\n\n\t\t\treturn this.y;\n\n\t\t},\n\n\t\tset height( value ) {\n\n\t\t\tthis.y = value;\n\n\t\t},\n\n\t\t//\n\n\t\tset: function ( x, y ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v ) {\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tif ( isFinite( scalar ) ) {\n\n\t\t\t\tthis.x *= scalar;\n\t\t\t\tthis.y *= scalar;\n\n\t\t\t} else {\n\n\t\t\t\tthis.x = 0;\n\t\t\t\tthis.y = 0;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function () {\n\n\t\t\tvar min, max;\n\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\t\tif ( min === undefined ) {\n\n\t\t\t\t\tmin = new THREE.Vector2();\n\t\t\t\t\tmax = new THREE.Vector2();\n\n\t\t\t\t}\n\n\t\t\t\tmin.set( minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal );\n\n\t\t\t\treturn this.clamp( min, max );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t\t},\n\n\t\tlengthManhattan: function() {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() );\n\n\t\t},\n\n\t\tangle: function () {\n\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\t\tvar angle = Math.atan2( this.y, this.x );\n\n\t\t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\n\t\t\treturn angle;\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\n\t\t},\n\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.multiplyScalar( length / this.length() );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tindex = index * attribute.itemSize + offset;\n\n\t\t\tthis.x = attribute.array[ index ];\n\t\t\tthis.y = attribute.array[ index + 1 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateAround: function ( center, angle ) {\n\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t};\n\n\t// File:src/math/Vector3.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author *kile / http://kile.stravaganza.org/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tTHREE.Vector3 = function ( x, y, z ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\n\t};\n\n\tTHREE.Vector3.prototype = {\n\n\t\tconstructor: THREE.Vector3,\n\n\t\tset: function ( x, y, z ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tif ( isFinite( scalar ) ) {\n\n\t\t\t\tthis.x *= scalar;\n\t\t\t\tthis.y *= scalar;\n\t\t\t\tthis.z *= scalar;\n\n\t\t\t} else {\n\n\t\t\t\tthis.x = 0;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyEuler: function () {\n\n\t\t\tvar quaternion;\n\n\t\t\treturn function applyEuler( euler ) {\n\n\t\t\t\tif ( euler instanceof THREE.Euler === false ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\n\n\t\t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyAxisAngle: function () {\n\n\t\t\tvar quaternion;\n\n\t\t\treturn function applyAxisAngle( axis, angle ) {\n\n\t\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\n\n\t\t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\t// input: THREE.Matrix4 affine matrix\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyProjection: function ( m ) {\n\n\t\t\t// input: THREE.Matrix4 projection matrix\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\t\t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\n\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t\t// calculate quat * vector\n\n\t\t\tvar ix =  qw * x + qy * z - qz * y;\n\t\t\tvar iy =  qw * y + qz * x - qx * z;\n\t\t\tvar iz =  qw * z + qx * y - qy * x;\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t\t// calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tproject: function () {\n\n\t\t\tvar matrix;\n\n\t\t\treturn function project( camera ) {\n\n\t\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\n\t\t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n\t\t\t\treturn this.applyProjection( matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tunproject: function () {\n\n\t\t\tvar matrix;\n\n\t\t\treturn function unproject( camera ) {\n\n\t\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\n\t\t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n\t\t\t\treturn this.applyProjection( matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function () {\n\n\t\t\tvar min, max;\n\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\t\tif ( min === undefined ) {\n\n\t\t\t\t\tmin = new THREE.Vector3();\n\t\t\t\t\tmax = new THREE.Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tmin.set( minVal, minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal, maxVal );\n\n\t\t\t\treturn this.clamp( min, max );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t\t},\n\n\t\tlengthManhattan: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.multiplyScalar( length / this.length() );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tcross: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\t\treturn this.crossVectors( v, w );\n\n\t\t\t}\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\n\t\t\tthis.x = y * v.z - z * v.y;\n\t\t\tthis.y = z * v.x - x * v.z;\n\t\t\tthis.z = x * v.y - y * v.x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcrossVectors: function ( a, b ) {\n\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tprojectOnVector: function ( vector ) {\n\n\t\t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\t\t\n\t\t\treturn this.copy( vector ).multiplyScalar( scalar );\n\t\t\n\t\t},\n\n\t\tprojectOnPlane: function () {\n\n\t\t\tvar v1;\n\n\t\t\treturn function projectOnPlane( planeNormal ) {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\n\t\t\t\treturn this.sub( v1 );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\treflect: function () {\n\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\n\t\t\tvar v1;\n\n\t\t\treturn function reflect( normal ) {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tangleTo: function ( v ) {\n\n\t\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\n\t\t\t// clamp, to handle numerical problems\n\n\t\t\treturn Math.acos( THREE.Math.clamp( theta, - 1, 1 ) );\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t\t},\n\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t\t},\n\n\t\tsetFromSpherical: function( s ) {\n\n\t\t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\n\t\t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n\t\t\tthis.y = Math.cos( s.phi ) * s.radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixPosition: function ( m ) {\n\n\t\t\treturn this.setFromMatrixColumn( m, 3 );\n\n\t\t},\n\n\t\tsetFromMatrixScale: function ( m ) {\n\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\t\tif ( typeof m === 'number' ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );\n\t\t\t\tvar temp = m\n\t\t\t\tm = index;\n\t\t\t\tindex = temp;\n\n\t\t\t}\n\n\t\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tindex = index * attribute.itemSize + offset;\n\n\t\t\tthis.x = attribute.array[ index ];\n\t\t\tthis.y = attribute.array[ index + 1 ];\n\t\t\tthis.z = attribute.array[ index + 2 ];\n\n\t\t\treturn this;\n\n\t\t}\n\n\t};\n\n\t// File:src/math/Vector4.js\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tTHREE.Vector4 = function ( x, y, z, w ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\t\tthis.w = ( w !== undefined ) ? w : 1;\n\n\t};\n\n\tTHREE.Vector4.prototype = {\n\n\t\tconstructor: THREE.Vector4,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( w ) {\n\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tcase 3: this.w = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tcase 3: return this.w;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tif ( isFinite( scalar ) ) {\n\n\t\t\t\tthis.x *= scalar;\n\t\t\t\tthis.y *= scalar;\n\t\t\t\tthis.z *= scalar;\n\t\t\t\tthis.w *= scalar;\n\n\t\t\t} else {\n\n\t\t\t\tthis.x = 0;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\t\t\t\tthis.w = 0;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t\t// q is assumed to be normalized\n\n\t\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\t\tif ( s < 0.0001 ) {\n\n\t\t\t\t this.x = 1;\n\t\t\t\t this.y = 0;\n\t\t\t\t this.z = 0;\n\n\t\t\t} else {\n\n\t\t\t\t this.x = q.x / s;\n\t\t\t\t this.y = q.y / s;\n\t\t\t\t this.z = q.z / s;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\t\tte = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t\t}\n\n\t\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\t\tangle = Math.PI;\n\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.set( x, y, z, angle );\n\n\t\t\t\treturn this; // return 180 deg rotation\n\n\t\t\t}\n\n\t\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = ( m32 - m23 ) / s;\n\t\t\tthis.y = ( m13 - m31 ) / s;\n\t\t\tthis.z = ( m21 - m12 ) / s;\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\t\t\tthis.w = Math.min( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\t\t\tthis.w = Math.max( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function () {\n\n\t\t\tvar min, max;\n\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\t\tif ( min === undefined ) {\n\n\t\t\t\t\tmin = new THREE.Vector4();\n\t\t\t\t\tmax = new THREE.Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tmin.set( minVal, minVal, minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\n\t\t\t\treturn this.clamp( min, max );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\t\t\tthis.w = Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\t\t\tthis.w = Math.ceil( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\t\t\tthis.w = Math.round( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\t\t\tthis.w = - this.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t\t},\n\n\t\tlengthManhattan: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.multiplyScalar( length / this.length() );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\t\t\tthis.w = array[ offset + 3 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\t\t\tarray[ offset + 3 ] = this.w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tindex = index * attribute.itemSize + offset;\n\n\t\t\tthis.x = attribute.array[ index ];\n\t\t\tthis.y = attribute.array[ index + 1 ];\n\t\t\tthis.z = attribute.array[ index + 2 ];\n\t\t\tthis.w = attribute.array[ index + 3 ];\n\n\t\t\treturn this;\n\n\t\t}\n\n\t};\n\n\t// File:src/math/Euler.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tTHREE.Euler = function ( x, y, z, order ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._order = order || THREE.Euler.DefaultOrder;\n\n\t};\n\n\tTHREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n\tTHREE.Euler.DefaultOrder = 'XYZ';\n\n\tTHREE.Euler.prototype = {\n\n\t\tconstructor: THREE.Euler,\n\n\t\tget x () {\n\n\t\t\treturn this._x;\n\n\t\t},\n\n\t\tset x ( value ) {\n\n\t\t\tthis._x = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t},\n\n\t\tget y () {\n\n\t\t\treturn this._y;\n\n\t\t},\n\n\t\tset y ( value ) {\n\n\t\t\tthis._y = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t},\n\n\t\tget z () {\n\n\t\t\treturn this._z;\n\n\t\t},\n\n\t\tset z ( value ) {\n\n\t\t\tthis._z = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t},\n\n\t\tget order () {\n\n\t\t\treturn this._order;\n\n\t\t},\n\n\t\tset order ( value ) {\n\n\t\t\tthis._order = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t},\n\n\t\tset: function ( x, y, z, order ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t\t},\n\n\t\tcopy: function ( euler ) {\n\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\t\tvar clamp = THREE.Math.clamp;\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\torder = order || this._order;\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n\t\t\t}\n\n\t\t\tthis._order = order;\n\n\t\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromQuaternion: function () {\n\n\t\t\tvar matrix;\n\n\t\t\treturn function setFromQuaternion( q, order, update ) {\n\n\t\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\n\t\t\t\tmatrix.makeRotationFromQuaternion( q );\n\n\t\t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetFromVector3: function ( v, order ) {\n\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t\t},\n\n\t\treorder: function () {\n\n\t\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t\tvar q = new THREE.Quaternion();\n\n\t\t\treturn function reorder( newOrder ) {\n\n\t\t\t\tq.setFromEuler( this );\n\t\t\t\t\n\t\t\t\treturn this.setFromQuaternion( q, newOrder );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tequals: function ( euler ) {\n\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t\t},\n\n\t\tfromArray: function ( array ) {\n\n\t\t\tthis._x = array[ 0 ];\n\t\t\tthis._y = array[ 1 ];\n\t\t\tthis._z = array[ 2 ];\n\t\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._order;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoVector3: function ( optionalResult ) {\n\n\t\t\tif ( optionalResult ) {\n\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t\t} else {\n\n\t\t\t\treturn new THREE.Vector3( this._x, this._y, this._z );\n\n\t\t\t}\n\n\t\t},\n\n\t\tonChange: function ( callback ) {\n\n\t\t\tthis.onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonChangeCallback: function () {}\n\n\t};\n\n\t// File:src/math/Line3.js\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tTHREE.Line3 = function ( start, end ) {\n\n\t\tthis.start = ( start !== undefined ) ? start : new THREE.Vector3();\n\t\tthis.end = ( end !== undefined ) ? end : new THREE.Vector3();\n\n\t};\n\n\tTHREE.Line3.prototype = {\n\n\t\tconstructor: THREE.Line3,\n\n\t\tset: function ( start, end ) {\n\n\t\t\tthis.start.copy( start );\n\t\t\tthis.end.copy( end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( line ) {\n\n\t\t\tthis.start.copy( line.start );\n\t\t\tthis.end.copy( line.end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tdelta: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\treturn result.subVectors( this.end, this.start );\n\n\t\t},\n\n\t\tdistanceSq: function () {\n\n\t\t\treturn this.start.distanceToSquared( this.end );\n\n\t\t},\n\n\t\tdistance: function () {\n\n\t\t\treturn this.start.distanceTo( this.end );\n\n\t\t},\n\n\t\tat: function ( t, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tclosestPointToPointParameter: function () {\n\n\t\t\tvar startP = new THREE.Vector3();\n\t\t\tvar startEnd = new THREE.Vector3();\n\n\t\t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\n\t\t\t\tstartP.subVectors( point, this.start );\n\t\t\t\tstartEnd.subVectors( this.end, this.start );\n\n\t\t\t\tvar startEnd2 = startEnd.dot( startEnd );\n\t\t\t\tvar startEnd_startP = startEnd.dot( startP );\n\n\t\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\t\tif ( clampToLine ) {\n\n\t\t\t\t\tt = THREE.Math.clamp( t, 0, 1 );\n\n\t\t\t\t}\n\n\t\t\t\treturn t;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.start.applyMatrix4( matrix );\n\t\t\tthis.end.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( line ) {\n\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t\t}\n\n\t};\n\n\t// File:src/math/Box2.js\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tTHREE.Box2 = function ( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new THREE.Vector2( + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new THREE.Vector2( - Infinity, - Infinity );\n\n\t};\n\n\tTHREE.Box2.prototype = {\n\n\t\tconstructor: THREE.Box2,\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function () {\n\n\t\t\tvar v1 = new THREE.Vector2();\n\n\t\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = + Infinity;\n\t\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t\t},\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\t\treturn result.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t\t\t     point.y < this.min.y || point.y > this.max.y ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t\t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tvar result = optionalTarget || new THREE.Vector2();\n\n\t\t\treturn result.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 6 splitting planes to rule out intersections.\n\n\t\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tclampPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function () {\n\n\t\t\tvar v1 = new THREE.Vector2();\n\n\t\t\treturn function distanceToPoint( point ) {\n\n\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t};\n\n\t// File:src/math/Box3.js\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tTHREE.Box3 = function ( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new THREE.Vector3( + Infinity, + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new THREE.Vector3( - Infinity, - Infinity, - Infinity );\n\n\t};\n\n\tTHREE.Box3.prototype = {\n\n\t\tconstructor: THREE.Box3,\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromArray: function ( array ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar x = array[ i ];\n\t\t\t\tvar y = array[ i + 1 ];\n\t\t\t\tvar z = array[ i + 2 ];\n\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\t\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function () {\n\n\t\t\tvar v1 = new THREE.Vector3();\n\n\t\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetFromObject: function () {\n\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\n\t\t\tvar v1 = new THREE.Vector3();\n\n\t\t\treturn function setFromObject( object ) {\n\n\t\t\t\tvar scope = this;\n\n\t\t\t\tobject.updateMatrixWorld( true );\n\n\t\t\t\tthis.makeEmpty();\n\n\t\t\t\tobject.traverse( function ( node ) {\n\n\t\t\t\t\tvar geometry = node.geometry;\n\n\t\t\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n\t\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\t\t\tvar attribute = geometry.attributes.position;\n\n\t\t\t\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\t\t\t\tvar array, offset, stride;\n\n\t\t\t\t\t\t\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\t\t\t\t\t\t\tarray = attribute.data.array;\n\t\t\t\t\t\t\t\t\toffset = attribute.offset;\n\t\t\t\t\t\t\t\t\tstride = attribute.data.stride;\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tarray = attribute.array;\n\t\t\t\t\t\t\t\t\toffset = 0;\n\t\t\t\t\t\t\t\t\tstride = 3;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfor ( var i = offset, il = array.length; i < il; i += stride ) {\n\n\t\t\t\t\t\t\t\t\tv1.fromArray( array, i );\n\t\t\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t\t},\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\treturn result.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\t\t point.y < this.min.y || point.y > this.max.y ||\n\t\t\t\t\t point.z < this.min.z || point.z > this.max.z ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t\t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\n\t\t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\treturn result.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 6 splitting planes to rule out intersections.\n\n\t\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\t\t box.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\t\t\t box.max.z < this.min.z || box.min.z > this.max.z ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tintersectsSphere: ( function () {\n\n\t\t\tvar closestPoint;\n\n\t\t\treturn function intersectsSphere( sphere ) {\n\n\t\t\t\tif ( closestPoint === undefined ) closestPoint = new THREE.Vector3();\n\n\t\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\t\tthis.clampPoint( sphere.center, closestPoint );\n\n\t\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\t\tvar min, max;\n\n\t\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t\t} else {\n\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t\t}\n\n\t\t\treturn ( min <= plane.constant && max >= plane.constant );\n\n\t\t},\n\n\t\tclampPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function () {\n\n\t\t\tvar v1 = new THREE.Vector3();\n\n\t\t\treturn function distanceToPoint( point ) {\n\n\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetBoundingSphere: function () {\n\n\t\t\tvar v1 = new THREE.Vector3();\n\n\t\t\treturn function getBoundingSphere( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new THREE.Sphere();\n\n\t\t\t\tresult.center = this.center();\n\t\t\t\tresult.radius = this.size( v1 ).length() * 0.5;\n\n\t\t\t\treturn result;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\t\tif( this.isEmpty() ) this.makeEmpty();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function () {\n\n\t\t\tvar points = [\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3()\n\t\t\t];\n\n\t\t\treturn function applyMatrix4( matrix ) {\n\n\t\t\t\t// transform of empty box is an empty box.\n\t\t\t\tif( this.isEmpty() ) return this;\n\n\t\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\n\t\t\t\tthis.setFromPoints( points );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t};\n\n\t// File:src/math/Matrix3.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t * @author tschw\n\t */\n\n\tTHREE.Matrix3 = function () {\n\n\t\tthis.elements = new Float32Array( [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t] );\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t};\n\n\tTHREE.Matrix3.prototype = {\n\n\t\tconstructor: THREE.Matrix3,\n\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar me = m.elements;\n\n\t\t\tthis.set(\n\n\t\t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\n\t\t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\n\t\t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix4: function( m ) {\n\n\t\t\tvar me = m.elements;\n\n\t\t\tthis.set(\n\n\t\t\t\tme[ 0 ], me[ 4 ], me[  8 ],\n\t\t\t\tme[ 1 ], me[ 5 ], me[  9 ],\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyToVector3Array: function () {\n\n\t\t\tvar v1;\n\n\t\t\treturn function applyToVector3Array( array, offset, length ) {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\t\tif ( length === undefined ) length = array.length;\n\n\t\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n\t\t\t\t\tv1.fromArray( array, j );\n\t\t\t\t\tv1.applyMatrix3( this );\n\t\t\t\t\tv1.toArray( array, j );\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyToBuffer: function () {\n\n\t\t\tvar v1;\n\n\t\t\treturn function applyToBuffer( buffer, offset, length ) {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n\t\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n\t\t\t\t\tv1.x = buffer.getX( j );\n\t\t\t\t\tv1.y = buffer.getY( j );\n\t\t\t\t\tv1.z = buffer.getZ( j );\n\n\t\t\t\t\tv1.applyMatrix3( this );\n\n\t\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\n\t\t\t\t}\n\n\t\t\t\treturn buffer;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t\t},\n\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\t\tif ( matrix instanceof THREE.Matrix4 ) {\n\n\t\t\t\tconsole.error( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\n\n\t\t\t}\n\n\t\t\tvar me = matrix.elements,\n\t\t\t\tte = this.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\t\tif ( det === 0 ) {\n\n\t\t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\n\t\t\t\tif ( throwOnDegenerate || false ) {\n\n\t\t\t\t\tthrow new Error( msg );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( msg );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.identity();\n\t\t\t}\n\t\t\t\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\t\tte[ 3 ] = t12 * detInv;\n\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\t\tte[ 6 ] = t13 * detInv;\n\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar tmp, m = this.elements;\n\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t\t\t\t\t\"- just use .toArray instead.\" );\n\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\n\t\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t\t},\n\n\t\ttransposeIntoArray: function ( r ) {\n\n\t\t\tvar m = this.elements;\n\n\t\t\tr[ 0 ] = m[ 0 ];\n\t\t\tr[ 1 ] = m[ 3 ];\n\t\t\tr[ 2 ] = m[ 6 ];\n\t\t\tr[ 3 ] = m[ 1 ];\n\t\t\tr[ 4 ] = m[ 4 ];\n\t\t\tr[ 5 ] = m[ 7 ];\n\t\t\tr[ 6 ] = m[ 2 ];\n\t\t\tr[ 7 ] = m[ 5 ];\n\t\t\tr[ 8 ] = m[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromArray: function ( array ) {\n\n\t\t\tthis.elements.set( array );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\t\tarray[ offset + 8 ]  = te[ 8 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t};\n\n\t// File:src/math/Matrix4.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author jordi_ros / http://plattsoft.com\n\t * @author D1plo1d / http://github.com/D1plo1d\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author timknip / http://www.floorplanner.com/\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tTHREE.Matrix4 = function () {\n\n\t\tthis.elements = new Float32Array( [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t] );\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t};\n\n\tTHREE.Matrix4.prototype = {\n\n\t\tconstructor: THREE.Matrix4,\n\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new THREE.Matrix4().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tthis.elements.set( m.elements );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyPosition: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 12 ] = me[ 12 ];\n\t\t\tte[ 13 ] = me[ 13 ];\n\t\t\tte[ 14 ] = me[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\tthis.set(\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t\t0,       0,       0,       1\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractRotation: function () {\n\n\t\t\tvar v1;\n\n\t\t\treturn function extractRotation( m ) {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\t\tvar te = this.elements;\n\t\t\t\tvar me = m.elements;\n\n\t\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\n\t\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\n\t\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmakeRotationFromEuler: function ( euler ) {\n\n\t\t\tif ( euler instanceof THREE.Euler === false ) {\n\n\t\t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - c * f;\n\t\t\t\tte[ 8 ] = d;\n\n\t\t\t\tte[ 1 ] = af + be * d;\n\t\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\t\tte[ 9 ] = - b * c;\n\n\t\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\t\tte[ 6 ] = be + af * d;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce + df * b;\n\t\t\t\tte[ 4 ] = de * b - cf;\n\t\t\t\tte[ 8 ] = a * d;\n\n\t\t\t\tte[ 1 ] = a * f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b;\n\n\t\t\t\tte[ 2 ] = cf * b - de;\n\t\t\t\tte[ 6 ] = df + ce * b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce - df * b;\n\t\t\t\tte[ 4 ] = - a * f;\n\t\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\t\tte[ 1 ] = cf + de * b;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\t\tte[ 2 ] = - a * d;\n\t\t\t\tte[ 6 ] = b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = be * d - af;\n\t\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\t\tte[ 1 ] = c * f;\n\t\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\t\tte[ 2 ] = - d;\n\t\t\t\tte[ 6 ] = b * c;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\t\tte[ 1 ] = f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b * e;\n\n\t\t\t\tte[ 2 ] = - d * e;\n\t\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - f;\n\t\t\t\tte[ 8 ] = d * e;\n\n\t\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\t\tte[ 6 ] = b * e;\n\t\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t\t}\n\n\t\t\t// last column\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\t// bottom row\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\n\t\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\t\tte[ 0 ] = 1 - ( yy + zz );\n\t\t\tte[ 4 ] = xy - wz;\n\t\t\tte[ 8 ] = xz + wy;\n\n\t\t\tte[ 1 ] = xy + wz;\n\t\t\tte[ 5 ] = 1 - ( xx + zz );\n\t\t\tte[ 9 ] = yz - wx;\n\n\t\t\tte[ 2 ] = xz - wy;\n\t\t\tte[ 6 ] = yz + wx;\n\t\t\tte[ 10 ] = 1 - ( xx + yy );\n\n\t\t\t// last column\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\t// bottom row\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function () {\n\n\t\t\tvar x, y, z;\n\n\t\t\treturn function lookAt( eye, target, up ) {\n\n\t\t\t\tif ( x === undefined ) {\n\n\t\t\t\t\tx = new THREE.Vector3();\n\t\t\t\t\ty = new THREE.Vector3();\n\t\t\t\t\tz = new THREE.Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tvar te = this.elements;\n\n\t\t\t\tz.subVectors( eye, target ).normalize();\n\n\t\t\t\tif ( z.lengthSq() === 0 ) {\n\n\t\t\t\t\tz.z = 1;\n\n\t\t\t\t}\n\n\t\t\t\tx.crossVectors( up, z ).normalize();\n\n\t\t\t\tif ( x.lengthSq() === 0 ) {\n\n\t\t\t\t\tz.z += 0.0001;\n\t\t\t\t\tx.crossVectors( up, z ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\ty.crossVectors( z, x );\n\n\n\t\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n\t\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n\t\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmultiply: function ( m, n ) {\n\n\t\t\tif ( n !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyToArray: function ( a, b, r ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tthis.multiplyMatrices( a, b );\n\n\t\t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\n\t\t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\n\t\t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\n\t\t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyToVector3Array: function () {\n\n\t\t\tvar v1;\n\n\t\t\treturn function applyToVector3Array( array, offset, length ) {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\t\tif ( length === undefined ) length = array.length;\n\n\t\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n\t\t\t\t\tv1.fromArray( array, j );\n\t\t\t\t\tv1.applyMatrix4( this );\n\t\t\t\t\tv1.toArray( array, j );\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyToBuffer: function () {\n\n\t\t\tvar v1;\n\n\t\t\treturn function applyToBuffer( buffer, offset, length ) {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n\t\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n\t\t\t\t\tv1.x = buffer.getX( j );\n\t\t\t\t\tv1.y = buffer.getY( j );\n\t\t\t\t\tv1.z = buffer.getZ( j );\n\n\t\t\t\t\tv1.applyMatrix4( this );\n\n\t\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\n\t\t\t\t}\n\n\t\t\t\treturn buffer;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t\t//TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn (\n\t\t\t\tn41 * (\n\t\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t\t - n13 * n24 * n32\n\t\t\t\t\t - n14 * n22 * n33\n\t\t\t\t\t + n12 * n24 * n33\n\t\t\t\t\t + n13 * n22 * n34\n\t\t\t\t\t - n12 * n23 * n34\n\t\t\t\t) +\n\t\t\t\tn42 * (\n\t\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t\t - n11 * n24 * n33\n\t\t\t\t\t + n14 * n21 * n33\n\t\t\t\t\t - n13 * n21 * n34\n\t\t\t\t\t + n13 * n24 * n31\n\t\t\t\t\t - n14 * n23 * n31\n\t\t\t\t) +\n\t\t\t\tn43 * (\n\t\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t\t - n11 * n22 * n34\n\t\t\t\t\t - n14 * n21 * n32\n\t\t\t\t\t + n12 * n21 * n34\n\t\t\t\t\t + n14 * n22 * n31\n\t\t\t\t\t - n12 * n24 * n31\n\t\t\t\t) +\n\t\t\t\tn44 * (\n\t\t\t\t\t- n13 * n22 * n31\n\t\t\t\t\t - n11 * n23 * n32\n\t\t\t\t\t + n11 * n22 * n33\n\t\t\t\t\t + n13 * n21 * n32\n\t\t\t\t\t - n12 * n21 * n33\n\t\t\t\t\t + n12 * n23 * n31\n\t\t\t\t)\n\n\t\t\t);\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t\t\t\t\t\"- just use .toArray instead.\" );\n\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\n\t\tgetPosition: function () {\n\n\t\t\tvar v1;\n\n\t\t\treturn function getPosition() {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\n\t\t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetPosition: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 12 ] = v.x;\n\t\t\tte[ 13 ] = v.y;\n\t\t\tte[ 14 ] = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tvar te = this.elements,\n\t\t\t\tme = m.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\t\tif ( det === 0 ) {\n\n\t\t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\n\t\t\t\tif ( throwOnDegenerate || false ) {\n\n\t\t\t\t\tthrow new Error( msg );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( msg );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.identity();\n\n\t\t\t}\n\t\t\t\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 4 ] = t12 * detInv;\n\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 8 ] = t13 * detInv;\n\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\t\tte[ 12 ] = t14 * detInv;\n\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxScaleOnAxis: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t\t},\n\n\t\tmakeTranslation: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationX: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0,  0, 0,\n\t\t\t\t0, c, - s, 0,\n\t\t\t\t0, s,  c, 0,\n\t\t\t\t0, 0,  0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationY: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t c, 0, s, 0,\n\t\t\t\t 0, 1, 0, 0,\n\t\t\t\t- s, 0, c, 0,\n\t\t\t\t 0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationZ: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\tc, - s, 0, 0,\n\t\t\t\ts,  c, 0, 0,\n\t\t\t\t0,  0, 1, 0,\n\t\t\t\t0,  0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\t\tvar c = Math.cos( angle );\n\t\t\tvar s = Math.sin( angle );\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\t\tvar tx = t * x, ty = t * y;\n\n\t\t\tthis.set(\n\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\t return this;\n\n\t\t},\n\n\t\tmakeScale: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\tx, 0, 0, 0,\n\t\t\t\t0, y, 0, 0,\n\t\t\t\t0, 0, z, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcompose: function ( position, quaternion, scale ) {\n\n\t\t\tthis.makeRotationFromQuaternion( quaternion );\n\t\t\tthis.scale( scale );\n\t\t\tthis.setPosition( position );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdecompose: function () {\n\n\t\t\tvar vector, matrix;\n\n\t\t\treturn function decompose( position, quaternion, scale ) {\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tvector = new THREE.Vector3();\n\t\t\t\t\tmatrix = new THREE.Matrix4();\n\n\t\t\t\t}\n\n\t\t\t\tvar te = this.elements;\n\n\t\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t\t// if determine is negative, we need to invert one scale\n\t\t\t\tvar det = this.determinant();\n\t\t\t\tif ( det < 0 ) {\n\n\t\t\t\t\tsx = - sx;\n\n\t\t\t\t}\n\n\t\t\t\tposition.x = te[ 12 ];\n\t\t\t\tposition.y = te[ 13 ];\n\t\t\t\tposition.z = te[ 14 ];\n\n\t\t\t\t// scale the rotation part\n\n\t\t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\n\n\t\t\t\tvar invSX = 1 / sx;\n\t\t\t\tvar invSY = 1 / sy;\n\t\t\t\tvar invSZ = 1 / sz;\n\n\t\t\t\tmatrix.elements[ 0 ] *= invSX;\n\t\t\t\tmatrix.elements[ 1 ] *= invSX;\n\t\t\t\tmatrix.elements[ 2 ] *= invSX;\n\n\t\t\t\tmatrix.elements[ 4 ] *= invSY;\n\t\t\t\tmatrix.elements[ 5 ] *= invSY;\n\t\t\t\tmatrix.elements[ 6 ] *= invSY;\n\n\t\t\t\tmatrix.elements[ 8 ] *= invSZ;\n\t\t\t\tmatrix.elements[ 9 ] *= invSZ;\n\t\t\t\tmatrix.elements[ 10 ] *= invSZ;\n\n\t\t\t\tquaternion.setFromRotationMatrix( matrix );\n\n\t\t\t\tscale.x = sx;\n\t\t\t\tscale.y = sy;\n\t\t\t\tscale.z = sz;\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / ( right - left );\n\t\t\tvar y = 2 * near / ( top - bottom );\n\n\t\t\tvar a = ( right + left ) / ( right - left );\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\t\tvar c = - ( far + near ) / ( far - near );\n\t\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakePerspective: function ( fov, aspect, near, far ) {\n\n\t\t\tvar ymax = near * Math.tan( THREE.Math.DEG2RAD * fov * 0.5 );\n\t\t\tvar ymin = - ymax;\n\t\t\tvar xmin = ymin * aspect;\n\t\t\tvar xmax = ymax * aspect;\n\n\t\t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\n\n\t\t},\n\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / ( right - left );\n\t\t\tvar h = 1.0 / ( top - bottom );\n\t\t\tvar p = 1.0 / ( far - near );\n\n\t\t\tvar x = ( right + left ) * w;\n\t\t\tvar y = ( top + bottom ) * h;\n\t\t\tvar z = ( far + near ) * p;\n\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array ) {\n\n\t\t\tthis.elements.set( array );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\t\tarray[ offset + 8 ]  = te[ 8 ];\n\t\t\tarray[ offset + 9 ]  = te[ 9 ];\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t};\n\n\t// File:src/math/Ray.js\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tTHREE.Ray = function ( origin, direction ) {\n\n\t\tthis.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();\n\t\tthis.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();\n\n\t};\n\n\tTHREE.Ray.prototype = {\n\n\t\tconstructor: THREE.Ray,\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\tthis.origin.copy( origin );\n\t\t\tthis.direction.copy( direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( ray ) {\n\n\t\t\tthis.origin.copy( ray.origin );\n\t\t\tthis.direction.copy( ray.direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tat: function ( t, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t\t},\n\n\t\tlookAt: function ( v ) {\n\n\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trecast: function () {\n\n\t\t\tvar v1 = new THREE.Vector3();\n\n\t\t\treturn function recast( t ) {\n\n\t\t\t\tthis.origin.copy( this.at( t, v1 ) );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclosestPointToPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\tresult.subVectors( point, this.origin );\n\t\t\tvar directionDistance = result.dot( this.direction );\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn result.copy( this.origin );\n\n\t\t\t}\n\n\t\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t\t},\n\n\t\tdistanceSqToPoint: function () {\n\n\t\t\tvar v1 = new THREE.Vector3();\n\n\t\t\treturn function distanceSqToPoint( point ) {\n\n\t\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t\t// point behind the ray\n\n\t\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t\t}\n\n\t\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\t\treturn v1.distanceToSquared( point );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tdistanceSqToSegment: function () {\n\n\t\t\tvar segCenter = new THREE.Vector3();\n\t\t\tvar segDir = new THREE.Vector3();\n\t\t\tvar diff = new THREE.Vector3();\n\n\t\t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t\t// defined by v0 and v1\n\t\t\t\t// It can also set two optional targets :\n\t\t\t\t// - The closest point on the ray\n\t\t\t\t// - The closest point on the segment\n\n\t\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\t\tdiff.copy( this.origin ).sub( segCenter );\n\n\t\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\t\tvar a01 = - this.direction.dot( segDir );\n\t\t\t\tvar b0 = diff.dot( this.direction );\n\t\t\t\tvar b1 = - diff.dot( segDir );\n\t\t\t\tvar c = diff.lengthSq();\n\t\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\t\tif ( det > 0 ) {\n\n\t\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\t\textDet = segExtent * det;\n\n\t\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t\t}\n\n\t\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\n\t\t\t\t}\n\n\t\t\t\treturn sqrDist;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectSphere: function () {\n\n\t\t\tvar v1 = new THREE.Vector3();\n\n\t\t\treturn function intersectSphere( sphere, optionalTarget ) {\n\n\t\t\t\tv1.subVectors( sphere.center, this.origin );\n\t\t\t\tvar tca = v1.dot( this.direction );\n\t\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n\t\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\t\tif ( d2 > radius2 ) return null;\n\n\t\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\t\tvar t0 = tca - thc;\n\n\t\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\t\tvar t1 = tca + thc;\n\n\t\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t\t\t// test to see if t0 is behind the ray:\n\t\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\n\t\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\t\treturn this.at( t0, optionalTarget );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\n\t\t},\n\n\t\tdistanceToPlane: function ( plane ) {\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t\t// Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t :  null;\n\n\t\t},\n\n\t\tintersectPlane: function ( plane, optionalTarget ) {\n\n\t\t\tvar t = this.distanceToPlane( plane );\n\n\t\t\tif ( t === null ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn this.at( t, optionalTarget );\n\n\t\t},\n\n\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// check if the ray lies on the plane first\n\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\t\tif ( distToPoint === 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tintersectBox: function ( box, optionalTarget ) {\n\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\t\tvar origin = this.origin;\n\n\t\t\tif ( invdirx >= 0 ) {\n\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t\t} else {\n\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t\t}\n\n\t\t\tif ( invdiry >= 0 ) {\n\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t\t} else {\n\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\t\tif ( invdirz >= 0 ) {\n\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t\t} else {\n\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t\t//return point closest to the ray (positive side)\n\n\t\t\tif ( tmax < 0 ) return null;\n\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\n\t\t},\n\n\t\tintersectsBox: ( function () {\n\n\t\t\tvar v = new THREE.Vector3();\n\n\t\t\treturn function intersectsBox( box ) {\n\n\t\t\t\treturn this.intersectBox( box, v ) !== null;\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tintersectTriangle: function () {\n\n\t\t\t// Compute the offset origin, edges, and normal.\n\t\t\tvar diff = new THREE.Vector3();\n\t\t\tvar edge1 = new THREE.Vector3();\n\t\t\tvar edge2 = new THREE.Vector3();\n\t\t\tvar normal = new THREE.Vector3();\n\n\t\t\treturn function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {\n\n\t\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\t\tedge1.subVectors( b, a );\n\t\t\t\tedge2.subVectors( c, a );\n\t\t\t\tnormal.crossVectors( edge1, edge2 );\n\n\t\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\t\tvar DdN = this.direction.dot( normal );\n\t\t\t\tvar sign;\n\n\t\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\t\tif ( backfaceCulling ) return null;\n\t\t\t\t\tsign = 1;\n\n\t\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\t\tsign = - 1;\n\t\t\t\t\tDdN = - DdN;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tdiff.subVectors( this.origin, a );\n\t\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\n\t\t\t\t// b1 < 0, no intersection\n\t\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\n\t\t\t\t// b2 < 0, no intersection\n\t\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\t// b1+b2 > 1, no intersection\n\t\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\t// Line intersects triangle, check if ray does.\n\t\t\t\tvar QdN = - sign * diff.dot( normal );\n\n\t\t\t\t// t < 0, no intersection\n\t\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\t// Ray intersects triangle.\n\t\t\t\treturn this.at( QdN / DdN, optionalTarget );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyMatrix4: function ( matrix4 ) {\n\n\t\t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\n\t\t\tthis.origin.applyMatrix4( matrix4 );\n\t\t\tthis.direction.sub( this.origin );\n\t\t\tthis.direction.normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( ray ) {\n\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t\t}\n\n\t};\n\n\t// File:src/math/Sphere.js\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.Sphere = function ( center, radius ) {\n\n\t\tthis.center = ( center !== undefined ) ? center : new THREE.Vector3();\n\t\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n\t};\n\n\tTHREE.Sphere.prototype = {\n\n\t\tconstructor: THREE.Sphere,\n\n\t\tset: function ( center, radius ) {\n\n\t\t\tthis.center.copy( center );\n\t\t\tthis.radius = radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function () {\n\n\t\t\tvar box = new THREE.Box3();\n\n\t\t\treturn function setFromPoints( points, optionalCenter ) {\n\n\t\t\t\tvar center = this.center;\n\n\t\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbox.setFromPoints( points ).center( center );\n\n\t\t\t\t}\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( sphere ) {\n\n\t\t\tthis.center.copy( sphere.center );\n\t\t\tthis.radius = sphere.radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tempty: function () {\n\n\t\t\treturn ( this.radius <= 0 );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsSphere( this );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// We use the following equation to compute the signed distance from\n\t\t\t// the center of the sphere to the plane.\n\t\t\t//\n\t\t\t// distance = q * n - d\n\t\t\t//\n\t\t\t// If this distance is greater than the radius of the sphere,\n\t\t\t// then there is no intersection.\n\n\t\t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\n\n\t\t},\n\n\t\tclampPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\tresult.copy( point );\n\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t\tresult.sub( this.center ).normalize();\n\t\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\tgetBoundingBox: function ( optionalTarget ) {\n\n\t\t\tvar box = optionalTarget || new THREE.Box3();\n\n\t\t\tbox.set( this.center, this.center );\n\t\t\tbox.expandByScalar( this.radius );\n\n\t\t\treturn box;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.center.applyMatrix4( matrix );\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.center.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sphere ) {\n\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t\t}\n\n\t};\n\n\t// File:src/math/Frustum.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / http://clara.io\n\t */\n\n\tTHREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tthis.planes = [\n\n\t\t\t( p0 !== undefined ) ? p0 : new THREE.Plane(),\n\t\t\t( p1 !== undefined ) ? p1 : new THREE.Plane(),\n\t\t\t( p2 !== undefined ) ? p2 : new THREE.Plane(),\n\t\t\t( p3 !== undefined ) ? p3 : new THREE.Plane(),\n\t\t\t( p4 !== undefined ) ? p4 : new THREE.Plane(),\n\t\t\t( p5 !== undefined ) ? p5 : new THREE.Plane()\n\n\t\t];\n\n\t};\n\n\tTHREE.Frustum.prototype = {\n\n\t\tconstructor: THREE.Frustum,\n\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tplanes[ 0 ].copy( p0 );\n\t\t\tplanes[ 1 ].copy( p1 );\n\t\t\tplanes[ 2 ].copy( p2 );\n\t\t\tplanes[ 3 ].copy( p3 );\n\t\t\tplanes[ 4 ].copy( p4 );\n\t\t\tplanes[ 5 ].copy( p5 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( frustum ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix: function ( m ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tintersectsObject: function () {\n\n\t\t\tvar sphere = new THREE.Sphere();\n\n\t\t\treturn function intersectsObject( object ) {\n\n\t\t\t\tvar geometry = object.geometry;\n\n\t\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere )\n\t\t\t\t\t.applyMatrix4( object.matrixWorld );\n\n\t\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsSprite: function () {\n\n\t\t\tvar sphere = new THREE.Sphere();\n\n\t\t\treturn function intersectsSprite( sprite ) {\n\n\t\t\t\tsphere.center.set( 0, 0, 0 );\n\t\t\t\tsphere.radius = 0.7071067811865476;\n\t\t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\n\t\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = - sphere.radius;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tintersectsBox: function () {\n\n\t\t\tvar p1 = new THREE.Vector3(),\n\t\t\t\tp2 = new THREE.Vector3();\n\n\t\t\treturn function intersectsBox( box ) {\n\n\t\t\t\tvar planes = this.planes;\n\n\t\t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\n\n\t\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n\t\t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n\t\t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n\t\t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n\t\t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\n\t\t\t\t\t// if both outside plane, no intersection\n\n\t\t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t};\n\n\t\t}(),\n\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t};\n\n\t// File:src/math/Plane.js\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tTHREE.Plane = function ( normal, constant ) {\n\n\t\tthis.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n\t};\n\n\tTHREE.Plane.prototype = {\n\n\t\tconstructor: THREE.Plane,\n\n\t\tset: function ( normal, constant ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponents: function ( x, y, z, w ) {\n\n\t\t\tthis.normal.set( x, y, z );\n\t\t\tthis.constant = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCoplanarPoints: function () {\n\n\t\t\tvar v1 = new THREE.Vector3();\n\t\t\tvar v2 = new THREE.Vector3();\n\n\t\t\treturn function setFromCoplanarPoints( a, b, c ) {\n\n\t\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\n\t\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( plane ) {\n\n\t\t\tthis.normal.copy( plane.normal );\n\t\t\tthis.constant = plane.constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\t\tthis.constant *= inverseNormalLength;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.constant *= - 1;\n\t\t\tthis.normal.negate();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn this.normal.dot( point ) + this.constant;\n\n\t\t},\n\n\t\tdistanceToSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t\t},\n\n\t\tprojectPoint: function ( point, optionalTarget ) {\n\n\t\t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\n\n\t\t},\n\n\t\torthoPoint: function ( point, optionalTarget ) {\n\n\t\t\tvar perpendicularMagnitude = this.distanceToPoint( point );\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\n\n\t\t},\n\n\t\tintersectLine: function () {\n\n\t\t\tvar v1 = new THREE.Vector3();\n\n\t\t\treturn function intersectLine( line, optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\t\tvar direction = line.delta( v1 );\n\n\t\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t\t// line is coplanar, return origin\n\t\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\t\treturn result.copy( line.start );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\t\treturn undefined;\n\n\t\t\t\t}\n\n\t\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\t\treturn undefined;\n\n\t\t\t\t}\n\n\t\t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsLine: function ( line ) {\n\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\t\tvar startSign = this.distanceToPoint( line.start );\n\t\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsPlane( this );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn sphere.intersectsPlane( this );\n\n\t\t},\n\n\t\tcoplanarPoint: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t\t},\n\n\t\tapplyMatrix4: function () {\n\n\t\t\tvar v1 = new THREE.Vector3();\n\t\t\tvar m1 = new THREE.Matrix3();\n\n\t\t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\n\t\t\t\t// transform normal based on theory here:\n\t\t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\n\t\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n\t\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t// recalculate constant (like in setFromNormalAndCoplanarPoint)\n\t\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.constant = this.constant - offset.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( plane ) {\n\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t\t}\n\n\t};\n\n\t// File:src/math/Spherical.js\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The poles (phi) are at the positive and negative y axis.\n\t * The equator starts at positive z.\n\t */\n\n\tTHREE.Spherical = function ( radius, phi, theta ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\n\t\treturn this;\n\n\t};\n\n\tTHREE.Spherical.prototype = {\n\n\t\tconstructor: THREE.Spherical,\n\n\t\tset: function ( radius, phi, theta ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius.copy( other.radius );\n\t\t\tthis.phi.copy( other.phi );\n\t\t\tthis.theta.copy( other.theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\tmakeSafe: function() {\n\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function( vec3 ) {\n\n\t\t\tthis.radius = vec3.length();\n\n\t\t\tif ( this.radius === 0 ) {\n\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n\t\t\t\tthis.phi = Math.acos( THREE.Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t};\n\n\t// File:src/math/Math.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.Math = {\n\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\n\t\tgenerateUUID: function () {\n\n\t\t\t// http://www.broofa.com/Tools/Math.uuid.htm\n\n\t\t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\n\t\t\tvar uuid = new Array( 36 );\n\t\t\tvar rnd = 0, r;\n\n\t\t\treturn function generateUUID() {\n\n\t\t\t\tfor ( var i = 0; i < 36; i ++ ) {\n\n\t\t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\n\n\t\t\t\t\t\tuuid[ i ] = '-';\n\n\t\t\t\t\t} else if ( i === 14 ) {\n\n\t\t\t\t\t\tuuid[ i ] = '4';\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n\t\t\t\t\t\tr = rnd & 0xf;\n\t\t\t\t\t\trnd = rnd >> 4;\n\t\t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn uuid.join( '' );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclamp: function ( value, min, max ) {\n\n\t\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t\t},\n\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\t\teuclideanModulo: function ( n, m ) {\n\n\t\t\treturn ( ( n % m ) + m ) % m;\n\n\t\t},\n\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t\t},\n\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\t\tsmoothstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) return 0;\n\t\t\tif ( x >= max ) return 1;\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * ( 3 - 2 * x );\n\n\t\t},\n\n\t\tsmootherstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) return 0;\n\t\t\tif ( x >= max ) return 1;\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t\t},\n\n\t\trandom16: function () {\n\n\t\t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\n\t\t\treturn Math.random();\n\n\t\t},\n\n\t\t// Random integer from <low, high> interval\n\n\t\trandInt: function ( low, high ) {\n\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t\t},\n\n\t\t// Random float from <low, high> interval\n\n\t\trandFloat: function ( low, high ) {\n\n\t\t\treturn low + Math.random() * ( high - low );\n\n\t\t},\n\n\t\t// Random float from <-range/2, range/2> interval\n\n\t\trandFloatSpread: function ( range ) {\n\n\t\t\treturn range * ( 0.5 - Math.random() );\n\n\t\t},\n\n\t\tdegToRad: function ( degrees ) {\n\n\t\t\treturn degrees * THREE.Math.DEG2RAD;\n\n\t\t},\n\n\t\tradToDeg: function ( radians ) {\n\n\t\t\treturn radians * THREE.Math.RAD2DEG;\n\n\t\t},\n\n\t\tisPowerOfTwo: function ( value ) {\n\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t\t},\n\n\t\tnearestPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tnextPowerOfTwo: function ( value ) {\n\n\t\t\tvalue --;\n\t\t\tvalue |= value >> 1;\n\t\t\tvalue |= value >> 2;\n\t\t\tvalue |= value >> 4;\n\t\t\tvalue |= value >> 8;\n\t\t\tvalue |= value >> 16;\n\t\t\tvalue ++;\n\n\t\t\treturn value;\n\n\t\t}\n\n\t};\n\n\t// File:src/math/Spline.js\n\n\t/**\n\t * Spline from Tween.js, slightly optimized (and trashed)\n\t * http://sole.github.com/tween.js/examples/05_spline.html\n\t *\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.Spline = function ( points ) {\n\n\t\tthis.points = points;\n\n\t\tvar c = [], v3 = { x: 0, y: 0, z: 0 },\n\t\tpoint, intPoint, weight, w2, w3,\n\t\tpa, pb, pc, pd;\n\n\t\tthis.initFromArray = function ( a ) {\n\n\t\t\tthis.points = [];\n\n\t\t\tfor ( var i = 0; i < a.length; i ++ ) {\n\n\t\t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getPoint = function ( k ) {\n\n\t\t\tpoint = ( this.points.length - 1 ) * k;\n\t\t\tintPoint = Math.floor( point );\n\t\t\tweight = point - intPoint;\n\n\t\t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\n\t\t\tc[ 1 ] = intPoint;\n\t\t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\n\t\t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\n\n\t\t\tpa = this.points[ c[ 0 ] ];\n\t\t\tpb = this.points[ c[ 1 ] ];\n\t\t\tpc = this.points[ c[ 2 ] ];\n\t\t\tpd = this.points[ c[ 3 ] ];\n\n\t\t\tw2 = weight * weight;\n\t\t\tw3 = weight * w2;\n\n\t\t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\n\t\t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\n\t\t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\n\n\t\t\treturn v3;\n\n\t\t};\n\n\t\tthis.getControlPointsArray = function () {\n\n\t\t\tvar i, p, l = this.points.length,\n\t\t\t\tcoords = [];\n\n\t\t\tfor ( i = 0; i < l; i ++ ) {\n\n\t\t\t\tp = this.points[ i ];\n\t\t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\n\n\t\t\t}\n\n\t\t\treturn coords;\n\n\t\t};\n\n\t\t// approximate length by summing linear segments\n\n\t\tthis.getLength = function ( nSubDivisions ) {\n\n\t\t\tvar i, index, nSamples, position,\n\t\t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\n\t\t\t\toldPosition = new THREE.Vector3(),\n\t\t\t\ttmpVec = new THREE.Vector3(),\n\t\t\t\tchunkLengths = [],\n\t\t\t\ttotalLength = 0;\n\n\t\t\t// first point has 0 length\n\n\t\t\tchunkLengths[ 0 ] = 0;\n\n\t\t\tif ( ! nSubDivisions ) nSubDivisions = 100;\n\n\t\t\tnSamples = this.points.length * nSubDivisions;\n\n\t\t\toldPosition.copy( this.points[ 0 ] );\n\n\t\t\tfor ( i = 1; i < nSamples; i ++ ) {\n\n\t\t\t\tindex = i / nSamples;\n\n\t\t\t\tposition = this.getPoint( index );\n\t\t\t\ttmpVec.copy( position );\n\n\t\t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\n\n\t\t\t\toldPosition.copy( position );\n\n\t\t\t\tpoint = ( this.points.length - 1 ) * index;\n\t\t\t\tintPoint = Math.floor( point );\n\n\t\t\t\tif ( intPoint !== oldIntPoint ) {\n\n\t\t\t\t\tchunkLengths[ intPoint ] = totalLength;\n\t\t\t\t\toldIntPoint = intPoint;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// last point ends with total length\n\n\t\t\tchunkLengths[ chunkLengths.length ] = totalLength;\n\n\t\t\treturn { chunks: chunkLengths, total: totalLength };\n\n\t\t};\n\n\t\tthis.reparametrizeByArcLength = function ( samplingCoef ) {\n\n\t\t\tvar i, j,\n\t\t\t\tindex, indexCurrent, indexNext,\n\t\t\t\trealDistance,\n\t\t\t\tsampling, position,\n\t\t\t\tnewpoints = [],\n\t\t\t\ttmpVec = new THREE.Vector3(),\n\t\t\t\tsl = this.getLength();\n\n\t\t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\n\n\t\t\tfor ( i = 1; i < this.points.length; i ++ ) {\n\n\t\t\t\t//tmpVec.copy( this.points[ i - 1 ] );\n\t\t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\n\n\t\t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\n\n\t\t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\n\n\t\t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\n\t\t\t\tindexNext = i / ( this.points.length - 1 );\n\n\t\t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\n\n\t\t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\n\n\t\t\t\t\tposition = this.getPoint( index );\n\t\t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\n\n\t\t\t\t}\n\n\t\t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\n\n\t\t\t}\n\n\t\t\tthis.points = newpoints;\n\n\t\t};\n\n\t\t// Catmull-Rom\n\n\t\tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\n\n\t\t\tvar v0 = ( p2 - p0 ) * 0.5,\n\t\t\t\tv1 = ( p3 - p1 ) * 0.5;\n\n\t\t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t\t}\n\n\t};\n\n\t// File:src/math/Triangle.js\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.Triangle = function ( a, b, c ) {\n\n\t\tthis.a = ( a !== undefined ) ? a : new THREE.Vector3();\n\t\tthis.b = ( b !== undefined ) ? b : new THREE.Vector3();\n\t\tthis.c = ( c !== undefined ) ? c : new THREE.Vector3();\n\n\t};\n\n\tTHREE.Triangle.normal = function () {\n\n\t\tvar v0 = new THREE.Vector3();\n\n\t\treturn function normal( a, b, c, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\tresult.subVectors( c, b );\n\t\t\tv0.subVectors( a, b );\n\t\t\tresult.cross( v0 );\n\n\t\t\tvar resultLengthSq = result.lengthSq();\n\t\t\tif ( resultLengthSq > 0 ) {\n\n\t\t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\n\t\t\t}\n\n\t\t\treturn result.set( 0, 0, 0 );\n\n\t\t};\n\n\t}();\n\n\t// static/instance method to calculate barycentric coordinates\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\tTHREE.Triangle.barycoordFromPoint = function () {\n\n\t\tvar v0 = new THREE.Vector3();\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar v2 = new THREE.Vector3();\n\n\t\treturn function barycoordFromPoint( point, a, b, c, optionalTarget ) {\n\n\t\t\tv0.subVectors( c, a );\n\t\t\tv1.subVectors( b, a );\n\t\t\tv2.subVectors( point, a );\n\n\t\t\tvar dot00 = v0.dot( v0 );\n\t\t\tvar dot01 = v0.dot( v1 );\n\t\t\tvar dot02 = v0.dot( v2 );\n\t\t\tvar dot11 = v1.dot( v1 );\n\t\t\tvar dot12 = v1.dot( v2 );\n\n\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\t// collinear or singular triangle\n\t\t\tif ( denom === 0 ) {\n\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn result.set( - 2, - 1, - 1 );\n\n\t\t\t}\n\n\t\t\tvar invDenom = 1 / denom;\n\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t\t// barycentric coordinates must always sum to 1\n\t\t\treturn result.set( 1 - u - v, v, u );\n\n\t\t};\n\n\t}();\n\n\tTHREE.Triangle.containsPoint = function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function containsPoint( point, a, b, c ) {\n\n\t\t\tvar result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\n\t\t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\n\t\t};\n\n\t}();\n\n\tTHREE.Triangle.prototype = {\n\n\t\tconstructor: THREE.Triangle,\n\n\t\tset: function ( a, b, c ) {\n\n\t\t\tthis.a.copy( a );\n\t\t\tthis.b.copy( b );\n\t\t\tthis.c.copy( c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\t\tthis.a.copy( points[ i0 ] );\n\t\t\tthis.b.copy( points[ i1 ] );\n\t\t\tthis.c.copy( points[ i2 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( triangle ) {\n\n\t\t\tthis.a.copy( triangle.a );\n\t\t\tthis.b.copy( triangle.b );\n\t\t\tthis.c.copy( triangle.c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tarea: function () {\n\n\t\t\tvar v0 = new THREE.Vector3();\n\t\t\tvar v1 = new THREE.Vector3();\n\n\t\t\treturn function area() {\n\n\t\t\t\tv0.subVectors( this.c, this.b );\n\t\t\t\tv1.subVectors( this.a, this.b );\n\n\t\t\t\treturn v0.cross( v1 ).length() * 0.5;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmidpoint: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t\t},\n\n\t\tnormal: function ( optionalTarget ) {\n\n\t\t\treturn THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\n\t\t},\n\n\t\tplane: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Plane();\n\n\t\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t\t},\n\n\t\tbarycoordFromPoint: function ( point, optionalTarget ) {\n\n\t\t\treturn THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn THREE.Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t\t},\n\n\t\tclosestPointToPoint: function () {\n\n\t\t\tvar plane, edgeList, projectedPoint, closestPoint;\n\n\t\t\treturn function closestPointToPoint( point, optionalTarget ) {\n\n\t\t\t\tif ( plane === undefined ) {\n\n\t\t\t\t\tplane = new THREE.Plane();\n\t\t\t\t\tedgeList = [ new THREE.Line3(), new THREE.Line3(), new THREE.Line3() ];\n\t\t\t\t\tprojectedPoint = new THREE.Vector3();\n\t\t\t\t\tclosestPoint = new THREE.Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\t\tvar minDistance = Infinity;\n\n\t\t\t\t// project the point onto the plane of the triangle\n\n\t\t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n\t\t\t\tplane.projectPoint( point, projectedPoint );\n\n\t\t\t\t// check if the projection lies within the triangle\n\n\t\t\t\tif( this.containsPoint( projectedPoint ) === true ) {\n\n\t\t\t\t\t// if so, this is the closest point\n\n\t\t\t\t\tresult.copy( projectedPoint );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n\n\t\t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n\t\t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n\t\t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\n\t\t\t\t\tfor( var i = 0; i < edgeList.length; i ++ ) {\n\n\t\t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\n\t\t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\n\t\t\t\t\t\tif( distance < minDistance ) {\n\n\t\t\t\t\t\t\tminDistance = distance;\n\n\t\t\t\t\t\t\tresult.copy( closestPoint );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tequals: function ( triangle ) {\n\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t\t}\n\n\t};\n\n\t// File:src/math/Interpolant.js\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t * @author tschw\n\t */\n\n\tTHREE.Interpolant = function(\n\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t};\n\n\tTHREE.Interpolant.prototype = {\n\n\t\tconstructor: THREE.Interpolant,\n\n\t\tevaluate: function( t ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\ti1 = this._cachedIndex,\n\n\t\t\t\tt1 = pp[   i1   ],\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\tvalidate_interval: {\n\n\t\t\t\tseek: {\n\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\t//- See http://jsperf.com/comparison-to-undefined/3\n\t//- slower code:\n\t//-\n\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\n\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t//- slower code:\n\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\n\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t\t} // linear scan\n\n\t\t\t\t\t// binary search\n\n\t\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[   i1   ];\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t\t// check boundary cases, again\n\n\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // seek\n\n\t\t\t\tthis._cachedIndex = i1;\n\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t\t} // validate_interval\n\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t\t},\n\n\t\tsettings: null, // optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\n\t\t// --- Protected interface\n\n\t\tDefaultSettings_: {},\n\n\t\tgetSettings_: function() {\n\n\t\t\treturn this.settings || this.DefaultSettings_;\n\n\t\t},\n\n\t\tcopySampleValue_: function( index ) {\n\n\t\t\t// copies a sample value to the result buffer\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = index * stride;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// Template methods for derived classes:\n\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\t\tthrow new Error( \"call to abstract method\" );\n\t\t\t// implementations shall return this.resultBuffer\n\n\t\t},\n\n\t\tintervalChanged_: function( i1, t0, t1 ) {\n\n\t\t\t// empty\n\n\t\t}\n\n\t};\n\n\tObject.assign( THREE.Interpolant.prototype, {\n\n\t\tbeforeStart_: //( 0, t, t0 ), returns this.resultBuffer\n\t\t\tTHREE.Interpolant.prototype.copySampleValue_,\n\n\t\tafterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\n\t\t\tTHREE.Interpolant.prototype.copySampleValue_\n\n\t} );\n\n\t// File:src/math/interpolants/CubicInterpolant.js\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t *\n\t * @author tschw\n\t */\n\n\tTHREE.CubicInterpolant = function(\n\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tTHREE.Interpolant.call(\n\t\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = -0;\n\t\tthis._offsetPrev = -0;\n\t\tthis._weightNext = -0;\n\t\tthis._offsetNext = -0;\n\n\t};\n\n\tTHREE.CubicInterpolant.prototype =\n\t\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\n\t\tconstructor: THREE.CubicInterpolant,\n\n\t\tDefaultSettings_: {\n\n\t\t\tendingStart: \tTHREE.ZeroCurvatureEnding,\n\t\t\tendingEnd:\t\tTHREE.ZeroCurvatureEnding\n\n\t\t},\n\n\t\tintervalChanged_: function( i1, t0, t1 ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\tiPrev = i1 - 2,\n\t\t\t\tiNext = i1 + 1,\n\n\t\t\t\ttPrev = pp[ iPrev ],\n\t\t\t\ttNext = pp[ iNext ];\n\n\t\t\tif ( tPrev === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\t\tcase THREE.ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tNext === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\t\tcase THREE.ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\t\tstride = this.valueSize;\n\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\n\t\t},\n\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tpp = p * p,\n\t\t\t\tppp = pp * p;\n\n\t\t\t// evaluate polynomials\n\n\t\t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\n\t\t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\n\t\t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\n\t\t\tvar sN =       wN   * ppp   -           wN      * pp;\n\n\t\t\t// combine data linearly\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t// File:src/math/interpolants/DiscreteInterpolant.js\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t *\n\t * @author tschw\n\t */\n\n\tTHREE.DiscreteInterpolant = function(\n\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tTHREE.Interpolant.call(\n\t\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t};\n\n\tTHREE.DiscreteInterpolant.prototype =\n\t\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\n\t\tconstructor: THREE.DiscreteInterpolant,\n\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t}\n\n\t} );\n\n\t// File:src/math/interpolants/LinearInterpolant.js\n\n\t/**\n\t * @author tschw\n\t */\n\n\tTHREE.LinearInterpolant = function(\n\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tTHREE.Interpolant.call(\n\t\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t};\n\n\tTHREE.LinearInterpolant.prototype =\n\t\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\n\t\tconstructor: THREE.LinearInterpolant,\n\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset1 = i1 * stride,\n\t\t\t\toffset0 = offset1 - stride,\n\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t// File:src/math/interpolants/QuaternionLinearInterpolant.js\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t *\n\t * @author tschw\n\t */\n\n\tTHREE.QuaternionLinearInterpolant = function(\n\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tTHREE.Interpolant.call(\n\t\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t};\n\n\tTHREE.QuaternionLinearInterpolant.prototype =\n\t\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\n\t\tconstructor: THREE.QuaternionLinearInterpolant,\n\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset = i1 * stride,\n\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\t\tTHREE.Quaternion.slerpFlat( result, 0,\n\t\t\t\t\t\tvalues, offset - stride, values, offset, alpha );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t// File:src/core/Clock.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.Clock = function ( autoStart ) {\n\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t};\n\n\tTHREE.Clock.prototype = {\n\n\t\tconstructor: THREE.Clock,\n\n\t\tstart: function () {\n\n\t\t\tthis.startTime = ( performance || Date ).now();\n\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.running = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\n\t\t},\n\n\t\tgetElapsedTime: function () {\n\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\n\t\t},\n\n\t\tgetDelta: function () {\n\n\t\t\tvar diff = 0;\n\n\t\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\t\tthis.start();\n\n\t\t\t}\n\n\t\t\tif ( this.running ) {\n\n\t\t\t\tvar newTime = ( performance || Date ).now();\n\n\t\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\n\t\t\t\tthis.elapsedTime += diff;\n\n\t\t\t}\n\n\t\t\treturn diff;\n\n\t\t}\n\n\t};\n\n\t// File:src/core/EventDispatcher.js\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\n\tTHREE.EventDispatcher = function () {};\n\n\tObject.assign( THREE.EventDispatcher.prototype, {\n\n\t\taddEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\t\tlisteners[ type ] = [];\n\n\t\t\t}\n\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\t\tlisteners[ type ].push( listener );\n\n\t\t\t}\n\n\t\t},\n\n\t\thasEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) return false;\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tremoveEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) return;\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tdispatchEvent: function ( event ) {\n\n\t\t\tif ( this._listeners === undefined ) return;\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ event.type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tevent.target = this;\n\n\t\t\t\tvar array = [], i = 0;\n\t\t\t\tvar length = listenerArray.length;\n\n\t\t\t\tfor ( i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tarray[ i ] = listenerArray[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t// File:src/core/Layers.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.Layers = function () {\n\n\t\tthis.mask = 1;\n\n\t};\n\n\tTHREE.Layers.prototype = {\n\n\t\tconstructor: THREE.Layers,\n\n\t\tset: function ( channel ) {\n\n\t\t\tthis.mask = 1 << channel;\n\n\t\t},\n\n\t\tenable: function ( channel ) {\n\n\t\t\tthis.mask |= 1 << channel;\n\n\t\t},\n\n\t\ttoggle: function ( channel ) {\n\n\t\t\tthis.mask ^= 1 << channel;\n\n\t\t},\n\n\t\tdisable: function ( channel ) {\n\n\t\t\tthis.mask &= ~ ( 1 << channel );\n\n\t\t},\n\n\t\ttest: function ( layers ) {\n\n\t\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t\t}\n\n\t};\n\n\t// File:src/core/Raycaster.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author bhouston / http://clara.io/\n\t * @author stephomi / http://stephaneginier.com/\n\t */\n\n\t( function ( THREE ) {\n\n\t\tTHREE.Raycaster = function ( origin, direction, near, far ) {\n\n\t\t\tthis.ray = new THREE.Ray( origin, direction );\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.near = near || 0;\n\t\t\tthis.far = far || Infinity;\n\n\t\t\tthis.params = {\n\t\t\t\tMesh: {},\n\t\t\t\tLine: {},\n\t\t\t\tLOD: {},\n\t\t\t\tPoints: { threshold: 1 },\n\t\t\t\tSprite: {}\n\t\t\t};\n\n\t\t\tObject.defineProperties( this.params, {\n\t\t\t\tPointCloud: {\n\t\t\t\t\tget: function () {\n\t\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\t\treturn this.Points;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\n\t\t};\n\n\t\tfunction ascSort( a, b ) {\n\n\t\t\treturn a.distance - b.distance;\n\n\t\t}\n\n\t\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\t\t\tif ( object.visible === false ) return;\n\n\t\t\tobject.raycast( raycaster, intersects );\n\n\t\t\tif ( recursive === true ) {\n\n\t\t\t\tvar children = object.children;\n\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tTHREE.Raycaster.prototype = {\n\n\t\t\tconstructor: THREE.Raycaster,\n\n\t\t\tlinePrecision: 1,\n\n\t\t\tset: function ( origin, direction ) {\n\n\t\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\t\tthis.ray.set( origin, direction );\n\n\t\t\t},\n\n\t\t\tsetFromCamera: function ( coords, camera ) {\n\n\t\t\t\tif ( camera instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\n\t\t\t\t} else if ( camera instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tintersectObject: function ( object, recursive ) {\n\n\t\t\t\tvar intersects = [];\n\n\t\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\t\tintersects.sort( ascSort );\n\n\t\t\t\treturn intersects;\n\n\t\t\t},\n\n\t\t\tintersectObjects: function ( objects, recursive ) {\n\n\t\t\t\tvar intersects = [];\n\n\t\t\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\t\treturn intersects;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t\t}\n\n\t\t\t\tintersects.sort( ascSort );\n\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t};\n\n\t}( THREE ) );\n\n\t// File:src/core/Object3D.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author elephantatwork / www.elephantatwork.ch\n\t */\n\n\tTHREE.Object3D = function () {\n\n\t\tObject.defineProperty( this, 'id', { value: THREE.Object3DIdCount ++ } );\n\n\t\tthis.uuid = THREE.Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = THREE.Object3D.DefaultUp.clone();\n\n\t\tvar position = new THREE.Vector3();\n\t\tvar rotation = new THREE.Euler();\n\t\tvar quaternion = new THREE.Quaternion();\n\t\tvar scale = new THREE.Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation.onChange( onRotationChange );\n\t\tquaternion.onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new THREE.Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new THREE.Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new THREE.Matrix4();\n\t\tthis.matrixWorld = new THREE.Matrix4();\n\n\t\tthis.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.layers = new THREE.Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.userData = {};\n\n\t};\n\n\tTHREE.Object3D.DefaultUp = new THREE.Vector3( 0, 1, 0 );\n\tTHREE.Object3D.DefaultMatrixAutoUpdate = true;\n\n\tObject.assign( THREE.Object3D.prototype, THREE.EventDispatcher.prototype, {\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t\t},\n\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t\t},\n\n\t\tsetRotationFromEuler: function ( euler ) {\n\n\t\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t\t},\n\n\t\tsetRotationFromMatrix: function ( m ) {\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t\t},\n\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\t// assumes q is normalized\n\n\t\t\tthis.quaternion.copy( q );\n\n\t\t},\n\n\t\trotateOnAxis: function () {\n\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\tvar q1 = new THREE.Quaternion();\n\n\t\t\treturn function rotateOnAxis( axis, angle ) {\n\n\t\t\t\tq1.setFromAxisAngle( axis, angle );\n\n\t\t\t\tthis.quaternion.multiply( q1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateX: function () {\n\n\t\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\n\n\t\t\treturn function rotateX( angle ) {\n\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateY: function () {\n\n\t\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\n\n\t\t\treturn function rotateY( angle ) {\n\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateZ: function () {\n\n\t\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\n\n\t\t\treturn function rotateZ( angle ) {\n\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateOnAxis: function () {\n\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\tvar v1 = new THREE.Vector3();\n\n\t\t\treturn function translateOnAxis( axis, distance ) {\n\n\t\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateX: function () {\n\n\t\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\n\n\t\t\treturn function translateX( distance ) {\n\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateY: function () {\n\n\t\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\n\n\t\t\treturn function translateY( distance ) {\n\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateZ: function () {\n\n\t\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\n\n\t\t\treturn function translateZ( distance ) {\n\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlocalToWorld: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t\t},\n\n\t\tworldToLocal: function () {\n\n\t\t\tvar m1 = new THREE.Matrix4();\n\n\t\t\treturn function worldToLocal( vector ) {\n\n\t\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\t// This routine does not support objects with rotated and/or translated parent(s)\n\n\t\t\tvar m1 = new THREE.Matrix4();\n\n\t\t\treturn function lookAt( vector ) {\n\n\t\t\t\tm1.lookAt( vector, this.position, this.up );\n\n\t\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tadd: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( object === this ) {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( object instanceof THREE.Object3D ) {\n\n\t\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\t\tobject.parent.remove( object );\n\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tobject.dispatchEvent( { type: 'added' } );\n\n\t\t\t\tthis.children.push( object );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tremove: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf( object );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tobject.parent = null;\n\n\t\t\t\tobject.dispatchEvent( { type: 'removed' } );\n\n\t\t\t\tthis.children.splice( index, 1 );\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetObjectById: function ( id ) {\n\n\t\t\treturn this.getObjectByProperty( 'id', id );\n\n\t\t},\n\n\t\tgetObjectByName: function ( name ) {\n\n\t\t\treturn this.getObjectByProperty( 'name', name );\n\n\t\t},\n\n\t\tgetObjectByProperty: function ( name, value ) {\n\n\t\t\tif ( this[ name ] === value ) return this;\n\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = this.children[ i ];\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\t\tif ( object !== undefined ) {\n\n\t\t\t\t\treturn object;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tgetWorldPosition: function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\n\t\t},\n\n\t\tgetWorldQuaternion: function () {\n\n\t\t\tvar position = new THREE.Vector3();\n\t\t\tvar scale = new THREE.Vector3();\n\n\t\t\treturn function getWorldQuaternion( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new THREE.Quaternion();\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.matrixWorld.decompose( position, result, scale );\n\n\t\t\t\treturn result;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetWorldRotation: function () {\n\n\t\t\tvar quaternion = new THREE.Quaternion();\n\n\t\t\treturn function getWorldRotation( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new THREE.Euler();\n\n\t\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetWorldScale: function () {\n\n\t\t\tvar position = new THREE.Vector3();\n\t\t\tvar quaternion = new THREE.Quaternion();\n\n\t\t\treturn function getWorldScale( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\n\t\t\t\treturn result;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetWorldDirection: function () {\n\n\t\t\tvar quaternion = new THREE.Quaternion();\n\n\t\t\treturn function getWorldDirection( optionalTarget ) {\n\n\t\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\traycast: function () {},\n\n\t\ttraverse: function ( callback ) {\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverse( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseVisible: function ( callback ) {\n\n\t\t\tif ( this.visible === false ) return;\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseAncestors: function ( callback ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tcallback( parent );\n\n\t\t\t\tparent.traverseAncestors( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\n\n\t\t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\n\n\t\t\t\tif ( this.parent === null ) {\n\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\t\tforce = true;\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\t\tthis.children[ i ].updateMatrixWorld( force );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\t// meta is '' when called from JSON.stringify\n\t\t\tvar isRootObject = ( meta === undefined || meta === '' );\n\n\t\t\tvar output = {};\n\n\t\t\t// meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.4,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// standard Object3D serialization\n\n\t\t\tvar object = {};\n\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\n\t\t\tif ( this.name !== '' ) object.name = this.name;\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\t\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\t\tif ( this.visible === false ) object.visible = false;\n\n\t\t\tobject.matrix = this.matrix.toArray();\n\n\t\t\t//\n\n\t\t\tif ( this.geometry !== undefined ) {\n\n\t\t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\n\n\t\t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\n\n\t\t\t\t}\n\n\t\t\t\tobject.geometry = this.geometry.uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.material !== undefined ) {\n\n\t\t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\n\n\t\t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\n\n\t\t\t\t}\n\n\t\t\t\tobject.material = this.material.uuid;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.children.length > 0 ) {\n\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\t\tif ( images.length > 0 ) output.images = images;\n\n\t\t\t}\n\n\t\t\toutput.object = object;\n\n\t\t\treturn output;\n\n\t\t\t// extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\t\t\tfunction extractFromCache ( cache ) {\n\n\t\t\t\tvar values = [];\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function ( recursive ) {\n\n\t\t\treturn new this.constructor().copy( this, recursive );\n\n\t\t},\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tif ( recursive === undefined ) recursive = true;\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.up.copy( source.up );\n\n\t\t\tthis.position.copy( source.position );\n\t\t\tthis.quaternion.copy( source.quaternion );\n\t\t\tthis.scale.copy( source.scale );\n\n\t\t\tthis.matrix.copy( source.matrix );\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\tif ( recursive === true ) {\n\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\t\tvar child = source.children[ i ];\n\t\t\t\t\tthis.add( child.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tTHREE.Object3DIdCount = 0;\n\n\t// File:src/core/Face3.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\t\tthis.color = color instanceof THREE.Color ? color : new THREE.Color();\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n\t};\n\n\tTHREE.Face3.prototype = {\n\n\t\tconstructor: THREE.Face3,\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.a = source.a;\n\t\t\tthis.b = source.b;\n\t\t\tthis.c = source.c;\n\n\t\t\tthis.normal.copy( source.normal );\n\t\t\tthis.color.copy( source.color );\n\n\t\t\tthis.materialIndex = source.materialIndex;\n\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t};\n\n\t// File:src/core/BufferAttribute.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.BufferAttribute = function ( array, itemSize, normalized ) {\n\n\t\tthis.uuid = THREE.Math.generateUUID();\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\n\t\tthis.dynamic = false;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\t\tthis.normalized = normalized === true;\n\n\t};\n\n\tTHREE.BufferAttribute.prototype = {\n\n\t\tconstructor: THREE.BufferAttribute,\n\n\t\tget count() {\n\n\t\t\treturn this.array.length / this.itemSize;\n\n\t\t},\n\n\t\tset needsUpdate( value ) {\n\n\t\t\tif ( value === true ) this.version ++;\n\n\t\t},\n\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tthis.dynamic = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.itemSize = source.itemSize;\n\n\t\t\tthis.dynamic = source.dynamic;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyArray: function ( array ) {\n\n\t\t\tthis.array.set( array );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyColorsArray: function ( colors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\t\tvar color = colors[ i ];\n\n\t\t\t\tif ( color === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\t\tcolor = new THREE.Color();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = color.r;\n\t\t\t\tarray[ offset ++ ] = color.g;\n\t\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyIndicesArray: function ( indices ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tvar index = indices[ i ];\n\n\t\t\t\tarray[ offset ++ ] = index.a;\n\t\t\t\tarray[ offset ++ ] = index.b;\n\t\t\t\tarray[ offset ++ ] = index.c;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector2sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new THREE.Vector2();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector3sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new THREE.Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector4sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new THREE.Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize ];\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\t\t\tthis.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tTHREE.Int8Attribute = function ( array, itemSize ) {\n\n\t\treturn new THREE.BufferAttribute( new Int8Array( array ), itemSize );\n\n\t};\n\n\tTHREE.Uint8Attribute = function ( array, itemSize ) {\n\n\t\treturn new THREE.BufferAttribute( new Uint8Array( array ), itemSize );\n\n\t};\n\n\tTHREE.Uint8ClampedAttribute = function ( array, itemSize ) {\n\n\t\treturn new THREE.BufferAttribute( new Uint8ClampedArray( array ), itemSize );\n\n\t};\n\n\tTHREE.Int16Attribute = function ( array, itemSize ) {\n\n\t\treturn new THREE.BufferAttribute( new Int16Array( array ), itemSize );\n\n\t};\n\n\tTHREE.Uint16Attribute = function ( array, itemSize ) {\n\n\t\treturn new THREE.BufferAttribute( new Uint16Array( array ), itemSize );\n\n\t};\n\n\tTHREE.Int32Attribute = function ( array, itemSize ) {\n\n\t\treturn new THREE.BufferAttribute( new Int32Array( array ), itemSize );\n\n\t};\n\n\tTHREE.Uint32Attribute = function ( array, itemSize ) {\n\n\t\treturn new THREE.BufferAttribute( new Uint32Array( array ), itemSize );\n\n\t};\n\n\tTHREE.Float32Attribute = function ( array, itemSize ) {\n\n\t\treturn new THREE.BufferAttribute( new Float32Array( array ), itemSize );\n\n\t};\n\n\tTHREE.Float64Attribute = function ( array, itemSize ) {\n\n\t\treturn new THREE.BufferAttribute( new Float64Array( array ), itemSize );\n\n\t};\n\n\n\t// Deprecated\n\n\tTHREE.DynamicBufferAttribute = function ( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\t\treturn new THREE.BufferAttribute( array, itemSize ).setDynamic( true );\n\n\t};\n\n\t// File:src/core/InstancedBufferAttribute.js\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tTHREE.InstancedBufferAttribute = function ( array, itemSize, meshPerAttribute ) {\n\n\t\tTHREE.BufferAttribute.call( this, array, itemSize );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t};\n\n\tTHREE.InstancedBufferAttribute.prototype = Object.create( THREE.BufferAttribute.prototype );\n\tTHREE.InstancedBufferAttribute.prototype.constructor = THREE.InstancedBufferAttribute;\n\n\tTHREE.InstancedBufferAttribute.prototype.copy = function ( source ) {\n\n\t\tTHREE.BufferAttribute.prototype.copy.call( this, source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t};\n\n\t// File:src/core/InterleavedBuffer.js\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tTHREE.InterleavedBuffer = function ( array, stride ) {\n\n\t\tthis.uuid = THREE.Math.generateUUID();\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\n\t\tthis.dynamic = false;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t};\n\n\tTHREE.InterleavedBuffer.prototype = {\n\n\t\tconstructor: THREE.InterleavedBuffer,\n\n\t\tget length () {\n\n\t\t\treturn this.array.length;\n\n\t\t},\n\n\t\tget count () {\n\n\t\t\treturn this.array.length / this.stride;\n\n\t\t},\n\n\t\tset needsUpdate( value ) {\n\n\t\t\tif ( value === true ) this.version ++;\n\n\t\t},\n\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tthis.dynamic = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.dynamic = source.dynamic;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t};\n\n\t// File:src/core/InstancedInterleavedBuffer.js\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tTHREE.InstancedInterleavedBuffer = function ( array, stride, meshPerAttribute ) {\n\n\t\tTHREE.InterleavedBuffer.call( this, array, stride );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t};\n\n\tTHREE.InstancedInterleavedBuffer.prototype = Object.create( THREE.InterleavedBuffer.prototype );\n\tTHREE.InstancedInterleavedBuffer.prototype.constructor = THREE.InstancedInterleavedBuffer;\n\n\tTHREE.InstancedInterleavedBuffer.prototype.copy = function ( source ) {\n\n\t\tTHREE.InterleavedBuffer.prototype.copy.call( this, source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t};\n\n\t// File:src/core/InterleavedBufferAttribute.js\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tTHREE.InterleavedBufferAttribute = function ( interleavedBuffer, itemSize, offset, normalized ) {\n\n\t\tthis.uuid = THREE.Math.generateUUID();\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized === true;\n\n\t};\n\n\n\tTHREE.InterleavedBufferAttribute.prototype = {\n\n\t\tconstructor: THREE.InterleavedBufferAttribute,\n\n\t\tget length() {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n\t\t\treturn this.array.length;\n\n\t\t},\n\n\t\tget count() {\n\n\t\t\treturn this.data.count;\n\n\t\t},\n\n\t\tget array() {\n\n\t\t\treturn this.data.array;\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\t\t\tthis.data.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t};\n\n\t// File:src/core/Geometry.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author bhouston / http://clara.io\n\t */\n\n\tTHREE.Geometry = function () {\n\n\t\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\n\t\tthis.uuid = THREE.Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Geometry';\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [ [] ];\n\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\tthis.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = false;\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.lineDistancesNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t};\n\n\tObject.assign( THREE.Geometry.prototype, THREE.EventDispatcher.prototype, {\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\tthis.verticesNeedUpdate = true;\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function () {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\tvar m1;\n\n\t\t\treturn function rotateX( angle ) {\n\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\t\tm1.makeRotationX( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateY: function () {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\tvar m1;\n\n\t\t\treturn function rotateY( angle ) {\n\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\t\tm1.makeRotationY( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateZ: function () {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\tvar m1;\n\n\t\t\treturn function rotateZ( angle ) {\n\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\t\tm1.makeRotationZ( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function () {\n\n\t\t\t// translate geometry\n\n\t\t\tvar m1;\n\n\t\t\treturn function translate( x, y, z ) {\n\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tscale: function () {\n\n\t\t\t// scale geometry\n\n\t\t\tvar m1;\n\n\t\t\treturn function scale( x, y, z ) {\n\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\t\tm1.makeScale( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\tvar obj;\n\n\t\t\treturn function lookAt( vector ) {\n\n\t\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\n\n\t\t\t\tobj.lookAt( vector );\n\n\t\t\t\tobj.updateMatrix();\n\n\t\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tfromBufferGeometry: function ( geometry ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tvar positions = attributes.position.array;\n\t\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\n\t\t\tvar tempNormals = [];\n\t\t\tvar tempUVs = [];\n\t\t\tvar tempUVs2 = [];\n\n\t\t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\n\t\t\t\tscope.vertices.push( new THREE.Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\n\t\t\t\tif ( normals !== undefined ) {\n\n\t\t\t\t\ttempNormals.push( new THREE.Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\t\tscope.colors.push( new THREE.Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\ttempUVs.push( new THREE.Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\t\ttempUVs2.push( new THREE.Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n\t\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\n\t\t\t\tvar face = new THREE.Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\t\tscope.faces.push( face );\n\n\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\t\tvar start = group.start;\n\t\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n\t\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tvar offset = this.boundingBox.center().negate();\n\n\t\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\t\treturn offset;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t\tvar center = this.boundingSphere.center;\n\t\t\tvar radius = this.boundingSphere.radius;\n\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\t\tvar matrix = new THREE.Matrix4();\n\t\t\tmatrix.set(\n\t\t\t\ts, 0, 0, - s * center.x,\n\t\t\t\t0, s, 0, - s * center.y,\n\t\t\t\t0, 0, s, - s * center.z,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\tthis.applyMatrix( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tcb.normalize();\n\n\t\t\t\tface.normal.copy( cb );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\n\t\t\tvar v, vl, f, fl, face, vertices;\n\n\t\t\tvertices = new Array( this.vertices.length );\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ] = new THREE.Vector3();\n\n\t\t\t}\n\n\t\t\tif ( areaWeighted ) {\n\n\t\t\t\t// vertex normals weighted by triangle areas\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ].normalize();\n\n\t\t\t}\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeMorphNormals: function () {\n\n\t\t\tvar i, il, f, fl, face;\n\n\t\t\t// save original normals\n\t\t\t// - create temp variables on first access\n\t\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n\t\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\t\tvar tmpGeo = new THREE.Geometry();\n\t\t\ttmpGeo.faces = this.faces;\n\n\t\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\t// create on first access\n\n\t\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tfaceNormal = new THREE.Vector3();\n\t\t\t\t\t\tvertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };\n\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t\t// set vertices to morph target\n\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t\t// compute morph normals\n\n\t\t\t\ttmpGeo.computeFaceNormals();\n\t\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t\t// store morph normals\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restore original normals\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t\t},\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar d = 0;\n\t\t\tvar vertices = this.vertices;\n\n\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tif ( i > 0 ) {\n\n\t\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.lineDistances[ i ] = d;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new THREE.Box3();\n\n\t\t\t}\n\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new THREE.Sphere();\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\t\tif ( geometry instanceof THREE.Geometry === false ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar normalMatrix,\n\t\t\tvertexOffset = this.vertices.length,\n\t\t\tvertices1 = this.vertices,\n\t\t\tvertices2 = geometry.vertices,\n\t\t\tfaces1 = this.faces,\n\t\t\tfaces2 = geometry.faces,\n\t\t\tuvs1 = this.faceVertexUvs[ 0 ],\n\t\t\tuvs2 = geometry.faceVertexUvs[ 0 ];\n\n\t\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n\t\t\tif ( matrix !== undefined ) {\n\n\t\t\t\tnormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n\t\t\t}\n\n\t\t\t// vertices\n\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n\t\t\t\tvertices1.push( vertexCopy );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\t\tfaceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\t\tfaces1.push( faceCopy );\n\n\t\t\t}\n\n\t\t\t// uvs\n\n\t\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\n\t\t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\n\t\t\t\tif ( uv === undefined ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n\t\t\t\t\tuvCopy.push( uv[ j ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tuvs1.push( uvCopy );\n\n\t\t\t}\n\n\t\t},\n\n\t\tmergeMesh: function ( mesh ) {\n\n\t\t\tif ( mesh instanceof THREE.Mesh === false ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\n\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t\t},\n\n\t\t/*\n\t\t * Checks for duplicate vertices with hashmap.\n\t\t * Duplicated vertices are removed\n\t\t * and faces' vertices are updated.\n\t\t */\n\n\t\tmergeVertices: function () {\n\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\t\tvar unique = [], changes = [];\n\n\t\t\tvar v, key;\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\t\tvar i, il, face;\n\t\t\tvar indices, j, jl;\n\n\t\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tv = this.vertices[ i ];\n\t\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// if faces are completely degenerate after merging vertices, we\n\t\t\t// have to remove them from the geometry.\n\t\t\tvar faceIndicesToRemove = [];\n\n\t\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tface = this.faces[ i ];\n\n\t\t\t\tface.a = changes[ face.a ];\n\t\t\t\tface.b = changes[ face.b ];\n\t\t\t\tface.c = changes[ face.c ];\n\n\t\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\t\tvar dupIndex = - 1;\n\n\t\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t\t// we have to remove the face as nothing can be saved\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\t\tdupIndex = n;\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Use unique set of vertices\n\n\t\t\tvar diff = this.vertices.length - unique.length;\n\t\t\tthis.vertices = unique;\n\t\t\treturn diff;\n\n\t\t},\n\n\t\tsortFacesByMaterialIndex: function () {\n\n\t\t\tvar faces = this.faces;\n\t\t\tvar length = faces.length;\n\n\t\t\t// tag faces\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tfaces[ i ]._id = i;\n\n\t\t\t}\n\n\t\t\t// sort faces\n\n\t\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t\t}\n\n\t\t\tfaces.sort( materialIndexSort );\n\n\t\t\t// sort uvs\n\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\t\tvar newUvs1, newUvs2;\n\n\t\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar id = faces[ i ]._id;\n\n\t\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\n\t\t\t}\n\n\t\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.4,\n\t\t\t\t\ttype: 'Geometry',\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Geometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tvar vertices = [];\n\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t\tvar faces = [];\n\t\t\tvar normals = [];\n\t\t\tvar normalsHash = {};\n\t\t\tvar colors = [];\n\t\t\tvar colorsHash = {};\n\t\t\tvar uvs = [];\n\t\t\tvar uvsHash = {};\n\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\n\t\t\t\tvar hasMaterial = true;\n\t\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\t\tvar faceType = 0;\n\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\t\tfaces.push( faceType );\n\t\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\t\tfaces.push( face.materialIndex );\n\n\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t\t}\n\n\t\t\tfunction getNormalIndex( normal ) {\n\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getColorIndex( color ) {\n\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\t\tcolors.push( color.getHex() );\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getUvIndex( uv ) {\n\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tdata.data = {};\n\n\t\t\tdata.data.vertices = vertices;\n\t\t\tdata.data.normals = normals;\n\t\t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t\t\tdata.data.faces = faces;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t// Handle primitives\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tif ( parameters !== undefined ) {\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tvalues.push( parameters[ key ] );\n\n\t\t\t\t}\n\n\t\t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t\t\t\tthis.constructor.apply( geometry, values );\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t\treturn new this.constructor().copy( this );\n\t\t\t*/\n\n\t\t\treturn new THREE.Geometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.vertices = [];\n\t\t\tthis.faces = [];\n\t\t\tthis.faceVertexUvs = [ [] ];\n\n\t\t\tvar vertices = source.vertices;\n\n\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\tvar faces = source.faces;\n\n\t\t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tTHREE.GeometryIdCount = 0;\n\n\t// File:src/core/DirectGeometry.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.DirectGeometry = function () {\n\n\t\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\n\t\tthis.uuid = THREE.Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'DirectGeometry';\n\n\t\tthis.indices = [];\n\t\tthis.vertices = [];\n\t\tthis.normals = [];\n\t\tthis.colors = [];\n\t\tthis.uvs = [];\n\t\tthis.uvs2 = [];\n\n\t\tthis.groups = [];\n\n\t\tthis.morphTargets = {};\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\t// this.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t};\n\n\tObject.assign( THREE.DirectGeometry.prototype, THREE.EventDispatcher.prototype, {\n\n\t\tcomputeBoundingBox: THREE.Geometry.prototype.computeBoundingBox,\n\t\tcomputeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere,\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\n\n\t\t},\n\n\t\tcomputeVertexNormals: function () {\n\n\t\t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\n\n\t\t},\n\n\t\tcomputeGroups: function ( geometry ) {\n\n\t\t\tvar group;\n\t\t\tvar groups = [];\n\t\t\tvar materialIndex;\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t// materials\n\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgroup = {\n\t\t\t\t\t\tstart: i * 3,\n\t\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( group !== undefined ) {\n\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\tgroups.push( group );\n\n\t\t\t}\n\n\t\t\tthis.groups = groups;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t\t// morphs\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\t\tvar morphTargetsPosition;\n\n\t\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\t\tmorphTargetsPosition = [];\n\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsPosition[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t\t}\n\n\t\t\tvar morphNormals = geometry.morphNormals;\n\t\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\t\tvar morphTargetsNormal;\n\n\t\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\t\tmorphTargetsNormal = [];\n\n\t\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsNormal[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tvar skinIndices = geometry.skinIndices;\n\t\t\tvar skinWeights = geometry.skinWeights;\n\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t\t//\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar normal = face.normal;\n\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t\t}\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar color = face.color;\n\n\t\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\t\tthis.uvs.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\t\tthis.uvs2.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// morphs\n\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t\t}\n\n\t\t\t\t// skins\n\n\t\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeGroups( geometry );\n\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t// File:src/core/BufferGeometry.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.BufferGeometry = function () {\n\n\t\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\n\t\tthis.uuid = THREE.Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t};\n\n\tObject.assign( THREE.BufferGeometry.prototype, THREE.EventDispatcher.prototype, {\n\n\t\tgetIndex: function () {\n\n\t\t\treturn this.index;\n\n\t\t},\n\n\t\tsetIndex: function ( index ) {\n\n\t\t\tthis.index = index;\n\n\t\t},\n\n\t\taddAttribute: function ( name, attribute ) {\n\n\t\t\tif ( attribute instanceof THREE.BufferAttribute === false && attribute instanceof THREE.InterleavedBufferAttribute === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\t\tthis.addAttribute( name, new THREE.BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( name === 'index' ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\t\tthis.setIndex( attribute );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.attributes[ name ] = attribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetAttribute: function ( name ) {\n\n\t\t\treturn this.attributes[ name ];\n\n\t\t},\n\n\t\tremoveAttribute: function ( name ) {\n\n\t\t\tdelete this.attributes[ name ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddGroup: function ( start, count, materialIndex ) {\n\n\t\t\tthis.groups.push( {\n\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclearGroups: function () {\n\n\t\t\tthis.groups = [];\n\n\t\t},\n\n\t\tsetDrawRange: function ( start, count ) {\n\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\n\t\t},\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tmatrix.applyToVector3Array( position.array );\n\t\t\t\tposition.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif ( normal !== undefined ) {\n\n\t\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n\t\t\t\tnormalMatrix.applyToVector3Array( normal.array );\n\t\t\t\tnormal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function () {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\tvar m1;\n\n\t\t\treturn function rotateX( angle ) {\n\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\t\tm1.makeRotationX( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateY: function () {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\tvar m1;\n\n\t\t\treturn function rotateY( angle ) {\n\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\t\tm1.makeRotationY( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateZ: function () {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\tvar m1;\n\n\t\t\treturn function rotateZ( angle ) {\n\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\t\tm1.makeRotationZ( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function () {\n\n\t\t\t// translate geometry\n\n\t\t\tvar m1;\n\n\t\t\treturn function translate( x, y, z ) {\n\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tscale: function () {\n\n\t\t\t// scale geometry\n\n\t\t\tvar m1;\n\n\t\t\treturn function scale( x, y, z ) {\n\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\t\tm1.makeScale( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\tvar obj;\n\n\t\t\treturn function lookAt( vector ) {\n\n\t\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\n\n\t\t\t\tobj.lookAt( vector );\n\n\t\t\t\tobj.updateMatrix();\n\n\t\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tvar offset = this.boundingBox.center().negate();\n\n\t\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\t\treturn offset;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object instanceof THREE.Points || object instanceof THREE.Line ) {\n\n\t\t\t\tvar positions = new THREE.Float32Attribute( geometry.vertices.length * 3, 3 );\n\t\t\t\tvar colors = new THREE.Float32Attribute( geometry.colors.length * 3, 3 );\n\n\t\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\t\tvar lineDistances = new THREE.Float32Attribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Mesh ) {\n\n\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateFromObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\t\tif ( direct === undefined || geometry.elementsNeedUpdate === true ) {\n\n\t\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate || geometry.elementsNeedUpdate;\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate || geometry.elementsNeedUpdate;\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate || geometry.elementsNeedUpdate;\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate || geometry.elementsNeedUpdate;\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate || geometry.elementsNeedUpdate;\n\n\t\t\t\tgeometry.elementsNeedUpdate = false;\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t\tgeometry = direct;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.position;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.normal;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.color;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.uv;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.lineDistance;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\t\tthis.groups = geometry.groups;\n\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tgeometry.__directGeometry = new THREE.DirectGeometry().fromGeometry( geometry );\n\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t\t},\n\n\t\tfromDirectGeometry: function ( geometry ) {\n\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\t\tthis.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\t\tthis.addAttribute( 'uv2', new THREE.BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.indices.length > 0 ) {\n\n\t\t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\n\t\t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\n\t\t\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\n\n\t\t\t}\n\n\t\t\t// groups\n\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\t// morphs\n\n\t\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\t\tvar attribute = new THREE.Float32Attribute( morphTarget.length * 3, 3 );\n\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\t// skinning\n\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\t\tvar skinIndices = new THREE.Float32Attribute( geometry.skinIndices.length * 4, 4 );\n\t\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\t\tvar skinWeights = new THREE.Float32Attribute( geometry.skinWeights.length * 4, 4 );\n\t\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new THREE.Box3();\n\n\t\t\t}\n\n\t\t\tvar positions = this.attributes.position.array;\n\n\t\t\tif ( positions !== undefined ) {\n\n\t\t\t\tthis.boundingBox.setFromArray( positions );\n\n\t\t\t} else {\n\n\t\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t\t}\n\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tvar box = new THREE.Box3();\n\t\t\tvar vector = new THREE.Vector3();\n\n\t\t\treturn function computeBoundingSphere() {\n\n\t\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\t\tthis.boundingSphere = new THREE.Sphere();\n\n\t\t\t\t}\n\n\t\t\t\tvar positions = this.attributes.position;\n\n\t\t\t\tif ( positions ) {\n\n\t\t\t\t\tvar array = positions.array;\n\t\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t\tbox.setFromArray( array );\n\t\t\t\t\tbox.center( center );\n\n\t\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n\t\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i += 3 ) {\n\n\t\t\t\t\t\tvector.fromArray( array, i );\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\t// backwards compatibility\n\n\t\t},\n\n\t\tcomputeVertexNormals: function () {\n\n\t\t\tvar index = this.index;\n\t\t\tvar attributes = this.attributes;\n\t\t\tvar groups = this.groups;\n\n\t\t\tif ( attributes.position ) {\n\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// reset existing normals to zero\n\n\t\t\t\t\tvar array = attributes.normal.array;\n\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tarray[ i ] = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\tvar vA, vB, vC,\n\n\t\t\t\tpA = new THREE.Vector3(),\n\t\t\t\tpB = new THREE.Vector3(),\n\t\t\t\tpC = new THREE.Vector3(),\n\n\t\t\t\tcb = new THREE.Vector3(),\n\t\t\t\tab = new THREE.Vector3();\n\n\t\t\t\t// indexed elements\n\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\t\tthis.addGroup( 0, indices.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\n\t\t\t\t\t\tvar group = groups[ j ];\n\n\t\t\t\t\t\tvar start = group.start;\n\t\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\n\t\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tmerge: function ( geometry, offset ) {\n\n\t\t\tif ( geometry instanceof THREE.BufferGeometry === false ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n\t\t\t\tvar attribute1 = attributes[ key ];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\t\tvar attributeSize = attribute2.itemSize;\n\n\t\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalizeNormals: function () {\n\n\t\t\tvar normals = this.attributes.normal.array;\n\n\t\t\tvar x, y, z, n;\n\n\t\t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\n\n\t\t\t\tx = normals[ i ];\n\t\t\t\ty = normals[ i + 1 ];\n\t\t\t\tz = normals[ i + 2 ];\n\n\t\t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\n\n\t\t\t\tnormals[ i ] *= n;\n\t\t\t\tnormals[ i + 1 ] *= n;\n\t\t\t\tnormals[ i + 2 ] *= n;\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoNonIndexed: function () {\n\n\t\t\tif ( this.index === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar geometry2 = new THREE.BufferGeometry();\n\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\t\tvar index = 0, index2 = 0;\n\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry2.addAttribute( name, new THREE.BufferAttribute( array2, itemSize ) );\n\n\t\t\t}\n\n\t\t\treturn geometry2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.4,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tdata.data = { attributes: {} };\n\n\t\t\tvar index = this.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tvar array = Array.prototype.slice.call( index.array );\n\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: array\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\n\t\t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\n\t\t\t\tdata.data.attributes[ key ] = {\n\t\t\t\t\titemSize: attribute.itemSize,\n\t\t\t\t\ttype: attribute.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: attribute.normalized\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t// Handle primitives\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tif ( parameters !== undefined ) {\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tvalues.push( parameters[ key ] );\n\n\t\t\t\t}\n\n\t\t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t\t\t\tthis.constructor.apply( geometry, values );\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t\treturn new this.constructor().copy( this );\n\t\t\t*/\n\n\t\t\treturn new THREE.BufferGeometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar index = source.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.setIndex( index.clone() );\n\n\t\t\t}\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\t\t\t\tthis.addAttribute( name, attribute.clone() );\n\n\t\t\t}\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tTHREE.BufferGeometry.MaxIndex = 65535;\n\n\t// File:src/core/InstancedBufferGeometry.js\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tTHREE.InstancedBufferGeometry = function () {\n\n\t\tTHREE.BufferGeometry.call( this );\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.maxInstancedCount = undefined;\n\n\t};\n\n\tTHREE.InstancedBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.InstancedBufferGeometry.prototype.constructor = THREE.InstancedBufferGeometry;\n\n\tTHREE.InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tinstances: instances\n\n\t\t} );\n\n\t};\n\n\tTHREE.InstancedBufferGeometry.prototype.copy = function ( source ) {\n\n\t\tvar index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone() );\n\n\t\t}\n\n\t\tvar attributes = source.attributes;\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tvar attribute = attributes[ name ];\n\t\t\tthis.addAttribute( name, attribute.clone() );\n\n\t\t}\n\n\t\tvar groups = source.groups;\n\n\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tvar group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.instances );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\t// File:src/core/Uniform.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.Uniform = function ( value ) {\n\n\t\tif ( typeof value === 'string' ) {\n\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\t\tvalue = arguments[ 1 ];\n\n\t\t}\n\n\t\tthis.value = value;\n\n\t\tthis.dynamic = false;\n\n\t};\n\n\tTHREE.Uniform.prototype = {\n\n\t\tconstructor: THREE.Uniform,\n\n\t\tonUpdate: function ( callback ) {\n\n\t\t\tthis.dynamic = true;\n\t\t\tthis.onUpdateCallback = callback;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t};\n\n\t// File:src/animation/AnimationAction.js\n\n\t/**\n\t *\n\t * Action provided by AnimationMixer for scheduling clip playback on specific\n\t * objects.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t *\n\t */\n\n\tTHREE.AnimationAction = function() {\n\n\t\tthrow new Error( \"THREE.AnimationAction: \" +\n\t\t\t\t\"Use mixer.clipAction for construction.\" );\n\n\t};\n\n\tTHREE.AnimationAction._new =\n\t\t\tfunction AnimationAction( mixer, clip, localRoot ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot || null;\n\n\t\tvar tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tvar interpolantSettings = {\n\t\t\t\tendingStart: \tTHREE.ZeroCurvatureEnding,\n\t\t\t\tendingEnd:\t\tTHREE.ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants;\t// bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null;\t\t\t// for the memory manager\n\t\tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = THREE.LoopRepeat;\n\t\tthis._loopCount = -1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\n\t\tthis.paused = false;\t\t\t\t// false -> zero effective time scale\n\t\tthis.enabled = true;\t\t\t\t// true -> zero effective weight\n\n\t\tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\n\t};\n\n\tTHREE.AnimationAction._new.prototype = {\n\n\t\tconstructor: THREE.AnimationAction._new,\n\n\t\t// State & Scheduling\n\n\t\tplay: function() {\n\n\t\t\tthis._mixer._activateAction( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function() {\n\n\t\t\tthis._mixer._deactivateAction( this );\n\n\t\t\treturn this.reset();\n\n\t\t},\n\n\t\treset: function() {\n\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\n\t\t\tthis.time = 0;\t\t\t// restart clip\n\t\t\tthis._loopCount = -1;\t// forget previous loops\n\t\t\tthis._startTime = null;\t// forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\n\t\t},\n\n\t\tisRunning: function() {\n\n\t\t\tvar start = this._startTime;\n\n\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\t// return true when play has been called\n\t\tisScheduled: function() {\n\n\t\t\treturn this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\tstartAt: function( time ) {\n\n\t\t\tthis._startTime = time;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoop: function( mode, repetitions ) {\n\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Weight\n\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\tsetEffectiveWeight: function( weight ) {\n\n\t\t\tthis.weight = weight;\n\n\t\t\t// note: same logic as when updated at runtime\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\t\treturn this.stopFading();\n\n\t\t},\n\n\t\t// return the weight considering fading and .enabled\n\t\tgetEffectiveWeight: function() {\n\n\t\t\treturn this._effectiveWeight;\n\n\t\t},\n\n\t\tfadeIn: function( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t\t},\n\n\t\tfadeOut: function( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t\t},\n\n\t\tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\n\n\t\t\tvar mixer = this._mixer;\n\n\t\t\tfadeOutAction.fadeOut( duration );\n\t\t\tthis.fadeIn( duration );\n\n\t\t\tif( warp ) {\n\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcrossFadeTo: function( fadeInAction, duration, warp ) {\n\n\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t\t},\n\n\t\tstopFading: function() {\n\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\t\tif ( weightInterpolant !== null ) {\n\n\t\t\t\tthis._weightInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Time Scale Control\n\n\t\t// set the weight stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\tsetEffectiveTimeScale: function( timeScale ) {\n\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\t// return the time scale considering warping and .paused\n\t\tgetEffectiveTimeScale: function() {\n\n\t\t\treturn this._effectiveTimeScale;\n\n\t\t},\n\n\t\tsetDuration: function( duration ) {\n\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\tsyncWith: function( action ) {\n\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\thalt: function( duration ) {\n\n\t\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t\t},\n\n\t\twarp: function( startTimeScale, endTimeScale, duration ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._timeScaleInterpolant,\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\ttimes[ 1 ] = now + duration;\n\n\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstopWarping: function() {\n\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\t\tthis._timeScaleInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Object Accessors\n\n\t\tgetMixer: function() {\n\n\t\t\treturn this._mixer;\n\n\t\t},\n\n\t\tgetClip: function() {\n\n\t\t\treturn this._clip;\n\n\t\t},\n\n\t\tgetRoot: function() {\n\n\t\t\treturn this._localRoot || this._mixer._root;\n\n\t\t},\n\n\t\t// Interna\n\n\t\t_update: function( time, deltaTime, timeDirection, accuIndex ) {\n\t\t\t// called by the mixer\n\n\t\t\tvar startTime = this._startTime;\n\n\t\t\tif ( startTime !== null ) {\n\n\t\t\t\t// check for scheduled start of action\n\n\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t\t}\n\n\t\t\t\t// start\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t\t// apply time scale and advance time\n\n\t\t\tdeltaTime *= this._updateTimeScale( time );\n\t\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t\t// note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\t\t\tvar weight = this._updateWeight( time );\n\n\t\t\tif ( weight > 0 ) {\n\n\t\t\t\tvar interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_updateWeight: function( time ) {\n\n\t\t\tvar weight = 0;\n\n\t\t\tif ( this.enabled ) {\n\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\n\t\t},\n\n\t\t_updateTimeScale: function( time ) {\n\n\t\t\tvar timeScale = 0;\n\n\t\t\tif ( ! this.paused ) {\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\n\t\t},\n\n\t\t_updateTime: function( deltaTime ) {\n\n\t\t\tvar time = this.time + deltaTime;\n\n\t\t\tif ( deltaTime === 0 ) return time;\n\n\t\t\tvar duration = this._clip.duration,\n\n\t\t\t\tloop = this.loop,\n\t\t\t\tloopCount = this._loopCount;\n\n\t\t\tif ( loop === THREE.LoopOnce ) {\n\n\t\t\t\tif ( loopCount === -1 ) {\n\t\t\t\t\t// just started\n\n\t\t\t\t\tthis.loopCount = 0;\n\t\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\n\t\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\t\ttime = duration;\n\n\t\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\t\ttime = 0;\n\n\t\t\t\t\t} else break handle_stop;\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\t\tvar pingPong = ( loop === THREE.LoopPingPong );\n\n\t\t\t\tif ( loopCount === -1 ) {\n\t\t\t\t\t// just started\n\n\t\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings(\n\t\t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\t\tthis._setEndings(\n\t\t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( time >= duration || time < 0 ) {\n\t\t\t\t\t// wrap around\n\n\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif ( pending < 0 ) {\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// keep running\n\n\t\t\t\t\t\tif ( pending === 0 ) {\n\t\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\t\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\t\tthis.time = time;\n\t\t\t\t\treturn duration - time;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.time = time;\n\t\t\treturn time;\n\n\t\t},\n\n\t\t_setEndings: function( atStart, atEnd, pingPong ) {\n\n\t\t\tvar settings = this._interpolantSettings;\n\n\t\t\tif ( pingPong ) {\n\n\t\t\t\tsettings.endingStart \t= THREE.ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd\t\t= THREE.ZeroSlopeEnding;\n\n\t\t\t} else {\n\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\t\tif ( atStart ) {\n\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\n\t\t\t\t\t\t\tTHREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingStart = THREE.WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t\tif ( atEnd ) {\n\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\n\t\t\t\t\t\t\tTHREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingEnd \t = THREE.WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_scheduleFading: function( duration, weightNow, weightThen ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n\t\t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t};\n\n\n\t// File:src/animation/AnimationClip.js\n\n\t/**\n\t *\n\t * Reusable set of Tracks that represent an animation.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tTHREE.AnimationClip = function ( name, duration, tracks ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = ( duration !== undefined ) ? duration : -1;\n\n\t\tthis.uuid = THREE.Math.generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t\t// maybe only do these on demand, as doing them here could potentially slow down loading\n\t\t// but leaving these here during development as this ensures a lot of testing of these functions\n\t\tthis.trim();\n\t\tthis.optimize();\n\n\t};\n\n\tTHREE.AnimationClip.prototype = {\n\n\t\tconstructor: THREE.AnimationClip,\n\n\t\tresetDuration: function() {\n\n\t\t\tvar tracks = this.tracks,\n\t\t\t\tduration = 0;\n\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\t\tvar track = this.tracks[ i ];\n\n\t\t\t\tduration = Math.max(\n\t\t\t\t\t\tduration, track.times[ track.times.length - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\n\t\t},\n\n\t\ttrim: function() {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\toptimize: function() {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].optimize();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t};\n\n\t// Static methods:\n\n\tObject.assign( THREE.AnimationClip, {\n\n\t\tparse: function( json ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( THREE.KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t\t}\n\n\t\t\treturn new THREE.AnimationClip( json.name, json.duration, tracks );\n\n\t\t},\n\n\n\t\ttoJSON: function( clip ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tclipTracks = clip.tracks;\n\n\t\t\tvar json = {\n\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks\n\n\t\t\t};\n\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( THREE.KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn json;\n\n\t\t},\n\n\n\t\tCreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {\n\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\ttimes.push(\n\t\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\t\ti,\n\t\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\t\tvar order = THREE.AnimationUtils.getKeyframeOrder( times );\n\t\t\t\ttimes = THREE.AnimationUtils.sortedArray( times, 1, order );\n\t\t\t\tvalues = THREE.AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\ttracks.push(\n\t\t\t\t\t\tnew THREE.NumberKeyframeTrack(\n\t\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\t\ttimes, values\n\t\t\t\t\t\t).scale( 1.0 / fps ) );\n\t\t\t}\n\n\t\t\treturn new THREE.AnimationClip( name, -1, tracks );\n\n\t\t},\n\n\t\tfindByName: function( objectOrClipArray, name ) {\n\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\t\treturn clipArray[ i ];\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\tCreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {\n\n\t\t\tvar animationToMorphTargets = {};\n\n\t\t\t// tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t\t// sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor ( var name in animationToMorphTargets ) {\n\n\t\t\t\tclips.push( THREE.AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t\t}\n\n\t\t\treturn clips;\n\n\t\t},\n\n\t\t// parse the animation.hierarchy format\n\t\tparseAnimation: function( animation, bones, nodeName ) {\n\n\t\t\tif ( ! animation ) {\n\n\t\t\t\tconsole.error( \"  no animation in JSONLoader data\" );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function(\n\t\t\t\t\ttrackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tTHREE.AnimationUtils.flattenJSON(\n\t\t\t\t\t\t\tanimationKeys, times, values, propertyName );\n\n\t\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\t// automatic length determination in AnimationClip.\n\t\t\tvar duration = animation.length || -1;\n\t\t\tvar fps = animation.fps || 30;\n\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t\t// skip empty tracks\n\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t\t// process morph targets in a way exactly compatible\n\t\t\t\t// with AnimationHandler.init( animation )\n\t\t\t\tif ( animationKeys[0].morphTargets ) {\n\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\t\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\t\tif ( animationKeys[k].morphTargets ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor ( var m = 0;\n\t\t\t\t\t\t\t\tm !== animationKeys[k].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\t\tvar animationKey = animationKeys[k];\n\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push( new THREE.NumberKeyframeTrack(\n\t\t\t\t\t\t\t\t'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t\t} else {\n\t\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\t\tTHREE.VectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\t\tTHREE.QuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\t\tTHREE.VectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tracks.length === 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar clip = new THREE.AnimationClip( clipName, duration, tracks );\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t} );\n\n\t// File:src/animation/AnimationMixer.js\n\n\t/**\n\t *\n\t * Player for AnimationClips.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tTHREE.AnimationMixer = function( root ) {\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1.0;\n\n\t};\n\n\tObject.assign( THREE.AnimationMixer.prototype, THREE.EventDispatcher.prototype, {\n\n\t\t// return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\tclipAction: function( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\t\tTHREE.AnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\t\tprototypeAction = null;\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\tvar existingAction =\n\t\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( existingAction !== undefined ) {\n\n\t\t\t\t\treturn existingAction;\n\n\t\t\t\t}\n\n\t\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t\t// also, take the clip from the prototype action\n\t\t\t\tif ( clipObject === null )\n\t\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t\t}\n\n\t\t\t// clip must be known when specified via string\n\t\t\tif ( clipObject === null ) return null;\n\n\t\t\t// allocate all resources required to run it\n\t\t\tvar newAction = new THREE.\n\t\t\t\t\tAnimationMixer._Action( this, clipObject, optionalRoot );\n\n\t\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t\t// and make the action known to the memory manager\n\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\t\treturn newAction;\n\n\t\t},\n\n\t\t// get an existing action\n\t\texistingAction: function( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\t\tTHREE.AnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// deactivates all previously scheduled actions\n\t\tstopAllAction: function() {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tactions[ i ].reset();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].useCount = 0;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// advance the time and update apply the animation\n\t\tupdate: function( deltaTime ) {\n\n\t\t\tdeltaTime *= this.timeScale;\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\n\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t\t// run active actions\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tvar action = actions[ i ];\n\n\t\t\t\tif ( action.enabled ) {\n\n\t\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// update scene graph\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// return this mixer's root target object\n\t\tgetRoot: function() {\n\n\t\t\treturn this._root;\n\n\t\t},\n\n\t\t// free all resources specific to a particular clip\n\t\tuncacheClip: function( clip ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t// free all resources specific to a particular root target object\n\t\tuncacheRoot: function( root ) {\n\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( action !== undefined ) {\n\n\t\t\t\t\tthis._deactivateAction( action );\n\t\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingByName !== undefined ) {\n\n\t\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remove a targeted clip from the cache\n\t\tuncacheAction: function( clip, optionalRoot ) {\n\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\t\tif ( action !== null ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tTHREE.AnimationMixer._Action = THREE.AnimationAction._new;\n\n\t// Implementation details:\n\n\tObject.assign( THREE.AnimationMixer.prototype, {\n\n\t\t_bindAction: function( action, prototypeAction ) {\n\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\tnTracks = tracks.length,\n\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\trootUuid = root.uuid,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingsByName === undefined ) {\n\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\t\tvar track = tracks[ i ],\n\t\t\t\t\ttrackName = track.name,\n\t\t\t\t\tbinding = bindingsByName[ trackName ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\t\tbinding = new THREE.PropertyMixer(\n\t\t\t\t\t\t\tTHREE.PropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t}\n\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_activateAction: function( action ) {\n\n\t\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// increment reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_deactivateAction: function( action ) {\n\n\t\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// decrement reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Memory manager\n\n\t\t_initMemoryManager: function() {\n\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\t\tthis._nActiveActions = 0;\n\n\t\t\tthis._actionsByClip = {};\n\t\t\t// inside:\n\t\t\t// {\n\t\t\t// \t\tknownActions: Array< _Action >\t- used as prototypes\n\t\t\t// \t\tactionByRoot: _Action\t\t\t- lookup\n\t\t\t// }\n\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\t\t\tthis._nActiveControlInterpolants = 0;\n\n\t\t\tvar scope = this;\n\n\t\t\tthis.stats = {\n\n\t\t\t\tactions: {\n\t\t\t\t\tget total() { return scope._actions.length; },\n\t\t\t\t\tget inUse() { return scope._nActiveActions; }\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() { return scope._bindings.length; },\n\t\t\t\t\tget inUse() { return scope._nActiveBindings; }\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() { return scope._controlInterpolants.length; },\n\t\t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t},\n\n\t\t// Memory management for _Action objects\n\n\t\t_isActiveAction: function( action ) {\n\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\n\t\t},\n\n\t\t_addInactiveAction: function( action, clipUuid, rootUuid ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip === undefined ) {\n\n\t\t\t\tactionsForClip = {\n\n\t\t\t\t\tknownActions: [ action ],\n\t\t\t\t\tactionByRoot: {}\n\n\t\t\t\t};\n\n\t\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t\t} else {\n\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push( action );\n\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push( action );\n\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t\t},\n\n\t\t_removeInactiveAction: function( action ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\t\tcacheIndex = action._cacheIndex;\n\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\tactions.pop();\n\n\t\t\taction._cacheIndex = null;\n\n\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\t\tlastKnownAction =\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\n\t\t\taction._byClipCacheIndex = null;\n\n\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\trootUuid = ( actions._localRoot || this._root ).uuid;\n\n\t\t\tdelete actionByRoot[ rootUuid ];\n\n\t\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t},\n\n\t\t_removeInactiveBindingsForAction: function( action ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendAction: function( action ) {\n\n\t\t\t// [ active actions |  inactive actions  ]\n\t\t\t// [  active actions >| inactive actions ]\n\t\t\t//                 s        a\n\t\t\t//                  <-swap->\n\t\t\t//                 a        s\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[ lastActiveIndex ] = action;\n\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t\t},\n\n\t\t_takeBackAction: function( action ) {\n\n\t\t\t// [  active actions  | inactive actions ]\n\t\t\t// [ active actions |< inactive actions  ]\n\t\t\t//        a        s\n\t\t\t//         <-swap->\n\t\t\t//        s        a\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[ firstInactiveIndex ] = action;\n\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t\t},\n\n\t\t// Memory management for PropertyMixer objects\n\n\t\t_addInactiveBinding: function( binding, rootUuid, trackName ) {\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( bindingByName === undefined ) {\n\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t\t}\n\n\t\t\tbindingByName[ trackName ] = binding;\n\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push( binding );\n\n\t\t},\n\n\t\t_removeInactiveBinding: function( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tpropBinding = binding.binding,\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\ttrackName = propBinding.path,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\n\t\t\tdelete bindingByName[ trackName ];\n\n\t\t\tremove_empty_map: {\n\n\t\t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\n\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendBinding: function( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t\t},\n\n\t\t_takeBackBinding: function( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t\t},\n\n\n\t\t// Memory management of Interpolants for weight and time scale\n\n\t\t_lendControlInterpolant: function() {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n\t\t\tif ( interpolant === undefined ) {\n\n\t\t\t\tinterpolant = new THREE.LinearInterpolant(\n\t\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t\t}\n\n\t\t\treturn interpolant;\n\n\t\t},\n\n\t\t_takeBackControlInterpolant: function( interpolant ) {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t\t},\n\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 )\n\n\t} );\n\n\t// File:src/animation/AnimationObjectGroup.js\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t * \t-\tAdd objects you would otherwise pass as 'root' to the\n\t * \t\tconstructor or the .clipAction method of AnimationMixer.\n\t *\n\t * \t-\tInstead pass this object as 'root'.\n\t *\n\t * \t-\tYou can also add and remove objects later when the mixer\n\t * \t\tis running.\n\t *\n\t * Note:\n\t *\n\t *  \tObjects of this class appear as one object to the mixer,\n\t *  \tso cache control of the individual objects must be done\n\t *  \ton the group.\n\t *\n\t * Limitation:\n\t *\n\t * \t- \tThe animated properties must be compatible among the\n\t * \t\tall objects in the group.\n\t *\n\t *  -\tA single property can either be controlled through a\n\t *  \ttarget group or directly, but not both.\n\t *\n\t * @author tschw\n\t */\n\n\tTHREE.AnimationObjectGroup = function( var_args ) {\n\n\t\tthis.uuid = THREE.Math.generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0;\t\t\t// threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tvar indices = {};\n\t\tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = [];\t\t\t\t\t// inside: string\n\t\tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n\t\tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() { return scope._objects.length; },\n\t\t\t\tget inUse() { return this.total - scope.nCachedObjects_;  }\n\t\t\t},\n\n\t\t\tget bindingsPerObject() { return scope._bindings.length; }\n\n\t\t};\n\n\t};\n\n\tTHREE.AnimationObjectGroup.prototype = {\n\n\t\tconstructor: THREE.AnimationObjectGroup,\n\n\t\tadd: function( var_args ) {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tpaths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index === undefined ) {\n\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\t\tindex = nObjects ++;\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\t\tobjects.push( object );\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tbindings[ j ].push(\n\t\t\t\t\t\t\t\tnew THREE.PropertyBinding(\n\t\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\t\tvar knownObject = objects[ index ];\n\n\t\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\t\tbinding = new THREE.PropertyBinding(\n\t\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( objects[ index ] !== knownObject) {\n\n\t\t\t\t\tconsole.error( \"Different objects with the same UUID \" +\n\t\t\t\t\t\t\t\"detected. Clean the caches or recreate your \" +\n\t\t\t\t\t\t\t\"infrastructure when reloading scenes...\" );\n\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\tremove: function( var_args ) {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// remove & forget\n\t\tuncache: function( var_args ) {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\t\tsubscribe_: function( path, parsedPath ) {\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ],\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tobjects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\t\tindex = bindings.length;\n\n\t\t\tindicesByPath[ path ] = index;\n\n\t\t\tpaths.push( path );\n\t\t\tparsedPaths.push( parsedPath );\n\t\t\tbindings.push( bindingsForPath );\n\n\t\t\tfor ( var i = nCachedObjects,\n\t\t\t\t\tn = objects.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = objects[ i ];\n\n\t\t\t\tbindingsForPath[ i ] =\n\t\t\t\t\t\tnew THREE.PropertyBinding( object, path, parsedPath );\n\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\n\t\t},\n\n\t\tunsubscribe_: function( path ) {\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\t\tbindings[ index ] = lastBindings;\n\t\t\t\tbindings.pop();\n\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\t\tparsedPaths.pop();\n\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\t\tpaths.pop();\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\n\t// File:src/animation/AnimationUtils.js\n\n\t/**\n\t * @author tschw\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tTHREE.AnimationUtils = {\n\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function( array, from, to ) {\n\n\t\t\tif ( THREE.AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t\treturn new array.constructor( array.subarray( from, to ) );\n\n\t\t\t}\n\n\t\t\treturn array.slice( from, to );\n\n\t\t},\n\n\t\t// converts an array to a specific type\n\t\tconvertArray: function( array, type, forceClone ) {\n\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t\t! forceClone && array.constructor === type ) return array;\n\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\t\treturn new type( array ); // create typed array\n\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t\t},\n\n\t\tisTypedArray: function( object ) {\n\n\t\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t\t! ( object instanceof DataView );\n\n\t\t},\n\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function( times ) {\n\n\t\t\tfunction compareTime( i, j ) {\n\n\t\t\t\treturn times[ i ] - times[ j ];\n\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array( n );\n\t\t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\t\t\tresult.sort( compareTime );\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function( values, stride, order ) {\n\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor( nValues );\n\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function( jsonKeys, times, values, valuePropertyName ) {\n\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t}\n\n\t\t\tif ( key === undefined ) return; // no data\n\n\t\t\tvar value = key[ valuePropertyName ];\n\t\t\tif ( value === undefined ) return; // no data\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else if ( value.toArray !== undefined ) {\n\t\t\t\t// ...assume THREE.Math-ish\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else {\n\t\t\t\t// otherwise push as-is\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t// File:src/animation/KeyframeTrack.js\n\n\t/**\n\t *\n\t * A timed sequence of keyframes for a specific property.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tTHREE.KeyframeTrack = function ( name, times, values, interpolation ) {\n\n\t\tif( name === undefined ) throw new Error( \"track name is undefined\" );\n\n\t\tif( times === undefined || times.length === 0 ) {\n\n\t\t\tthrow new Error( \"no keyframes in track named \" + name );\n\n\t\t}\n\n\t\tthis.name = name;\n\n\t\tthis.times = THREE.AnimationUtils.convertArray( times, this.TimeBufferType );\n\t\tthis.values = THREE.AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t\tthis.validate();\n\t\tthis.optimize();\n\n\t};\n\n\tTHREE.KeyframeTrack.prototype = {\n\n\t\tconstructor: THREE.KeyframeTrack,\n\n\t\tTimeBufferType: Float32Array,\n\t\tValueBufferType: Float32Array,\n\n\t\tDefaultInterpolation: THREE.InterpolateLinear,\n\n\t\tInterpolantFactoryMethodDiscrete: function( result ) {\n\n\t\t\treturn new THREE.DiscreteInterpolant(\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodLinear: function( result ) {\n\n\t\t\treturn new THREE.LinearInterpolant(\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: function( result ) {\n\n\t\t\treturn new THREE.CubicInterpolant(\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tsetInterpolation: function( interpolation ) {\n\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch ( interpolation ) {\n\n\t\t\t\tcase THREE.InterpolateDiscrete:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.InterpolateLinear:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.InterpolateSmooth:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( factoryMethod === undefined ) {\n\n\t\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( message );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\n\t\t},\n\n\t\tgetInterpolation: function() {\n\n\t\t\tswitch ( this.createInterpolant ) {\n\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\t\treturn THREE.InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\t\treturn THREE.InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\t\treturn THREE.InterpolateSmooth;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetValueSize: function() {\n\n\t\t\treturn this.values.length / this.times.length;\n\n\t\t},\n\n\t\t// move all keyframes either forwards or backwards in time\n\t\tshift: function( timeOffset ) {\n\n\t\t\tif( timeOffset !== 0.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\tscale: function( timeScale ) {\n\n\t\t\tif( timeScale !== 1.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\ttrim: function( startTime, endTime ) {\n\n\t\t\tvar times = this.times,\n\t\t\t\tnKeys = times.length,\n\t\t\t\tfrom = 0,\n\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\n\t\t\twhile ( to !== -1 && times[ to ] > endTime ) -- to;\n\n\t\t\t++ to; // inclusive -> exclusive bound\n\n\t\t\tif( from !== 0 || to !== nKeys ) {\n\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif ( from >= to ) to = Math.max( to , 1 ), from = to - 1;\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = THREE.AnimationUtils.arraySlice( times, from, to );\n\t\t\t\tthis.values = THREE.AnimationUtils.\n\t\t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\tvalidate: function() {\n\n\t\t\tvar valid = true;\n\n\t\t\tvar valueSize = this.getValueSize();\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\t\tconsole.error( \"invalid value size in track\", this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\n\t\t\t\tnKeys = times.length;\n\n\t\t\tif( nKeys === 0 ) {\n\n\t\t\t\tconsole.error( \"track is empty\", this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\t\tvar currTime = times[ i ];\n\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\t\tconsole.error( \"time is not a valid number\", this, i, currTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\t\tconsole.error( \"out of order keys\", this, i, currTime, prevTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\n\t\t\t}\n\n\t\t\tif ( values !== undefined ) {\n\n\t\t\t\tif ( THREE.AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tvar value = values[ i ];\n\n\t\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\t\tconsole.error( \"value is not a valid number\", this, i, value );\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\toptimize: function() {\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\t\t\t\tstride = this.getValueSize(),\n\n\t\t\t\twriteIndex = 1;\n\n\t\t\tfor( var i = 1, n = times.length - 1; i <= n; ++ i ) {\n\n\t\t\t\tvar keep = false;\n\n\t\t\t\tvar time = times[ i ];\n\t\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// in-place compaction\n\n\t\t\t\tif ( keep ) {\n\n\t\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t}\n\n\t\t\t\t\t++ writeIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( writeIndex !== times.length ) {\n\n\t\t\t\tthis.times = THREE.AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\t\tthis.values = THREE.AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t};\n\n\t// Static methods:\n\n\tObject.assign( THREE.KeyframeTrack, {\n\n\t\t// Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\t\tparse: function( json ) {\n\n\t\t\tif( json.type === undefined ) {\n\n\t\t\t\tthrow new Error( \"track type undefined, can not parse\" );\n\n\t\t\t}\n\n\t\t\tvar trackType = THREE.KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\n\t\t\tif ( json.times === undefined ) {\n\n\t\t\t\tvar times = [], values = [];\n\n\t\t\t\tTHREE.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\t\tjson.times = times;\n\t\t\t\tjson.values = values;\n\n\t\t\t}\n\n\t\t\t// derived classes can define a static parse method\n\t\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\t\treturn trackType.parse( json );\n\n\t\t\t} else {\n\n\t\t\t\t// by default, we asssume a constructor compatible with the base\n\t\t\t\treturn new trackType(\n\t\t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function( track ) {\n\n\t\t\tvar trackType = track.constructor;\n\n\t\t\tvar json;\n\n\t\t\t// derived classes can define a static toJSON method\n\t\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\t\tjson = trackType.toJSON( track );\n\n\t\t\t} else {\n\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': THREE.AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t\t'values': THREE.AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t\t};\n\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\n\t\t},\n\n\t\t_getTrackTypeForValueTypeName: function( typeName ) {\n\n\t\t\tswitch( typeName.toLowerCase() ) {\n\n\t\t\t\tcase \"scalar\":\n\t\t\t\tcase \"double\":\n\t\t\t\tcase \"float\":\n\t\t\t\tcase \"number\":\n\t\t\t\tcase \"integer\":\n\n\t\t\t\t\treturn THREE.NumberKeyframeTrack;\n\n\t\t\t\tcase \"vector\":\n\t\t\t\tcase \"vector2\":\n\t\t\t\tcase \"vector3\":\n\t\t\t\tcase \"vector4\":\n\n\t\t\t\t\treturn THREE.VectorKeyframeTrack;\n\n\t\t\t\tcase \"color\":\n\n\t\t\t\t\treturn THREE.ColorKeyframeTrack;\n\n\t\t\t\tcase \"quaternion\":\n\n\t\t\t\t\treturn THREE.QuaternionKeyframeTrack;\n\n\t\t\t\tcase \"bool\":\n\t\t\t\tcase \"boolean\":\n\n\t\t\t\t\treturn THREE.BooleanKeyframeTrack;\n\n\t\t\t\tcase \"string\":\n\n\t\t\t\t\treturn THREE.StringKeyframeTrack;\n\n\t\t\t}\n\n\t\t\tthrow new Error( \"Unsupported typeName: \" + typeName );\n\n\t\t}\n\n\t} );\n\n\t// File:src/animation/PropertyBinding.js\n\n\t/**\n\t *\n\t * A reference to a real property in the scene graph.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tTHREE.PropertyBinding = function ( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath ||\n\t\t\t\tTHREE.PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = THREE.PropertyBinding.findNode(\n\t\t\t\trootNode, this.parsedPath.nodeName ) || rootNode;\n\n\t\tthis.rootNode = rootNode;\n\n\t};\n\n\tTHREE.PropertyBinding.prototype = {\n\n\t\tconstructor: THREE.PropertyBinding,\n\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.getValue( targetArray, offset );\n\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\n\t\t},\n\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.setValue( sourceArray, offset );\n\n\t\t},\n\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function() {\n\n\t\t\tvar targetObject = this.node,\n\t\t\t\tparsedPath = this.parsedPath,\n\n\t\t\t\tobjectName = parsedPath.objectName,\n\t\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\ttargetObject = THREE.PropertyBinding.findNode(\n\t\t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\t\tthis.node = targetObject;\n\n\t\t\t}\n\n\t\t\t// set fail state so we can just 'return' on error\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable;\n\n\t \t\t// ensure there is a value node\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\tconsole.error( \"  trying to update node for track: \" + this.path + \" but it wasn't found.\" );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( objectName ) {\n\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\t\tswitch ( objectName ) {\n\n\t\t\t\t\tcase 'materials':\n\n\t\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\n\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// resolve property\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\t\tif ( nodeProperty === undefined ) {\n\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\t\tconsole.error( \"  trying to update property for track: \" + nodeName +\n\t\t\t\t\t\t'.' + propertyName + \" but it wasn't found.\", targetObject );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// determine versioning scheme\n\t\t\tvar versioning = this.Versioning.None;\n\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\t\tthis.targetObject = targetObject;\n\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\t\tthis.targetObject = targetObject;\n\n\t\t\t}\n\n\t\t\t// determine how the property gets bound\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif ( propertyIndex !== undefined ) {\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n\t\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else if ( nodeProperty.length !== undefined ) {\n\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else {\n\n\t\t\t\tthis.propertyName = propertyName;\n\n\t\t\t}\n\n\t\t\t// select getter / setter\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t\t},\n\n\t\tunbind: function() {\n\n\t\t\tthis.node = null;\n\n\t\t\t// back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\n\t\t}\n\n\t};\n\n\tObject.assign( THREE.PropertyBinding.prototype, { // prototype, continued\n\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function() {},\n\t\t_setValue_unavailable: function() {},\n\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: THREE.PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: THREE.PropertyBinding.prototype.setValue,\n\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\n\t\tGetterByBindingType: [\n\n\t\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\t\tvar source = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t\t}\n\n\t\t],\n\n\t\tSetterByBindingTypeAndVersioning: [\n\n\t\t\t[\n\t\t\t\t// Direct\n\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// EntireArray\n\n\t\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// ArrayElement\n\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// HasToFromArray\n\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t]\n\n\t\t]\n\n\t} );\n\n\tTHREE.PropertyBinding.Composite =\n\t\t\tfunction( targetGroup, path, optionalParsedPath ) {\n\n\t\tvar parsedPath = optionalParsedPath ||\n\t\t\t\tTHREE.PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t};\n\n\tTHREE.PropertyBinding.Composite.prototype = {\n\n\t\tconstructor: THREE.PropertyBinding.Composite,\n\n\t\tgetValue: function( array, offset ) {\n\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t\t// and only call .getValue on the first\n\t\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t\t},\n\n\t\tsetValue: function( array, offset ) {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t\t}\n\n\t\t},\n\n\t\tbind: function() {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].bind();\n\n\t\t\t}\n\n\t\t},\n\n\t\tunbind: function() {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].unbind();\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tTHREE.PropertyBinding.create = function( root, path, parsedPath ) {\n\n\t\tif ( ! ( root instanceof THREE.AnimationObjectGroup ) ) {\n\n\t\t\treturn new THREE.PropertyBinding( root, path, parsedPath );\n\n\t\t} else {\n\n\t\t\treturn new THREE.PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t}\n\n\t};\n\n\tTHREE.PropertyBinding.parseTrackName = function( trackName ) {\n\n\t\t// matches strings in the form of:\n\t\t//    nodeName.property\n\t\t//    nodeName.property[accessor]\n\t\t//    nodeName.material.property[accessor]\n\t\t//    uuid.property[accessor]\n\t\t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\n\t\t//    parentName/nodeName.property\n\t\t//    parentName/parentName/nodeName.property[index]\n\t\t//\t  .bone[Armature.DEF_cog].position\n\t\t// created and tested via https://regex101.com/#javascript\n\n\t\tvar re = /^(([\\w]+\\/)*)([\\w-\\d]+)?(\\.([\\w]+)(\\[([\\w\\d\\[\\]\\_.:\\- ]+)\\])?)?(\\.([\\w.]+)(\\[([\\w\\d\\[\\]\\_. ]+)\\])?)$/;\n\t\tvar matches = re.exec( trackName );\n\n\t\tif ( ! matches ) {\n\n\t\t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\n\n\t\t}\n\n\t\tif ( matches.index === re.lastIndex ) {\n\n\t\t\tre.lastIndex++;\n\n\t\t}\n\n\t\tvar results = {\n\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\tnodeName: matches[ 3 ], \t// allowed to be null, specified root node.\n\t\t\tobjectName: matches[ 5 ],\n\t\t\tobjectIndex: matches[ 7 ],\n\t\t\tpropertyName: matches[ 9 ],\n\t\t\tpropertyIndex: matches[ 11 ]\t// allowed to be null, specifies that the whole property is set.\n\t\t};\n\n\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\n\n\t\t}\n\n\t\treturn results;\n\n\t};\n\n\tTHREE.PropertyBinding.findNode = function( root, nodeName ) {\n\n\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\treturn root;\n\n\t\t}\n\n\t\t// search into skeleton bones.\n\t\tif ( root.skeleton ) {\n\n\t\t\tvar searchSkeleton = function( skeleton ) {\n\n\t\t\t\tfor( var i = 0; i < skeleton.bones.length; i ++ ) {\n\n\t\t\t\t\tvar bone = skeleton.bones[ i ];\n\n\t\t\t\t\tif ( bone.name === nodeName ) {\n\n\t\t\t\t\t\treturn bone;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t};\n\n\t\t\tvar bone = searchSkeleton( root.skeleton );\n\n\t\t\tif ( bone ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\t\t}\n\n\t\t// search into node subtree.\n\t\tif ( root.children ) {\n\n\t\t\tvar searchNodeSubtree = function( children ) {\n\n\t\t\t\tfor( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\tif ( result ) return result;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t};\n\n\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\tif ( subTreeNode ) {\n\n\t\t\t\treturn subTreeNode;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t};\n\n\t// File:src/animation/PropertyMixer.js\n\n\t/**\n\t *\n\t * Buffered scene graph property that allows weighted accumulation.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tTHREE.PropertyMixer = function ( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tvar bufferType = Float64Array,\n\t\t\tmixFunction;\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\t\t\tmixFunction = this._slerp;\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\n\t\t\t\tbufferType = Array,\t\tmixFunction = this._select;\t\tbreak;\n\n\t\t\tdefault:\t\t\t\t\tmixFunction = this._lerp;\n\n\t\t}\n\n\t\tthis.buffer = new bufferType( valueSize * 4 );\n\t\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\n\t\tthis._mixBufferRegion = mixFunction;\n\n\t\tthis.cumulativeWeight = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t};\n\n\tTHREE.PropertyMixer.prototype = {\n\n\t\tconstructor: THREE.PropertyMixer,\n\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\taccumulate: function( accuIndex, weight ) {\n\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tcurrentWeight = this.cumulativeWeight;\n\n\t\t\tif ( currentWeight === 0 ) {\n\n\t\t\t\t// accuN := incoming * weight\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\n\t\t\t} else {\n\n\t\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\n\t\t},\n\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\tapply: function( accuIndex ) {\n\n\t\t\tvar stride = this.valueSize,\n\t\t\t\tbuffer = this.buffer,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tweight = this.cumulativeWeight,\n\n\t\t\t\tbinding = this.binding;\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t\tif ( weight < 1 ) {\n\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\t\tvar originalValueOffset = stride * 3;\n\n\t\t\t\tthis._mixBufferRegion(\n\t\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t\t}\n\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remember the state of the bound property and copy it to both accus\n\t\tsaveOriginalState: function() {\n\n\t\t\tvar binding = this.binding;\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toriginalValueOffset = stride * 3;\n\n\t\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t},\n\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\trestoreOriginalState: function() {\n\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t\t},\n\n\n\t\t// mix functions\n\n\t\t_select: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tif ( t >= 0.5 ) {\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tTHREE.Quaternion.slerpFlat( buffer, dstOffset,\n\t\t\t\t\tbuffer, dstOffset, buffer, srcOffset, t );\n\n\t\t},\n\n\t\t_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tvar j = dstOffset + i;\n\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t// File:src/animation/tracks/BooleanKeyframeTrack.js\n\n\t/**\n\t *\n\t * A Track of Boolean keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tTHREE.BooleanKeyframeTrack = function ( name, times, values ) {\n\n\t\tTHREE.KeyframeTrack.call( this, name, times, values );\n\n\t};\n\n\tTHREE.BooleanKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\t\tconstructor: THREE.BooleanKeyframeTrack,\n\n\t\tValueTypeName: 'bool',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: THREE.InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t\t// Note: Actually this track could have a optimized / compressed\n\t\t// representation of a single value and a custom interpolant that\n\t\t// computes \"firstValue ^ isOdd( index )\".\n\n\t} );\n\n\t// File:src/animation/tracks/ColorKeyframeTrack.js\n\n\t/**\n\t *\n\t * A Track of keyframe values that represent color.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tTHREE.ColorKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\t\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n\t};\n\n\tTHREE.ColorKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\t\tconstructor: THREE.ColorKeyframeTrack,\n\n\t\tValueTypeName: 'color'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\n\t\t// Note: Very basic implementation and nothing special yet.\n\t\t// However, this is the place for color space parameterization.\n\n\t} );\n\n\t// File:src/animation/tracks/NumberKeyframeTrack.js\n\n\t/**\n\t *\n\t * A Track of numeric keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tTHREE.NumberKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\t\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n\t};\n\n\tTHREE.NumberKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\t\tconstructor: THREE.NumberKeyframeTrack,\n\n\t\tValueTypeName: 'number',\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t// File:src/animation/tracks/QuaternionKeyframeTrack.js\n\n\t/**\n\t *\n\t * A Track of quaternion keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tTHREE.QuaternionKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\t\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n\t};\n\n\tTHREE.QuaternionKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\t\tconstructor: THREE.QuaternionKeyframeTrack,\n\n\t\tValueTypeName: 'quaternion',\n\n\t\t// ValueBufferType is inherited\n\n\t\tDefaultInterpolation: THREE.InterpolateLinear,\n\n\t\tInterpolantFactoryMethodLinear: function( result ) {\n\n\t\t\treturn new THREE.QuaternionLinearInterpolant(\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n\t} );\n\n\t// File:src/animation/tracks/StringKeyframeTrack.js\n\n\t/**\n\t *\n\t * A Track that interpolates Strings\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tTHREE.StringKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\t\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n\t};\n\n\tTHREE.StringKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\t\tconstructor: THREE.StringKeyframeTrack,\n\n\t\tValueTypeName: 'string',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: THREE.InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t} );\n\n\t// File:src/animation/tracks/VectorKeyframeTrack.js\n\n\t/**\n\t *\n\t * A Track of vectored keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tTHREE.VectorKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\t\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n\t};\n\n\tTHREE.VectorKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\t\tconstructor: THREE.VectorKeyframeTrack,\n\n\t\tValueTypeName: 'vector'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t// File:src/audio/Audio.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tTHREE.Audio = function ( listener ) {\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.context = listener.context;\n\t\tthis.source = this.context.createBufferSource();\n\t\tthis.source.onended = this.onEnded.bind( this );\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.startTime = 0;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis.filters = [];\n\n\t};\n\n\tTHREE.Audio.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\t\tconstructor: THREE.Audio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tsetNodeSource: function ( audioNode ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetBuffer: function ( audioBuffer ) {\n\n\t\t\tthis.source.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\n\t\t\tif ( this.autoplay ) this.play();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tplay: function () {\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar source = this.context.createBufferSource();\n\n\t\t\tsource.buffer = this.source.buffer;\n\t\t\tsource.loop = this.source.loop;\n\t\t\tsource.onended = this.source.onended;\n\t\t\tsource.start( 0, this.startTime );\n\t\t\tsource.playbackRate.value = this.playbackRate;\n\n\t\t\tthis.isPlaying = true;\n\n\t\t\tthis.source = source;\n\n\t\t\treturn this.connect();\n\n\t\t},\n\n\t\tpause: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.startTime = this.context.currentTime;\n\t\t\tthis.isPlaying = false;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.startTime = 0;\n\t\t\tthis.isPlaying = false;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdisconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilters: function () {\n\n\t\t\treturn this.filters;\n\n\t\t},\n\n\t\tsetFilters: function ( value ) {\n\n\t\t\tif ( ! value ) value = [];\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value;\n\t\t\t\tthis.connect();\n\n\t\t\t} else {\n\n\t\t\t\tthis.filters = value;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.getFilters()[ 0 ];\n\n\t\t},\n\n\t\tsetFilter: function ( filter ) {\n\n\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t\t},\n\n\t\tsetPlaybackRate: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.playbackRate.value = this.playbackRate;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetPlaybackRate: function () {\n\n\t\t\treturn this.playbackRate;\n\n\t\t},\n\n\t\tonEnded: function () {\n\n\t\t\tthis.isPlaying = false;\n\n\t\t},\n\n\t\tgetLoop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn this.source.loop;\n\n\t\t},\n\n\t\tsetLoop: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.source.loop = value;\n\n\t\t},\n\n\t\tgetVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\n\t\tsetVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.value = value;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t// File:src/audio/AudioAnalyser.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.AudioAnalyser = function ( audio, fftSize ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t};\n\n\tObject.assign( THREE.AudioAnalyser.prototype, {\n\n\t\tgetFrequencyData: function () {\n\n\t\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\t\treturn this.data;\n\n\t\t},\n\n\t\tgetAverageFrequency: function () {\n\n\t\t\tvar value = 0, data = this.getFrequencyData();\n\n\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tvalue += data[ i ];\n\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\n\t\t}\n\n\t} );\n\n\t// File:src/audio/AudioContext.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tObject.defineProperty( THREE, 'AudioContext', {\n\n\t\tget: ( function () {\n\n\t\t\tvar context;\n\n\t\t\treturn function get() {\n\n\t\t\t\tif ( context === undefined ) {\n\n\t\t\t\t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t\t\t}\n\n\t\t\t\treturn context;\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t// File:src/audio/PositionalAudio.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.PositionalAudio = function ( listener ) {\n\n\t\tTHREE.Audio.call( this, listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.connect( this.gain );\n\n\t};\n\n\tTHREE.PositionalAudio.prototype = Object.assign( Object.create( THREE.Audio.prototype ), {\n\n\t\tconstructor: THREE.PositionalAudio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.panner;\n\n\t\t},\n\n\t\tgetRefDistance: function () {\n\n\t\t\treturn this.panner.refDistance;\n\n\t\t},\n\n\t\tsetRefDistance: function ( value ) {\n\n\t\t\tthis.panner.refDistance = value;\n\n\t\t},\n\n\t\tgetRolloffFactor: function () {\n\n\t\t\treturn this.panner.rolloffFactor;\n\n\t\t},\n\n\t\tsetRolloffFactor: function ( value ) {\n\n\t\t\tthis.panner.rolloffFactor = value;\n\n\t\t},\n\n\t\tgetDistanceModel: function () {\n\n\t\t\treturn this.panner.distanceModel;\n\n\t\t},\n\n\t\tsetDistanceModel: function ( value ) {\n\n\t\t\tthis.panner.distanceModel = value;\n\n\t\t},\n\n\t\tgetMaxDistance: function () {\n\n\t\t\treturn this.panner.maxDistance;\n\n\t\t},\n\n\t\tsetMaxDistance: function ( value ) {\n\n\t\t\tthis.panner.maxDistance = value;\n\n\t\t},\n\n\t\tupdateMatrixWorld: ( function () {\n\n\t\t\tvar position = new THREE.Vector3();\n\n\t\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\n\t\t\t};\n\n\t\t} )()\n\n\n\t} );\n\n\t// File:src/audio/AudioListener.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.AudioListener = function () {\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = THREE.AudioContext;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t};\n\n\tTHREE.AudioListener.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\t\tconstructor: THREE.AudioListener,\n\n\t\tgetInput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tremoveFilter: function ( ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\t\tthis.gain.connect( this.context.destination );\n\t\t\t\tthis.filter = null;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.filter;\n\n\t\t},\n\n\t\tsetFilter: function ( value ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t\t} else {\n\n\t\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect( this.filter );\n\t\t\tthis.filter.connect( this.context.destination );\n\n\t\t},\n\n\t\tgetMasterVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetMasterVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.value = value;\n\n\t\t},\n\n\t\tupdateMatrixWorld: ( function () {\n\n\t\t\tvar position = new THREE.Vector3();\n\t\t\tvar quaternion = new THREE.Quaternion();\n\t\t\tvar scale = new THREE.Vector3();\n\n\t\t\tvar orientation = new THREE.Vector3();\n\n\t\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\t\tvar listener = this.context.listener;\n\t\t\t\tvar up = this.up;\n\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n\t\t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t\t\tlistener.setPosition( position.x, position.y, position.z );\n\t\t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t// File:src/cameras/Camera.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tTHREE.Camera = function () {\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new THREE.Matrix4();\n\t\tthis.projectionMatrix = new THREE.Matrix4();\n\n\t};\n\n\tTHREE.Camera.prototype = Object.create( THREE.Object3D.prototype );\n\tTHREE.Camera.prototype.constructor = THREE.Camera;\n\n\tTHREE.Camera.prototype.getWorldDirection = function () {\n\n\t\tvar quaternion = new THREE.Quaternion();\n\n\t\treturn function getWorldDirection( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t};\n\n\t}();\n\n\tTHREE.Camera.prototype.lookAt = function () {\n\n\t\t// This routine does not support cameras with rotated and/or translated parent(s)\n\n\t\tvar m1 = new THREE.Matrix4();\n\n\t\treturn function lookAt( vector ) {\n\n\t\t\tm1.lookAt( this.position, vector, this.up );\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t\t};\n\n\t}();\n\n\tTHREE.Camera.prototype.clone = function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\tTHREE.Camera.prototype.copy = function ( source ) {\n\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\n\t\treturn this;\n\n\t};\n\n\t// File:src/cameras/CubeCamera.js\n\n\t/**\n\t * Camera for rendering cube maps\n\t *\t- renders scene into axis-aligned cube\n\t *\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.CubeCamera = function ( near, far, cubeResolution ) {\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tvar fov = 90, aspect = 1;\n\n\t\tvar cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\n\t\tvar cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new THREE.Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\n\t\tvar cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\n\t\tvar cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new THREE.Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\n\t\tvar cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\n\t\tvar cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new THREE.Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\n\t\tvar options = { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter };\n\n\t\tthis.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\n\t\tthis.updateCubeMap = function ( renderer, scene ) {\n\n\t\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\t\tvar renderTarget = this.renderTarget;\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\t\trenderTarget.activeCubeFace = 0;\n\t\t\trenderer.render( scene, cameraPX, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 1;\n\t\t\trenderer.render( scene, cameraNX, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 2;\n\t\t\trenderer.render( scene, cameraPY, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 3;\n\t\t\trenderer.render( scene, cameraNY, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 4;\n\t\t\trenderer.render( scene, cameraPZ, renderTarget );\n\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\t\trenderTarget.activeCubeFace = 5;\n\t\t\trenderer.render( scene, cameraNZ, renderTarget );\n\n\t\t\trenderer.setRenderTarget( null );\n\n\t\t};\n\n\t};\n\n\tTHREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );\n\tTHREE.CubeCamera.prototype.constructor = THREE.CubeCamera;\n\n\t// File:src/cameras/OrthographicCamera.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author arose / http://github.com/arose\n\t */\n\n\tTHREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {\n\n\t\tTHREE.Camera.call( this );\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t\tthis.top = top;\n\t\tthis.bottom = bottom;\n\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\t\tthis.updateProjectionMatrix();\n\n\t};\n\n\tTHREE.OrthographicCamera.prototype = Object.assign( Object.create( THREE.Camera.prototype ), {\n\n\t\tconstructor: THREE.OrthographicCamera,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tTHREE.Camera.prototype.copy.call( this, source );\n\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tthis.view = {\n\t\t\t\tfullWidth: fullWidth,\n\t\t\t\tfullHeight: fullHeight,\n\t\t\t\toffsetX: x,\n\t\t\t\toffsetY: y,\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function() {\n\n\t\t\tthis.view = null;\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\t\tvar cx = ( this.right + this.left ) / 2;\n\t\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\n\t\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t\t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\n\t\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t// File:src/cameras/PerspectiveCamera.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author greggman / http://games.greggman.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author tschw\n\t */\n\n\tTHREE.PerspectiveCamera = function ( fov, aspect, near, far ) {\n\n\t\tTHREE.Camera.call( this );\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov !== undefined ? fov : 50;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near !== undefined ? near : 0.1;\n\t\tthis.far = far !== undefined ? far : 2000;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t};\n\n\tTHREE.PerspectiveCamera.prototype = Object.assign( Object.create( THREE.Camera.prototype ), {\n\n\t\tconstructor: THREE.PerspectiveCamera,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tTHREE.Camera.prototype.copy.call( this, source );\n\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function ( focalLength ) {\n\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\t\tthis.fov = THREE.Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function () {\n\n\t\t\tvar vExtentSlope = Math.tan( THREE.Math.DEG2RAD * 0.5 * this.fov );\n\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t\t},\n\n\t\tgetEffectiveFOV: function () {\n\n\t\t\treturn THREE.Math.RAD2DEG * 2 * Math.atan(\n\t\t\t\t\tMath.tan( THREE.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t\t},\n\n\t\tgetFilmWidth: function () {\n\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t\t},\n\n\t\tgetFilmHeight: function () {\n\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *   +---+---+---+\n\t\t *   | A | B | C |\n\t\t *   +---+---+---+\n\t\t *   | D | E | F |\n\t\t *   +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *   var w = 1920;\n\t\t *   var h = 1080;\n\t\t *   var fullWidth = w * 3;\n\t\t *   var fullHeight = h * 2;\n\t\t *\n\t\t *   --A--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *   --B--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *   --C--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *   --D--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *   --E--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *   --F--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tthis.view = {\n\t\t\t\tfullWidth: fullWidth,\n\t\t\t\tfullHeight: fullHeight,\n\t\t\t\toffsetX: x,\n\t\t\t\toffsetY: y,\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function() {\n\n\t\t\tthis.view = null;\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar near = this.near,\n\t\t\t\ttop = near * Math.tan(\n\t\t\t\t\t\tTHREE.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\t\theight = 2 * top,\n\t\t\t\twidth = this.aspect * height,\n\t\t\t\tleft = - 0.5 * width,\n\t\t\t\tview = this.view;\n\n\t\t\tif ( view !== null ) {\n\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\t\tthis.projectionMatrix.makeFrustum(\n\t\t\t\t\tleft, left + width, top - height, top, near, this.far );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\n\t\t\tdata.object.aspect = this.aspect;\n\n\t\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t// File:src/cameras/StereoCamera.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.StereoCamera = function () {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.cameraL = new THREE.PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new THREE.PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t};\n\n\tObject.assign( THREE.StereoCamera.prototype, {\n\n\t\tupdate: ( function () {\n\n\t\t\tvar focus, fov, aspect, near, far;\n\n\t\t\tvar eyeRight = new THREE.Matrix4();\n\t\t\tvar eyeLeft = new THREE.Matrix4();\n\n\t\t\treturn function update( camera ) {\n\n\t\t\t\tvar needsUpdate = focus !== camera.focus || fov !== camera.fov ||\n\t\t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far;\n\n\t\t\t\tif ( needsUpdate ) {\n\n\t\t\t\t\tfocus = camera.focus;\n\t\t\t\t\tfov = camera.fov;\n\t\t\t\t\taspect = camera.aspect * this.aspect;\n\t\t\t\t\tnear = camera.near;\n\t\t\t\t\tfar = camera.far;\n\n\t\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\t\tvar eyeSep = 0.064 / 2;\n\t\t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n\t\t\t\t\tvar ymax = near * Math.tan( THREE.Math.DEG2RAD * fov * 0.5 );\n\t\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t\t// translate xOffset\n\n\t\t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n\t\t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\n\t\t\t\t\t// for left eye\n\n\t\t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n\t\t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\n\t\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t\t// for right eye\n\n\t\t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n\t\t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\n\t\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n\t\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t// File:src/lights/Light.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.Light = function ( color, intensity ) {\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new THREE.Color( color );\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\t\tthis.receiveShadow = undefined;\n\n\t};\n\n\tTHREE.Light.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\t\tconstructor: THREE.Light,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\t\t\tthis.color.copy( source.color );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\n\t\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t// File:src/lights/LightShadow.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.LightShadow = function ( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.radius = 1;\n\n\t\tthis.mapSize = new THREE.Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.matrix = new THREE.Matrix4();\n\n\t};\n\n\tObject.assign( THREE.LightShadow.prototype, {\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.camera = source.camera.clone();\n\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\n\t\t\tthis.mapSize.copy( source.mapSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t// File:src/lights/AmbientLight.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.AmbientLight = function ( color, intensity ) {\n\n\t\tTHREE.Light.call( this, color, intensity );\n\n\t\tthis.type = 'AmbientLight';\n\n\t\tthis.castShadow = undefined;\n\n\t};\n\n\tTHREE.AmbientLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\t\tconstructor: THREE.AmbientLight\n\n\t} );\n\n\t// File:src/lights/DirectionalLight.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.DirectionalLight = function ( color, intensity ) {\n\n\t\tTHREE.Light.call( this, color, intensity );\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( THREE.Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new THREE.Object3D();\n\n\t\tthis.shadow = new THREE.DirectionalLightShadow();\n\n\t};\n\n\tTHREE.DirectionalLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\t\tconstructor: THREE.DirectionalLight,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tTHREE.Light.prototype.copy.call( this, source );\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t// File:src/lights/DirectionalLightShadow.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.DirectionalLightShadow = function ( light ) {\n\n\t\tTHREE.LightShadow.call( this, new THREE.OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t};\n\n\tTHREE.DirectionalLightShadow.prototype = Object.assign( Object.create( THREE.LightShadow.prototype ), {\n\n\t\tconstructor: THREE.DirectionalLightShadow\n\n\t} );\n\n\t// File:src/lights/HemisphereLight.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.HemisphereLight = function ( skyColor, groundColor, intensity ) {\n\n\t\tTHREE.Light.call( this, skyColor, intensity );\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.castShadow = undefined;\n\n\t\tthis.position.copy( THREE.Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new THREE.Color( groundColor );\n\n\t};\n\n\tTHREE.HemisphereLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\t\tconstructor: THREE.HemisphereLight,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tTHREE.Light.prototype.copy.call( this, source );\n\n\t\t\tthis.groundColor.copy( source.groundColor );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t// File:src/lights/PointLight.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tTHREE.PointLight = function ( color, intensity, distance, decay ) {\n\n\t\tTHREE.Light.call( this, color, intensity );\n\n\t\tthis.type = 'PointLight';\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t};\n\n\tTHREE.PointLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\t\tconstructor: THREE.PointLight,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tTHREE.Light.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t// File:src/lights/SpotLight.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.SpotLight = function ( color, intensity, distance, angle, penumbra, decay ) {\n\n\t\tTHREE.Light.call( this, color, intensity );\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( THREE.Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new THREE.Object3D();\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\t\t\t},\n\t\t\tset: function ( power ) {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new THREE.SpotLightShadow();\n\n\t};\n\n\tTHREE.SpotLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\t\tconstructor: THREE.SpotLight,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tTHREE.Light.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t// File:src/lights/SpotLightShadow.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.SpotLightShadow = function () {\n\n\t\tTHREE.LightShadow.call( this, new THREE.PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t};\n\n\tTHREE.SpotLightShadow.prototype = Object.assign( Object.create( THREE.LightShadow.prototype ), {\n\n\t\tconstructor: THREE.SpotLightShadow,\n\n\t\tupdate: function ( light ) {\n\n\t\t\tvar fov = THREE.Math.RAD2DEG * 2 * light.angle;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || 500;\n\n\t\t\tvar camera = this.camera;\n\n\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t// File:src/loaders/AudioLoader.js\n\n\t/**\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tTHREE.AudioLoader = function ( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t};\n\n\tObject.assign( THREE.AudioLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar context = THREE.AudioContext;\n\n\t\t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t} );\n\n\t// File:src/loaders/Cache.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.Cache = {\n\n\t\tenabled: false,\n\n\t\tfiles: {},\n\n\t\tadd: function ( key, file ) {\n\n\t\t\tif ( this.enabled === false ) return;\n\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[ key ] = file;\n\n\t\t},\n\n\t\tget: function ( key ) {\n\n\t\t\tif ( this.enabled === false ) return;\n\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[ key ];\n\n\t\t},\n\n\t\tremove: function ( key ) {\n\n\t\t\tdelete this.files[ key ];\n\n\t\t},\n\n\t\tclear: function () {\n\n\t\t\tthis.files = {};\n\n\t\t}\n\n\t};\n\n\t// File:src/loaders/Loader.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.Loader = function () {\n\n\t\tthis.onLoadStart = function () {};\n\t\tthis.onLoadProgress = function () {};\n\t\tthis.onLoadComplete = function () {};\n\n\t};\n\n\tTHREE.Loader.prototype = {\n\n\t\tconstructor: THREE.Loader,\n\n\t\tcrossOrigin: undefined,\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tvar parts = url.split( '/' );\n\n\t\t\tif ( parts.length === 1 ) return './';\n\n\t\t\tparts.pop();\n\n\t\t\treturn parts.join( '/' ) + '/';\n\n\t\t},\n\n\t\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\n\t\t\tvar array = [];\n\n\t\t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\n\t\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tcreateMaterial: ( function () {\n\n\t\t\tvar color, textureLoader, materialLoader;\n\n\t\t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\n\t\t\t\tif ( color === undefined ) color = new THREE.Color();\n\t\t\t\tif ( textureLoader === undefined ) textureLoader = new THREE.TextureLoader();\n\t\t\t\tif ( materialLoader === undefined ) materialLoader = new THREE.MaterialLoader();\n\n\t\t\t\t// convert from old material format\n\n\t\t\t\tvar textures = {};\n\n\t\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\n\t\t\t\t\tvar fullPath = texturePath + path;\n\t\t\t\t\tvar loader = THREE.Loader.Handlers.get( fullPath );\n\n\t\t\t\t\tvar texture;\n\n\t\t\t\t\tif ( loader !== null ) {\n\n\t\t\t\t\t\ttexture = loader.load( fullPath );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n\t\t\t\t\t\ttexture = textureLoader.load( fullPath );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( repeat !== undefined ) {\n\n\t\t\t\t\t\ttexture.repeat.fromArray( repeat );\n\n\t\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;\n\t\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\t\t\ttexture.offset.fromArray( offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( wrap !== undefined ) {\n\n\t\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = THREE.RepeatWrapping;\n\t\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = THREE.MirroredRepeatWrapping;\n\n\t\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = THREE.RepeatWrapping;\n\t\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = THREE.MirroredRepeatWrapping;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( anisotropy !== undefined ) {\n\n\t\t\t\t\t\ttexture.anisotropy = anisotropy;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar uuid = THREE.Math.generateUUID();\n\n\t\t\t\t\ttextures[ uuid ] = texture;\n\n\t\t\t\t\treturn uuid;\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tvar json = {\n\t\t\t\t\tuuid: THREE.Math.generateUUID(),\n\t\t\t\t\ttype: 'MeshLambertMaterial'\n\t\t\t\t};\n\n\t\t\t\tfor ( var name in m ) {\n\n\t\t\t\t\tvar value = m[ name ];\n\n\t\t\t\t\tswitch ( name ) {\n\t\t\t\t\t\tcase 'DbgColor':\n\t\t\t\t\t\tcase 'DbgIndex':\n\t\t\t\t\t\tcase 'opticalDensity':\n\t\t\t\t\t\tcase 'illumination':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'DbgName':\n\t\t\t\t\t\t\tjson.name = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'blending':\n\t\t\t\t\t\t\tjson.blending = THREE[ value ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorAmbient':\n\t\t\t\t\t\tcase 'mapAmbient':\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorDiffuse':\n\t\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorSpecular':\n\t\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorEmissive':\n\t\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'specularCoef':\n\t\t\t\t\t\t\tjson.shininess = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'shading':\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapDiffuse':\n\t\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapDiffuseRepeat':\n\t\t\t\t\t\tcase 'mapDiffuseOffset':\n\t\t\t\t\t\tcase 'mapDiffuseWrap':\n\t\t\t\t\t\tcase 'mapDiffuseAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapEmissive':\n\t\t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapEmissiveRepeat':\n\t\t\t\t\t\tcase 'mapEmissiveOffset':\n\t\t\t\t\t\tcase 'mapEmissiveWrap':\n\t\t\t\t\t\tcase 'mapEmissiveAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapLight':\n\t\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapLightRepeat':\n\t\t\t\t\t\tcase 'mapLightOffset':\n\t\t\t\t\t\tcase 'mapLightWrap':\n\t\t\t\t\t\tcase 'mapLightAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAO':\n\t\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAORepeat':\n\t\t\t\t\t\tcase 'mapAOOffset':\n\t\t\t\t\t\tcase 'mapAOWrap':\n\t\t\t\t\t\tcase 'mapAOAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBump':\n\t\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBumpScale':\n\t\t\t\t\t\t\tjson.bumpScale = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBumpRepeat':\n\t\t\t\t\t\tcase 'mapBumpOffset':\n\t\t\t\t\t\tcase 'mapBumpWrap':\n\t\t\t\t\t\tcase 'mapBumpAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormal':\n\t\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormalFactor':\n\t\t\t\t\t\t\tjson.normalScale = [ value, value ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormalRepeat':\n\t\t\t\t\t\tcase 'mapNormalOffset':\n\t\t\t\t\t\tcase 'mapNormalWrap':\n\t\t\t\t\t\tcase 'mapNormalAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapSpecular':\n\t\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapSpecularRepeat':\n\t\t\t\t\t\tcase 'mapSpecularOffset':\n\t\t\t\t\t\tcase 'mapSpecularWrap':\n\t\t\t\t\t\tcase 'mapSpecularAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapMetalness':\n\t\t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapMetalnessRepeat':\n\t\t\t\t\t\tcase 'mapMetalnessOffset':\n\t\t\t\t\t\tcase 'mapMetalnessWrap':\n\t\t\t\t\t\tcase 'mapMetalnessAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapRoughness':\n\t\t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapRoughnessRepeat':\n\t\t\t\t\t\tcase 'mapRoughnessOffset':\n\t\t\t\t\t\tcase 'mapRoughnessWrap':\n\t\t\t\t\t\tcase 'mapRoughnessAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAlpha':\n\t\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAlphaRepeat':\n\t\t\t\t\t\tcase 'mapAlphaOffset':\n\t\t\t\t\t\tcase 'mapAlphaWrap':\n\t\t\t\t\t\tcase 'mapAlphaAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'flipSided':\n\t\t\t\t\t\t\tjson.side = THREE.BackSide;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'doubleSided':\n\t\t\t\t\t\t\tjson.side = THREE.DoubleSide;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n\t\t\t\t\t\t\tjson.opacity = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'depthTest':\n\t\t\t\t\t\tcase 'depthWrite':\n\t\t\t\t\t\tcase 'colorWrite':\n\t\t\t\t\t\tcase 'opacity':\n\t\t\t\t\t\tcase 'reflectivity':\n\t\t\t\t\t\tcase 'transparent':\n\t\t\t\t\t\tcase 'visible':\n\t\t\t\t\t\tcase 'wireframe':\n\t\t\t\t\t\t\tjson[ name ] = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\t\tif ( value === true ) json.vertexColors = THREE.VertexColors;\n\t\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = THREE.FaceColors;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n\t\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\n\t\t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\n\t\t\t\tmaterialLoader.setTextures( textures );\n\n\t\t\t\treturn materialLoader.parse( json );\n\n\t\t\t};\n\n\t\t} )()\n\n\t};\n\n\tTHREE.Loader.Handlers = {\n\n\t\thandlers: [],\n\n\t\tadd: function ( regex, loader ) {\n\n\t\t\tthis.handlers.push( regex, loader );\n\n\t\t},\n\n\t\tget: function ( file ) {\n\n\t\t\tvar handlers = this.handlers;\n\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tvar regex = handlers[ i ];\n\t\t\t\tvar loader  = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t};\n\n\t// File:src/loaders/XHRLoader.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.XHRLoader = function ( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t};\n\n\tObject.assign( THREE.XHRLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = THREE.Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tvar request = new XMLHttpRequest();\n\t\t\trequest.overrideMimeType( 'text/plain' );\n\t\t\trequest.open( 'GET', url, true );\n\n\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\tvar response = event.target.response;\n\n\t\t\t\tTHREE.Cache.add( url, response );\n\n\t\t\t\tif ( this.status === 200 ) {\n\n\t\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} else if ( this.status === 0 ) {\n\n\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\tconsole.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( onError ) onError( event );\n\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}\n\n\t\t\t}, false );\n\n\t\t\tif ( onProgress !== undefined ) {\n\n\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\t\tonProgress( event );\n\n\t\t\t\t}, false );\n\n\t\t\t}\n\n\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\tif ( onError ) onError( event );\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}, false );\n\n\t\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n\t\t\trequest.send( null );\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn request;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetResponseType: function ( value ) {\n\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetWithCredentials: function ( value ) {\n\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t// File:src/loaders/FontLoader.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.FontLoader = function ( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t};\n\n\tObject.assign( THREE.FontLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse( json );\n\n\t\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\treturn new THREE.Font( json );\n\n\t\t}\n\n\t} );\n\n\t// File:src/loaders/ImageLoader.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.ImageLoader = function ( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t};\n\n\tObject.assign( THREE.ImageLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\t\t\timage.onload = function () {\n\n\t\t\t\tURL.revokeObjectURL( image.src );\n\n\t\t\t\tif ( onLoad ) onLoad( image );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t};\n\n\t\t\tif ( url.indexOf( 'data:' ) === 0 ) {\n\n\t\t\t\timage.src = url;\n\n\t\t\t} else {\n\n\t\t\t\tvar loader = new THREE.XHRLoader();\n\t\t\t\tloader.setPath( this.path );\n\t\t\t\tloader.setResponseType( 'blob' );\n\t\t\t\tloader.load( url, function ( blob ) {\n\n\t\t\t\t\timage.src = URL.createObjectURL( blob );\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn image;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t// File:src/loaders/JSONLoader.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.JSONLoader = function ( manager ) {\n\n\t\tif ( typeof manager === 'boolean' ) {\n\n\t\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t\t\tmanager = undefined;\n\n\t\t}\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t\tthis.withCredentials = false;\n\n\t};\n\n\tObject.assign( THREE.JSONLoader.prototype, {\n\n\t\tload: function( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : THREE.Loader.prototype.extractUrlBase( url );\n\n\t\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\t\tloader.setWithCredentials( this.withCredentials );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = JSON.parse( text );\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata !== undefined ) {\n\n\t\t\t\t\tvar type = metadata.type;\n\n\t\t\t\t\tif ( type !== undefined ) {\n\n\t\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar object = scope.parse( json, texturePath );\n\t\t\t\tonLoad( object.geometry, object.materials );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tthis.texturePath = value;\n\n\t\t},\n\n\t\tparse: function ( json, texturePath ) {\n\n\t\t\tvar geometry = new THREE.Geometry(),\n\t\t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\n\n\t\t\tparseModel( scale );\n\n\t\t\tparseSkin();\n\t\t\tparseMorphing( scale );\n\t\t\tparseAnimations();\n\n\t\t\tgeometry.computeFaceNormals();\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\tfunction parseModel( scale ) {\n\n\t\t\t\tfunction isBitSet( value, position ) {\n\n\t\t\t\t\treturn value & ( 1 << position );\n\n\t\t\t\t}\n\n\t\t\t\tvar i, j, fi,\n\n\t\t\t\toffset, zLength,\n\n\t\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n\t\t\t\ttype,\n\t\t\t\tisQuad,\n\t\t\t\thasMaterial,\n\t\t\t\thasFaceVertexUv,\n\t\t\t\thasFaceNormal, hasFaceVertexNormal,\n\t\t\t\thasFaceColor, hasFaceVertexColor,\n\n\t\t\tvertex, face, faceA, faceB, hex, normal,\n\n\t\t\t\tuvLayer, uv, u, v,\n\n\t\t\t\tfaces = json.faces,\n\t\t\t\tvertices = json.vertices,\n\t\t\t\tnormals = json.normals,\n\t\t\t\tcolors = json.colors,\n\n\t\t\t\tnUvLayers = 0;\n\n\t\t\t\tif ( json.uvs !== undefined ) {\n\n\t\t\t\t\t// disregard empty arrays\n\n\t\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n\t\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0;\n\t\t\t\tzLength = vertices.length;\n\n\t\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\t\tvertex = new THREE.Vector3();\n\n\t\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n\t\t\t\t\tgeometry.vertices.push( vertex );\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0;\n\t\t\t\tzLength = faces.length;\n\n\t\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\t\ttype = faces[ offset ++ ];\n\n\n\t\t\t\t\tisQuad              = isBitSet( type, 0 );\n\t\t\t\t\thasMaterial         = isBitSet( type, 1 );\n\t\t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\n\t\t\t\t\thasFaceNormal       = isBitSet( type, 4 );\n\t\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t\t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\n\t\t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\n\n\t\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n\t\t\t\t\tif ( isQuad ) {\n\n\t\t\t\t\t\tfaceA = new THREE.Face3();\n\t\t\t\t\t\tfaceA.a = faces[ offset ];\n\t\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n\t\t\t\t\t\tfaceB = new THREE.Face3();\n\t\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\n\n\t\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tfaceA.normal.set(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\t\tnormal = new THREE.Vector3(\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t);\n\n\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\tfaceA.color.setHex( hex );\n\t\t\t\t\t\t\tfaceB.color.setHex( hex );\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.faces.push( faceA );\n\t\t\t\t\t\tgeometry.faces.push( faceB );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface = new THREE.Face3();\n\t\t\t\t\t\tface.a = faces[ offset ++ ];\n\t\t\t\t\t\tface.b = faces[ offset ++ ];\n\t\t\t\t\t\tface.c = faces[ offset ++ ];\n\n\t\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.materialIndex = materialIndex;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\n\n\t\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tface.normal.set(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\t\tnormal = new THREE.Vector3(\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\tface.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.faces.push( face );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseSkin() {\n\n\t\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n\t\t\t\tif ( json.skinWeights ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\t\tvar x =                               json.skinWeights[ i ];\n\t\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n\t\t\t\t\t\tgeometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.skinIndices ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\t\tvar a =                               json.skinIndices[ i ];\n\t\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n\t\t\t\t\t\tgeometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.bones = json.bones;\n\n\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n\t\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseMorphing( scale ) {\n\n\t\t\t\tif ( json.morphTargets !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n\t\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\n\t\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n\t\t\t\t\t\t\tvar vertex = new THREE.Vector3();\n\t\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n\t\t\t\t\t\t\tdstVertices.push( vertex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\n\t\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseAnimations() {\n\n\t\t\t\tvar outputAnimations = [];\n\n\t\t\t\t// parse old style Bone/Hierarchy animations\n\t\t\t\tvar animations = [];\n\n\t\t\t\tif ( json.animation !== undefined ) {\n\n\t\t\t\t\tanimations.push( json.animation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.animations !== undefined ) {\n\n\t\t\t\t\tif ( json.animations.length ) {\n\n\t\t\t\t\t\tanimations = animations.concat( json.animations );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tanimations.push( json.animations );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\n\t\t\t\t\tvar clip = THREE.AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n\t\t\t\t\tif ( clip ) outputAnimations.push( clip );\n\n\t\t\t\t}\n\n\t\t\t\t// parse implicit morph animations\n\t\t\t\tif ( geometry.morphTargets ) {\n\n\t\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t\t\t\t\tvar morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\n\t\t\t\t}\n\n\t\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\n\t\t\t}\n\n\t\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n\t\t\t\treturn { geometry: geometry };\n\n\t\t\t} else {\n\n\t\t\t\tvar materials = THREE.Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\n\t\t\t\treturn { geometry: geometry, materials: materials };\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t// File:src/loaders/LoadingManager.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.LoadingManager = function ( onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t};\n\n\tTHREE.DefaultLoadingManager = new THREE.LoadingManager();\n\n\t// File:src/loaders/BufferGeometryLoader.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.BufferGeometryLoader = function ( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t};\n\n\tObject.assign( THREE.BufferGeometryLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\t\tvar index = json.data.index;\n\n\t\t\tvar TYPED_ARRAYS = {\n\t\t\t\t'Int8Array': Int8Array,\n\t\t\t\t'Uint8Array': Uint8Array,\n\t\t\t\t'Uint8ClampedArray': Uint8ClampedArray,\n\t\t\t\t'Int16Array': Int16Array,\n\t\t\t\t'Uint16Array': Uint16Array,\n\t\t\t\t'Int32Array': Int32Array,\n\t\t\t\t'Uint32Array': Uint32Array,\n\t\t\t\t'Float32Array': Float32Array,\n\t\t\t\t'Float64Array': Float64Array\n\t\t\t};\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\t\tgeometry.setIndex( new THREE.BufferAttribute( typedArray, 1 ) );\n\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n\t\t\t\tgeometry.addAttribute( key, new THREE.BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif ( groups !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\t\tvar center = new THREE.Vector3();\n\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new THREE.Sphere( center, boundingSphere.radius );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\t// File:src/loaders/MaterialLoader.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.MaterialLoader = function ( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\t\tthis.textures = {};\n\n\t};\n\n\tObject.assign( THREE.MaterialLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetTextures: function ( value ) {\n\n\t\t\tthis.textures = value;\n\n\t\t},\n\n\t\tgetTexture: function ( name ) {\n\n\t\t\tvar textures = this.textures;\n\n\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t}\n\n\t\t\treturn textures[ name ];\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar material = new THREE[ json.type ];\n\n\t\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n\t\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t\t\tif ( json.shading !== undefined ) material.shading = json.shading;\n\t\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\n\t\t\t// for PointsMaterial\n\t\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t\t// maps\n\n\t\t\tif ( json.map !== undefined ) material.map = this.getTexture( json.map );\n\n\t\t\tif ( json.alphaMap !== undefined ) {\n\n\t\t\t\tmaterial.alphaMap = this.getTexture( json.alphaMap );\n\t\t\t\tmaterial.transparent = true;\n\n\t\t\t}\n\n\t\t\tif ( json.bumpMap !== undefined ) material.bumpMap = this.getTexture( json.bumpMap );\n\t\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\t\tif ( json.normalMap !== undefined ) material.normalMap = this.getTexture( json.normalMap );\n\t\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new THREE.Vector2().fromArray( normalScale );\n\n\t\t\t}\n\n\t\t\tif ( json.displacementMap !== undefined ) material.displacementMap = this.getTexture( json.displacementMap );\n\t\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = this.getTexture( json.roughnessMap );\n\t\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = this.getTexture( json.metalnessMap );\n\n\t\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = this.getTexture( json.emissiveMap );\n\t\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\t\tif ( json.specularMap !== undefined ) material.specularMap = this.getTexture( json.specularMap );\n\n\t\t\tif ( json.envMap !== undefined ) {\n\n\t\t\t\tmaterial.envMap = this.getTexture( json.envMap );\n\t\t\t\tmaterial.combine = THREE.MultiplyOperation;\n\n\t\t\t}\n\n\t\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\n\t\t\tif ( json.lightMap !== undefined ) material.lightMap = this.getTexture( json.lightMap );\n\t\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\t\tif ( json.aoMap !== undefined ) material.aoMap = this.getTexture( json.aoMap );\n\t\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\t\t// MultiMaterial\n\n\t\t\tif ( json.materials !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\n\n\t\t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t} );\n\n\t// File:src/loaders/ObjectLoader.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.ObjectLoader = function ( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\t\tthis.texturePath = '';\n\n\t};\n\n\tObject.assign( THREE.ObjectLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( this.texturePath === '' ) {\n\n\t\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\n\t\t\t}\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tscope.parse( JSON.parse( text ), onLoad );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tthis.texturePath = value;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\n\t\t},\n\n\t\tparse: function ( json, onLoad ) {\n\n\t\t\tvar geometries = this.parseGeometries( json.geometries );\n\n\t\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t\t} );\n\n\t\t\tvar textures  = this.parseTextures( json.textures, images );\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\t\tif ( json.animations ) {\n\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t\t}\n\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t},\n\n\t\tparseGeometries: function ( json ) {\n\n\t\t\tvar geometries = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar geometryLoader = new THREE.JSONLoader();\n\t\t\t\tvar bufferGeometryLoader = new THREE.BufferGeometryLoader();\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar geometry;\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new THREE [ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometries;\n\n\t\t},\n\n\t\tparseMaterials: function ( json, textures ) {\n\n\t\t\tvar materials = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar loader = new THREE.MaterialLoader();\n\t\t\t\tloader.setTextures( textures );\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar material = loader.parse( json[ i ] );\n\t\t\t\t\tmaterials[ material.uuid ] = material;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materials;\n\n\t\t},\n\n\t\tparseAnimations: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar clip = THREE.AnimationClip.parse( json[ i ] );\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t},\n\n\t\tparseImages: function ( json, onLoad ) {\n\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\n\t\t\tfunction loadImage( url ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\treturn loader.load( url, function () {\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\t\tvar manager = new THREE.LoadingManager( onLoad );\n\n\t\t\t\tvar loader = new THREE.ImageLoader( manager );\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar image = json[ i ];\n\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\n\t\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn images;\n\n\t\t},\n\n\t\tparseTextures: function ( json, images ) {\n\n\t\t\tfunction parseConstant( value ) {\n\n\t\t\t\tif ( typeof( value ) === 'number' ) return value;\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\t\treturn THREE[ value ];\n\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture = new THREE.Texture( images[ data.image ] );\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n\t\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping );\n\n\t\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ] );\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter );\n\t\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter );\n\t\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n\t\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n\t\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn textures;\n\n\t\t},\n\n\t\tparseObject: function () {\n\n\t\t\tvar matrix = new THREE.Matrix4();\n\n\t\t\treturn function parseObject( data, geometries, materials ) {\n\n\t\t\t\tvar object;\n\n\t\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn geometries[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn materials[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'Scene':\n\n\t\t\t\t\t\tobject = new THREE.Scene();\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\t\tobject = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\t\tobject = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\t\tobject = new THREE.AmbientLight( data.color, data.intensity );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\t\tobject = new THREE.DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\t\tobject = new THREE.PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\t\tobject = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\t\tobject = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\t\tvar material = getMaterial( data.material );\n\n\t\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n\t\t\t\t\t\t\tobject = new THREE.SkinnedMesh( geometry, material );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tobject = new THREE.Mesh( geometry, material );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LOD':\n\n\t\t\t\t\t\tobject = new THREE.LOD();\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Line':\n\n\t\t\t\t\t\tobject = new THREE.Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointCloud':\n\t\t\t\t\tcase 'Points':\n\n\t\t\t\t\t\tobject = new THREE.Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\t\tobject = new THREE.Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Group':\n\n\t\t\t\t\t\tobject = new THREE.Group();\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tobject = new THREE.Object3D();\n\n\t\t\t\t}\n\n\t\t\t\tobject.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) object.name = data.name;\n\t\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\t\tmatrix.fromArray( data.matrix );\n\t\t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\n\t\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\t\tfor ( var child in data.children ) {\n\n\t\t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\t\tvar levels = data.levels;\n\n\t\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn object;\n\n\t\t\t};\n\n\t\t}()\n\n\t} );\n\n\t// File:src/loaders/TextureLoader.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.TextureLoader = function ( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t};\n\n\tObject.assign( THREE.TextureLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new THREE.Texture();\n\n\t\t\tvar loader = new THREE.ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( image ) {\n\n\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\t\tvar isJPEG = url.search( /\\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n\t\t\t\ttexture.format = isJPEG ? THREE.RGBFormat : THREE.RGBAFormat;\n\t\t\t\ttexture.image = image;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\t\tonLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t// File:src/loaders/CubeTextureLoader.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.CubeTextureLoader = function ( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t};\n\n\tObject.assign( THREE.CubeTextureLoader.prototype, {\n\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new THREE.CubeTexture();\n\n\t\t\tvar loader = new THREE.ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\t\tloaded ++;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, undefined, onError );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t// File:src/loaders/BinaryTextureLoader.js\n\n\t/**\n\t * @author Nikos M. / https://github.com/foo123/\n\t *\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t */\n\n\tTHREE.DataTextureLoader = THREE.BinaryTextureLoader = function ( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t\t// override in sub classes\n\t\tthis._parser = null;\n\n\t};\n\n\tObject.assign( THREE.BinaryTextureLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texture = new THREE.DataTexture();\n\n\t\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texData = scope._parser( buffer );\n\n\t\t\t\tif ( ! texData ) return;\n\n\t\t\t\tif ( undefined !== texData.image ) {\n\n\t\t\t\t\ttexture.image = texData.image;\n\n\t\t\t\t} else if ( undefined !== texData.data ) {\n\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : THREE.ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : THREE.ClampToEdgeWrapping;\n\n\t\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : THREE.LinearFilter;\n\t\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : THREE.LinearMipMapLinearFilter;\n\n\t\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n\t\t\t\tif ( undefined !== texData.format ) {\n\n\t\t\t\t\ttexture.format = texData.format;\n\n\t\t\t\t}\n\t\t\t\tif ( undefined !== texData.type ) {\n\n\t\t\t\t\ttexture.type = texData.type;\n\n\t\t\t\t}\n\n\t\t\t\tif ( undefined !== texData.mipmaps ) {\n\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( 1 === texData.mipmapCount ) {\n\n\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t\t}, onProgress, onError );\n\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t// File:src/loaders/CompressedTextureLoader.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t */\n\n\tTHREE.CompressedTextureLoader = function ( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t\t// override in sub classes\n\t\tthis._parser = null;\n\n\t};\n\n\tObject.assign( THREE.CompressedTextureLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar images = [];\n\n\t\t\tvar texture = new THREE.CompressedTexture();\n\t\t\ttexture.image = images;\n\n\t\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\t\timages[ i ] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\tvar loaded = 0;\n\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\t\tloadTexture( i );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\t\timages[ f ] = { mipmaps : [] };\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t// File:src/materials/Material.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.Material = function () {\n\n\t\tObject.defineProperty( this, 'id', { value: THREE.MaterialIdCount ++ } );\n\n\t\tthis.uuid = THREE.Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.fog = true;\n\t\tthis.lights = true;\n\n\t\tthis.blending = THREE.NormalBlending;\n\t\tthis.side = THREE.FrontSide;\n\t\tthis.shading = THREE.SmoothShading; // THREE.FlatShading, THREE.SmoothShading\n\t\tthis.vertexColors = THREE.NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = THREE.SrcAlphaFactor;\n\t\tthis.blendDst = THREE.OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = THREE.AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = THREE.LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipShadows = false;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n\t\tthis.visible = true;\n\n\t\tthis._needsUpdate = true;\n\n\t};\n\n\tTHREE.Material.prototype = {\n\n\t\tconstructor: THREE.Material,\n\n\t\tget needsUpdate() {\n\n\t\t\treturn this._needsUpdate;\n\n\t\t},\n\n\t\tset needsUpdate( value ) {\n\n\t\t\tif ( value === true ) this.update();\n\t\t\tthis._needsUpdate = value;\n\n\t\t},\n\n\t\tsetValues: function ( values ) {\n\n\t\t\tif ( values === undefined ) return;\n\n\t\t\tfor ( var key in values ) {\n\n\t\t\t\tvar newValue = values[ key ];\n\n\t\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[ key ];\n\n\t\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( currentValue instanceof THREE.Color ) {\n\n\t\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t\t} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {\n\n\t\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t\t} else if ( key === 'overdraw' ) {\n\n\t\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n\t\t\t\t\tthis[ key ] = Number( newValue );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRoot = meta === undefined;\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.4,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Material serialization\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\t\tif ( this.color instanceof THREE.Color ) data.color = this.color.getHex();\n\n\t\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\t\tif ( this.emissive instanceof THREE.Color ) data.emissive = this.emissive.getHex();\n\t\t\tif ( this.specular instanceof THREE.Color ) data.specular = this.specular.getHex();\n\t\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\n\t\t\tif ( this.map instanceof THREE.Texture ) data.map = this.map.toJSON( meta ).uuid;\n\t\t\tif ( this.alphaMap instanceof THREE.Texture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t\t\tif ( this.lightMap instanceof THREE.Texture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\t\tif ( this.bumpMap instanceof THREE.Texture ) {\n\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t\t}\n\t\t\tif ( this.normalMap instanceof THREE.Texture ) {\n\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t\t}\n\t\t\tif ( this.displacementMap instanceof THREE.Texture ) {\n\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t\t}\n\t\t\tif ( this.roughnessMap instanceof THREE.Texture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\t\tif ( this.metalnessMap instanceof THREE.Texture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.emissiveMap instanceof THREE.Texture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\t\tif ( this.specularMap instanceof THREE.Texture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.envMap instanceof THREE.Texture ) {\n\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n\t\t\t}\n\n\t\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\t\tif ( this.blending !== THREE.NormalBlending ) data.blending = this.blending;\n\t\t\tif ( this.shading !== THREE.SmoothShading ) data.shading = this.shading;\n\t\t\tif ( this.side !== THREE.FrontSide ) data.side = this.side;\n\t\t\tif ( this.vertexColors !== THREE.NoColors ) data.vertexColors = this.vertexColors;\n\n\t\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\t\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\n\t\t\t// TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache ( cache ) {\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.fog = source.fog;\n\t\t\tthis.lights = source.lights;\n\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.shading = source.shading;\n\t\t\tthis.vertexColors = source.vertexColors;\n\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\n\t\t\tthis.colorWrite = source.colorWrite;\n\n\t\t\tthis.precision = source.precision;\n\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\t\tthis.alphaTest = source.alphaTest;\n\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\t\tthis.overdraw = source.overdraw;\n\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.clipShadows = source.clipShadows;\n\n\t\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\t\tdstPlanes = null;\n\n\t\t\tif ( srcPlanes !== null ) {\n\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array( n );\n\n\t\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'update' } );\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t};\n\n\tObject.assign( THREE.Material.prototype, THREE.EventDispatcher.prototype );\n\n\tTHREE.MaterialIdCount = 0;\n\n\t// File:src/materials/LineBasicMaterial.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *  linecap: \"round\",\n\t *  linejoin: \"round\"\n\t * }\n\t */\n\n\tTHREE.LineBasicMaterial = function ( parameters ) {\n\n\t\tTHREE.Material.call( this );\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new THREE.Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t};\n\n\tTHREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;\n\n\tTHREE.LineBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tTHREE.Material.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\treturn this;\n\n\t};\n\n\t// File:src/materials/LineDashedMaterial.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *\n\t *  scale: <float>,\n\t *  dashSize: <float>,\n\t *  gapSize: <float>\n\t * }\n\t */\n\n\tTHREE.LineDashedMaterial = function ( parameters ) {\n\n\t\tTHREE.Material.call( this );\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.color = new THREE.Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t};\n\n\tTHREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;\n\n\tTHREE.LineDashedMaterial.prototype.copy = function ( source ) {\n\n\t\tTHREE.Material.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t};\n\n\t// File:src/materials/MeshBasicMaterial.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  shading: THREE.SmoothShading,\n\t *  depthTest: <bool>,\n\t *  depthWrite: <bool>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tTHREE.MeshBasicMaterial = function ( parameters ) {\n\n\t\tTHREE.Material.call( this );\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new THREE.Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = THREE.MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t};\n\n\tTHREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;\n\n\tTHREE.MeshBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tTHREE.Material.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t// File:src/materials/MeshDepthMaterial.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / https://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t * }\n\t */\n\n\tTHREE.MeshDepthMaterial = function ( parameters ) {\n\n\t\tTHREE.Material.call( this );\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = THREE.BasicDepthPacking;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t};\n\n\tTHREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;\n\n\tTHREE.MeshDepthMaterial.prototype.copy = function ( source ) {\n\n\t\tTHREE.Material.prototype.copy.call( this, source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t};\n\n\t// File:src/materials/MeshLambertMaterial.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tTHREE.MeshLambertMaterial = function ( parameters ) {\n\n\t\tTHREE.Material.call( this );\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new THREE.Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new THREE.Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = THREE.MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t};\n\n\tTHREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;\n\n\tTHREE.MeshLambertMaterial.prototype.copy = function ( source ) {\n\n\t\tTHREE.Material.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t// File:src/materials/MeshNormalMaterial.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * parameters = {\n\t *  opacity: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t * }\n\t */\n\n\tTHREE.MeshNormalMaterial = function ( parameters ) {\n\n\t\tTHREE.Material.call( this, parameters );\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t};\n\n\tTHREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;\n\n\tTHREE.MeshNormalMaterial.prototype.copy = function ( source ) {\n\n\t\tTHREE.Material.prototype.copy.call( this, source );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t};\n\n\t// File:src/materials/MeshPhongMaterial.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tTHREE.MeshPhongMaterial = function ( parameters ) {\n\n\t\tTHREE.Material.call( this );\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new THREE.Color( 0xffffff ); // diffuse\n\t\tthis.specular = new THREE.Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new THREE.Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalScale = new THREE.Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = THREE.MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t};\n\n\tTHREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;\n\n\tTHREE.MeshPhongMaterial.prototype.copy = function ( source ) {\n\n\t\tTHREE.Material.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t// File:src/materials/MeshStandardMaterial.js\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  roughness: <float>,\n\t *  metalness: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  roughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  metalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  envMapIntensity: <float>\n\t *\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tTHREE.MeshStandardMaterial = function ( parameters ) {\n\n\t\tTHREE.Material.call( this );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new THREE.Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 0.5;\n\t\tthis.metalness = 0.5;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new THREE.Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalScale = new THREE.Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t};\n\n\tTHREE.MeshStandardMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.MeshStandardMaterial.prototype.constructor = THREE.MeshStandardMaterial;\n\n\tTHREE.MeshStandardMaterial.prototype.copy = function ( source ) {\n\n\t\tTHREE.Material.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t// File:src/materials/MeshPhysicalMaterial.js\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  reflectivity: <float>\n\t * }\n\t */\n\n\tTHREE.MeshPhysicalMaterial = function ( parameters ) {\n\n\t\tTHREE.MeshStandardMaterial.call( this );\n\n\t\tthis.defines = { 'PHYSICAL': '' };\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tthis.clearCoat = 0.0;\n\t\tthis.clearCoatRoughness = 0.0;\n\n\t\tthis.setValues( parameters );\n\n\t};\n\n\tTHREE.MeshPhysicalMaterial.prototype = Object.create( THREE.MeshStandardMaterial.prototype );\n\tTHREE.MeshPhysicalMaterial.prototype.constructor = THREE.MeshPhysicalMaterial;\n\n\tTHREE.MeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\t\tTHREE.MeshStandardMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'PHYSICAL': '' };\n\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tthis.clearCoat = source.clearCoat;\n\t\tthis.clearCoatRoughness = source.clearCoatRoughness;\n\n\t\treturn this;\n\n\t};\n\n\t// File:src/materials/MultiMaterial.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.MultiMaterial = function ( materials ) {\n\n\t\tthis.uuid = THREE.Math.generateUUID();\n\n\t\tthis.type = 'MultiMaterial';\n\n\t\tthis.materials = materials instanceof Array ? materials : [];\n\n\t\tthis.visible = true;\n\n\t};\n\n\tTHREE.MultiMaterial.prototype = {\n\n\t\tconstructor: THREE.MultiMaterial,\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar output = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.2,\n\t\t\t\t\ttype: 'material',\n\t\t\t\t\tgenerator: 'MaterialExporter'\n\t\t\t\t},\n\t\t\t\tuuid: this.uuid,\n\t\t\t\ttype: this.type,\n\t\t\t\tmaterials: []\n\t\t\t};\n\n\t\t\tvar materials = this.materials;\n\n\t\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\t\tvar material = materials[ i ].toJSON( meta );\n\t\t\t\tdelete material.metadata;\n\n\t\t\t\toutput.materials.push( material );\n\n\t\t\t}\n\n\t\t\toutput.visible = this.visible;\n\n\t\t\treturn output;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\tvar material = new this.constructor();\n\n\t\t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\n\n\t\t\t\tmaterial.materials.push( this.materials[ i ].clone() );\n\n\t\t\t}\n\n\t\t\tmaterial.visible = this.visible;\n\n\t\t\treturn material;\n\n\t\t}\n\n\t};\n\n\t// File:src/materials/PointsMaterial.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  size: <float>,\n\t *  sizeAttenuation: <bool>\n\t * }\n\t */\n\n\tTHREE.PointsMaterial = function ( parameters ) {\n\n\t\tTHREE.Material.call( this );\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new THREE.Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t};\n\n\tTHREE.PointsMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial;\n\n\tTHREE.PointsMaterial.prototype.copy = function ( source ) {\n\n\t\tTHREE.Material.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t};\n\n\t// File:src/materials/ShaderMaterial.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  defines: { \"label\" : \"value\" },\n\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *  fragmentShader: <string>,\n\t *  vertexShader: <string>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  lights: <bool>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tTHREE.ShaderMaterial = function ( parameters ) {\n\n\t\tTHREE.Material.call( this );\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\n\t\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n\t\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\t\tthis.morphTargets = false; // set to use morph targets\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t};\n\n\tTHREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;\n\n\tTHREE.ShaderMaterial.prototype.copy = function ( source ) {\n\n\t\tTHREE.Material.prototype.copy.call( this, source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = THREE.UniformsUtils.clone( source.uniforms );\n\n\t\tthis.defines = source.defines;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.skinning = source.skinning;\n\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.extensions = source.extensions;\n\n\t\treturn this;\n\n\t};\n\n\tTHREE.ShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\t\tvar data = THREE.Material.prototype.toJSON.call( this, meta );\n\n\t\tdata.uniforms = this.uniforms;\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\treturn data;\n\n\t};\n\n\t// File:src/materials/RawShaderMaterial.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.RawShaderMaterial = function ( parameters ) {\n\n\t\tTHREE.ShaderMaterial.call( this, parameters );\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t};\n\n\tTHREE.RawShaderMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\n\tTHREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial;\n\n\t// File:src/materials/SpriteMaterial.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *\tuvOffset: new THREE.Vector2(),\n\t *\tuvScale: new THREE.Vector2()\n\t * }\n\t */\n\n\tTHREE.SpriteMaterial = function ( parameters ) {\n\n\t\tTHREE.Material.call( this );\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new THREE.Color( 0xffffff );\n\t\tthis.map = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t};\n\n\tTHREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;\n\n\tTHREE.SpriteMaterial.prototype.copy = function ( source ) {\n\n\t\tTHREE.Material.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.map = source.map;\n\n\t\tthis.rotation = source.rotation;\n\n\t\treturn this;\n\n\t};\n\n\t// File:src/materials/ShadowMaterial.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.ShadowMaterial = function () {\n\n\t\tTHREE.ShaderMaterial.call( this, {\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\n\t\t\t\tTHREE.UniformsLib[ \"lights\" ],\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\t\t\tvertexShader: THREE.ShaderChunk[ 'shadow_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'shadow_frag' ]\n\t\t} );\n\n\t\tthis.lights = true;\n\t\tthis.transparent = true;\n\n\t\tObject.defineProperties( this, {\n\t\t\topacity: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function () {\n\t\t\t\t\treturn this.uniforms.opacity.value;\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tthis.uniforms.opacity.value = value;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t};\n\n\tTHREE.ShadowMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\n\tTHREE.ShadowMaterial.prototype.constructor = THREE.ShadowMaterial;\n\n\t// File:src/textures/Texture.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tTHREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\tObject.defineProperty( this, 'id', { value: THREE.TextureIdCount ++ } );\n\n\t\tthis.uuid = THREE.Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.sourceFile = '';\n\n\t\tthis.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;\n\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;\n\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\t\tthis.format = format !== undefined ? format : THREE.RGBAFormat;\n\t\tthis.type = type !== undefined ? type : THREE.UnsignedByteType;\n\n\t\tthis.offset = new THREE.Vector2( 0, 0 );\n\t\tthis.repeat = new THREE.Vector2( 1, 1 );\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding !== undefined ? encoding :  THREE.LinearEncoding;\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t};\n\n\tTHREE.Texture.DEFAULT_IMAGE = undefined;\n\tTHREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;\n\n\tTHREE.Texture.prototype = {\n\n\t\tconstructor: THREE.Texture,\n\n\t\tset needsUpdate( value ) {\n\n\t\t\tif ( value === true ) this.version ++;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\t\tthis.mapping = source.mapping;\n\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\n\t\t\tthis.anisotropy = source.anisotropy;\n\n\t\t\tthis.format = source.format;\n\t\t\tthis.type = source.type;\n\n\t\t\tthis.offset.copy( source.offset );\n\t\t\tthis.repeat.copy( source.repeat );\n\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tif ( meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t\t}\n\n\t\t\tfunction getDataURL( image ) {\n\n\t\t\t\tvar canvas;\n\n\t\t\t\tif ( image.toDataURL !== undefined ) {\n\n\t\t\t\t\tcanvas = image;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\t\tcanvas.width = image.width;\n\t\t\t\t\tcanvas.height = image.height;\n\n\t\t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar output = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.4,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\n\t\t\t\tmapping: this.mapping,\n\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\n\t\t\t\tflipY: this.flipY\n\t\t\t};\n\n\t\t\tif ( this.image !== undefined ) {\n\n\t\t\t\t// TODO: Move to THREE.Image\n\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\t\timage.uuid = THREE.Math.generateUUID(); // UGH\n\n\t\t\t\t}\n\n\t\t\t\tif ( meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: getDataURL( image )\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\n\t\t\t}\n\n\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t\treturn output;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t},\n\n\t\ttransformUv: function ( uv ) {\n\n\t\t\tif ( this.mapping !== THREE.UVMapping )  return;\n\n\t\t\tuv.multiply( this.repeat );\n\t\t\tuv.add( this.offset );\n\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\t\tcase THREE.RepeatWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\t\tcase THREE.RepeatWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.flipY ) {\n\n\t\t\t\tuv.y = 1 - uv.y;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tObject.assign( THREE.Texture.prototype, THREE.EventDispatcher.prototype );\n\n\tTHREE.TextureIdCount = 0;\n\n\t// File:src/textures/DepthTexture.js\n\n\t/**\n\t * @author Matt DesLauriers / @mattdesl\n\t */\n\n\tTHREE.DepthTexture = function ( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\n\n\t  THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, THREE.DepthFormat, type, anisotropy );\n\n\t  this.image = { width: width, height: height };\n\n\t  this.type = type !== undefined ? type : THREE.UnsignedShortType;\n\n\t  this.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\n\t  this.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\n\n\t  this.flipY = false;\n\t  this.generateMipmaps  = false;\n\n\t};\n\n\tTHREE.DepthTexture.prototype = Object.create( THREE.Texture.prototype );\n\tTHREE.DepthTexture.prototype.constructor = THREE.DepthTexture;\n\n\t// File:src/textures/CanvasTexture.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.CanvasTexture = function ( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTHREE.Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.needsUpdate = true;\n\n\t};\n\n\tTHREE.CanvasTexture.prototype = Object.create( THREE.Texture.prototype );\n\tTHREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture;\n\n\t// File:src/textures/CubeTexture.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.CubeTexture = function ( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : THREE.CubeReflectionMapping;\n\n\t\tTHREE.Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.flipY = false;\n\n\t};\n\n\tTHREE.CubeTexture.prototype = Object.create( THREE.Texture.prototype );\n\tTHREE.CubeTexture.prototype.constructor = THREE.CubeTexture;\n\n\tObject.defineProperty( THREE.CubeTexture.prototype, 'images', {\n\n\t\tget: function () {\n\n\t\t\treturn this.image;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.image = value;\n\n\t\t}\n\n\t} );\n\n\t// File:src/textures/CompressedTexture.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t};\n\n\tTHREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );\n\tTHREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture;\n\n\t// File:src/textures/DataTexture.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { data: data, width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps  = false;\n\n\t};\n\n\tTHREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );\n\tTHREE.DataTexture.prototype.constructor = THREE.DataTexture;\n\n\t// File:src/textures/VideoTexture.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.VideoTexture = function ( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTHREE.Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.generateMipmaps = false;\n\n\t\tvar scope = this;\n\n\t\tfunction update() {\n\n\t\t\trequestAnimationFrame( update );\n\n\t\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\t\tscope.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tupdate();\n\n\t};\n\n\tTHREE.VideoTexture.prototype = Object.create( THREE.Texture.prototype );\n\tTHREE.VideoTexture.prototype.constructor = THREE.VideoTexture;\n\n\t// File:src/objects/Group.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.Group = function () {\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tthis.type = 'Group';\n\n\t};\n\n\tTHREE.Group.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\t\tconstructor: THREE.Group\n\n\t} );\n\n\t// File:src/objects/Points.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.Points = function ( geometry, material ) {\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new THREE.PointsMaterial( { color: Math.random() * 0xffffff } );\n\n\t};\n\n\tTHREE.Points.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\t\tconstructor: THREE.Points,\n\n\t\traycast: ( function () {\n\n\t\t\tvar inverseMatrix = new THREE.Matrix4();\n\t\t\tvar ray = new THREE.Ray();\n\t\t\tvar sphere = new THREE.Sphere();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tvar object = this;\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t\t//\n\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\t\t\tvar position = new THREE.Vector3();\n\n\t\t\t\tfunction testPoint( point, index ) {\n\n\t\t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\n\t\t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n\t\t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tobject: object\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\t\ttestPoint( position, a );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\n\t\t\t\t\t\t\ttestPoint( position, i );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\ttestPoint( vertices[ i ], i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t// File:src/objects/Line.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.Line = function ( geometry, material, mode ) {\n\n\t\tif ( mode === 1 ) {\n\n\t\t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n\t\t\treturn new THREE.LineSegments( geometry, material );\n\n\t\t}\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\t};\n\n\tTHREE.Line.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\t\tconstructor: THREE.Line,\n\n\t\traycast: ( function () {\n\n\t\t\tvar inverseMatrix = new THREE.Matrix4();\n\t\t\tvar ray = new THREE.Ray();\n\t\t\tvar sphere = new THREE.Sphere();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tvar precision = raycaster.linePrecision;\n\t\t\t\tvar precisionSq = precision * precision;\n\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t\t//\n\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t\tvar vStart = new THREE.Vector3();\n\t\t\t\tvar vEnd = new THREE.Vector3();\n\t\t\t\tvar interSegment = new THREE.Vector3();\n\t\t\t\tvar interRay = new THREE.Vector3();\n\t\t\t\tvar step = this instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t// File:src/objects/LineSegments.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.LineSegments = function ( geometry, material ) {\n\n\t\tTHREE.Line.call( this, geometry, material );\n\n\t\tthis.type = 'LineSegments';\n\n\t};\n\n\tTHREE.LineSegments.prototype = Object.assign( Object.create( THREE.Line.prototype ), {\n\n\t\tconstructor: THREE.LineSegments\n\n\t} );\n\n\t// File:src/objects/Mesh.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author jonobr1 / http://jonobr1.com/\n\t */\n\n\tTHREE.Mesh = function ( geometry, material ) {\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\t\tthis.drawMode = THREE.TrianglesDrawMode;\n\n\t\tthis.updateMorphTargets();\n\n\t};\n\n\tTHREE.Mesh.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\t\tconstructor: THREE.Mesh,\n\n\t\tsetDrawMode: function ( value ) {\n\n\t\t\tthis.drawMode = value;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\t\t\tthis.drawMode = source.drawMode;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tif ( this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0 ) {\n\n\t\t\t\tthis.morphTargetBase = - 1;\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetMorphTargetIndexByName: function ( name ) {\n\n\t\t\tif ( this.morphTargetDictionary[ name ] !== undefined ) {\n\n\t\t\t\treturn this.morphTargetDictionary[ name ];\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.' );\n\n\t\t\treturn 0;\n\n\t\t},\n\n\t\traycast: ( function () {\n\n\t\t\tvar inverseMatrix = new THREE.Matrix4();\n\t\t\tvar ray = new THREE.Ray();\n\t\t\tvar sphere = new THREE.Sphere();\n\n\t\t\tvar vA = new THREE.Vector3();\n\t\t\tvar vB = new THREE.Vector3();\n\t\t\tvar vC = new THREE.Vector3();\n\n\t\t\tvar tempA = new THREE.Vector3();\n\t\t\tvar tempB = new THREE.Vector3();\n\t\t\tvar tempC = new THREE.Vector3();\n\n\t\t\tvar uvA = new THREE.Vector2();\n\t\t\tvar uvB = new THREE.Vector2();\n\t\t\tvar uvC = new THREE.Vector2();\n\n\t\t\tvar barycoord = new THREE.Vector3();\n\n\t\t\tvar intersectionPoint = new THREE.Vector3();\n\t\t\tvar intersectionPointWorld = new THREE.Vector3();\n\n\t\t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\n\t\t\t\tTHREE.Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\n\n\t\t\t\tuv1.multiplyScalar( barycoord.x );\n\t\t\t\tuv2.multiplyScalar( barycoord.y );\n\t\t\t\tuv3.multiplyScalar( barycoord.z );\n\n\t\t\t\tuv1.add( uv2 ).add( uv3 );\n\n\t\t\t\treturn uv1.clone();\n\n\t\t\t}\n\n\t\t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\n\n\t\t\t\tvar intersect;\n\t\t\t\tvar material = object.material;\n\n\t\t\t\tif ( material.side === THREE.BackSide ) {\n\n\t\t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== THREE.DoubleSide, point );\n\n\t\t\t\t}\n\n\t\t\t\tif ( intersect === null ) return null;\n\n\t\t\t\tintersectionPointWorld.copy( point );\n\t\t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\t\t\t\treturn {\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\tpoint: intersectionPointWorld.clone(),\n\t\t\t\t\tobject: object\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\n\n\t\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\n\n\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\tif ( uvs ) {\n\n\t\t\t\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\t\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\t\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tintersection.face = new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) );\n\t\t\t\t\tintersection.faceIndex = a;\n\n\t\t\t\t}\n\n\t\t\t\treturn intersection;\n\n\t\t\t}\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar material = this.material;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t\tif ( material === undefined ) return;\n\n\t\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t\t//\n\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t\t// Check boundingBox before continuing\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t\t\t}\n\n\t\t\t\tvar uvs, intersection;\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar a, b, c;\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tif ( attributes.uv !== undefined ) {\n\n\t\t\t\t\t\tuvs = attributes.uv.array;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\ta = indices[ i ];\n\t\t\t\t\t\t\tb = indices[ i + 1 ];\n\t\t\t\t\t\t\tc = indices[ i + 2 ];\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\n\n\t\t\t\t\t\t\ta = i / 3;\n\t\t\t\t\t\t\tb = a + 1;\n\t\t\t\t\t\t\tc = a + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\t\tvar isFaceMaterial = material instanceof THREE.MultiMaterial;\n\t\t\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\n\n\t\t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n\t\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\n\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\n\t\t\t\t\t\t\tvA.set( 0, 0, 0 );\n\t\t\t\t\t\t\tvB.set( 0, 0, 0 );\n\t\t\t\t\t\t\tvC.set( 0, 0, 0 );\n\n\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\n\t\t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n\t\t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n\t\t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvA.add( fvA );\n\t\t\t\t\t\t\tvB.add( fvB );\n\t\t\t\t\t\t\tvC.add( fvC );\n\n\t\t\t\t\t\t\tfvA = vA;\n\t\t\t\t\t\t\tfvB = vB;\n\t\t\t\t\t\t\tfvC = vC;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tif ( uvs ) {\n\n\t\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t// File:src/objects/Bone.js\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tTHREE.Bone = function ( skin ) {\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tthis.type = 'Bone';\n\n\t\tthis.skin = skin;\n\n\t};\n\n\tTHREE.Bone.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\t\tconstructor: THREE.Bone,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\t\t\tthis.skin = source.skin;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t// File:src/objects/Skeleton.js\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author michael guerrero / http://realitymeltdown.com\n\t * @author ikerr / http://verold.com\n\t */\n\n\tTHREE.Skeleton = function ( bones, boneInverses, useVertexTexture ) {\n\n\t\tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\n\n\t\tthis.identityMatrix = new THREE.Matrix4();\n\n\t\t// copy the bone array\n\n\t\tbones = bones || [];\n\n\t\tthis.bones = bones.slice( 0 );\n\n\t\t// create a bone texture or an array of floats\n\n\t\tif ( this.useVertexTexture ) {\n\n\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\tsize = THREE.Math.nextPowerOfTwo( Math.ceil( size ) );\n\t\t\tsize = Math.max( size, 4 );\n\n\t\t\tthis.boneTextureWidth = size;\n\t\t\tthis.boneTextureHeight = size;\n\n\t\t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\n\t\t\tthis.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );\n\n\t\t} else {\n\n\t\t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\n\n\t\t}\n\n\t\t// use the supplied bone inverses or calculate the inverses\n\n\t\tif ( boneInverses === undefined ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new THREE.Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tObject.assign( THREE.Skeleton.prototype, {\n\n\t\tcalculateInverses: function () {\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\t\tvar inverse = new THREE.Matrix4();\n\n\t\t\t\tif ( this.bones[ b ] ) {\n\n\t\t\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push( inverse );\n\n\t\t\t}\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tvar bone;\n\n\t\t\t// recover the bind-time world matrices\n\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\t\tbone = this.bones[ b ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// compute the local matrices, positions, rotations and scales\n\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\t\tbone = this.bones[ b ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tif ( bone.parent instanceof THREE.Bone ) {\n\n\t\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: ( function () {\n\n\t\t\tvar offsetMatrix = new THREE.Matrix4();\n\n\t\t\treturn function update() {\n\n\t\t\t\t// flatten bone matrices to array\n\n\t\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\n\n\t\t\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\n\t\t\t\t\toffsetMatrix.toArray( this.boneMatrices, b * 16 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.useVertexTexture ) {\n\n\t\t\t\t\tthis.boneTexture.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tclone: function () {\n\n\t\t\treturn new THREE.Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\n\n\t\t}\n\n\t} );\n\n\t// File:src/objects/SkinnedMesh.js\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tTHREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {\n\n\t\tTHREE.Mesh.call( this, geometry, material );\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = \"attached\";\n\t\tthis.bindMatrix = new THREE.Matrix4();\n\t\tthis.bindMatrixInverse = new THREE.Matrix4();\n\n\t\t// init bones\n\n\t\t// TODO: remove bone creation as there is no reason (other than\n\t\t// convenience) for THREE.SkinnedMesh to do this.\n\n\t\tvar bones = [];\n\n\t\tif ( this.geometry && this.geometry.bones !== undefined ) {\n\n\t\t\tvar bone, gbone;\n\n\t\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n\t\t\t\tgbone = this.geometry.bones[ b ];\n\n\t\t\t\tbone = new THREE.Bone( this );\n\t\t\t\tbones.push( bone );\n\n\t\t\t\tbone.name = gbone.name;\n\t\t\t\tbone.position.fromArray( gbone.pos );\n\t\t\t\tbone.quaternion.fromArray( gbone.rotq );\n\t\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\n\t\t\t}\n\n\t\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n\t\t\t\tgbone = this.geometry.bones[ b ];\n\n\t\t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null &&\n\t\t\t\t\t\tbones[ gbone.parent ] !== undefined ) {\n\n\t\t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.add( bones[ b ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.normalizeSkinWeights();\n\n\t\tthis.updateMatrixWorld( true );\n\t\tthis.bind( new THREE.Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\n\n\t};\n\n\n\tTHREE.SkinnedMesh.prototype = Object.assign( Object.create( THREE.Mesh.prototype ), {\n\n\t\tconstructor: THREE.SkinnedMesh,\n\n\t\tbind: function( skeleton, bindMatrix ) {\n\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif ( bindMatrix === undefined ) {\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy( bindMatrix );\n\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tthis.skeleton.pose();\n\n\t\t},\n\n\t\tnormalizeSkinWeights: function () {\n\n\t\t\tif ( this.geometry instanceof THREE.Geometry ) {\n\n\t\t\t\tfor ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\n\t\t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\n\t\t\t\t\tvar scale = 1.0 / sw.lengthManhattan();\n\n\t\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\t\tsw.multiplyScalar( scale );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( this.geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\tvar vec = new THREE.Vector4();\n\n\t\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\t\tfor ( var i = 0; i < skinWeight.count; i ++ ) {\n\n\t\t\t\t\tvec.x = skinWeight.getX( i );\n\t\t\t\t\tvec.y = skinWeight.getY( i );\n\t\t\t\t\tvec.z = skinWeight.getZ( i );\n\t\t\t\t\tvec.w = skinWeight.getW( i );\n\n\t\t\t\t\tvar scale = 1.0 / vec.lengthManhattan();\n\n\t\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\t\tvec.multiplyScalar( scale );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t\t}\n\n\t\t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrixWorld: function( force ) {\n\n\t\t\tTHREE.Mesh.prototype.updateMatrixWorld.call( this, true );\n\n\t\t\tif ( this.bindMode === \"attached\" ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t\t} else if ( this.bindMode === \"detached\" ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function() {\n\n\t\t\treturn new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t// File:src/objects/LOD.js\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.LOD = function () {\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t} );\n\n\t};\n\n\n\tTHREE.LOD.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\t\tconstructor: THREE.LOD,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tTHREE.Object3D.prototype.copy.call( this, source, false );\n\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddLevel: function ( object, distance ) {\n\n\t\t\tif ( distance === undefined ) distance = 0;\n\n\t\t\tdistance = Math.abs( distance );\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\t\tthis.add( object );\n\n\t\t},\n\n\t\tgetObjectForDistance: function ( distance ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn levels[ i - 1 ].object;\n\n\t\t},\n\n\t\traycast: ( function () {\n\n\t\t\tvar matrixPosition = new THREE.Vector3();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\n\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tupdate: function () {\n\n\t\t\tvar v1 = new THREE.Vector3();\n\t\t\tvar v2 = new THREE.Vector3();\n\n\t\t\treturn function update( camera ) {\n\n\t\t\t\tvar levels = this.levels;\n\n\t\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\t\tvar distance = v1.distanceTo( v2 );\n\n\t\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.levels = [];\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tdata.object.levels.push( {\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t// File:src/objects/Sprite.js\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.Sprite = function ( material ) {\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tthis.type = 'Sprite';\n\n\t\tthis.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();\n\n\t};\n\n\tTHREE.Sprite.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\t\tconstructor: THREE.Sprite,\n\n\t\traycast: ( function () {\n\n\t\t\tvar matrixPosition = new THREE.Vector3();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\n\t\t\t\tvar guessSizeSq = this.scale.x * this.scale.y / 4;\n\n\t\t\t\tif ( distanceSq > guessSizeSq ) {\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tintersects.push( {\n\n\t\t\t\t\tdistance: Math.sqrt( distanceSq ),\n\t\t\t\t\tpoint: this.position,\n\t\t\t\t\tface: null,\n\t\t\t\t\tobject: this\n\n\t\t\t\t} );\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t// File:src/objects/LensFlare.js\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.LensFlare = function ( texture, size, distance, blending, color ) {\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tthis.lensFlares = [];\n\n\t\tthis.positionScreen = new THREE.Vector3();\n\t\tthis.customUpdateCallback = undefined;\n\n\t\tif ( texture !== undefined ) {\n\n\t\t\tthis.add( texture, size, distance, blending, color );\n\n\t\t}\n\n\t};\n\n\tTHREE.LensFlare.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\t\tconstructor: THREE.LensFlare,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\t\t\tthis.positionScreen.copy( source.positionScreen );\n\t\t\tthis.customUpdateCallback = source.customUpdateCallback;\n\n\t\t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\n\n\t\t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( texture, size, distance, blending, color, opacity ) {\n\n\t\t\tif ( size === undefined ) size = - 1;\n\t\t\tif ( distance === undefined ) distance = 0;\n\t\t\tif ( opacity === undefined ) opacity = 1;\n\t\t\tif ( color === undefined ) color = new THREE.Color( 0xffffff );\n\t\t\tif ( blending === undefined ) blending = THREE.NormalBlending;\n\n\t\t\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\n\t\t\tthis.lensFlares.push( {\n\t\t\t\ttexture: texture,\t// THREE.Texture\n\t\t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\n\t\t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\n\t\t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\n\t\t\t\tscale: 1, \t\t// scale\n\t\t\t\trotation: 0, \t\t// rotation\n\t\t\t\topacity: opacity,\t// opacity\n\t\t\t\tcolor: color,\t\t// color\n\t\t\t\tblending: blending\t// blending\n\t\t\t} );\n\n\t\t},\n\n\t\t/*\n\t\t * Update lens flares update positions on all flares based on the screen position\n\t\t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n\t\t */\n\n\t\tupdateLensFlares: function () {\n\n\t\t\tvar f, fl = this.lensFlares.length;\n\t\t\tvar flare;\n\t\t\tvar vecX = - this.positionScreen.x * 2;\n\t\t\tvar vecY = - this.positionScreen.y * 2;\n\n\t\t\tfor ( f = 0; f < fl; f ++ ) {\n\n\t\t\t\tflare = this.lensFlares[ f ];\n\n\t\t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n\t\t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\n\t\t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n\t\t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t// File:src/scenes/Scene.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.Scene = function () {\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.fog = null;\n\t\tthis.overrideMaterial = null;\n\n\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t};\n\n\tTHREE.Scene.prototype = Object.create( THREE.Object3D.prototype );\n\tTHREE.Scene.prototype.constructor = THREE.Scene;\n\n\tTHREE.Scene.prototype.copy = function ( source, recursive ) {\n\n\t\tTHREE.Object3D.prototype.copy.call( this, source, recursive );\n\n\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\treturn this;\n\n\t};\n\n\t// File:src/scenes/Fog.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.Fog = function ( color, near, far ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new THREE.Color( color );\n\n\t\tthis.near = ( near !== undefined ) ? near : 1;\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\n\n\t};\n\n\tTHREE.Fog.prototype.clone = function () {\n\n\t\treturn new THREE.Fog( this.color.getHex(), this.near, this.far );\n\n\t};\n\n\t// File:src/scenes/FogExp2.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.FogExp2 = function ( color, density ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new THREE.Color( color );\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n\t};\n\n\tTHREE.FogExp2.prototype.clone = function () {\n\n\t\treturn new THREE.FogExp2( this.color.getHex(), this.density );\n\n\t};\n\n\t// File:src/renderers/shaders/ShaderChunk.js\n\n\tTHREE.ShaderChunk = {};\n\n\t// File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'alphamap_fragment' ] = \"#ifdef USE_ALPHAMAP\\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'alphamap_pars_fragment' ] = \"#ifdef USE_ALPHAMAP\\n\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'alphatest_fragment' ] = \"#ifdef ALPHATEST\\n\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/aomap_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'aomap_fragment' ] = \"#ifdef USE_AOMAP\\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\t#endif\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'aomap_pars_fragment' ] = \"#ifdef USE_AOMAP\\n\tuniform sampler2D aoMap;\\n\tuniform float aoMapIntensity;\\n#endif\";\n\n\t// File:src/renderers/shaders/ShaderChunk/begin_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'begin_vertex' ] = \"\\nvec3 transformed = vec3( position );\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'beginnormal_vertex' ] = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/bsdfs.glsl\n\n\tTHREE.ShaderChunk[ 'bsdfs' ] = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\t\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\t\t}\\n\t\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat alpha = pow2( roughness );\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\tfloat D = D_GGX( alpha, dotNH );\\n\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\tvec4 r = roughness * c0 + c1;\\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_BlinnPhong_Implicit( );\\n\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'bumpmap_pars_fragment' ] = \"#ifdef USE_BUMPMAP\\n\tuniform sampler2D bumpMap;\\n\tuniform float bumpScale;\\n\tvec2 dHdxy_fwd() {\\n\t\tvec2 dSTdx = dFdx( vUv );\\n\t\tvec2 dSTdy = dFdy( vUv );\\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\t\treturn vec2( dBx, dBy );\\n\t}\\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\t\tvec3 vSigmaX = dFdx( surf_pos );\\n\t\tvec3 vSigmaY = dFdy( surf_pos );\\n\t\tvec3 vN = surf_norm;\\n\t\tvec3 R1 = cross( vSigmaY, vN );\\n\t\tvec3 R2 = cross( vN, vSigmaX );\\n\t\tfloat fDet = dot( vSigmaX, R1 );\\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\t}\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/clipping_planes_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'clipping_planes_fragment' ] = \"#if NUM_CLIPPING_PLANES > 0\\n\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\t\tvec4 plane = clippingPlanes[ i ];\\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\t}\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'clipping_planes_pars_fragment' ] = \"#if NUM_CLIPPING_PLANES > 0\\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\t\tvarying vec3 vViewPosition;\\n\t#endif\\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'clipping_planes_pars_vertex' ] = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/clipping_planes_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'clipping_planes_vertex' ] = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/color_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'color_fragment' ] = \"#ifdef USE_COLOR\\n\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\t// File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'color_pars_fragment' ] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'color_pars_vertex' ] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\";\n\n\t// File:src/renderers/shaders/ShaderChunk/color_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'color_vertex' ] = \"#ifdef USE_COLOR\\n\tvColor.xyz = color.xyz;\\n#endif\";\n\n\t// File:src/renderers/shaders/ShaderChunk/common.glsl\n\n\tTHREE.ShaderChunk[ 'common' ] = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\tvec3 color;\\n\tvec3 direction;\\n\tbool visible;\\n};\\nstruct ReflectedLight {\\n\tvec3 directDiffuse;\\n\tvec3 directSpecular;\\n\tvec3 indirectDiffuse;\\n\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\tvec3 position;\\n\tvec3 normal;\\n\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/cube_uv_reflection_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'cube_uv_reflection_fragment' ] = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\tvec3 absDirection = abs(direction);\\n\tint face = -1;\\n\tif( absDirection.x > absDirection.z ) {\\n\t\tif(absDirection.x > absDirection.y )\\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\\n\t\telse\\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\\n\t}\\n\telse {\\n\t\tif(absDirection.z > absDirection.y )\\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\\n\t\telse\\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\\n\t}\\n\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\tfloat dxRoughness = dFdx(roughness);\\n\tfloat dyRoughness = dFdy(roughness);\\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\tfloat mipLevel = 0.5 * log2(d);\\n\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\tbool bRes = mipLevel == 0.0;\\n\tscale =  bRes && (scale < a) ? a : scale;\\n\tvec3 r;\\n\tvec2 offset;\\n\tint face = getFaceFromDirection(direction);\\n\tfloat rcpPowScale = 1.0 / powScale;\\n\tif( face == 0) {\\n\t\tr = vec3(direction.x, -direction.z, direction.y);\\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 1) {\\n\t\tr = vec3(direction.y, direction.x, direction.z);\\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 2) {\\n\t\tr = vec3(direction.z, direction.x, direction.y);\\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 3) {\\n\t\tr = vec3(direction.x, direction.z, direction.y);\\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\telse if( face == 4) {\\n\t\tr = vec3(direction.y, direction.x, -direction.z);\\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\telse {\\n\t\tr = vec3(direction.z, -direction.x, direction.y);\\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\tr = normalize(r);\\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\tvec2 base = offset + vec2( texelOffset );\\n\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\tfloat r1 = floor(roughnessVal);\\n\tfloat r2 = r1 + 1.0;\\n\tfloat t = fract(roughnessVal);\\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\tfloat s = mipInfo.y;\\n\tfloat level0 = mipInfo.x;\\n\tfloat level1 = level0 + 1.0;\\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\tvec4 result = mix(color10, color20, t);\\n\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'defaultnormal_vertex' ] = \"#ifdef FLIP_SIDED\\n\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'displacementmap_vertex' ] = \"#ifdef USE_DISPLACEMENTMAP\\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'displacementmap_pars_vertex' ] = \"#ifdef USE_DISPLACEMENTMAP\\n\tuniform sampler2D displacementMap;\\n\tuniform float displacementScale;\\n\tuniform float displacementBias;\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'emissivemap_fragment' ] = \"#ifdef USE_EMISSIVEMAP\\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'emissivemap_pars_fragment' ] = \"#ifdef USE_EMISSIVEMAP\\n\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/encodings_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'encodings_pars_fragment' ] = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/encodings_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'encodings_fragment' ] = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'envmap_fragment' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t\t#endif\\n\t#else\\n\t\tvec3 reflectVec = vReflect;\\n\t#endif\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\tvec2 sampleUV;\\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\\n\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\t#endif\\n\tenvColor = envMapTexelToLinear( envColor );\\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_MIX )\\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_ADD )\\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\t#endif\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'envmap_pars_fragment' ] = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\tuniform float reflectivity;\\n\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\t\tvarying vec3 vWorldPosition;\\n\t#endif\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tuniform samplerCube envMap;\\n\t#else\\n\t\tuniform sampler2D envMap;\\n\t#endif\\n\tuniform float flipEnvMap;\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\t\tuniform float refractionRatio;\\n\t#else\\n\t\tvarying vec3 vReflect;\\n\t#endif\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'envmap_pars_vertex' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvarying vec3 vWorldPosition;\\n\t#else\\n\t\tvarying vec3 vReflect;\\n\t\tuniform float refractionRatio;\\n\t#endif\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'envmap_vertex' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvWorldPosition = worldPosition.xyz;\\n\t#else\\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\\n\t\t#else\\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t\t#endif\\n\t#endif\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'fog_fragment' ] = \"#ifdef USE_FOG\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\t#else\\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\t#endif\\n\t#ifdef FOG_EXP2\\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\t#else\\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\t#endif\\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'fog_pars_fragment' ] = \"#ifdef USE_FOG\\n\tuniform vec3 fogColor;\\n\t#ifdef FOG_EXP2\\n\t\tuniform float fogDensity;\\n\t#else\\n\t\tuniform float fogNear;\\n\t\tuniform float fogFar;\\n\t#endif\\n#endif\";\n\n\t// File:src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'lightmap_fragment' ] = \"#ifdef USE_LIGHTMAP\\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'lightmap_pars_fragment' ] = \"#ifdef USE_LIGHTMAP\\n\tuniform sampler2D lightMap;\\n\tuniform float lightMapIntensity;\\n#endif\";\n\n\t// File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'lights_lambert_vertex' ] = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\t\t#endif\\n\t}\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/lights_pars.glsl\n\n\tTHREE.ShaderChunk[ 'lights_pars' ] = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\tvec3 irradiance = ambientLightColor;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\tstruct DirectionalLight {\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\t\tdirectLight.color = directionalLight.color;\\n\t\tdirectLight.direction = directionalLight.direction;\\n\t\tdirectLight.visible = true;\\n\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\tstruct PointLight {\\n\t\tvec3 position;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\t\tvec3 lVector = pointLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\t\t\tdirectLight.color = pointLight.color;\\n\t\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tstruct SpotLight {\\n\t\tvec3 position;\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tfloat coneCos;\\n\t\tfloat penumbraCos;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\t\tvec3 lVector = spotLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\t\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\t\t\tdirectLight.color = spotLight.color;\\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tstruct HemisphereLight {\\n\t\tvec3 direction;\\n\t\tvec3 skyColor;\\n\t\tvec3 groundColor;\\n\t};\\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tirradiance *= PI;\\n\t\t#endif\\n\t\treturn irradiance;\\n\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\t\t#include <normal_flip>\\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\t\t#else\\n\t\t\tvec4 envMapColor = vec4( 0.0 );\\n\t\t#endif\\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\\n\t}\\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\t}\\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\t\t#endif\\n\t\t#include <normal_flip>\\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\t\tvec2 sampleUV;\\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#endif\\n\t\treturn envMapColor.rgb * envMapIntensity;\\n\t}\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'lights_phong_fragment' ] = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'lights_phong_pars_fragment' ] = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\tvec3\tdiffuseColor;\\n\tvec3\tspecularColor;\\n\tfloat\tspecularShininess;\\n\tfloat\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\t(0)\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/lights_physical_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'lights_physical_fragment' ] = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/lights_physical_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'lights_physical_pars_fragment' ] = \"struct PhysicalMaterial {\\n\tvec3\tdiffuseColor;\\n\tfloat\tspecularRoughness;\\n\tvec3\tspecularColor;\\n\t#ifndef STANDARD\\n\t\tfloat clearCoat;\\n\t\tfloat clearCoatRoughness;\\n\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\t#ifndef STANDARD\\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\t#else\\n\t\tfloat clearCoatDHR = 0.0;\\n\t#endif\\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\t#ifndef STANDARD\\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\t#ifndef STANDARD\\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\t\tfloat dotNL = dotNV;\\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\t#else\\n\t\tfloat clearCoatDHR = 0.0;\\n\t#endif\\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\t#ifndef STANDARD\\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\t#endif\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/lights_template.glsl\n\n\tTHREE.ShaderChunk[ 'lights_template' ] = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\t#ifdef USE_LIGHTMAP\\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tlightMapIrradiance *= PI;\\n\t\t#endif\\n\t\tirradiance += lightMapIrradiance;\\n\t#endif\\n\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t}\\n\t#endif\\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\t \tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\t#endif\\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\t#ifndef STANDARD\\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\t#else\\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\t#endif\\n\t\t\\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'logdepthbuf_fragment' ] = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\n\n\t// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'logdepthbuf_pars_fragment' ] = \"#ifdef USE_LOGDEPTHBUF\\n\tuniform float logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'logdepthbuf_pars_vertex' ] = \"#ifdef USE_LOGDEPTHBUF\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n\tuniform float logDepthBufFC;\\n#endif\";\n\n\t// File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'logdepthbuf_vertex' ] = \"#ifdef USE_LOGDEPTHBUF\\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvFragDepth = 1.0 + gl_Position.w;\\n\t#else\\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\t#endif\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/map_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'map_fragment' ] = \"#ifdef USE_MAP\\n\tvec4 texelColor = texture2D( map, vUv );\\n\ttexelColor = mapTexelToLinear( texelColor );\\n\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'map_pars_fragment' ] = \"#ifdef USE_MAP\\n\tuniform sampler2D map;\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'map_particle_fragment' ] = \"#ifdef USE_MAP\\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'map_particle_pars_fragment' ] = \"#ifdef USE_MAP\\n\tuniform vec4 offsetRepeat;\\n\tuniform sampler2D map;\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/metalnessmap_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'metalnessmap_fragment' ] = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/metalnessmap_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'metalnessmap_pars_fragment' ] = \"#ifdef USE_METALNESSMAP\\n\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\t// File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'morphnormal_vertex' ] = \"#ifdef USE_MORPHNORMALS\\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'morphtarget_pars_vertex' ] = \"#ifdef USE_MORPHTARGETS\\n\t#ifndef USE_MORPHNORMALS\\n\tuniform float morphTargetInfluences[ 8 ];\\n\t#else\\n\tuniform float morphTargetInfluences[ 4 ];\\n\t#endif\\n#endif\";\n\n\t// File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'morphtarget_vertex' ] = \"#ifdef USE_MORPHTARGETS\\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\t#ifndef USE_MORPHNORMALS\\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\t#endif\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/normal_flip.glsl\n\n\tTHREE.ShaderChunk[ 'normal_flip' ] = \"#ifdef DOUBLE_SIDED\\n\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n#else\\n\tfloat flipNormal = 1.0;\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/normal_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'normal_fragment' ] = \"#ifdef FLAT_SHADED\\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\tvec3 normal = normalize( vNormal ) * flipNormal;\\n#endif\\n#ifdef USE_NORMALMAP\\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'normalmap_pars_fragment' ] = \"#ifdef USE_NORMALMAP\\n\tuniform sampler2D normalMap;\\n\tuniform vec2 normalScale;\\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\\n\t\tvec2 st0 = dFdx( vUv.st );\\n\t\tvec2 st1 = dFdy( vUv.st );\\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\t\tvec3 N = normalize( surf_norm );\\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\t\tmapN.xy = normalScale * mapN.xy;\\n\t\tmat3 tsn = mat3( S, T, N );\\n\t\treturn normalize( tsn * mapN );\\n\t}\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/packing.glsl\n\n\tTHREE.ShaderChunk[ 'packing' ] = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/premultiplied_alpha_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'premultiplied_alpha_fragment' ] = \"#ifdef PREMULTIPLIED_ALPHA\\n\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/project_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'project_vertex' ] = \"#ifdef USE_SKINNING\\n\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/roughnessmap_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'roughnessmap_fragment' ] = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/roughnessmap_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'roughnessmap_pars_fragment' ] = \"#ifdef USE_ROUGHNESSMAP\\n\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\t// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'shadowmap_pars_fragment' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\t}\\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\t\tvec2 f = fract( uv * size + 0.5 );\\n\t\tfloat a = mix( lb, lt, f.y );\\n\t\tfloat b = mix( rb, rt, f.y );\\n\t\tfloat c = mix( a, b, f.x );\\n\t\treturn c;\\n\t}\\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tshadowCoord.xyz /= shadowCoord.w;\\n\t\tshadowCoord.z += shadowBias;\\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\t\tbool inFrustum = all( inFrustumVec );\\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\t\tbool frustumTest = all( frustumTestVec );\\n\t\tif ( frustumTest ) {\\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\t\t#endif\\n\t\t}\\n\t\treturn 1.0;\\n\t}\\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\t\tvec3 absV = abs( v );\\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\t\tabsV *= scaleToCube;\\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\t\tvec2 planar = v.xy;\\n\t\tfloat almostATexel = 1.5 * texelSizeY;\\n\t\tfloat almostOne = 1.0 - almostATexel;\\n\t\tif ( absV.z >= almostOne ) {\\n\t\t\tif ( v.z > 0.0 )\\n\t\t\t\tplanar.x = 4.0 - v.x;\\n\t\t} else if ( absV.x >= almostOne ) {\\n\t\t\tfloat signX = sign( v.x );\\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\\n\t\t} else if ( absV.y >= almostOne ) {\\n\t\t\tfloat signY = sign( v.y );\\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\t\t\tplanar.y = v.z * signY - 2.0;\\n\t\t}\\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\t}\\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\t\tvec3 lightToPosition = shadowCoord.xyz;\\n\t\tvec3 bd3D = normalize( lightToPosition );\\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\t\t#endif\\n\t}\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'shadowmap_pars_vertex' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'shadowmap_vertex' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/shadowmask_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'shadowmask_pars_fragment' ] = \"float getShadowMask() {\\n\tfloat shadow = 1.0;\\n\t#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#endif\\n\treturn shadow;\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'skinbase_vertex' ] = \"#ifdef USE_SKINNING\\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\t// File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'skinning_pars_vertex' ] = \"#ifdef USE_SKINNING\\n\tuniform mat4 bindMatrix;\\n\tuniform mat4 bindMatrixInverse;\\n\t#ifdef BONE_TEXTURE\\n\t\tuniform sampler2D boneTexture;\\n\t\tuniform int boneTextureWidth;\\n\t\tuniform int boneTextureHeight;\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tfloat j = i * 4.0;\\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\\n\t\t\ty = dy * ( y + 0.5 );\\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\t\t\treturn bone;\\n\t\t}\\n\t#else\\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\\n\t\t\treturn bone;\\n\t\t}\\n\t#endif\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'skinning_vertex' ] = \"#ifdef USE_SKINNING\\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\tvec4 skinned = vec4( 0.0 );\\n\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'skinnormal_vertex' ] = \"#ifdef USE_SKINNING\\n\tmat4 skinMatrix = mat4( 0.0 );\\n\tskinMatrix += skinWeight.x * boneMatX;\\n\tskinMatrix += skinWeight.y * boneMatY;\\n\tskinMatrix += skinWeight.z * boneMatZ;\\n\tskinMatrix += skinWeight.w * boneMatW;\\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'specularmap_fragment' ] = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\tspecularStrength = texelSpecular.r;\\n#else\\n\tspecularStrength = 1.0;\\n#endif\";\n\n\t// File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'specularmap_pars_fragment' ] = \"#ifdef USE_SPECULARMAP\\n\tuniform sampler2D specularMap;\\n#endif\";\n\n\t// File:src/renderers/shaders/ShaderChunk/tonemapping_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'tonemapping_fragment' ] = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/tonemapping_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'tonemapping_pars_fragment' ] = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'uv2_pars_fragment' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvarying vec2 vUv2;\\n#endif\";\n\n\t// File:src/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'uv2_pars_vertex' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tattribute vec2 uv2;\\n\tvarying vec2 vUv2;\\n#endif\";\n\n\t// File:src/renderers/shaders/ShaderChunk/uv2_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'uv2_vertex' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvUv2 = uv2;\\n#endif\";\n\n\t// File:src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl\n\n\tTHREE.ShaderChunk[ 'uv_pars_fragment' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n#endif\";\n\n\t// File:src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'uv_pars_vertex' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n\tuniform vec4 offsetRepeat;\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/ShaderChunk/uv_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'uv_vertex' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\n\n\t// File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl\n\n\tTHREE.ShaderChunk[ 'worldpos_vertex' ] = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\t#ifdef USE_SKINNING\\n\t\tvec4 worldPosition = modelMatrix * skinned;\\n\t#else\\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\t#endif\\n#endif\\n\";\n\n\t// File:src/renderers/shaders/UniformsUtils.js\n\n\t/**\n\t * Uniform Utilities\n\t */\n\n\tTHREE.UniformsUtils = {\n\n\t\tmerge: function ( uniforms ) {\n\n\t\t\tvar merged = {};\n\n\t\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\t\tvar tmp = this.clone( uniforms[ u ] );\n\n\t\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn merged;\n\n\t\t},\n\n\t\tclone: function ( uniforms_src ) {\n\n\t\t\tvar uniforms_dst = {};\n\n\t\t\tfor ( var u in uniforms_src ) {\n\n\t\t\t\tuniforms_dst[ u ] = {};\n\n\t\t\t\tfor ( var p in uniforms_src[ u ] ) {\n\n\t\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\n\t\t\t\t\tif ( parameter_src instanceof THREE.Color ||\n\t\t\t\t\t\t parameter_src instanceof THREE.Vector2 ||\n\t\t\t\t\t\t parameter_src instanceof THREE.Vector3 ||\n\t\t\t\t\t\t parameter_src instanceof THREE.Vector4 ||\n\t\t\t\t\t\t parameter_src instanceof THREE.Matrix3 ||\n\t\t\t\t\t\t parameter_src instanceof THREE.Matrix4 ||\n\t\t\t\t\t\t parameter_src instanceof THREE.Texture ) {\n\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\n\t\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn uniforms_dst;\n\n\t\t}\n\n\t};\n\n\t// File:src/renderers/shaders/UniformsLib.js\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tTHREE.UniformsLib = {\n\n\t\tcommon: {\n\n\t\t\t\"diffuse\": { value: new THREE.Color( 0xeeeeee ) },\n\t\t\t\"opacity\": { value: 1.0 },\n\n\t\t\t\"map\": { value: null },\n\t\t\t\"offsetRepeat\": { value: new THREE.Vector4( 0, 0, 1, 1 ) },\n\n\t\t\t\"specularMap\": { value: null },\n\t\t\t\"alphaMap\": { value: null },\n\n\t\t\t\"envMap\": { value: null },\n\t\t\t\"flipEnvMap\": { value: - 1 },\n\t\t\t\"reflectivity\": { value: 1.0 },\n\t\t\t\"refractionRatio\": { value: 0.98 }\n\n\t\t},\n\n\t\taomap: {\n\n\t\t\t\"aoMap\": { value: null },\n\t\t\t\"aoMapIntensity\": { value: 1 }\n\n\t\t},\n\n\t\tlightmap: {\n\n\t\t\t\"lightMap\": { value: null },\n\t\t\t\"lightMapIntensity\": { value: 1 }\n\n\t\t},\n\n\t\temissivemap: {\n\n\t\t\t\"emissiveMap\": { value: null }\n\n\t\t},\n\n\t\tbumpmap: {\n\n\t\t\t\"bumpMap\": { value: null },\n\t\t\t\"bumpScale\": { value: 1 }\n\n\t\t},\n\n\t\tnormalmap: {\n\n\t\t\t\"normalMap\": { value: null },\n\t\t\t\"normalScale\": { value: new THREE.Vector2( 1, 1 ) }\n\n\t\t},\n\n\t\tdisplacementmap: {\n\n\t\t\t\"displacementMap\": { value: null },\n\t\t\t\"displacementScale\": { value: 1 },\n\t\t\t\"displacementBias\": { value: 0 }\n\n\t\t},\n\n\t\troughnessmap: {\n\n\t\t\t\"roughnessMap\": { value: null }\n\n\t\t},\n\n\t\tmetalnessmap: {\n\n\t\t\t\"metalnessMap\": { value: null }\n\n\t\t},\n\n\t\tfog: {\n\n\t\t\t\"fogDensity\": { value: 0.00025 },\n\t\t\t\"fogNear\": { value: 1 },\n\t\t\t\"fogFar\": { value: 2000 },\n\t\t\t\"fogColor\": { value: new THREE.Color( 0xffffff ) }\n\n\t\t},\n\n\t\tlights: {\n\n\t\t\t\"ambientLightColor\": { value: [] },\n\n\t\t\t\"directionalLights\": { value: [], properties: {\n\t\t\t\t\"direction\": {},\n\t\t\t\t\"color\": {},\n\n\t\t\t\t\"shadow\": {},\n\t\t\t\t\"shadowBias\": {},\n\t\t\t\t\"shadowRadius\": {},\n\t\t\t\t\"shadowMapSize\": {}\n\t\t\t} },\n\n\t\t\t\"directionalShadowMap\": { value: [] },\n\t\t\t\"directionalShadowMatrix\": { value: [] },\n\n\t\t\t\"spotLights\": { value: [], properties: {\n\t\t\t\t\"color\": {},\n\t\t\t\t\"position\": {},\n\t\t\t\t\"direction\": {},\n\t\t\t\t\"distance\": {},\n\t\t\t\t\"coneCos\": {},\n\t\t\t\t\"penumbraCos\": {},\n\t\t\t\t\"decay\": {},\n\n\t\t\t\t\"shadow\": {},\n\t\t\t\t\"shadowBias\": {},\n\t\t\t\t\"shadowRadius\": {},\n\t\t\t\t\"shadowMapSize\": {}\n\t\t\t} },\n\n\t\t\t\"spotShadowMap\": { value: [] },\n\t\t\t\"spotShadowMatrix\": { value: [] },\n\n\t\t\t\"pointLights\": { value: [], properties: {\n\t\t\t\t\"color\": {},\n\t\t\t\t\"position\": {},\n\t\t\t\t\"decay\": {},\n\t\t\t\t\"distance\": {},\n\n\t\t\t\t\"shadow\": {},\n\t\t\t\t\"shadowBias\": {},\n\t\t\t\t\"shadowRadius\": {},\n\t\t\t\t\"shadowMapSize\": {}\n\t\t\t} },\n\n\t\t\t\"pointShadowMap\": { value: [] },\n\t\t\t\"pointShadowMatrix\": { value: [] },\n\n\t\t\t\"hemisphereLights\": { value: [], properties: {\n\t\t\t\t\"direction\": {},\n\t\t\t\t\"skyColor\": {},\n\t\t\t\t\"groundColor\": {}\n\t\t\t} }\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\t\"diffuse\": { value: new THREE.Color( 0xeeeeee ) },\n\t\t\t\"opacity\": { value: 1.0 },\n\t\t\t\"size\": { value: 1.0 },\n\t\t\t\"scale\": { value: 1.0 },\n\t\t\t\"map\": { value: null },\n\t\t\t\"offsetRepeat\": { value: new THREE.Vector4( 0, 0, 1, 1 ) }\n\n\t\t}\n\n\t};\n\n\t// File:src/renderers/shaders/ShaderLib/cube_frag.glsl\n\n\tTHREE.ShaderChunk[ 'cube_frag' ] = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\tgl_FragColor.a *= opacity;\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/cube_vert.glsl\n\n\tTHREE.ShaderChunk[ 'cube_vert' ] = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/depth_frag.glsl\n\n\tTHREE.ShaderChunk[ 'depth_frag' ] = \"#if DEPTH_PACKING == 3200\\n\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( 1.0 );\\n\t#if DEPTH_PACKING == 3200\\n\t\tdiffuseColor.a = opacity;\\n\t#endif\\n\t#include <map_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <logdepthbuf_fragment>\\n\t#if DEPTH_PACKING == 3200\\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\t#elif DEPTH_PACKING == 3201\\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\t#endif\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/depth_vert.glsl\n\n\tTHREE.ShaderChunk[ 'depth_vert' ] = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/distanceRGBA_frag.glsl\n\n\tTHREE.ShaderChunk[ 'distanceRGBA_frag' ] = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/distanceRGBA_vert.glsl\n\n\tTHREE.ShaderChunk[ 'distanceRGBA_vert' ] = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvWorldPosition = worldPosition;\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/equirect_frag.glsl\n\n\tTHREE.ShaderChunk[ 'equirect_frag' ] = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\tvec3 direction = normalize( vWorldPosition );\\n\tvec2 sampleUV;\\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/equirect_vert.glsl\n\n\tTHREE.ShaderChunk[ 'equirect_vert' ] = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/linedashed_frag.glsl\n\n\tTHREE.ShaderChunk[ 'linedashed_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\t\tdiscard;\\n\t}\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <color_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/linedashed_vert.glsl\n\n\tTHREE.ShaderChunk[ 'linedashed_vert' ] = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\tvLineDistance = scale * lineDistance;\\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\tgl_Position = projectionMatrix * mvPosition;\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/meshbasic_frag.glsl\n\n\tTHREE.ShaderChunk[ 'meshbasic_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\tReflectedLight reflectedLight;\\n\treflectedLight.directDiffuse = vec3( 0.0 );\\n\treflectedLight.directSpecular = vec3( 0.0 );\\n\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\t#include <normal_flip>\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/meshbasic_vert.glsl\n\n\tTHREE.ShaderChunk[ 'meshbasic_vert' ] = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <skinbase_vertex>\\n\t#ifdef USE_ENVMAP\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#endif\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <envmap_vertex>\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/meshlambert_frag.glsl\n\n\tTHREE.ShaderChunk[ 'meshlambert_frag' ] = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <emissivemap_fragment>\\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\t#include <lightmap_fragment>\\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\t#ifdef DOUBLE_SIDED\\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\t#else\\n\t\treflectedLight.directDiffuse = vLightFront;\\n\t#endif\\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\t#include <normal_flip>\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/meshlambert_vert.glsl\n\n\tTHREE.ShaderChunk[ 'meshlambert_vert' ] = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <lights_lambert_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/meshphong_frag.glsl\n\n\tTHREE.ShaderChunk[ 'meshphong_frag' ] = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <normal_flip>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_phong_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/meshphong_vert.glsl\n\n\tTHREE.ShaderChunk[ 'meshphong_vert' ] = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/meshphysical_frag.glsl\n\n\tTHREE.ShaderChunk[ 'meshphysical_frag' ] = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\tuniform float clearCoat;\\n\tuniform float clearCoatRoughness;\\n#endif\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <roughnessmap_fragment>\\n\t#include <metalnessmap_fragment>\\n\t#include <normal_flip>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_physical_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/meshphysical_vert.glsl\n\n\tTHREE.ShaderChunk[ 'meshphysical_vert' ] = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/normal_frag.glsl\n\n\tTHREE.ShaderChunk[ 'normal_frag' ] = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/normal_vert.glsl\n\n\tTHREE.ShaderChunk[ 'normal_vert' ] = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\tvNormal = normalize( normalMatrix * normal );\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/points_frag.glsl\n\n\tTHREE.ShaderChunk[ 'points_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_particle_fragment>\\n\t#include <color_fragment>\\n\t#include <alphatest_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/points_vert.glsl\n\n\tTHREE.ShaderChunk[ 'points_vert' ] = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#ifdef USE_SIZEATTENUATION\\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\t#else\\n\t\tgl_PointSize = size;\\n\t#endif\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/shadow_frag.glsl\n\n\tTHREE.ShaderChunk[ 'shadow_frag' ] = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib/shadow_vert.glsl\n\n\tTHREE.ShaderChunk[ 'shadow_vert' ] = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n\t// File:src/renderers/shaders/ShaderLib.js\n\n\t/**\n\t * Webgl Shader Library for three.js\n\t *\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t */\n\n\n\tTHREE.ShaderLib = {\n\n\t\t'basic': {\n\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\t\tTHREE.UniformsLib[ 'fog' ]\n\n\t\t\t] ),\n\n\t\t\tvertexShader: THREE.ShaderChunk[ 'meshbasic_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'meshbasic_frag' ]\n\n\t\t},\n\n\t\t'lambert': {\n\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\t\tTHREE.UniformsLib[ 'lightmap' ],\n\t\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\n\t\t\t\tTHREE.UniformsLib[ 'fog' ],\n\t\t\t\tTHREE.UniformsLib[ 'lights' ],\n\n\t\t\t\t{\n\t\t\t\t\t\"emissive\" : { value: new THREE.Color( 0x000000 ) }\n\t\t\t\t}\n\n\t\t\t] ),\n\n\t\t\tvertexShader: THREE.ShaderChunk[ 'meshlambert_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'meshlambert_frag' ]\n\n\t\t},\n\n\t\t'phong': {\n\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\t\tTHREE.UniformsLib[ 'lightmap' ],\n\t\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\n\t\t\t\tTHREE.UniformsLib[ 'bumpmap' ],\n\t\t\t\tTHREE.UniformsLib[ 'normalmap' ],\n\t\t\t\tTHREE.UniformsLib[ 'displacementmap' ],\n\t\t\t\tTHREE.UniformsLib[ 'fog' ],\n\t\t\t\tTHREE.UniformsLib[ 'lights' ],\n\n\t\t\t\t{\n\t\t\t\t\t\"emissive\" : { value: new THREE.Color( 0x000000 ) },\n\t\t\t\t\t\"specular\" : { value: new THREE.Color( 0x111111 ) },\n\t\t\t\t\t\"shininess\": { value: 30 }\n\t\t\t\t}\n\n\t\t\t] ),\n\n\t\t\tvertexShader: THREE.ShaderChunk[ 'meshphong_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'meshphong_frag' ]\n\n\t\t},\n\n\t\t'standard': {\n\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\t\tTHREE.UniformsLib[ 'lightmap' ],\n\t\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\n\t\t\t\tTHREE.UniformsLib[ 'bumpmap' ],\n\t\t\t\tTHREE.UniformsLib[ 'normalmap' ],\n\t\t\t\tTHREE.UniformsLib[ 'displacementmap' ],\n\t\t\t\tTHREE.UniformsLib[ 'roughnessmap' ],\n\t\t\t\tTHREE.UniformsLib[ 'metalnessmap' ],\n\t\t\t\tTHREE.UniformsLib[ 'fog' ],\n\t\t\t\tTHREE.UniformsLib[ 'lights' ],\n\n\t\t\t\t{\n\t\t\t\t\t\"emissive\" : { value: new THREE.Color( 0x000000 ) },\n\t\t\t\t\t\"roughness\": { value: 0.5 },\n\t\t\t\t\t\"metalness\": { value: 0 },\n\t\t\t\t\t\"envMapIntensity\" : { value: 1 }, // temporary\n\t\t\t\t}\n\n\t\t\t] ),\n\n\t\t\tvertexShader: THREE.ShaderChunk[ 'meshphysical_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'meshphysical_frag' ]\n\n\t\t},\n\n\t\t'points': {\n\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\t\tTHREE.UniformsLib[ 'points' ],\n\t\t\t\tTHREE.UniformsLib[ 'fog' ]\n\n\t\t\t] ),\n\n\t\t\tvertexShader: THREE.ShaderChunk[ 'points_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'points_frag' ]\n\n\t\t},\n\n\t\t'dashed': {\n\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\t\tTHREE.UniformsLib[ 'fog' ],\n\n\t\t\t\t{\n\t\t\t\t\t\"scale\"    : { value: 1 },\n\t\t\t\t\t\"dashSize\" : { value: 1 },\n\t\t\t\t\t\"totalSize\": { value: 2 }\n\t\t\t\t}\n\n\t\t\t] ),\n\n\t\t\tvertexShader: THREE.ShaderChunk[ 'linedashed_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'linedashed_frag' ]\n\n\t\t},\n\n\t\t'depth': {\n\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\t\tTHREE.UniformsLib[ 'displacementmap' ]\n\n\t\t\t] ),\n\n\t\t\tvertexShader: THREE.ShaderChunk[ 'depth_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'depth_frag' ]\n\n\t\t},\n\n\t\t'normal': {\n\n\t\t\tuniforms: {\n\n\t\t\t\t\"opacity\" : { value: 1.0 }\n\n\t\t\t},\n\n\t\t\tvertexShader: THREE.ShaderChunk[ 'normal_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'normal_frag' ]\n\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\n\t\t'cube': {\n\n\t\t\tuniforms: {\n\t\t\t\t\"tCube\": { value: null },\n\t\t\t\t\"tFlip\": { value: - 1 },\n\t\t\t\t\"opacity\": { value: 1.0 }\n\t\t\t},\n\n\t\t\tvertexShader: THREE.ShaderChunk[ 'cube_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'cube_frag' ]\n\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\n\t\t'equirect': {\n\n\t\t\tuniforms: {\n\t\t\t\t\"tEquirect\": { value: null },\n\t\t\t\t\"tFlip\": { value: - 1 }\n\t\t\t},\n\n\t\t\tvertexShader: THREE.ShaderChunk[ 'equirect_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'equirect_frag' ]\n\n\t\t},\n\n\t\t'distanceRGBA': {\n\n\t\t\tuniforms: {\n\n\t\t\t\t\"lightPos\": { value: new THREE.Vector3() }\n\n\t\t\t},\n\n\t\t\tvertexShader: THREE.ShaderChunk[ 'distanceRGBA_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'distanceRGBA_frag' ]\n\n\t\t}\n\n\t};\n\n\tTHREE.ShaderLib[ 'physical' ] = {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.ShaderLib[ 'standard' ].uniforms,\n\n\t\t\t{\n\t\t\t\t\"clearCoat\": { value: 0 },\n\t\t\t\t\"clearCoatRoughness\": { value: 0 }\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'meshphysical_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshphysical_frag' ]\n\n\t};\n\n\t// File:src/renderers/WebGLRenderer.js\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t * @author tschw\n\t */\n\n\tTHREE.WebGLRenderer = function ( parameters ) {\n\n\t\tconsole.log( 'THREE.WebGLRenderer', THREE.REVISION );\n\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\n\n\t\tvar lights = [];\n\n\t\tvar opaqueObjects = [];\n\t\tvar opaqueObjectsLastIndex = - 1;\n\t\tvar transparentObjects = [];\n\t\tvar transparentObjectsLastIndex = - 1;\n\n\t\tvar morphInfluences = new Float32Array( 8 );\n\n\t\tvar sprites = [];\n\t\tvar lensFlares = [];\n\n\t\t// public properties\n\n\t\tthis.domElement = _canvas;\n\t\tthis.context = null;\n\n\t\t// clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\t// scene graph\n\n\t\tthis.sortObjects = true;\n\n\t\t// user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false;\n\n\t\t// physically based shading\n\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t\tthis.gammaInput = false;\n\t\tthis.gammaOutput = false;\n\n\t\t// physical lights\n\n\t\tthis.physicallyCorrectLights = false;\n\n\t\t// tone mapping\n\n\t\tthis.toneMapping = THREE.LinearToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\t\tthis.toneMappingWhitePoint = 1.0;\n\n\t\t// morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4;\n\n\t\t// internal properties\n\n\t\tvar _this = this,\n\n\t\t// internal state cache\n\n\t\t_currentProgram = null,\n\t\t_currentRenderTarget = null,\n\t\t_currentFramebuffer = null,\n\t\t_currentMaterialId = - 1,\n\t\t_currentGeometryProgram = '',\n\t\t_currentCamera = null,\n\n\t\t_currentScissor = new THREE.Vector4(),\n\t\t_currentScissorTest = null,\n\n\t\t_currentViewport = new THREE.Vector4(),\n\n\t\t//\n\n\t\t_usedTextureUnits = 0,\n\n\t\t//\n\n\t\t_clearColor = new THREE.Color( 0x000000 ),\n\t\t_clearAlpha = 0,\n\n\t\t_width = _canvas.width,\n\t\t_height = _canvas.height,\n\n\t\t_pixelRatio = 1,\n\n\t\t_scissor = new THREE.Vector4( 0, 0, _width, _height ),\n\t\t_scissorTest = false,\n\n\t\t_viewport = new THREE.Vector4( 0, 0, _width, _height ),\n\n\t\t// frustum\n\n\t\t_frustum = new THREE.Frustum(),\n\n\t\t// clipping\n\n\t\t_clipping = new THREE.WebGLClipping(),\n\t\t_clippingEnabled = false,\n\t\t_localClippingEnabled = false,\n\n\t\t_sphere = new THREE.Sphere(),\n\n\t\t// camera matrices cache\n\n\t\t_projScreenMatrix = new THREE.Matrix4(),\n\n\t\t_vector3 = new THREE.Vector3(),\n\n\t\t// light arrays cache\n\n\t\t_lights = {\n\n\t\t\thash: '',\n\n\t\t\tambient: [ 0, 0, 0 ],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\tpoint: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: [],\n\n\t\t\tshadows: []\n\n\t\t},\n\n\t\t// info\n\n\t\t_infoRender = {\n\n\t\t\tcalls: 0,\n\t\t\tvertices: 0,\n\t\t\tfaces: 0,\n\t\t\tpoints: 0\n\n\t\t};\n\n\t\tthis.info = {\n\n\t\t\trender: _infoRender,\n\t\t\tmemory: {\n\n\t\t\t\tgeometries: 0,\n\t\t\t\ttextures: 0\n\n\t\t\t},\n\t\t\tprograms: null\n\n\t\t};\n\n\n\t\t// initialize\n\n\t\tvar _gl;\n\n\t\ttry {\n\n\t\t\tvar attributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\n\t\t\t};\n\n\t\t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow 'Error creating WebGL context.';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\n\n\t\t}\n\n\t\tvar extensions = new THREE.WebGLExtensions( _gl );\n\n\t\textensions.get( 'WEBGL_depth_texture' );\n\t\textensions.get( 'OES_texture_float' );\n\t\textensions.get( 'OES_texture_float_linear' );\n\t\textensions.get( 'OES_texture_half_float' );\n\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\textensions.get( 'OES_standard_derivatives' );\n\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tif ( extensions.get( 'OES_element_index_uint' ) ) {\n\n\t\t\tTHREE.BufferGeometry.MaxIndex = 4294967296;\n\n\t\t}\n\n\t\tvar capabilities = new THREE.WebGLCapabilities( _gl, extensions, parameters );\n\n\t\tvar state = new THREE.WebGLState( _gl, extensions, paramThreeToGL );\n\t\tvar properties = new THREE.WebGLProperties();\n\t\tvar textures = new THREE.WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );\n\t\tvar objects = new THREE.WebGLObjects( _gl, properties, this.info );\n\t\tvar programCache = new THREE.WebGLPrograms( this, capabilities );\n\t\tvar lightCache = new THREE.WebGLLights();\n\n\t\tthis.info.programs = programCache.programs;\n\n\t\tvar bufferRenderer = new THREE.WebGLBufferRenderer( _gl, extensions, _infoRender );\n\t\tvar indexedBufferRenderer = new THREE.WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\n\n\t\t//\n\n\t\tvar backgroundCamera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tvar backgroundCamera2 = new THREE.PerspectiveCamera();\n\t\tvar backgroundPlaneMesh = new THREE.Mesh(\n\t\t\tnew THREE.PlaneBufferGeometry( 2, 2 ),\n\t\t\tnew THREE.MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\n\t\t);\n\t\tvar backgroundBoxShader = THREE.ShaderLib[ 'cube' ];\n\t\tvar backgroundBoxMesh = new THREE.Mesh(\n\t\t\tnew THREE.BoxBufferGeometry( 5, 5, 5 ),\n\t\t\tnew THREE.ShaderMaterial( {\n\t\t\t\tuniforms: backgroundBoxShader.uniforms,\n\t\t\t\tvertexShader: backgroundBoxShader.vertexShader,\n\t\t\t\tfragmentShader: backgroundBoxShader.fragmentShader,\n\t\t\t\tside: THREE.BackSide,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\tfog: false\n\t\t\t} )\n\t\t);\n\n\t\t//\n\n\t\tfunction getTargetPixelRatio() {\n\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t\t}\n\n\t\tfunction glClearColor( r, g, b, a ) {\n\n\t\t\tif ( _premultipliedAlpha === true ) {\n\n\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t}\n\n\t\t\tstate.clearColor( r, g, b, a );\n\n\t\t}\n\n\t\tfunction setDefaultGLState() {\n\n\t\t\tstate.init();\n\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t\t}\n\n\t\tfunction resetGLState() {\n\n\t\t\t_currentProgram = null;\n\t\t\t_currentCamera = null;\n\n\t\t\t_currentGeometryProgram = '';\n\t\t\t_currentMaterialId = - 1;\n\n\t\t\tstate.reset();\n\n\t\t}\n\n\t\tsetDefaultGLState();\n\n\t\tthis.context = _gl;\n\t\tthis.capabilities = capabilities;\n\t\tthis.extensions = extensions;\n\t\tthis.properties = properties;\n\t\tthis.state = state;\n\n\t\t// shadow map\n\n\t\tvar shadowMap = new THREE.WebGLShadowMap( this, _lights, objects, capabilities );\n\n\t\tthis.shadowMap = shadowMap;\n\n\n\t\t// Plugins\n\n\t\tvar spritePlugin = new THREE.SpritePlugin( this, sprites );\n\t\tvar lensFlarePlugin = new THREE.LensFlarePlugin( this, lensFlares );\n\n\t\t// API\n\n\t\tthis.getContext = function () {\n\n\t\t\treturn _gl;\n\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\n\t\t\treturn _gl.getContextAttributes();\n\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\n\t\t\textensions.get( 'WEBGL_lose_context' ).loseContext();\n\n\t\t};\n\n\t\tthis.getMaxAnisotropy = function () {\n\n\t\t\treturn capabilities.getMaxAnisotropy();\n\n\t\t};\n\n\t\tthis.getPrecision = function () {\n\n\t\t\treturn capabilities.precision;\n\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\n\t\t\treturn _pixelRatio;\n\n\t\t};\n\n\t\tthis.setPixelRatio = function ( value ) {\n\n\t\t\tif ( value === undefined ) return;\n\n\t\t\t_pixelRatio = value;\n\n\t\t\tthis.setSize( _viewport.z, _viewport.w, false );\n\n\t\t};\n\n\t\tthis.getSize = function () {\n\n\t\t\treturn {\n\t\t\t\twidth: _width,\n\t\t\t\theight: _height\n\t\t\t};\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_canvas.width = width * _pixelRatio;\n\t\t\t_canvas.height = height * _pixelRatio;\n\n\t\t\tif ( updateStyle !== false ) {\n\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\n\t\t\t}\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t\tstate.viewport( _viewport.set( x, y, width, height ) );\n\n\t\t};\n\n\t\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t\tstate.scissor( _scissor.set( x, y, width, height ) );\n\n\t\t};\n\n\t\tthis.setScissorTest = function ( boolean ) {\n\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t\t};\n\n\t\t// Clearing\n\n\t\tthis.getClearColor = function () {\n\n\t\t\treturn _clearColor;\n\n\t\t};\n\n\t\tthis.setClearColor = function ( color, alpha ) {\n\n\t\t\t_clearColor.set( color );\n\n\t\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\n\t\t\treturn _clearAlpha;\n\n\t\t};\n\n\t\tthis.setClearAlpha = function ( alpha ) {\n\n\t\t\t_clearAlpha = alpha;\n\n\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t\t};\n\n\t\tthis.clear = function ( color, depth, stencil ) {\n\n\t\t\tvar bits = 0;\n\n\t\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t_gl.clear( bits );\n\n\t\t};\n\n\t\tthis.clearColor = function () {\n\n\t\t\tthis.clear( true, false, false );\n\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\n\t\t\tthis.clear( false, true, false );\n\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\n\t\t\tthis.clear( false, false, true );\n\n\t\t};\n\n\t\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n\t\t\tthis.setRenderTarget( renderTarget );\n\t\t\tthis.clear( color, depth, stencil );\n\n\t\t};\n\n\t\t// Reset\n\n\t\tthis.resetGLState = resetGLState;\n\n\t\tthis.dispose = function() {\n\n\t\t\ttransparentObjects = [];\n\t\t\ttransparentObjectsLastIndex = -1;\n\t\t\topaqueObjects = [];\n\t\t\topaqueObjectsLastIndex = -1;\n\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\n\t\t};\n\n\t\t// Events\n\n\t\tfunction onContextLost( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tresetGLState();\n\t\t\tsetDefaultGLState();\n\n\t\t\tproperties.clear();\n\n\t\t}\n\n\t\tfunction onMaterialDispose( event ) {\n\n\t\t\tvar material = event.target;\n\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tdeallocateMaterial( material );\n\n\t\t}\n\n\t\t// Buffer deallocation\n\n\t\tfunction deallocateMaterial( material ) {\n\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\tproperties.delete( material );\n\n\t\t}\n\n\n\t\tfunction releaseMaterialProgramReference( material ) {\n\n\t\t\tvar programInfo = properties.get( material ).program;\n\n\t\t\tmaterial.program = undefined;\n\n\t\t\tif ( programInfo !== undefined ) {\n\n\t\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Buffer rendering\n\n\t\tthis.renderBufferImmediate = function ( object, program, material ) {\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar buffers = properties.get( object );\n\n\t\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n\t\t\tvar attributes = program.getAttributes();\n\n\t\t\tif ( object.hasPositions ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( attributes.position );\n\t\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasNormals ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\n\t\t\t\tif ( material.type !== 'MeshPhongMaterial' && material.type !== 'MeshStandardMaterial' && material.type !== 'MeshPhysicalMaterial' && material.shading === THREE.FlatShading ) {\n\n\t\t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\n\t\t\t\t\t\tvar array = object.normalArray;\n\n\t\t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n\t\t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n\t\t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\n\t\t\t\t\t\tarray[ i + 0 ] = nx;\n\t\t\t\t\t\tarray[ i + 1 ] = ny;\n\t\t\t\t\t\tarray[ i + 2 ] = nz;\n\n\t\t\t\t\t\tarray[ i + 3 ] = nx;\n\t\t\t\t\t\tarray[ i + 4 ] = ny;\n\t\t\t\t\t\tarray[ i + 5 ] = nz;\n\n\t\t\t\t\t\tarray[ i + 6 ] = nx;\n\t\t\t\t\t\tarray[ i + 7 ] = ny;\n\t\t\t\t\t\tarray[ i + 8 ] = nz;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( attributes.normal );\n\n\t\t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasUvs && material.map ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( attributes.uv );\n\n\t\t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasColors && material.vertexColors !== THREE.NoColors ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( attributes.color );\n\n\t\t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n\t\t\tobject.count = 0;\n\n\t\t};\n\n\t\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\n\t\t\tsetMaterial( material );\n\n\t\t\tvar program = setProgram( camera, fog, material, object );\n\n\t\t\tvar updateBuffers = false;\n\t\t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\n\n\t\t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\n\t\t\t\t_currentGeometryProgram = geometryProgram;\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphTargetInfluences = object.morphTargetInfluences;\n\n\t\t\tif ( morphTargetInfluences !== undefined ) {\n\n\t\t\t\tvar activeInfluences = [];\n\n\t\t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar influence = morphTargetInfluences[ i ];\n\t\t\t\t\tactiveInfluences.push( [ influence, i ] );\n\n\t\t\t\t}\n\n\t\t\t\tactiveInfluences.sort( absNumericalSort );\n\n\t\t\t\tif ( activeInfluences.length > 8 ) {\n\n\t\t\t\t\tactiveInfluences.length = 8;\n\n\t\t\t\t}\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar influence = activeInfluences[ i ];\n\t\t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\n\n\t\t\t\t\tif ( influence[ 0 ] !== 0 ) {\n\n\t\t\t\t\t\tvar index = influence[ 1 ];\n\n\t\t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\n\t\t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\n\t\t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tprogram.getUniforms().setValue(\n\t\t\t\t\t\t_gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position;\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tindex = objects.getWireframeAttribute( geometry );\n\n\t\t\t}\n\n\t\t\tvar renderer;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex( index );\n\n\t\t\t} else {\n\n\t\t\t\trenderer = bufferRenderer;\n\n\t\t\t}\n\n\t\t\tif ( updateBuffers ) {\n\n\t\t\t\tsetupVertexAttributes( material, program, geometry );\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar dataStart = 0;\n\t\t\tvar dataCount = Infinity;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tdataCount = index.count;\n\n\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\tdataCount = position.count;\n\n\t\t\t}\n\n\t\t\tvar rangeStart = geometry.drawRange.start;\n\t\t\tvar rangeCount = geometry.drawRange.count;\n\n\t\t\tvar groupStart = group !== null ? group.start : 0;\n\t\t\tvar groupCount = group !== null ? group.count : Infinity;\n\n\t\t\tvar drawStart = Math.max( dataStart, rangeStart, groupStart );\n\t\t\tvar drawEnd = Math.min( dataStart + dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\t\t//\n\n\t\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( object.drawMode ) {\n\n\t\t\t\t\t\tcase THREE.TrianglesDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase THREE.TriangleStripDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase THREE.TriangleFanDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\t\tif ( object instanceof THREE.LineSegments ) {\n\n\t\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Points ) {\n\n\t\t\t\trenderer.setMode( _gl.POINTS );\n\n\t\t\t}\n\n\t\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\n\n\t\t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\n\t\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( startIndex === undefined ) startIndex = 0;\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor ( var name in programAttributes ) {\n\n\t\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\t\tvar type = _gl.FLOAT;\n\t\t\t\t\t\tvar array = geometryAttribute.array;\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\n\t\t\t\t\t\tif ( array instanceof Float32Array ) {\n\n\t\t\t\t\t\t\ttype = _gl.FLOAT;\n\n\t\t\t\t\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\t\t\t\t\tconsole.warn(\"Unsupported data buffer format: Float64Array\");\n\n\t\t\t\t\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\t\t\t\t\ttype = _gl.UNSIGNED_SHORT;\n\n\t\t\t\t\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\t\t\t\t\ttype = _gl.SHORT;\n\n\t\t\t\t\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\t\t\t\t\ttype = _gl.UNSIGNED_INT;\n\n\t\t\t\t\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\t\t\t\t\ttype = _gl.INT;\n\n\t\t\t\t\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\t\t\t\t\ttype = _gl.BYTE;\n\n\t\t\t\t\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\t\t\t\t\ttype = _gl.UNSIGNED_BYTE;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\t\t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\n\n\t\t\t\t\t\tif ( geometryAttribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif ( data instanceof THREE.InstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( geometryAttribute instanceof THREE.InstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t}\n\n\t\t// Sorting\n\n\t\tfunction absNumericalSort( a, b ) {\n\n\t\t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\n\n\t\t}\n\n\t\tfunction painterSortStable ( a, b ) {\n\n\t\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n\t\t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n\t\t\t} else if ( a.material.program && b.material.program && a.material.program !== b.material.program ) {\n\n\t\t\t\treturn a.material.program.id - b.material.program.id;\n\n\t\t\t} else if ( a.material.id !== b.material.id ) {\n\n\t\t\t\treturn a.material.id - b.material.id;\n\n\t\t\t} else if ( a.z !== b.z ) {\n\n\t\t\t\treturn a.z - b.z;\n\n\t\t\t} else {\n\n\t\t\t\treturn a.id - b.id;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction reversePainterSortStable ( a, b ) {\n\n\t\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n\t\t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n\t\t\t} if ( a.z !== b.z ) {\n\n\t\t\t\treturn b.z - a.z;\n\n\t\t\t} else {\n\n\t\t\t\treturn a.id - b.id;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Rendering\n\n\t\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\n\t\t\tif ( camera instanceof THREE.Camera === false ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar fog = scene.fog;\n\n\t\t\t// reset caching for this frame\n\n\t\t\t_currentGeometryProgram = '';\n\t\t\t_currentMaterialId = - 1;\n\t\t\t_currentCamera = null;\n\n\t\t\t// update scene graph\n\n\t\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t\t// update camera matrices and frustum\n\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\tlights.length = 0;\n\n\t\t\topaqueObjectsLastIndex = - 1;\n\t\t\ttransparentObjectsLastIndex = - 1;\n\n\t\t\tsprites.length = 0;\n\t\t\tlensFlares.length = 0;\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\t\tprojectObject( scene, camera );\n\n\t\t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\n\t\t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\n\n\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\topaqueObjects.sort( painterSortStable );\n\t\t\t\ttransparentObjects.sort( reversePainterSortStable );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\n\t\t\tsetupShadows( lights );\n\n\t\t\tshadowMap.render( scene, camera );\n\n\t\t\tsetupLights( lights, camera );\n\n\t\t\tif ( _clippingEnabled ) _clipping.endShadows();\n\n\t\t\t//\n\n\t\t\t_infoRender.calls = 0;\n\t\t\t_infoRender.vertices = 0;\n\t\t\t_infoRender.faces = 0;\n\t\t\t_infoRender.points = 0;\n\n\t\t\tif ( renderTarget === undefined ) {\n\n\t\t\t\trenderTarget = null;\n\n\t\t\t}\n\n\t\t\tthis.setRenderTarget( renderTarget );\n\n\t\t\t//\n\n\t\t\tvar background = scene.background;\n\n\t\t\tif ( background === null ) {\n\n\t\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t\t\t} else if ( background instanceof THREE.Color ) {\n\n\t\t\t\tglClearColor( background.r, background.g, background.b, 1 );\n\n\t\t\t}\n\n\t\t\tif ( this.autoClear || forceClear ) {\n\n\t\t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\n\n\t\t\t}\n\n\t\t\tif ( background instanceof THREE.CubeTexture ) {\n\n\t\t\t\tbackgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );\n\n\t\t\t\tbackgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );\n\t\t\t\tbackgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );\n\n\t\t\t\tbackgroundBoxMesh.material.uniforms[ \"tCube\" ].value = background;\n\t\t\t\tbackgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );\n\n\t\t\t\tobjects.update( backgroundBoxMesh );\n\n\t\t\t\t_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );\n\n\t\t\t} else if ( background instanceof THREE.Texture ) {\n\n\t\t\t\tbackgroundPlaneMesh.material.map = background;\n\n\t\t\t\tobjects.update( backgroundPlaneMesh );\n\n\t\t\t\t_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( scene.overrideMaterial ) {\n\n\t\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\t\trenderObjects( opaqueObjects, camera, fog, overrideMaterial );\n\t\t\t\trenderObjects( transparentObjects, camera, fog, overrideMaterial );\n\n\t\t\t} else {\n\n\t\t\t\t// opaque pass (front-to-back order)\n\n\t\t\t\tstate.setBlending( THREE.NoBlending );\n\t\t\t\trenderObjects( opaqueObjects, camera, fog );\n\n\t\t\t\t// transparent pass (back-to-front order)\n\n\t\t\t\trenderObjects( transparentObjects, camera, fog );\n\n\t\t\t}\n\n\t\t\t// custom render plugins (post pass)\n\n\t\t\tspritePlugin.render( scene, camera );\n\t\t\tlensFlarePlugin.render( scene, camera, _currentViewport );\n\n\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\n\t\t\t}\n\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.setDepthTest( true );\n\t\t\tstate.setDepthWrite( true );\n\t\t\tstate.setColorWrite( true );\n\n\t\t\t// _gl.finish();\n\n\t\t};\n\n\t\tfunction pushRenderItem( object, geometry, material, z, group ) {\n\n\t\t\tvar array, index;\n\n\t\t\t// allocate the next position in the appropriate array\n\n\t\t\tif ( material.transparent ) {\n\n\t\t\t\tarray = transparentObjects;\n\t\t\t\tindex = ++ transparentObjectsLastIndex;\n\n\t\t\t} else {\n\n\t\t\t\tarray = opaqueObjects;\n\t\t\t\tindex = ++ opaqueObjectsLastIndex;\n\n\t\t\t}\n\n\t\t\t// recycle existing render item or grow the array\n\n\t\t\tvar renderItem = array[ index ];\n\n\t\t\tif ( renderItem !== undefined ) {\n\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.z = _vector3.z;\n\t\t\t\trenderItem.group = group;\n\n\t\t\t} else {\n\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tz: _vector3.z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\n\t\t\t\t// assert( index === array.length );\n\t\t\t\tarray.push( renderItem );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// TODO Duplicated code (Frustum)\n\n\t\tfunction isObjectViewable( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy( geometry.boundingSphere ).\n\t\t\t\tapplyMatrix4( object.matrixWorld );\n\n\t\t\treturn isSphereViewable( _sphere );\n\n\t\t}\n\n\t\tfunction isSpriteViewable( sprite ) {\n\n\t\t\t_sphere.center.set( 0, 0, 0 );\n\t\t\t_sphere.radius = 0.7071067811865476;\n\t\t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn isSphereViewable( _sphere );\n\n\t\t}\n\n\t\tfunction isSphereViewable( sphere ) {\n\n\t\t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\n\t\t\tvar numPlanes = _clipping.numPlanes;\n\n\t\t\tif ( numPlanes === 0 ) return true;\n\n\t\t\tvar planes = _this.clippingPlanes,\n\n\t\t\t\tcenter = sphere.center,\n\t\t\t\tnegRad = - sphere.radius,\n\t\t\t\ti = 0;\n\n\t\t\tdo {\n\n\t\t\t\t// out when deeper than radius in the negative halfspace\n\t\t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\n\t\t\t} while ( ++ i !== numPlanes );\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tfunction projectObject( object, camera ) {\n\n\t\t\tif ( object.visible === false ) return;\n\n\t\t\tif ( object.layers.test( camera.layers ) ) {\n\n\t\t\t\tif ( object instanceof THREE.Light ) {\n\n\t\t\t\t\tlights.push( object );\n\n\t\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\t\tif ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {\n\n\t\t\t\t\t\tsprites.push( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object instanceof THREE.LensFlare ) {\n\n\t\t\t\t\tlensFlares.push( object );\n\n\t\t\t\t} else if ( object instanceof THREE.ImmediateRenderObject ) {\n\n\t\t\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\n\n\t\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {\n\n\t\t\t\t\tif ( object instanceof THREE.SkinnedMesh ) {\n\n\t\t\t\t\t\tobject.skeleton.update();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( object.frustumCulled === false || isObjectViewable( object ) === true ) {\n\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( material.visible === true ) {\n\n\t\t\t\t\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar geometry = objects.update( object );\n\n\t\t\t\t\t\t\tif ( material instanceof THREE.MultiMaterial ) {\n\n\t\t\t\t\t\t\t\tvar groups = geometry.groups;\n\t\t\t\t\t\t\t\tvar materials = material.materials;\n\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n\t\t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tprojectObject( children[ i ], camera );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObjects( renderList, camera, fog, overrideMaterial ) {\n\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\t\tif ( object instanceof THREE.ImmediateRenderObject ) {\n\n\t\t\t\t\tsetMaterial( material );\n\n\t\t\t\t\tvar program = setProgram( camera, fog, material, object );\n\n\t\t\t\t\t_currentGeometryProgram = '';\n\n\t\t\t\t\tobject.render( function ( object ) {\n\n\t\t\t\t\t\t_this.renderBufferImmediate( object, program, material );\n\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_this.renderBufferDirect( camera, fog, geometry, material, object, group );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction initMaterial( material, fog, object ) {\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tvar parameters = programCache.getParameters(\n\t\t\t\t\tmaterial, _lights, fog, _clipping.numPlanes, object );\n\n\t\t\tvar code = programCache.getProgramCode( material, parameters );\n\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true;\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\t} else if ( program.code !== code ) {\n\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t\t// same glsl and uniform list\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\n\t\t\t}\n\n\t\t\tif ( programChange ) {\n\n\t\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\t\tvar shader = THREE.ShaderLib[ parameters.shaderID ];\n\n\t\t\t\t\tmaterialProperties.__webglShader = {\n\t\t\t\t\t\tname: material.type,\n\t\t\t\t\t\tuniforms: THREE.UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterialProperties.__webglShader = {\n\t\t\t\t\t\tname: material.type,\n\t\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.__webglShader = materialProperties.__webglShader;\n\n\t\t\t\tprogram = programCache.acquireProgram( material, parameters, code );\n\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterial.program = program;\n\n\t\t\t}\n\n\t\t\tvar attributes = program.getAttributes();\n\n\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.morphNormals ) {\n\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.__webglShader.uniforms;\n\n\t\t\tif ( ! ( material instanceof THREE.ShaderMaterial ) &&\n\t\t\t\t\t! ( material instanceof THREE.RawShaderMaterial ) ||\n\t\t\t\t\tmaterial.clipping === true ) {\n\n\t\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t\t}\n\n\t\t\tif ( material.lights ) {\n\n\t\t\t\t// store the light setup it was created for\n\n\t\t\t\tmaterialProperties.lightsHash = _lights.hash;\n\n\t\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\t\tuniforms.ambientLightColor.value = _lights.ambient;\n\t\t\t\tuniforms.directionalLights.value = _lights.directional;\n\t\t\t\tuniforms.spotLights.value = _lights.spot;\n\t\t\t\tuniforms.pointLights.value = _lights.point;\n\t\t\t\tuniforms.hemisphereLights.value = _lights.hemi;\n\n\t\t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\n\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\t\tuniformsList =\n\t\t\t\t\t\tTHREE.WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\t\t\tmaterialProperties.dynamicUniforms =\n\t\t\t\t\tTHREE.WebGLUniforms.splitDynamic( uniformsList, uniforms );\n\n\t\t}\n\n\t\tfunction setMaterial( material ) {\n\n\t\t\tif ( material.side !== THREE.DoubleSide )\n\t\t\t\tstate.enable( _gl.CULL_FACE );\n\t\t\telse\n\t\t\t\tstate.disable( _gl.CULL_FACE );\n\n\t\t\tstate.setFlipSided( material.side === THREE.BackSide );\n\n\t\t\tif ( material.transparent === true ) {\n\n\t\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\t\t} else {\n\n\t\t\t\tstate.setBlending( THREE.NoBlending );\n\n\t\t\t}\n\n\t\t\tstate.setDepthFunc( material.depthFunc );\n\t\t\tstate.setDepthTest( material.depthTest );\n\t\t\tstate.setDepthWrite( material.depthWrite );\n\t\t\tstate.setColorWrite( material.colorWrite );\n\t\t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\t}\n\n\t\tfunction setProgram( camera, fog, material, object ) {\n\n\t\t\t_usedTextureUnits = 0;\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tif ( _clippingEnabled ) {\n\n\t\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\t\tvar useCache =\n\t\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\t\t\t\t\t_clipping.setState(\n\t\t\t\t\t\t\tmaterial.clippingPlanes, material.clipShadows,\n\t\t\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t\t}\n\n\t\t\t\tif ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t\tmaterialProperties.numClippingPlanes !== _clipping.numPlanes ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tif ( materialProperties.lightsHash !== undefined &&\n\t\t\t\tmaterialProperties.lightsHash !== _lights.hash ) {\n\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tif ( material.needsUpdate ) {\n\n\t\t\t\tinitMaterial( material, fog, object );\n\t\t\t\tmaterial.needsUpdate = false;\n\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\n\t\t\tvar program = materialProperties.program,\n\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\n\n\t\t\tif ( program.id !== _currentProgram ) {\n\n\t\t\t\t_gl.useProgram( program.program );\n\t\t\t\t_currentProgram = program.id;\n\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\n\t\t\t}\n\n\t\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t\t_currentMaterialId = material.id;\n\n\t\t\t\trefreshMaterial = true;\n\n\t\t\t}\n\n\t\t\tif ( refreshProgram || camera !== _currentCamera ) {\n\n\t\t\t\tp_uniforms.set( _gl, camera, 'projectionMatrix' );\n\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( camera !== _currentCamera ) {\n\n\t\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t\t}\n\n\t\t\t\t// load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\t\tif ( material instanceof THREE.ShaderMaterial ||\n\t\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\n\t\t\t\t\t material.envMap ) {\n\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t\t material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\n\t\t\t\t\t material instanceof THREE.ShaderMaterial ||\n\t\t\t\t\t material.skinning ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t\t}\n\n\t\t\t\tp_uniforms.set( _gl, _this, 'toneMappingExposure' );\n\t\t\t\tp_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );\n\n\t\t\t}\n\n\t\t\t// skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// not sure why, but otherwise weird things happen\n\n\t\t\tif ( material.skinning ) {\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif ( skeleton ) {\n\n\t\t\t\t\tif ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {\n\n\t\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTexture' );\n\t\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureWidth' );\n\t\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureHeight' );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial ) {\n\n\t\t\t\tif ( material.lights ) {\n\n\t\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh uniforms common to several materials\n\n\t\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\n\t\t\t\t\t material instanceof THREE.MeshDepthMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh single material specific uniforms\n\n\t\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\n\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t\t} else if ( material instanceof THREE.PointsMaterial ) {\n\n\t\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t\t} else if ( material instanceof THREE.MeshLambertMaterial ) {\n\n\t\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t\t} else if ( material instanceof THREE.MeshPhongMaterial ) {\n\n\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t\t} else if ( material instanceof THREE.MeshPhysicalMaterial ) {\n\n\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\n\t\t\t\t} else if ( material instanceof THREE.MeshStandardMaterial ) {\n\n\t\t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\n\t\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\n\n\t\t\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\t\t\tm_uniforms.displacementMap.value = material.displacementMap;\n\t\t\t\t\t\tm_uniforms.displacementScale.value = material.displacementScale;\n\t\t\t\t\t\tm_uniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\n\n\t\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t\t}\n\n\t\t\t\tTHREE.WebGLUniforms.upload(\n\t\t\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\n\n\t\t\t}\n\n\n\t\t\t// common matrices\n\n\t\t\tp_uniforms.set( _gl, object, 'modelViewMatrix' );\n\t\t\tp_uniforms.set( _gl, object, 'normalMatrix' );\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\n\t\t\t// dynamic uniforms\n\n\t\t\tvar dynUniforms = materialProperties.dynamicUniforms;\n\n\t\t\tif ( dynUniforms !== null ) {\n\n\t\t\t\tTHREE.WebGLUniforms.evalDynamic(\n\t\t\t\t\t\tdynUniforms, m_uniforms, object, camera );\n\n\t\t\t\tTHREE.WebGLUniforms.upload( _gl, dynUniforms, m_uniforms, _this );\n\n\t\t\t}\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\t// Uniforms (refresh uniforms objects)\n\n\t\tfunction refreshUniformsCommon ( uniforms, material ) {\n\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tuniforms.diffuse.value = material.color;\n\n\t\t\tif ( material.emissive ) {\n\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t\t}\n\n\t\t\tuniforms.map.value = material.map;\n\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. normal map\n\t\t\t// 4. bump map\n\t\t\t// 5. alpha map\n\t\t\t// 6. emissive map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.specularMap ) {\n\n\t\t\t\tuvScaleMap = material.specularMap;\n\n\t\t\t} else if ( material.displacementMap ) {\n\n\t\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t\t} else if ( material.normalMap ) {\n\n\t\t\t\tuvScaleMap = material.normalMap;\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t\t} else if ( material.roughnessMap ) {\n\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t\t} else if ( material.metalnessMap ) {\n\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t} else if ( material.emissiveMap ) {\n\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uvScaleMap instanceof THREE.WebGLRenderTarget ) {\n\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tvar offset = uvScaleMap.offset;\n\t\t\t\tvar repeat = uvScaleMap.repeat;\n\n\t\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n\t\t\t}\n\n\t\t\tuniforms.envMap.value = material.envMap;\n\n\t\t\t// don't flip CubeTexture envMaps, flip everything else:\n\t\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t\t\tuniforms.flipEnvMap.value = ( ! ( material.envMap instanceof THREE.CubeTexture ) ) ? 1 : - 1;\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t}\n\n\t\tfunction refreshUniformsLine ( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value = material.color;\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t}\n\n\t\tfunction refreshUniformsDash ( uniforms, material ) {\n\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\n\t\t}\n\n\t\tfunction refreshUniformsPoints ( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value = material.color;\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\t\tuniforms.scale.value = _canvas.clientHeight * 0.5;\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tvar offset = material.map.offset;\n\t\t\t\tvar repeat = material.map.repeat;\n\n\t\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsFog ( uniforms, fog ) {\n\n\t\t\tuniforms.fogColor.value = fog.color;\n\n\t\t\tif ( fog instanceof THREE.Fog ) {\n\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t\t} else if ( fog instanceof THREE.FogExp2 ) {\n\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLambert ( uniforms, material ) {\n\n\t\t\tif ( material.lightMap ) {\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhong ( uniforms, material ) {\n\n\t\t\tuniforms.specular.value = material.specular;\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif ( material.lightMap ) {\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsStandard ( uniforms, material ) {\n\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif ( material.roughnessMap ) {\n\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.metalnessMap ) {\n\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.lightMap ) {\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( material.envMap ) {\n\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhysical ( uniforms, material ) {\n\n\t\t\tuniforms.clearCoat.value = material.clearCoat;\n\t\t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\n\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t}\n\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\t\tfunction markUniformsLightsNeedsUpdate ( uniforms, value ) {\n\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t\t}\n\n\t\t// Lighting\n\n\t\tfunction setupShadows ( lights ) {\n\n\t\t\tvar lightShadowsLength = 0;\n\n\t\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t_lights.shadows[ lightShadowsLength ++ ] = light;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_lights.shadows.length = lightShadowsLength;\n\n\t\t}\n\n\t\tfunction setupLights ( lights, camera ) {\n\n\t\t\tvar l, ll, light,\n\t\t\tr = 0, g = 0, b = 0,\n\t\t\tcolor,\n\t\t\tintensity,\n\t\t\tdistance,\n\t\t\tshadowMap,\n\n\t\t\tviewMatrix = camera.matrixWorldInverse,\n\n\t\t\tdirectionalLength = 0,\n\t\t\tpointLength = 0,\n\t\t\tspotLength = 0,\n\t\t\themiLength = 0;\n\n\t\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\n\n\t\t\t\tlight = lights[ l ];\n\n\t\t\t\tcolor = light.color;\n\t\t\t\tintensity = light.intensity;\n\t\t\t\tdistance = light.distance;\n\n\t\t\t\tshadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\t\tif ( light instanceof THREE.AmbientLight ) {\n\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\n\t\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\n\n\t\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( _vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_lights.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\t\t\t\t\t_lights.directional[ directionalLength ++ ] = uniforms;\n\n\t\t\t\t} else if ( light instanceof THREE.SpotLight ) {\n\n\t\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( _vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_lights.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\t\t\t\t\t_lights.spot[ spotLength ++ ] = uniforms;\n\n\t\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\n\t\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_lights.pointShadowMap[ pointLength ] = shadowMap;\n\n\t\t\t\t\tif ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {\n\n\t\t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = new THREE.Matrix4();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n\t\t\t\t\t// equal to inverse of the light's position\n\t\t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\n\t\t\t\t\t_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );\n\n\t\t\t\t\t_lights.point[ pointLength ++ ] = uniforms;\n\n\t\t\t\t} else if ( light instanceof THREE.HemisphereLight ) {\n\n\t\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\t\t_lights.hemi[ hemiLength ++ ] = uniforms;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_lights.ambient[ 0 ] = r;\n\t\t\t_lights.ambient[ 1 ] = g;\n\t\t\t_lights.ambient[ 2 ] = b;\n\n\t\t\t_lights.directional.length = directionalLength;\n\t\t\t_lights.spot.length = spotLength;\n\t\t\t_lights.point.length = pointLength;\n\t\t\t_lights.hemi.length = hemiLength;\n\n\t\t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;\n\n\t\t}\n\n\t\t// GL state setting\n\n\t\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\n\t\t\tstate.setCullFace( cullFace );\n\t\t\tstate.setFlipSided( frontFaceDirection === THREE.FrontFaceDirectionCW );\n\n\t\t};\n\n\t\t// Textures\n\n\t\tfunction allocTextureUnit() {\n\n\t\t\tvar textureUnit = _usedTextureUnits;\n\n\t\t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n\t\t\t}\n\n\t\t\t_usedTextureUnits += 1;\n\n\t\t\treturn textureUnit;\n\n\t\t}\n\n\t\tthis.allocTextureUnit = allocTextureUnit;\n\n\t\t// this.setTexture2D = setTexture2D;\n\t\tthis.setTexture2D = ( function() {\n\n\t\t\tvar warned = false;\n\n\t\t\t// backwards compatibility: peel texture.texture\n\t\t\treturn function setTexture2D( texture, slot ) {\n\n\t\t\t\tif ( texture instanceof THREE.WebGLRenderTarget ) {\n\n\t\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\t\twarned = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture = texture.texture;\n\n\t\t\t\t}\n\n\t\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t\t};\n\n\t\t}() );\n\n\t\tthis.setTexture = ( function() {\n\n\t\t\tvar warned = false;\n\n\t\t\treturn function setTexture( texture, slot ) {\n\n\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n\t\t\t\t\twarned = true;\n\n\t\t\t\t}\n\n\t\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t\t};\n\n\t\t}() );\n\n\t\tthis.setTextureCube = ( function() {\n\n\t\t\tvar warned = false;\n\n\t\t\treturn function setTextureCube( texture, slot ) {\n\n\t\t\t\t// backwards compatibility: peel texture.texture\n\t\t\t\tif ( texture instanceof THREE.WebGLRenderTargetCube ) {\n\n\t\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\t\twarned = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture = texture.texture;\n\n\t\t\t\t}\n\n\t\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t\t\t\t// TODO: unify these code paths\n\t\t\t\tif ( texture instanceof THREE.CubeTexture ||\n\t\t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\t\ttextures.setTextureCube( texture, slot );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\n\t\t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() );\n\n\t\tthis.getCurrentRenderTarget = function() {\n\n\t\t\treturn _currentRenderTarget;\n\n\t\t};\n\n\t\tthis.setRenderTarget = function ( renderTarget ) {\n\n\t\t\t_currentRenderTarget = renderTarget;\n\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\t\t\tvar framebuffer;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\n\n\t\t\t\t}\n\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\n\n\t\t\t} else {\n\n\t\t\t\tframebuffer = null;\n\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n\t\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\n\t\t\t}\n\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t\t}\n\n\t\t\tstate.scissor( _currentScissor );\n\t\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\t\tstate.viewport( _currentViewport );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\n\t\t\tif ( renderTarget instanceof THREE.WebGLRenderTarget === false ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( framebuffer ) {\n\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\t\trestore = true;\n\n\t\t\t\t}\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar texture = renderTarget.texture;\n\n\t\t\t\t\tif ( texture.format !== THREE.RGBAFormat && paramThreeToGL( texture.format ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( texture.type !== THREE.UnsignedByteType &&\n\t\t\t\t\t     paramThreeToGL( texture.type ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) &&\n\t\t\t\t\t     ! ( texture.type === THREE.FloatType && extensions.get( 'WEBGL_color_buffer_float' ) ) &&\n\t\t\t\t\t     ! ( texture.type === THREE.HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( texture.format ), paramThreeToGL( texture.type ), buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} finally {\n\n\t\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Map three.js constants to WebGL constants\n\n\t\tfunction paramThreeToGL ( p ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( p === THREE.RepeatWrapping ) return _gl.REPEAT;\n\t\t\tif ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\n\t\t\tif ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\n\n\t\t\tif ( p === THREE.NearestFilter ) return _gl.NEAREST;\n\t\t\tif ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\n\t\t\tif ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\n\n\t\t\tif ( p === THREE.LinearFilter ) return _gl.LINEAR;\n\t\t\tif ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\n\t\t\tif ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\n\n\t\t\tif ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;\n\t\t\tif ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\n\t\t\tif ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\n\t\t\tif ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\n\n\t\t\tif ( p === THREE.ByteType ) return _gl.BYTE;\n\t\t\tif ( p === THREE.ShortType ) return _gl.SHORT;\n\t\t\tif ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;\n\t\t\tif ( p === THREE.IntType ) return _gl.INT;\n\t\t\tif ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;\n\t\t\tif ( p === THREE.FloatType ) return _gl.FLOAT;\n\n\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === THREE.HalfFloatType ) return extension.HALF_FLOAT_OES;\n\n\t\t\t}\n\n\t\t\tif ( p === THREE.AlphaFormat ) return _gl.ALPHA;\n\t\t\tif ( p === THREE.RGBFormat ) return _gl.RGB;\n\t\t\tif ( p === THREE.RGBAFormat ) return _gl.RGBA;\n\t\t\tif ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;\n\t\t\tif ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\n\t\t\tif ( p === THREE.DepthFormat ) return _gl.DEPTH_COMPONENT;\n\n\t\t\tif ( p === THREE.AddEquation ) return _gl.FUNC_ADD;\n\t\t\tif ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;\n\t\t\tif ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\n\n\t\t\tif ( p === THREE.ZeroFactor ) return _gl.ZERO;\n\t\t\tif ( p === THREE.OneFactor ) return _gl.ONE;\n\t\t\tif ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;\n\t\t\tif ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\n\t\t\tif ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;\n\t\t\tif ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\n\t\t\tif ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;\n\t\t\tif ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\n\n\t\t\tif ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;\n\t\t\tif ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\n\t\t\tif ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === THREE.RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\tif ( p === THREE.RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\tif ( p === THREE.RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\tif ( p === THREE.RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t}\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === THREE.RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === THREE.RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\tif ( p === THREE.RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === THREE.RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t}\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === THREE.RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t}\n\n\t\t\textension = extensions.get( 'EXT_blend_minmax' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === THREE.MinEquation ) return extension.MIN_EXT;\n\t\t\t\tif ( p === THREE.MaxEquation ) return extension.MAX_EXT;\n\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t};\n\n\t// File:src/renderers/WebGLRenderTarget.js\n\n\t/**\n\t * @author szimek / https://github.com/szimek/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Marius Kintel / https://github.com/kintel\n\t */\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\tTHREE.WebGLRenderTarget = function ( width, height, options ) {\n\n\t\tthis.uuid = THREE.Math.generateUUID();\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.scissor = new THREE.Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new THREE.Vector4( 0, 0, width, height );\n\n\t\toptions = options || {};\n\n\t\tif ( options.minFilter === undefined ) options.minFilter = THREE.LinearFilter;\n\n\t\tthis.texture = new THREE.Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\t\tthis.depthTexture = null;\n\n\t};\n\n\tObject.assign( THREE.WebGLRenderTarget.prototype, THREE.EventDispatcher.prototype, {\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\n\t\t\t\tthis.dispose();\n\n\t\t\t}\n\n\t\t\tthis.viewport.set( 0, 0, width, height );\n\t\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\tthis.viewport.copy( source.viewport );\n\n\t\t\tthis.texture = source.texture.clone();\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t// File:src/renderers/WebGLRenderTargetCube.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com\n\t */\n\n\tTHREE.WebGLRenderTargetCube = function ( width, height, options ) {\n\n\t\tTHREE.WebGLRenderTarget.call( this, width, height, options );\n\n\t\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\t\tthis.activeMipMapLevel = 0;\n\n\t};\n\n\tTHREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );\n\tTHREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;\n\n\t// File:src/renderers/webgl/WebGLBufferRenderer.js\n\n\t/**\n\t* @author mrdoob / http://mrdoob.com/\n\t*/\n\n\tTHREE.WebGLBufferRenderer = function ( _gl, extensions, _infoRender ) {\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\t_gl.drawArrays( mode, start, count );\n\n\t\t\t_infoRender.calls ++;\n\t\t\t_infoRender.vertices += count;\n\t\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\n\n\t\t}\n\n\t\tfunction renderInstances( geometry ) {\n\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar position = geometry.attributes.position;\n\n\t\t\tvar count = 0;\n\n\t\t\tif ( position instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\t\tcount = position.data.count;\n\n\t\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n\t\t\t} else {\n\n\t\t\t\tcount = position.count;\n\n\t\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n\t\t\t}\n\n\t\t\t_infoRender.calls ++;\n\t\t\t_infoRender.vertices += count * geometry.maxInstancedCount;\n\t\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;\n\n\t\t}\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t};\n\n\t// File:src/renderers/webgl/WebGLClipping.js\n\n\tTHREE.WebGLClipping = function() {\n\n\t\tvar scope = this,\n\n\t\t\tglobalState = null,\n\t\t\tnumGlobalPlanes = 0,\n\t\t\tlocalClippingEnabled = false,\n\t\t\trenderingShadows = false,\n\n\t\t\tplane = new THREE.Plane(),\n\t\t\tviewNormalMatrix = new THREE.Matrix3(),\n\n\t\t\tuniform = { value: null, needsUpdate: false };\n\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\n\t\tthis.init = function( planes, enableLocalClipping, camera ) {\n\n\t\t\tvar enabled =\n\t\t\t\tplanes.length !== 0 ||\n\t\t\t\tenableLocalClipping ||\n\t\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t\t// run another frame in order to reset the state:\n\t\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\t\tlocalClippingEnabled;\n\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\t\tnumGlobalPlanes = planes.length;\n\n\t\t\treturn enabled;\n\n\t\t};\n\n\t\tthis.beginShadows = function() {\n\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes( null );\n\n\t\t};\n\n\t\tthis.endShadows = function() {\n\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\n\t\t};\n\n\t\tthis.setState = function( planes, clipShadows, camera, cache, fromCache ) {\n\n\t\t\tif ( ! localClippingEnabled ||\n\t\t\t\t\tplanes === null || planes.length === 0 ||\n\t\t\t\t\trenderingShadows && ! clipShadows ) {\n\t\t\t\t// there's no local clipping\n\n\t\t\t\tif ( renderingShadows ) {\n\t\t\t\t\t// there's no global clipping\n\n\t\t\t\t\tprojectPlanes( null );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresetGlobalState();\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\tlGlobal = nGlobal * 4,\n\n\t\t\t\t\tdstArray = cache.clippingState || null;\n\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcache.clippingState = dstArray;\n\t\t\t\tthis.numPlanes += nGlobal;\n\n\t\t\t}\n\n\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\n\t\t\tif ( uniform.value !== globalState ) {\n\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\n\t\t}\n\n\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\t\tdstArray = null;\n\n\t\t\tif ( nPlanes !== 0 ) {\n\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, i4 = dstOffset;\n\t\t\t\t\t\t\t\t\t\ti !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\t\tplane.copy( planes[ i ] ).\n\t\t\t\t\t\t\t\tapplyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t};\n\n\n\t// File:src/renderers/webgl/WebGLIndexedBufferRenderer.js\n\n\t/**\n\t* @author mrdoob / http://mrdoob.com/\n\t*/\n\n\tTHREE.WebGLIndexedBufferRenderer = function ( _gl, extensions, _infoRender ) {\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tvar type, size;\n\n\t\tfunction setIndex( index ) {\n\n\t\t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\n\n\t\t\t\ttype = _gl.UNSIGNED_INT;\n\t\t\t\tsize = 4;\n\n\t\t\t} else {\n\n\t\t\t\ttype = _gl.UNSIGNED_SHORT;\n\t\t\t\tsize = 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\t_gl.drawElements( mode, count, type, start * size );\n\n\t\t\t_infoRender.calls ++;\n\t\t\t_infoRender.vertices += count;\n\t\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count ) {\n\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\textension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );\n\n\t\t\t_infoRender.calls ++;\n\t\t\t_infoRender.vertices += count * geometry.maxInstancedCount;\n\t\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;\n\t\t}\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t};\n\n\t// File:src/renderers/webgl/WebGLExtensions.js\n\n\t/**\n\t* @author mrdoob / http://mrdoob.com/\n\t*/\n\n\tTHREE.WebGLExtensions = function ( gl ) {\n\n\t\tvar extensions = {};\n\n\t\tthis.get = function ( name ) {\n\n\t\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\t\treturn extensions[ name ];\n\n\t\t\t}\n\n\t\t\tvar extension;\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_etc1':\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\textension = gl.getExtension( name );\n\n\t\t\t}\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t}\n\n\t\t\textensions[ name ] = extension;\n\n\t\t\treturn extension;\n\n\t\t};\n\n\t};\n\n\t// File:src/renderers/webgl/WebGLCapabilities.js\n\n\tTHREE.WebGLCapabilities = function ( gl, extensions, parameters ) {\n\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\n\t\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t\t} else {\n\n\t\t\t\tmaxAnisotropy = 0;\n\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\n\t\t}\n\n\t\tfunction getMaxPrecision( precision ) {\n\n\t\t\tif ( precision === 'highp' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n\t\t\t\t\treturn 'highp';\n\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\n\t\t\t}\n\n\t\t\tif ( precision === 'mediump' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n\t\t\t\t\treturn 'mediump';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\n\t\t}\n\n\t\tthis.getMaxAnisotropy = getMaxAnisotropy;\n\t\tthis.getMaxPrecision = getMaxPrecision;\n\n\t\tthis.precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tthis.logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false;\n\n\t\tthis.maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\t\tthis.maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\t\tthis.maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\t\tthis.maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n\t\tthis.maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t\tthis.maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\t\tthis.maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\t\tthis.maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n\t\tthis.vertexTextures = this.maxVertexTextures > 0;\n\t\tthis.floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n\t\tthis.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;\n\n\t\tvar _maxPrecision = getMaxPrecision( this.precision );\n\n\t\tif ( _maxPrecision !== this.precision ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', this.precision, 'not supported, using', _maxPrecision, 'instead.' );\n\t\t\tthis.precision = _maxPrecision;\n\n\t\t}\n\n\t\tif ( this.logarithmicDepthBuffer ) {\n\n\t\t\tthis.logarithmicDepthBuffer = !! extensions.get( 'EXT_frag_depth' );\n\n\t\t}\n\n\t};\n\n\t// File:src/renderers/webgl/WebGLGeometries.js\n\n\t/**\n\t* @author mrdoob / http://mrdoob.com/\n\t*/\n\n\tTHREE.WebGLGeometries = function ( gl, properties, info ) {\n\n\t\tvar geometries = {};\n\n\t\tfunction get( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometries[ geometry.id ] !== undefined ) {\n\n\t\t\t\treturn geometries[ geometry.id ];\n\n\t\t\t}\n\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tvar buffergeometry;\n\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\tbuffergeometry = geometry;\n\n\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\t\tgeometry._bufferGeometry = new THREE.BufferGeometry().setFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t\t}\n\n\t\t\tgeometries[ geometry.id ] = buffergeometry;\n\n\t\t\tinfo.memory.geometries ++;\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction onGeometryDispose( event ) {\n\n\t\t\tvar geometry = event.target;\n\t\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\t\tdeleteAttribute( buffergeometry.index );\n\n\t\t\t}\n\n\t\t\tdeleteAttributes( buffergeometry.attributes );\n\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tdelete geometries[ geometry.id ];\n\n\t\t\t// TODO\n\n\t\t\tvar property = properties.get( geometry );\n\n\t\t\tif ( property.wireframe ) {\n\n\t\t\t\tdeleteAttribute( property.wireframe );\n\n\t\t\t}\n\n\t\t\tproperties.delete( geometry );\n\n\t\t\tvar bufferproperty = properties.get( buffergeometry );\n\n\t\t\tif ( bufferproperty.wireframe ) {\n\n\t\t\t\tdeleteAttribute( bufferproperty.wireframe );\n\n\t\t\t}\n\n\t\t\tproperties.delete( buffergeometry );\n\n\t\t\t//\n\n\t\t\tinfo.memory.geometries --;\n\n\t\t}\n\n\t\tfunction getAttributeBuffer( attribute ) {\n\n\t\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n\t\t\t}\n\n\t\t\treturn properties.get( attribute ).__webglBuffer;\n\n\t\t}\n\n\t\tfunction deleteAttribute( attribute ) {\n\n\t\t\tvar buffer = getAttributeBuffer( attribute );\n\n\t\t\tif ( buffer !== undefined ) {\n\n\t\t\t\tgl.deleteBuffer( buffer );\n\t\t\t\tremoveAttributeBuffer( attribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction deleteAttributes( attributes ) {\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tdeleteAttribute( attributes[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction removeAttributeBuffer( attribute ) {\n\n\t\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\t\tproperties.delete( attribute.data );\n\n\t\t\t} else {\n\n\t\t\t\tproperties.delete( attribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.get = get;\n\n\t};\n\n\t// File:src/renderers/webgl/WebGLLights.js\n\n\t/**\n\t* @author mrdoob / http://mrdoob.com/\n\t*/\n\n\tTHREE.WebGLLights = function () {\n\n\t\tvar lights = {};\n\n\t\tthis.get = function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tvar uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new THREE.Vector3(),\n\t\t\t\t\t\tcolor: new THREE.Color(),\n\n\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new THREE.Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new THREE.Vector3(),\n\t\t\t\t\t\tdirection: new THREE.Vector3(),\n\t\t\t\t\t\tcolor: new THREE.Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new THREE.Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new THREE.Vector3(),\n\t\t\t\t\t\tcolor: new THREE.Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new THREE.Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new THREE.Vector3(),\n\t\t\t\t\t\tskyColor: new THREE.Color(),\n\t\t\t\t\t\tgroundColor: new THREE.Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t};\n\n\t};\n\n\t// File:src/renderers/webgl/WebGLObjects.js\n\n\t/**\n\t* @author mrdoob / http://mrdoob.com/\n\t*/\n\n\tTHREE.WebGLObjects = function ( gl, properties, info ) {\n\n\t\tvar geometries = new THREE.WebGLGeometries( gl, properties, info );\n\n\t\t//\n\n\t\tfunction update( object ) {\n\n\t\t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\n\n\t\t\tvar geometry = geometries.get( object );\n\n\t\t\tif ( object.geometry instanceof THREE.Geometry ) {\n\n\t\t\t\tgeometry.updateFromObject( object );\n\n\t\t\t}\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor ( var name in morphAttributes ) {\n\n\t\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction updateAttribute( attribute, bufferType ) {\n\n\t\t\tvar data = ( attribute instanceof THREE.InterleavedBufferAttribute ) ? attribute.data : attribute;\n\n\t\t\tvar attributeProperties = properties.get( data );\n\n\t\t\tif ( attributeProperties.__webglBuffer === undefined ) {\n\n\t\t\t\tcreateBuffer( attributeProperties, data, bufferType );\n\n\t\t\t} else if ( attributeProperties.version !== data.version ) {\n\n\t\t\t\tupdateBuffer( attributeProperties, data, bufferType );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction createBuffer( attributeProperties, data, bufferType ) {\n\n\t\t\tattributeProperties.__webglBuffer = gl.createBuffer();\n\t\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n\t\t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n\t\t\tgl.bufferData( bufferType, data.array, usage );\n\n\t\t\tattributeProperties.version = data.version;\n\n\t\t}\n\n\t\tfunction updateBuffer( attributeProperties, data, bufferType ) {\n\n\t\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n\t\t\tif ( data.dynamic === false || data.updateRange.count === - 1 ) {\n\n\t\t\t\t// Not using update ranges\n\n\t\t\t\tgl.bufferSubData( bufferType, 0, data.array );\n\n\t\t\t} else if ( data.updateRange.count === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\n\t\t\t} else {\n\n\t\t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\n\n\t\t\t\tdata.updateRange.count = 0; // reset range\n\n\t\t\t}\n\n\t\t\tattributeProperties.version = data.version;\n\n\t\t}\n\n\t\tfunction getAttributeBuffer( attribute ) {\n\n\t\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n\t\t\t}\n\n\t\t\treturn properties.get( attribute ).__webglBuffer;\n\n\t\t}\n\n\t\tfunction getWireframeAttribute( geometry ) {\n\n\t\t\tvar property = properties.get( geometry );\n\n\t\t\tif ( property.wireframe !== undefined ) {\n\n\t\t\t\treturn property.wireframe;\n\n\t\t\t}\n\n\t\t\tvar indices = [];\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar attributes = geometry.attributes;\n\t\t\tvar position = attributes.position;\n\n\t\t\t// console.time( 'wireframe' );\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tvar edges = {};\n\t\t\t\tvar array = index.array;\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\t\tif ( checkEdge( edges, a, b ) ) indices.push( a, b );\n\t\t\t\t\tif ( checkEdge( edges, b, c ) ) indices.push( b, c );\n\t\t\t\t\tif ( checkEdge( edges, c, a ) ) indices.push( c, a );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar array = attributes.position.array;\n\n\t\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = i + 0;\n\t\t\t\t\tvar b = i + 1;\n\t\t\t\t\tvar c = i + 2;\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// console.timeEnd( 'wireframe' );\n\n\t\t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\n\t\t\tvar attribute = new THREE.BufferAttribute( new TypeArray( indices ), 1 );\n\n\t\t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t\tproperty.wireframe = attribute;\n\n\t\t\treturn attribute;\n\n\t\t}\n\n\t\tfunction checkEdge( edges, a, b ) {\n\n\t\t\tif ( a > b ) {\n\n\t\t\t\tvar tmp = a;\n\t\t\t\ta = b;\n\t\t\t\tb = tmp;\n\n\t\t\t}\n\n\t\t\tvar list = edges[ a ];\n\n\t\t\tif ( list === undefined ) {\n\n\t\t\t\tedges[ a ] = [ b ];\n\t\t\t\treturn true;\n\n\t\t\t} else if ( list.indexOf( b ) === -1 ) {\n\n\t\t\t\tlist.push( b );\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tthis.getAttributeBuffer = getAttributeBuffer;\n\t\tthis.getWireframeAttribute = getWireframeAttribute;\n\n\t\tthis.update = update;\n\n\t};\n\n\t// File:src/renderers/webgl/WebGLProgram.js\n\n\tTHREE.WebGLProgram = ( function () {\n\n\t\tvar programIdCount = 0;\n\n\t\tfunction getEncodingComponents( encoding ) {\n\n\t\t\tswitch ( encoding ) {\n\n\t\t\t\tcase THREE.LinearEncoding:\n\t\t\t\t\treturn [ 'Linear','( value )' ];\n\t\t\t\tcase THREE.sRGBEncoding:\n\t\t\t\t\treturn [ 'sRGB','( value )' ];\n\t\t\t\tcase THREE.RGBEEncoding:\n\t\t\t\t\treturn [ 'RGBE','( value )' ];\n\t\t\t\tcase THREE.RGBM7Encoding:\n\t\t\t\t\treturn [ 'RGBM','( value, 7.0 )' ];\n\t\t\t\tcase THREE.RGBM16Encoding:\n\t\t\t\t\treturn [ 'RGBM','( value, 16.0 )' ];\n\t\t\t\tcase THREE.RGBDEncoding:\n\t\t\t\t\treturn [ 'RGBD','( value, 256.0 )' ];\n\t\t\t\tcase THREE.GammaEncoding:\n\t\t\t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\t\t\tvar components = getEncodingComponents( encoding );\n\t\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\n\n\t\t}\n\n\t\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\t\t\tvar components = getEncodingComponents( encoding );\n\t\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\n\n\t\t}\n\n\t\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\t\t\tvar toneMappingName;\n\n\t\t\tswitch ( toneMapping ) {\n\n\t\t\t\tcase THREE.LinearToneMapping:\n\t\t\t\t\ttoneMappingName = \"Linear\";\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.ReinhardToneMapping:\n\t\t\t\t\ttoneMappingName = \"Reinhard\";\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.Uncharted2ToneMapping:\n\t\t\t\t\ttoneMappingName = \"Uncharted2\";\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.CineonToneMapping:\n\t\t\t\t\ttoneMappingName = \"OptimizedCineon\";\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n\t\t\t}\n\n\t\t\treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n\n\t\t}\n\n\t\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\n\n\t\t\textensions = extensions || {};\n\n\t\t\tvar chunks = [\n\t\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',\n\t\t\t];\n\n\t\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n\t\t}\n\n\t\tfunction generateDefines( defines ) {\n\n\t\t\tvar chunks = [];\n\n\t\t\tfor ( var name in defines ) {\n\n\t\t\t\tvar value = defines[ name ];\n\n\t\t\t\tif ( value === false ) continue;\n\n\t\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t\t\t}\n\n\t\t\treturn chunks.join( '\\n' );\n\n\t\t}\n\n\t\tfunction fetchAttributeLocations( gl, program, identifiers ) {\n\n\t\t\tvar attributes = {};\n\n\t\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n\t\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\t\tvar name = info.name;\n\n\t\t\t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\n\n\t\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t\t\t}\n\n\t\t\treturn attributes;\n\n\t\t}\n\n\t\tfunction filterEmptyLine( string ) {\n\n\t\t\treturn string !== '';\n\n\t\t}\n\n\t\tfunction replaceLightNums( string, parameters ) {\n\n\t\t\treturn string\n\t\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\n\t\t}\n\n\t\tfunction parseIncludes( string ) {\n\n\t\t\tvar pattern = /#include +<([\\w\\d.]+)>/g;\n\n\t\t\tfunction replace( match, include ) {\n\n\t\t\t\tvar replace = THREE.ShaderChunk[ include ];\n\n\t\t\t\tif ( replace === undefined ) {\n\n\t\t\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t\t\t}\n\n\t\t\t\treturn parseIncludes( replace );\n\n\t\t\t}\n\n\t\t\treturn string.replace( pattern, replace );\n\n\t\t}\n\n\t\tfunction unrollLoops( string ) {\n\n\t\t\tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n\t\t\tfunction replace( match, start, end, snippet ) {\n\n\t\t\t\tvar unroll = '';\n\n\t\t\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\n\t\t\t\t}\n\n\t\t\t\treturn unroll;\n\n\t\t\t}\n\n\t\t\treturn string.replace( pattern, replace );\n\n\t\t}\n\n\t\treturn function WebGLProgram( renderer, code, material, parameters ) {\n\n\t\t\tvar gl = renderer.context;\n\n\t\t\tvar extensions = material.extensions;\n\t\t\tvar defines = material.defines;\n\n\t\t\tvar vertexShader = material.__webglShader.vertexShader;\n\t\t\tvar fragmentShader = material.__webglShader.fragmentShader;\n\n\t\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\t\tif ( parameters.shadowMapType === THREE.PCFShadowMap ) {\n\n\t\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t\t\t} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {\n\n\t\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t\t\t}\n\n\t\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\t\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n\t\t\tif ( parameters.envMap ) {\n\n\t\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\t\tcase THREE.CubeReflectionMapping:\n\t\t\t\t\tcase THREE.CubeRefractionMapping:\n\t\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.CubeUVReflectionMapping:\n\t\t\t\t\tcase THREE.CubeUVRefractionMapping:\n\t\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.EquirectangularReflectionMapping:\n\t\t\t\t\tcase THREE.EquirectangularRefractionMapping:\n\t\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.SphericalReflectionMapping:\n\t\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\t\tcase THREE.CubeRefractionMapping:\n\t\t\t\t\tcase THREE.EquirectangularRefractionMapping:\n\t\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tswitch ( material.combine ) {\n\n\t\t\t\t\tcase THREE.MultiplyOperation:\n\t\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.MixOperation:\n\t\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.AddOperation:\n\t\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t\t\t// console.log( 'building new program ' );\n\n\t\t\t//\n\n\t\t\tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\n\n\t\t\tvar customDefines = generateDefines( defines );\n\n\t\t\t//\n\n\t\t\tvar program = gl.createProgram();\n\n\t\t\tvar prefixVertex, prefixFragment;\n\n\t\t\tif ( material instanceof THREE.RawShaderMaterial ) {\n\n\t\t\t\tprefixVertex = [\n\n\t\t\t\t\tcustomDefines\n\n\t\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\t\tprefixFragment = [\n\n\t\t\t\t\tcustomDefines\n\n\t\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\t} else {\n\n\t\t\t\tprefixVertex = [\n\n\t\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n\t\t\t\t\tcustomDefines,\n\n\t\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\n\t\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n\t\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t\t'attribute vec3 position;',\n\t\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t\t\t'\tattribute vec3 color;',\n\n\t\t\t\t\t'#endif',\n\n\t\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t\t\t'\t#else',\n\n\t\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t\t\t'\t#endif',\n\n\t\t\t\t\t'#endif',\n\n\t\t\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t\t\t'#endif',\n\n\t\t\t\t\t'\\n'\n\n\t\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\t\tprefixFragment = [\n\n\t\t\t\t\tcustomExtensions,\n\n\t\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n\t\t\t\t\tcustomDefines,\n\n\t\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\n\t\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n\t\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\n\n\t\t\t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\n\n\t\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\n\t\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? THREE.ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\n\n\t\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? THREE.ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\n\n\t\t\t\t\tparameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\n\n\t\t\t\t\t'\\n'\n\n\t\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\t}\n\n\t\t\tvertexShader = parseIncludes( vertexShader, parameters );\n\t\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\n\t\t\tfragmentShader = parseIncludes( fragmentShader, parameters );\n\t\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\n\t\t\tif ( material instanceof THREE.ShaderMaterial === false ) {\n\n\t\t\t\tvertexShader = unrollLoops( vertexShader );\n\t\t\t\tfragmentShader = unrollLoops( fragmentShader );\n\n\t\t\t}\n\n\t\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\t\tvar glVertexShader = THREE.WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\t\t\tvar glFragmentShader = THREE.WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n\t\t\tgl.attachShader( program, glVertexShader );\n\t\t\tgl.attachShader( program, glFragmentShader );\n\n\t\t\t// Force a particular attribute to index 0.\n\n\t\t\tif ( material.index0AttributeName !== undefined ) {\n\n\t\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n\t\t\t} else if ( parameters.morphTargets === true ) {\n\n\t\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t\t\t}\n\n\t\t\tgl.linkProgram( program );\n\n\t\t\tvar programLog = gl.getProgramInfoLog( program );\n\t\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\n\t\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\n\n\t\t\tvar runnable = true;\n\t\t\tvar haveDiagnostics = true;\n\n\t\t\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n\t\t\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\n\t\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n\t\t\t\trunnable = false;\n\n\t\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\n\t\t\t} else if ( programLog !== '' ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\t\thaveDiagnostics = false;\n\n\t\t\t}\n\n\t\t\tif ( haveDiagnostics ) {\n\n\t\t\t\tthis.diagnostics = {\n\n\t\t\t\t\trunnable: runnable,\n\t\t\t\t\tmaterial: material,\n\n\t\t\t\t\tprogramLog: programLog,\n\n\t\t\t\t\tvertexShader: {\n\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t\t},\n\n\t\t\t\t\tfragmentShader: {\n\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// clean up\n\n\t\t\tgl.deleteShader( glVertexShader );\n\t\t\tgl.deleteShader( glFragmentShader );\n\n\t\t\t// set up caching for uniform locations\n\n\t\t\tvar cachedUniforms;\n\n\t\t\tthis.getUniforms = function() {\n\n\t\t\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t\t\tcachedUniforms =\n\t\t\t\t\t\t\tnew THREE.WebGLUniforms( gl, program, renderer );\n\n\t\t\t\t}\n\n\t\t\t\treturn cachedUniforms;\n\n\t\t\t};\n\n\t\t\t// set up caching for attribute locations\n\n\t\t\tvar cachedAttributes;\n\n\t\t\tthis.getAttributes = function() {\n\n\t\t\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t\t\t}\n\n\t\t\t\treturn cachedAttributes;\n\n\t\t\t};\n\n\t\t\t// free resource\n\n\t\t\tthis.destroy = function() {\n\n\t\t\t\tgl.deleteProgram( program );\n\t\t\t\tthis.program = undefined;\n\n\t\t\t};\n\n\t\t\t// DEPRECATED\n\n\t\t\tObject.defineProperties( this, {\n\n\t\t\t\tuniforms: {\n\t\t\t\t\tget: function() {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n\t\t\t\t\t\treturn this.getUniforms();\n\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tattributes: {\n\t\t\t\t\tget: function() {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n\t\t\t\t\t\treturn this.getAttributes();\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} );\n\n\n\t\t\t//\n\n\t\t\tthis.id = programIdCount ++;\n\t\t\tthis.code = code;\n\t\t\tthis.usedTimes = 1;\n\t\t\tthis.program = program;\n\t\t\tthis.vertexShader = glVertexShader;\n\t\t\tthis.fragmentShader = glFragmentShader;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t} )();\n\n\t// File:src/renderers/webgl/WebGLPrograms.js\n\n\tTHREE.WebGLPrograms = function ( renderer, capabilities ) {\n\n\t\tvar programs = [];\n\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points'\n\t\t};\n\n\t\tvar parameterNames = [\n\t\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n\t\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n\t\t\t\"roughnessMap\", \"metalnessMap\",\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\",\n\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"depthPacking\"\n\t\t];\n\n\n\t\tfunction allocateBones ( object ) {\n\n\t\t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\n\n\t\t\t\treturn 1024;\n\n\t\t\t} else {\n\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//  - leave some extra space for other uniforms\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//    (up to 54 should be safe)\n\n\t\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\t\tvar maxBones = nVertexMatrices;\n\n\t\t\t\tif ( object !== undefined && object instanceof THREE.SkinnedMesh ) {\n\n\t\t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\n\n\t\t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\n\n\t\t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\n\t\t\tvar encoding;\n\n\t\t\tif ( ! map ) {\n\n\t\t\t\tencoding = THREE.LinearEncoding;\n\n\t\t\t} else if ( map instanceof THREE.Texture ) {\n\n\t\t\t\tencoding = map.encoding;\n\n\t\t\t} else if ( map instanceof THREE.WebGLRenderTarget ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\tencoding = map.texture.encoding;\n\n\t\t\t}\n\n\t\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t\t\tif ( encoding === THREE.LinearEncoding && gammaOverrideLinear ) {\n\n\t\t\t\tencoding = THREE.GammaEncoding;\n\n\t\t\t}\n\n\t\t\treturn encoding;\n\n\t\t}\n\n\t\tthis.getParameters = function ( material, lights, fog, nClipPlanes, object ) {\n\n\t\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = allocateBones( object );\n\t\t\tvar precision = renderer.getPrecision();\n\n\t\t\tif ( material.precision !== null ) {\n\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar currentRenderTarget = renderer.getCurrentRenderTarget();\n\n\t\t\tvar parameters = {\n\n\t\t\t\tshaderID: shaderID,\n\n\t\t\t\tprecision: precision,\n\t\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n\t\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t\t\t\tmap: !! material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t\t\t\tenvMap: !! material.envMap,\n\t\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === THREE.CubeUVReflectionMapping ) || ( material.envMap.mapping === THREE.CubeUVRefractionMapping ) ),\n\t\t\t\tlightMap: !! material.lightMap,\n\t\t\t\taoMap: !! material.aoMap,\n\t\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t\t\t\tbumpMap: !! material.bumpMap,\n\t\t\t\tnormalMap: !! material.normalMap,\n\t\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\t\tspecularMap: !! material.specularMap,\n\t\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\t\tcombine: material.combine,\n\n\t\t\t\tvertexColors: material.vertexColors,\n\n\t\t\t\tfog: !! fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp: fog instanceof THREE.FogExp2,\n\n\t\t\t\tflatShading: material.shading === THREE.FlatShading,\n\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\n\t\t\t\tskinning: material.skinning,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\n\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\t\tnumClippingPlanes: nClipPlanes,\n\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\t\ttoneMapping: renderer.toneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === THREE.DoubleSide,\n\t\t\t\tflipSided: material.side === THREE.BackSide,\n\n\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n\t\t\t};\n\n\t\t\treturn parameters;\n\n\t\t};\n\n\t\tthis.getProgramCode = function ( material, parameters ) {\n\n\t\t\tvar array = [];\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tarray.push( parameters.shaderID );\n\n\t\t\t} else {\n\n\t\t\t\tarray.push( material.fragmentShader );\n\t\t\t\tarray.push( material.vertexShader );\n\n\t\t\t}\n\n\t\t\tif ( material.defines !== undefined ) {\n\n\t\t\t\tfor ( var name in material.defines ) {\n\n\t\t\t\t\tarray.push( name );\n\t\t\t\t\tarray.push( material.defines[ name ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t}\n\n\t\t\treturn array.join();\n\n\t\t};\n\n\t\tthis.acquireProgram = function ( material, parameters, code ) {\n\n\t\t\tvar program;\n\n\t\t\t// Check if code has been already compiled\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\t\tvar programInfo = programs[ p ];\n\n\t\t\t\tif ( programInfo.code === code ) {\n\n\t\t\t\t\tprogram = programInfo;\n\t\t\t\t\t++ program.usedTimes;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tprogram = new THREE.WebGLProgram( renderer, code, material, parameters );\n\t\t\t\tprograms.push( program );\n\n\t\t\t}\n\n\t\t\treturn program;\n\n\t\t};\n\n\t\tthis.releaseProgram = function( program ) {\n\n\t\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf( program );\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\t\tprograms.pop();\n\n\t\t\t\t// Free WebGL resources\n\t\t\t\tprogram.destroy();\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tthis.programs = programs;\n\n\t};\n\n\t// File:src/renderers/webgl/WebGLProperties.js\n\n\t/**\n\t* @author fordacious / fordacious.github.io\n\t*/\n\n\tTHREE.WebGLProperties = function () {\n\n\t\tvar properties = {};\n\n\t\tthis.get = function ( object ) {\n\n\t\t\tvar uuid = object.uuid;\n\t\t\tvar map = properties[ uuid ];\n\n\t\t\tif ( map === undefined ) {\n\n\t\t\t\tmap = {};\n\t\t\t\tproperties[ uuid ] = map;\n\n\t\t\t}\n\n\t\t\treturn map;\n\n\t\t};\n\n\t\tthis.delete = function ( object ) {\n\n\t\t\tdelete properties[ object.uuid ];\n\n\t\t};\n\n\t\tthis.clear = function () {\n\n\t\t\tproperties = {};\n\n\t\t};\n\n\t};\n\n\t// File:src/renderers/webgl/WebGLShader.js\n\n\tTHREE.WebGLShader = ( function () {\n\n\t\tfunction addLineNumbers( string ) {\n\n\t\t\tvar lines = string.split( '\\n' );\n\n\t\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t\t}\n\n\t\t\treturn lines.join( '\\n' );\n\n\t\t}\n\n\t\treturn function WebGLShader( gl, type, string ) {\n\n\t\t\tvar shader = gl.createShader( type );\n\n\t\t\tgl.shaderSource( shader, string );\n\t\t\tgl.compileShader( shader );\n\n\t\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\n\t\t\t}\n\n\t\t\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\n\t\t\t}\n\n\t\t\t// --enable-privileged-webgl-extension\n\t\t\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\t\treturn shader;\n\n\t\t};\n\n\t} )();\n\n\t// File:src/renderers/webgl/WebGLShadowMap.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.WebGLShadowMap = function ( _renderer, _lights, _objects, capabilities ) {\n\n\t\tvar _gl = _renderer.context,\n\t\t_state = _renderer.state,\n\t\t_frustum = new THREE.Frustum(),\n\t\t_projScreenMatrix = new THREE.Matrix4(),\n\n\t\t_lightShadows = _lights.shadows,\n\n\t\t_shadowMapSize = new THREE.Vector2(),\n\t\t_maxShadowMapSize = new THREE.Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),\n\n\t\t_lookTarget = new THREE.Vector3(),\n\t\t_lightPositionWorld = new THREE.Vector3(),\n\n\t\t_renderList = [],\n\n\t\t_MorphingFlag = 1,\n\t\t_SkinningFlag = 2,\n\n\t\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\n\t\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n\t\t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\n\t\t_materialCache = {};\n\n\t\tvar cubeDirections = [\n\t\t\tnew THREE.Vector3( 1, 0, 0 ), new THREE.Vector3( - 1, 0, 0 ), new THREE.Vector3( 0, 0, 1 ),\n\t\t\tnew THREE.Vector3( 0, 0, - 1 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tvar cubeUps = [\n\t\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ),\n\t\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 0, 1 ),\tnew THREE.Vector3( 0, 0, - 1 )\n\t\t];\n\n\t\tvar cube2DViewPorts = [\n\t\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(),\n\t\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4()\n\t\t];\n\n\t\t// init\n\n\t\tvar depthMaterialTemplate = new THREE.MeshDepthMaterial();\n\t\tdepthMaterialTemplate.depthPacking = THREE.RGBADepthPacking;\n\t\tdepthMaterialTemplate.clipping = true;\n\n\t\tvar distanceShader = THREE.ShaderLib[ \"distanceRGBA\" ];\n\t\tvar distanceUniforms = THREE.UniformsUtils.clone( distanceShader.uniforms );\n\n\t\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\n\t\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n\t\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\n\t\t\tvar depthMaterial = depthMaterialTemplate.clone();\n\t\t\tdepthMaterial.morphTargets = useMorphing;\n\t\t\tdepthMaterial.skinning = useSkinning;\n\n\t\t\t_depthMaterials[ i ] = depthMaterial;\n\n\t\t\tvar distanceMaterial = new THREE.ShaderMaterial( {\n\t\t\t\tdefines: {\n\t\t\t\t\t'USE_SHADOWMAP': ''\n\t\t\t\t},\n\t\t\t\tuniforms: distanceUniforms,\n\t\t\t\tvertexShader: distanceShader.vertexShader,\n\t\t\t\tfragmentShader: distanceShader.fragmentShader,\n\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\tskinning: useSkinning,\n\t\t\t\tclipping: true\n\t\t\t} );\n\n\t\t\t_distanceMaterials[ i ] = distanceMaterial;\n\n\t\t}\n\n\t\t//\n\n\t\tvar scope = this;\n\n\t\tthis.enabled = false;\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis.type = THREE.PCFShadowMap;\n\n\t\tthis.renderReverseSided = true;\n\t\tthis.renderSingleSided = true;\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\t\tif ( _lightShadows.length === 0 ) return;\n\n\t\t\t// Set GL state for depth map.\n\t\t\t_state.clearColor( 1, 1, 1, 1 );\n\t\t\t_state.disable( _gl.BLEND );\n\t\t\t_state.setDepthTest( true );\n\t\t\t_state.setScissorTest( false );\n\n\t\t\t// render depth map\n\n\t\t\tvar faceCount, isPointLight;\n\n\t\t\tfor ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {\n\n\t\t\t\tvar light = _lightShadows[ i ];\n\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar shadowCamera = shadow.camera;\n\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\t\t\t\t_shadowMapSize.min( _maxShadowMapSize );\n\n\t\t\t\tif ( light instanceof THREE.PointLight ) {\n\n\t\t\t\t\tfaceCount = 6;\n\t\t\t\t\tisPointLight = true;\n\n\t\t\t\t\tvar vpWidth = _shadowMapSize.x;\n\t\t\t\t\tvar vpHeight = _shadowMapSize.y;\n\n\t\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t\t\t// following orientation:\n\t\t\t\t\t//\n\t\t\t\t\t//  xzXZ\n\t\t\t\t\t//   y Y\n\t\t\t\t\t//\n\t\t\t\t\t// X - Positive x direction\n\t\t\t\t\t// x - Negative x direction\n\t\t\t\t\t// Y - Positive y direction\n\t\t\t\t\t// y - Negative y direction\n\t\t\t\t\t// Z - Positive z direction\n\t\t\t\t\t// z - Negative z direction\n\n\t\t\t\t\t// positive X\n\t\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// negative X\n\t\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// positive Z\n\t\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// negative Z\n\t\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// positive Y\n\t\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n\t\t\t\t\t// negative Y\n\t\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\n\t\t\t\t\t_shadowMapSize.x *= 4.0;\n\t\t\t\t\t_shadowMapSize.y *= 2.0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfaceCount = 1;\n\t\t\t\t\tisPointLight = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\t\tvar pars = { minFilter: THREE.NearestFilter, magFilter: THREE.NearestFilter, format: THREE.RGBAFormat };\n\n\t\t\t\t\tshadow.map = new THREE.WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n\t\t\t\t\tshadowCamera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow instanceof THREE.SpotLightShadow ) {\n\n\t\t\t\t\tshadow.update( light );\n\n\t\t\t\t}\n\n\t\t\t\tvar shadowMap = shadow.map;\n\t\t\t\tvar shadowMatrix = shadow.matrix;\n\n\t\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\n\t\t\t\t_renderer.setRenderTarget( shadowMap );\n\t\t\t\t_renderer.clear();\n\n\t\t\t\t// render shadow map for each cube face (if omni-directional) or\n\t\t\t\t// run a single pass if not\n\n\t\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\n\t\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n\t\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n\t\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n\t\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n\t\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n\t\t\t\t\t\t_state.viewport( vpDimensions );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tshadowCamera.updateMatrixWorld();\n\t\t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\n\n\t\t\t\t\t// compute shadow matrix\n\n\t\t\t\t\tshadowMatrix.set(\n\t\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t\t\t);\n\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t\t\t\t// update camera matrices and frustum\n\n\t\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\t\t\t// set object matrices & frustum culling\n\n\t\t\t\t\t_renderList.length = 0;\n\n\t\t\t\t\tprojectObject( scene, camera, shadowCamera );\n\n\t\t\t\t\t// render shadow map\n\t\t\t\t\t// render regular objects\n\n\t\t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar object = _renderList[ j ];\n\t\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( material instanceof THREE.MultiMaterial ) {\n\n\t\t\t\t\t\t\tvar groups = geometry.groups;\n\t\t\t\t\t\t\tvar materials = material.materials;\n\n\t\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n\t\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\n\t\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\n\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Restore GL state.\n\t\t\tvar clearColor = _renderer.getClearColor(),\n\t\t\tclearAlpha = _renderer.getClearAlpha();\n\t\t\t_renderer.setClearColor( clearColor, clearAlpha );\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t};\n\n\t\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tvar result = null;\n\n\t\t\tvar materialVariants = _depthMaterials;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif ( isPointLight ) {\n\n\t\t\t\tmaterialVariants = _distanceMaterials;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t\t}\n\n\t\t\tif ( ! customMaterial ) {\n\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n\t\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = object instanceof THREE.SkinnedMesh && material.skinning;\n\n\t\t\t\tvar variantIndex = 0;\n\n\t\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n\t\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\n\t\t\t\tresult = materialVariants[ variantIndex ];\n\n\t\t\t} else {\n\n\t\t\t\tresult = customMaterial;\n\n\t\t\t}\n\n\t\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\t material.clipShadows === true &&\n\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\n\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tvar side = material.side;\n\n\t\t\tif ( scope.renderSingleSided && side == THREE.DoubleSide ) {\n\n\t\t\t\tside = THREE.FrontSide;\n\n\t\t\t}\n\n\t\t\tif ( scope.renderReverseSided ) {\n\n\t\t\t\tif ( side === THREE.FrontSide ) side = THREE.BackSide;\n\t\t\t\telse if ( side === THREE.BackSide ) side = THREE.FrontSide;\n\n\t\t\t}\n\n\t\t\tresult.side = side;\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif ( isPointLight && result.uniforms.lightPos !== undefined ) {\n\n\t\t\t\tresult.uniforms.lightPos.value.copy( lightPositionWorld );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction projectObject( object, camera, shadowCamera ) {\n\n\t\t\tif ( object.visible === false ) return;\n\n\t\t\tif ( object.layers.test( camera.layers ) && ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) ) {\n\n\t\t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( material.visible === true ) {\n\n\t\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\t\t\t\t\t\t_renderList.push( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tprojectObject( children[ i ], camera, shadowCamera );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t// File:src/renderers/webgl/WebGLState.js\n\n\t/**\n\t* @author mrdoob / http://mrdoob.com/\n\t*/\n\n\tTHREE.WebGLState = function ( gl, extensions, paramThreeToGL ) {\n\n\t\tvar _this = this;\n\n\t\tthis.buffers = {\n\t\t\tcolor: new THREE.WebGLColorBuffer( gl, this ),\n\t\t\tdepth: new THREE.WebGLDepthBuffer( gl, this ),\n\t\t\tstencil: new THREE.WebGLStencilBuffer( gl, this )\n\t\t};\n\n\t\tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\t\tvar capabilities = {};\n\n\t\tvar compressedTextureFormats = null;\n\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\n\t\tvar currentLineWidth = null;\n\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\n\t\tvar currentScissorTest = null;\n\n\t\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\n\t\tvar currentScissor = new THREE.Vector4();\n\t\tvar currentViewport = new THREE.Vector4();\n\n\t\tfunction createTexture( type, target, count ) {\n\n\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\t\tvar texture = gl.createTexture();\n\n\t\t\tgl.bindTexture( type, texture );\n\t\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\t\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\n\t\t//\n\n\t\tthis.init = function () {\n\n\t\t\tthis.clearColor( 0, 0, 0, 1 );\n\t\t\tthis.clearDepth( 1 );\n\t\t\tthis.clearStencil( 0 );\n\n\t\t\tthis.enable( gl.DEPTH_TEST );\n\t\t\tthis.setDepthFunc( THREE.LessEqualDepth );\n\n\t\t\tthis.setFlipSided( false );\n\t\t\tthis.setCullFace( THREE.CullFaceBack );\n\t\t\tthis.enable( gl.CULL_FACE );\n\n\t\t\tthis.enable( gl.BLEND );\n\t\t\tthis.setBlending( THREE.NormalBlending );\n\n\t\t};\n\n\t\tthis.initAttributes = function () {\n\n\t\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\t\tnewAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.enableAttribute = function ( attribute ) {\n\n\t\t\tnewAttributes[ attribute ] = 1;\n\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t\t}\n\n\t\t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\n\t\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n\t\t\t\tattributeDivisors[ attribute ] = 0;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.enableAttributeAndDivisor = function ( attribute, meshPerAttribute, extension ) {\n\n\t\t\tnewAttributes[ attribute ] = 1;\n\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t\t}\n\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.disableUnusedAttributes = function () {\n\n\t\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.enable = function ( id ) {\n\n\t\t\tif ( capabilities[ id ] !== true ) {\n\n\t\t\t\tgl.enable( id );\n\t\t\t\tcapabilities[ id ] = true;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.disable = function ( id ) {\n\n\t\t\tif ( capabilities[ id ] !== false ) {\n\n\t\t\t\tgl.disable( id );\n\t\t\t\tcapabilities[ id ] = false;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getCompressedTextureFormats = function () {\n\n\t\t\tif ( compressedTextureFormats === null ) {\n\n\t\t\t\tcompressedTextureFormats = [];\n\n\t\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\n\n\t\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\n\t\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\n\t\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn compressedTextureFormats;\n\n\t\t};\n\n\t\tthis.setBlending = function ( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\t\tif ( blending !== THREE.NoBlending ) {\n\n\t\t\t\tthis.enable( gl.BLEND );\n\n\t\t\t} else {\n\n\t\t\t\tthis.disable( gl.BLEND );\n\t\t\t\tcurrentBlending = blending; // no blending, that is\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\tif ( blending === THREE.AdditiveBlending ) {\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( blending === THREE.SubtractiveBlending ) {\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( blending === THREE.MultiplyBlending ) {\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcurrentBlending = blending;\n\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blending === THREE.CustomBlending ) {\n\n\t\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\n\n\t\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t\t}\n\n\t\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\n\n\t\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tcurrentBlendEquation = null;\n\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\tcurrentBlendDst = null;\n\t\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t}\n\n\t\t};\n\n\t\t// TODO Deprecate\n\n\t\tthis.setColorWrite = function ( colorWrite ) {\n\n\t\t\tthis.buffers.color.setMask( colorWrite );\n\n\t\t};\n\n\t\tthis.setDepthTest = function ( depthTest ) {\n\n\t\t\tthis.buffers.depth.setTest( depthTest );\n\n\t\t};\n\n\t\tthis.setDepthWrite = function ( depthWrite ) {\n\n\t\t\tthis.buffers.depth.setMask( depthWrite );\n\n\t\t};\n\n\t\tthis.setDepthFunc = function ( depthFunc ) {\n\n\t\t\tthis.buffers.depth.setFunc( depthFunc );\n\n\t\t};\n\n\t\tthis.setStencilTest = function ( stencilTest ) {\n\n\t\t\tthis.buffers.stencil.setTest( stencilTest );\n\n\t\t};\n\n\t\tthis.setStencilWrite = function ( stencilWrite ) {\n\n\t\t\tthis.buffers.stencil.setMask( stencilWrite );\n\n\t\t};\n\n\t\tthis.setStencilFunc = function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\tthis.buffers.stencil.setFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t};\n\n\t\tthis.setStencilOp = function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\tthis.buffers.stencil.setOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t};\n\n\t\t//\n\n\t\tthis.setFlipSided = function ( flipSided ) {\n\n\t\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\t\tif ( flipSided ) {\n\n\t\t\t\t\tgl.frontFace( gl.CW );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.frontFace( gl.CCW );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setCullFace = function ( cullFace ) {\n\n\t\t\tif ( cullFace !== THREE.CullFaceNone ) {\n\n\t\t\t\tthis.enable( gl.CULL_FACE );\n\n\t\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\t\tif ( cullFace === THREE.CullFaceBack ) {\n\n\t\t\t\t\t\tgl.cullFace( gl.BACK );\n\n\t\t\t\t\t} else if ( cullFace === THREE.CullFaceFront ) {\n\n\t\t\t\t\t\tgl.cullFace( gl.FRONT );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.disable( gl.CULL_FACE );\n\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\n\t\t};\n\n\t\tthis.setLineWidth = function ( width ) {\n\n\t\t\tif ( width !== currentLineWidth ) {\n\n\t\t\t\tgl.lineWidth( width );\n\n\t\t\t\tcurrentLineWidth = width;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setPolygonOffset = function ( polygonOffset, factor, units ) {\n\n\t\t\tif ( polygonOffset ) {\n\n\t\t\t\tthis.enable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.disable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\n\t\t\treturn currentScissorTest;\n\n\t\t};\n\n\t\tthis.setScissorTest = function ( scissorTest ) {\n\n\t\t\tcurrentScissorTest = scissorTest;\n\n\t\t\tif ( scissorTest ) {\n\n\t\t\t\tthis.enable( gl.SCISSOR_TEST );\n\n\t\t\t} else {\n\n\t\t\t\tthis.disable( gl.SCISSOR_TEST );\n\n\t\t\t}\n\n\t\t};\n\n\t\t// texture\n\n\t\tthis.activeTexture = function ( webglSlot ) {\n\n\t\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.bindTexture = function ( webglType, webglTexture ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\t_this.activeTexture();\n\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture === undefined ) {\n\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t\t}\n\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.compressedTexImage2D = function () {\n\n\t\t\ttry {\n\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( error );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.texImage2D = function () {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( error );\n\n\t\t\t}\n\n\t\t};\n\n\t\t// TODO Deprecate\n\n\t\tthis.clearColor = function ( r, g, b, a ) {\n\n\t\t\tthis.buffers.color.setClear( r, g, b, a );\n\n\t\t};\n\n\t\tthis.clearDepth = function ( depth ) {\n\n\t\t\tthis.buffers.depth.setClear( depth );\n\n\t\t};\n\n\t\tthis.clearStencil = function ( stencil ) {\n\n\t\t\tthis.buffers.stencil.setClear( stencil );\n\n\t\t};\n\n\t\t//\n\n\t\tthis.scissor = function ( scissor ) {\n\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\t\tcurrentScissor.copy( scissor );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.viewport = function ( viewport ) {\n\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\t\tcurrentViewport.copy( viewport );\n\n\t\t\t}\n\n\t\t};\n\n\t\t//\n\n\t\tthis.reset = function () {\n\n\t\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcapabilities = {};\n\n\t\t\tcompressedTextureFormats = null;\n\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\n\t\t\tcurrentBlending = null;\n\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\n\t\t\tthis.buffers.color.reset();\n\t\t\tthis.buffers.depth.reset();\n\t\t\tthis.buffers.stencil.reset();\n\n\t\t};\n\n\t};\n\n\tTHREE.WebGLColorBuffer = function ( gl, state ) {\n\n\t\tvar locked = false;\n\n\t\tvar color = new THREE.Vector4();\n\t\tvar currentColorMask = null;\n\t\tvar currentColorClear = new THREE.Vector4();\n\n\t\tthis.setMask = function ( colorMask ) {\n\n\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setLocked = function ( lock ) {\n\n\t\t\tlocked = lock;\n\n\t\t};\n\n\t\tthis.setClear = function ( r, g, b, a ) {\n\n\t\t\tcolor.set( r, g, b, a );\n\n\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.reset = function () {\n\n\t\t\tlocked = false;\n\n\t\t\tcurrentColorMask = null;\n\t\t\tcurrentColorClear = new THREE.Vector4();\n\n\t\t};\n\n\t};\n\n\tTHREE.WebGLDepthBuffer = function( gl, state ) {\n\n\t\tvar locked = false;\n\n\t\tvar currentDepthMask = null;\n\t\tvar currentDepthFunc = null;\n\t\tvar currentDepthClear = null;\n\n\t\tthis.setTest = function ( depthTest ) {\n\n\t\t\tif ( depthTest ) {\n\n\t\t\t\tstate.enable( gl.DEPTH_TEST );\n\n\t\t\t} else {\n\n\t\t\t\tstate.disable( gl.DEPTH_TEST );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setMask = function( depthMask ){\n\n\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setFunc = function ( depthFunc ) {\n\n\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\tcase THREE.NeverDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase THREE.AlwaysDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase THREE.LessDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase THREE.LessEqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase THREE.EqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase THREE.GreaterEqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase THREE.GreaterDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase THREE.NotEqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setLocked = function ( lock ) {\n\n\t\t\tlocked = lock;\n\n\t\t};\n\n\t\tthis.setClear = function ( depth ) {\n\n\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\tgl.clearDepth( depth );\n\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.reset = function () {\n\n\t\t\tlocked = false;\n\n\t\t\tcurrentDepthMask = null;\n\t\t\tcurrentDepthFunc = null;\n\t\t\tcurrentDepthClear = null;\n\n\t\t};\n\n\t};\n\n\tTHREE.WebGLStencilBuffer = function ( gl, state ) {\n\n\t\tvar locked = false;\n\n\t\tvar currentStencilMask = null;\n\t\tvar currentStencilFunc = null;\n\t\tvar currentStencilRef = null;\n\t\tvar currentStencilFuncMask = null;\n\t\tvar currentStencilFail  = null;\n\t\tvar currentStencilZFail = null;\n\t\tvar currentStencilZPass = null;\n\t\tvar currentStencilClear = null;\n\n\t\tthis.setTest = function ( stencilTest ) {\n\n\t\t\tif ( stencilTest ) {\n\n\t\t\t\tstate.enable( gl.STENCIL_TEST );\n\n\t\t\t} else {\n\n\t\t\t\tstate.disable( gl.STENCIL_TEST );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setMask = function ( stencilMask ) {\n\n\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setFunc = function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\tgl.stencilFunc( stencilFunc,  stencilRef, stencilMask );\n\n\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\tcurrentStencilRef  = stencilRef;\n\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setOp\t = function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\tgl.stencilOp( stencilFail,  stencilZFail, stencilZPass );\n\n\t\t\t\tcurrentStencilFail  = stencilFail;\n\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setLocked = function ( lock ) {\n\n\t\t\tlocked = lock;\n\n\t\t};\n\n\t\tthis.setClear = function ( stencil ) {\n\n\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.reset = function () {\n\n\t\t\tlocked = false;\n\n\t\t\tcurrentStencilMask = null;\n\t\t\tcurrentStencilFunc = null;\n\t\t\tcurrentStencilRef = null;\n\t\t\tcurrentStencilFuncMask = null;\n\t\t\tcurrentStencilFail = null;\n\t\t\tcurrentStencilZFail = null;\n\t\t\tcurrentStencilZPass = null;\n\t\t\tcurrentStencilClear = null;\n\n\t\t};\n\n\t};\n\n\t// File:src/renderers/webgl/WebGLTextures.js\n\n\t/**\n\t* @author mrdoob / http://mrdoob.com/\n\t*/\n\n\tTHREE.WebGLTextures = function ( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {\n\n\t\tvar _infoMemory = info.memory;\n\t\tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );\n\n\t\t//\n\n\t\tfunction clampToMaxSize ( image, maxSize ) {\n\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t\t// Warning: Scaling through the canvas will only work with images that use\n\t\t\t\t// premultiplied alpha.\n\n\t\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\n\t\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = Math.floor( image.width * scale );\n\t\t\t\tcanvas.height = Math.floor( image.height * scale );\n\n\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\t\treturn canvas;\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction isPowerOfTwo( image ) {\n\n\t\t\treturn THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height );\n\n\t\t}\n\n\t\tfunction makePowerOfTwo( image ) {\n\n\t\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\n\n\t\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = THREE.Math.nearestPowerOfTwo( image.width );\n\t\t\t\tcanvas.height = THREE.Math.nearestPowerOfTwo( image.height );\n\n\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\t\treturn canvas;\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) return true;\n\t\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) return true;\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// Fallback filters for non-power-of-2 textures\n\n\t\tfunction filterFallback ( f ) {\n\n\t\t\tif ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {\n\n\t\t\t\treturn _gl.NEAREST;\n\n\t\t\t}\n\n\t\t\treturn _gl.LINEAR;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction onTextureDispose( event ) {\n\n\t\t\tvar texture = event.target;\n\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\t\tdeallocateTexture( texture );\n\n\t\t\t_infoMemory.textures --;\n\n\n\t\t}\n\n\t\tfunction onRenderTargetDispose( event ) {\n\n\t\t\tvar renderTarget = event.target;\n\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t\t_infoMemory.textures --;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction deallocateTexture( texture ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\n\t\t\t\t// cube texture\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\n\t\t\t} else {\n\n\t\t\t\t// 2D texture\n\n\t\t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\t// remove all webgl properties\n\t\t\tproperties.delete( texture );\n\n\t\t}\n\n\t\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\tif ( ! renderTarget ) return;\n\n\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t\t}\n\n\t\t\tif ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\n\t\t\t}\n\n\t\t\tproperties.delete( renderTarget.texture );\n\t\t\tproperties.delete( renderTarget );\n\n\t\t}\n\n\t\t//\n\n\n\n\t\tfunction setTexture2D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif ( image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\n\t\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureCube ( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.image.length === 6 ) {\n\n\t\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\n\t\t\t\t\t\t_infoMemory.textures ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n\t\t\t\t\tvar isCompressed = texture instanceof THREE.CompressedTexture;\n\t\t\t\t\tvar isDataTexture = texture.image[ 0 ] instanceof THREE.DataTexture;\n\n\t\t\t\t\tvar cubeImage = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\t\t\tglFormat = paramThreeToGL( texture.format ),\n\t\t\t\t\tglType = paramThreeToGL( texture.type );\n\n\t\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tif ( ! isCompressed ) {\n\n\t\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\n\n\t\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\" );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) {\n\n\t\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setTextureCubeDynamic ( texture, slot ) {\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureParameters ( textureType, texture, isPowerOfTwoImage ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( isPowerOfTwoImage ) {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n\t\t\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n\t\t\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension ) {\n\n\t\t\t\tif ( texture.type === THREE.FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t\t\t\tif ( texture.type === THREE.HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\t_infoMemory.textures ++;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n\t\t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\n\t\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\n\t\t\t\timage = makePowerOfTwo( image );\n\n\t\t\t}\n\n\t\t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\tglFormat = paramThreeToGL( texture.format ),\n\t\t\tglType = paramThreeToGL( texture.type );\n\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\t\tif ( texture instanceof THREE.DepthTexture ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\t\tif ( texture.type === THREE.FloatType ) {\n\n\t\t\t\t\tif ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');\n\t\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t\t} else if ( _isWebGL2 ) {\n\n\t\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t\t}\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t} else if ( texture instanceof THREE.DataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture instanceof THREE.CompressedTexture ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\n\n\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\t// Render targets\n\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\t\tfunction setupFrameBufferTexture ( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\n\t\t\tvar glType = paramThreeToGL( renderTarget.texture.type );\n\t\t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t\t}\n\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t\tfunction setupRenderBufferStorage ( renderbuffer, renderTarget ) {\n\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\t} else {\n\n\t\t\t\t// FIXME: We don't support !depth !stencil\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t\t}\n\n\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t\tfunction setupDepthTexture ( framebuffer, renderTarget ) {\n\n\t\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\t\t\tif ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\tif ( !( renderTarget.depthTexture instanceof THREE.DepthTexture ) ) {\n\n\t\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\n\t\t\t}\n\n\t\t\t// upload an empty depth texture with framebuffer size\n\t\t\tif ( !properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t\t}\n\n\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t}\n\n\t\t// Setup GL resources for a non-texture depth buffer\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\tif ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');\n\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t\t}\n\n\t\t// Set up GL resources for the render target\n\t\tfunction setupRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t_infoMemory.textures ++;\n\n\t\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n\t\t\t// Setup framebuffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t\t// Setup color buffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n\t\t\t\t}\n\n\t\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n\t\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\n\t\t\t}\n\n\t\t\t// Setup depth and stencil buffers\n\n\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\t\tvar texture = renderTarget.texture;\n\n\t\t\tif ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&\n\t\t\t\t\ttexture.minFilter !== THREE.NearestFilter &&\n\t\t\t\t\ttexture.minFilter !== THREE.LinearFilter ) {\n\n\t\t\t\tvar target = renderTarget instanceof THREE.WebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\t_gl.generateMipmap( target );\n\t\t\t\tstate.bindTexture( target, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\n\t};\n\n\t// File:src/renderers/webgl/WebGLUniforms.js\n\n\t/**\n\t *\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [renderer] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *  \tthe 'renderer' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (renderer factorizations):\n\t *\n\t * .upload( gl, seq, values, renderer )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t * .splitDynamic( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with dynamic entry and removes them from 'seq'\n\t *\n\t *\n\t * Methods of the top-level container (renderer factorizations):\n\t *\n\t * .setValue( gl, name, value )\n\t *\n\t * \t\tsets uniform with  name 'name' to 'value'\n\t *\n\t * .set( gl, obj, prop )\n\t *\n\t * \t\tsets uniform from object and property with same name than uniform\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t *\n\t * @author tschw\n\t *\n\t */\n\n\tTHREE.WebGLUniforms = ( function() { // scope\n\n\t\tvar emptyTexture = new THREE.Texture();\n\t\tvar emptyCubeTexture = new THREE.CubeTexture();\n\n\t\t// --- Base for inner nodes (including the root) ---\n\n\t\tvar UniformContainer = function() {\n\n\t\t\t\tthis.seq = [];\n\t\t\t\tthis.map = {};\n\n\t\t\t},\n\n\t\t// --- Utilities ---\n\n\t\t// Array Caches (provide typed arrays for temporary by size)\n\n\t\t\tarrayCacheF32 = [],\n\t\t\tarrayCacheI32 = [],\n\n\t\t\tuncacheTemporaryArrays = function() {\n\n\t\t\t\tarrayCacheF32.length = 0;\n\t\t\t\tarrayCacheI32.length = 0;\n\n\t\t\t},\n\n\t\t// Flattening for arrays of vectors and matrices\n\n\t\t\tflatten = function( array, nBlocks, blockSize ) {\n\n\t\t\t\tvar firstElem = array[ 0 ];\n\n\t\t\t\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t\t\t\t// unoptimized: ! isNaN( firstElem )\n\t\t\t\t// see http://jacksondunstan.com/articles/983\n\n\t\t\t\tvar n = nBlocks * blockSize,\n\t\t\t\t\tr = arrayCacheF32[ n ];\n\n\t\t\t\tif ( r === undefined ) {\n\n\t\t\t\t\tr = new Float32Array( n );\n\t\t\t\t\tarrayCacheF32[ n ] = r;\n\n\t\t\t\t}\n\n\t\t\t\tif ( nBlocks !== 0 ) {\n\n\t\t\t\t\tfirstElem.toArray( r, 0 );\n\n\t\t\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\t\t\t\toffset += blockSize;\n\t\t\t\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn r;\n\n\t\t\t},\n\n\t\t// Texture unit allocation\n\n\t\t\tallocTexUnits = function( renderer, n ) {\n\n\t\t\t\tvar r = arrayCacheI32[ n ];\n\n\t\t\t\tif ( r === undefined ) {\n\n\t\t\t\t\tr = new Int32Array( n );\n\t\t\t\t\tarrayCacheI32[ n ] = r;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\t\tr[ i ] = renderer.allocTextureUnit();\n\n\t\t\t\treturn r;\n\n\t\t\t},\n\n\t\t// --- Setters ---\n\n\t\t// Note: Defining these methods externally, because they come in a bunch\n\t\t// and this way their names minify.\n\n\t\t\t// Single scalar\n\n\t\t\tsetValue1f = function( gl, v ) { gl.uniform1f( this.addr, v ); },\n\t\t\tsetValue1i = function( gl, v ) { gl.uniform1i( this.addr, v ); },\n\n\t\t\t// Single float vector (from flat array or THREE.VectorN)\n\n\t\t\tsetValue2fv = function( gl, v ) {\n\n\t\t\t\tif ( v.x === undefined ) gl.uniform2fv( this.addr, v );\n\t\t\t\telse gl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\t},\n\n\t\t\tsetValue3fv = function( gl, v ) {\n\n\t\t\t\tif ( v.x !== undefined )\n\t\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\t\t\t\telse if ( v.r !== undefined )\n\t\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\t\t\t\telse\n\t\t\t\t\tgl.uniform3fv( this.addr, v );\n\n\t\t\t},\n\n\t\t\tsetValue4fv = function( gl, v ) {\n\n\t\t\t\tif ( v.x === undefined ) gl.uniform4fv( this.addr, v );\n\t\t\t\telse gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\t},\n\n\t\t\t// Single matrix (from flat array or MatrixN)\n\n\t\t\tsetValue2fm = function( gl, v ) {\n\n\t\t\t\tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\n\t\t\t},\n\n\t\t\tsetValue3fm = function( gl, v ) {\n\n\t\t\t\tgl.uniformMatrix3fv( this.addr, false, v.elements || v );\n\n\t\t\t},\n\n\t\t\tsetValue4fm = function( gl, v ) {\n\n\t\t\t\tgl.uniformMatrix4fv( this.addr, false, v.elements || v );\n\n\t\t\t},\n\n\t\t\t// Single texture (2D / Cube)\n\n\t\t\tsetValueT1 = function( gl, v, renderer ) {\n\n\t\t\t\tvar unit = renderer.allocTextureUnit();\n\t\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\t\trenderer.setTexture2D( v || emptyTexture, unit );\n\n\t\t\t},\n\n\t\t\tsetValueT6 = function( gl, v, renderer ) {\n\n\t\t\t\tvar unit = renderer.allocTextureUnit();\n\t\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\t\trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\n\t\t\t},\n\n\t\t\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\t\t\tsetValue2iv = function( gl, v ) { gl.uniform2iv( this.addr, v ); },\n\t\t\tsetValue3iv = function( gl, v ) { gl.uniform3iv( this.addr, v ); },\n\t\t\tsetValue4iv = function( gl, v ) { gl.uniform4iv( this.addr, v ); },\n\n\t\t\t// Helper to pick the right setter for the singular case\n\n\t\t\tgetSingularSetter = function( type ) {\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 0x1406: return setValue1f; // FLOAT\n\t\t\t\t\tcase 0x8b50: return setValue2fv; // _VEC2\n\t\t\t\t\tcase 0x8b51: return setValue3fv; // _VEC3\n\t\t\t\t\tcase 0x8b52: return setValue4fv; // _VEC4\n\n\t\t\t\t\tcase 0x8b5a: return setValue2fm; // _MAT2\n\t\t\t\t\tcase 0x8b5b: return setValue3fm; // _MAT3\n\t\t\t\t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\n\t\t\t\t\tcase 0x8b5e: return setValueT1; // SAMPLER_2D\n\t\t\t\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\n\t\t\t\t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n\t\t\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\t// Array of scalars\n\n\t\t\tsetValue1fv = function( gl, v ) { gl.uniform1fv( this.addr, v ); },\n\t\t\tsetValue1iv = function( gl, v ) { gl.uniform1iv( this.addr, v ); },\n\n\t\t\t// Array of vectors (flat or from THREE classes)\n\n\t\t\tsetValueV2a = function( gl, v ) {\n\n\t\t\t\tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\n\t\t\t},\n\n\t\t\tsetValueV3a = function( gl, v ) {\n\n\t\t\t\tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\n\t\t\t},\n\n\t\t\tsetValueV4a = function( gl, v ) {\n\n\t\t\t\tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\n\t\t\t},\n\n\t\t\t// Array of matrices (flat or from THREE clases)\n\n\t\t\tsetValueM2a = function( gl, v ) {\n\n\t\t\t\tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\n\t\t\t},\n\n\t\t\tsetValueM3a = function( gl, v ) {\n\n\t\t\t\tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\n\t\t\t},\n\n\t\t\tsetValueM4a = function( gl, v ) {\n\n\t\t\t\tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\n\t\t\t},\n\n\t\t\t// Array of textures (2D / Cube)\n\n\t\t\tsetValueT1a = function( gl, v, renderer ) {\n\n\t\t\t\tvar n = v.length,\n\t\t\t\t\tunits = allocTexUnits( renderer, n );\n\n\t\t\t\tgl.uniform1iv( this.addr, units );\n\n\t\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\t\t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetValueT6a = function( gl, v, renderer ) {\n\n\t\t\t\tvar n = v.length,\n\t\t\t\t\tunits = allocTexUnits( renderer, n );\n\n\t\t\t\tgl.uniform1iv( this.addr, units );\n\n\t\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\t\t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\n\t\t\t// Helper to pick the right setter for a pure (bottom-level) array\n\n\t\t\tgetPureArraySetter = function( type ) {\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 0x1406: return setValue1fv; // FLOAT\n\t\t\t\t\tcase 0x8b50: return setValueV2a; // _VEC2\n\t\t\t\t\tcase 0x8b51: return setValueV3a; // _VEC3\n\t\t\t\t\tcase 0x8b52: return setValueV4a; // _VEC4\n\n\t\t\t\t\tcase 0x8b5a: return setValueM2a; // _MAT2\n\t\t\t\t\tcase 0x8b5b: return setValueM3a; // _MAT3\n\t\t\t\t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\n\t\t\t\t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n\t\t\t\t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\n\t\t\t\t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n\t\t\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t// --- Uniform Classes ---\n\n\t\t\tSingleUniform = function SingleUniform( id, activeInfo, addr ) {\n\n\t\t\t\tthis.id = id;\n\t\t\t\tthis.addr = addr;\n\t\t\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t\t\t// this.path = activeInfo.name; // DEBUG\n\n\t\t\t},\n\n\t\t\tPureArrayUniform = function( id, activeInfo, addr ) {\n\n\t\t\t\tthis.id = id;\n\t\t\t\tthis.addr = addr;\n\t\t\t\tthis.size = activeInfo.size;\n\t\t\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t\t\t// this.path = activeInfo.name; // DEBUG\n\n\t\t\t},\n\n\t\t\tStructuredUniform = function( id ) {\n\n\t\t\t\tthis.id = id;\n\n\t\t\t\tUniformContainer.call( this ); // mix-in\n\n\t\t\t};\n\n\t\tStructuredUniform.prototype.setValue = function( gl, value ) {\n\n\t\t\t// Note: Don't need an extra 'renderer' parameter, since samplers\n\t\t\t// are not allowed in structured uniforms.\n\n\t\t\tvar seq = this.seq;\n\n\t\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\t\tvar u = seq[ i ];\n\t\t\t\tu.setValue( gl, value[ u.id ] );\n\n\t\t\t}\n\n\t\t};\n\n\t\t// --- Top-level ---\n\n\t\t// Parser - builds up the property tree from the path strings\n\n\t\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g,\n\t\t\t// extracts\n\t\t\t// \t- the identifier (member name or array index)\n\t\t\t//  - followed by an optional right bracket (found when array index)\n\t\t\t//  - followed by an optional left bracket or dot (type of subscript)\n\t\t\t//\n\t\t\t// Note: These portions can be read in a non-overlapping fashion and\n\t\t\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t\t\t// in the uniform names.\n\n\t\t\taddUniform = function( container, uniformObject ) {\n\n\t\t\t\tcontainer.seq.push( uniformObject );\n\t\t\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n\t\t\t},\n\n\t\t\tparseUniform = function( activeInfo, addr, container ) {\n\n\t\t\t\tvar path = activeInfo.name,\n\t\t\t\t\tpathLength = path.length;\n\n\t\t\t\t// reset RegExp object, because of the early exit of a previous run\n\t\t\t\tRePathPart.lastIndex = 0;\n\n\t\t\t\tfor (; ;) {\n\n\t\t\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\t\t\tmatchEnd = RePathPart.lastIndex,\n\n\t\t\t\t\t\tid = match[ 1 ],\n\t\t\t\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\t\t\t\tsubscript = match[ 3 ];\n\n\t\t\t\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\t\t\t\tif ( subscript === undefined ||\n\t\t\t\t\t\t\tsubscript === '[' && matchEnd + 2 === pathLength ) {\n\t\t\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\t\t\t\tvar map = container.map,\n\t\t\t\t\t\t\tnext = map[ id ];\n\n\t\t\t\t\t\tif ( next === undefined ) {\n\n\t\t\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\t\t\taddUniform( container, next );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontainer = next;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t// Root Container\n\n\t\t\tWebGLUniforms = function WebGLUniforms( gl, program, renderer ) {\n\n\t\t\t\tUniformContainer.call( this );\n\n\t\t\t\tthis.renderer = renderer;\n\n\t\t\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n\t\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\t\t\tpath = info.name,\n\t\t\t\t\t\taddr = gl.getUniformLocation( program, path );\n\n\t\t\t\t\tparseUniform( info, addr, this );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\n\t\tWebGLUniforms.prototype.setValue = function( gl, name, value ) {\n\n\t\t\tvar u = this.map[ name ];\n\n\t\t\tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\n\t\t};\n\n\t\tWebGLUniforms.prototype.set = function( gl, object, name ) {\n\n\t\t\tvar u = this.map[ name ];\n\n\t\t\tif ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );\n\n\t\t};\n\n\t\tWebGLUniforms.prototype.setOptional = function( gl, object, name ) {\n\n\t\t\tvar v = object[ name ];\n\n\t\t\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n\t\t};\n\n\n\t\t// Static interface\n\n\t\tWebGLUniforms.upload = function( gl, seq, values, renderer ) {\n\n\t\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\t\tvar u = seq[ i ],\n\t\t\t\t\tv = values[ u.id ];\n\n\t\t\t\tif ( v.needsUpdate !== false ) {\n\t\t\t\t\t// note: always updating when .needsUpdate is undefined\n\n\t\t\t\t\tu.setValue( gl, v.value, renderer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tWebGLUniforms.seqWithValue = function( seq, values ) {\n\n\t\t\tvar r = [];\n\n\t\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\t\tvar u = seq[ i ];\n\t\t\t\tif ( u.id in values ) r.push( u );\n\n\t\t\t}\n\n\t\t\treturn r;\n\n\t\t};\n\n\t\tWebGLUniforms.splitDynamic = function( seq, values ) {\n\n\t\t\tvar r = null,\n\t\t\t\tn = seq.length,\n\t\t\t\tw = 0;\n\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\t\tvar u = seq[ i ],\n\t\t\t\t\tv = values[ u.id ];\n\n\t\t\t\tif ( v && v.dynamic === true ) {\n\n\t\t\t\t\tif ( r === null ) r = [];\n\t\t\t\t\tr.push( u );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// in-place compact 'seq', removing the matches\n\t\t\t\t\tif ( w < i ) seq[ w ] = u;\n\t\t\t\t\t++ w;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( w < n ) seq.length = w;\n\n\t\t\treturn r;\n\n\t\t};\n\n\t\tWebGLUniforms.evalDynamic = function( seq, values, object, camera ) {\n\n\t\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\t\tvar v = values[ seq[ i ].id ],\n\t\t\t\t\tf = v.onUpdateCallback;\n\n\t\t\t\tif ( f !== undefined ) f.call( v, object, camera );\n\n\t\t\t}\n\n\t\t};\n\n\t\treturn WebGLUniforms;\n\n\t} )();\n\n\t// File:src/renderers/webgl/plugins/LensFlarePlugin.js\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.LensFlarePlugin = function ( renderer, flares ) {\n\n\t\tvar gl = renderer.context;\n\t\tvar state = renderer.state;\n\n\t\tvar vertexBuffer, elementBuffer;\n\t\tvar shader, program, attributes, uniforms;\n\n\t\tvar tempTexture, occlusionTexture;\n\n\t\tfunction init() {\n\n\t\t\tvar vertices = new Float32Array( [\n\t\t\t\t- 1, - 1,  0, 0,\n\t\t\t\t 1, - 1,  1, 0,\n\t\t\t\t 1,  1,  1, 1,\n\t\t\t\t- 1,  1,  0, 1\n\t\t\t] );\n\n\t\t\tvar faces = new Uint16Array( [\n\t\t\t\t0, 1, 2,\n\t\t\t\t0, 2, 3\n\t\t\t] );\n\n\t\t\t// buffers\n\n\t\t\tvertexBuffer     = gl.createBuffer();\n\t\t\telementBuffer    = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\t\t// textures\n\n\t\t\ttempTexture      = gl.createTexture();\n\t\t\tocclusionTexture = gl.createTexture();\n\n\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\t\tshader = {\n\n\t\t\t\tvertexShader: [\n\n\t\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\t\"uniform vec3 screenPosition;\",\n\t\t\t\t\t\"uniform vec2 scale;\",\n\t\t\t\t\t\"uniform float rotation;\",\n\n\t\t\t\t\t\"uniform sampler2D occlusionMap;\",\n\n\t\t\t\t\t\"attribute vec2 position;\",\n\t\t\t\t\t\"attribute vec2 uv;\",\n\n\t\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\t\"varying float vVisibility;\",\n\n\t\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t\t\"vUV = uv;\",\n\n\t\t\t\t\t\t\"vec2 pos = position;\",\n\n\t\t\t\t\t\t\"if ( renderType == 2 ) {\",\n\n\t\t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\n\n\t\t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\n\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\n\t\t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\n\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\n\n\t\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n\t\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\n\t\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\n\t\t\t\t\t\"}\"\n\n\t\t\t\t].join( \"\\n\" ),\n\n\t\t\t\tfragmentShader: [\n\n\t\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\t\"uniform sampler2D map;\",\n\t\t\t\t\t\"uniform float opacity;\",\n\t\t\t\t\t\"uniform vec3 color;\",\n\n\t\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\t\"varying float vVisibility;\",\n\n\t\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t\t// pink square\n\n\t\t\t\t\t\t\"if ( renderType == 0 ) {\",\n\n\t\t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\n\n\t\t\t\t\t\t// restore\n\n\t\t\t\t\t\t\"} else if ( renderType == 1 ) {\",\n\n\t\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\n\t\t\t\t\t\t// flare\n\n\t\t\t\t\t\t\"} else {\",\n\n\t\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n\t\t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\n\t\t\t\t\t\t\t\"gl_FragColor = texture;\",\n\t\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\n\t\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\"}\"\n\n\t\t\t\t].join( \"\\n\" )\n\n\t\t\t};\n\n\t\t\tprogram = createProgram( shader );\n\n\t\t\tattributes = {\n\t\t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\n\t\t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\n\t\t\t};\n\n\t\t\tuniforms = {\n\t\t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\n\t\t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\n\t\t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\n\t\t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\n\t\t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\n\t\t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\n\t\t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\n\t\t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\n\t\t\t};\n\n\t\t}\n\n\t\t/*\n\t\t * Render lens flares\n\t\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n\t\t *         reads these back and calculates occlusion.\n\t\t */\n\n\t\tthis.render = function ( scene, camera, viewport ) {\n\n\t\t\tif ( flares.length === 0 ) return;\n\n\t\t\tvar tempPosition = new THREE.Vector3();\n\n\t\t\tvar invAspect = viewport.w / viewport.z,\n\t\t\t\thalfViewportWidth = viewport.z * 0.5,\n\t\t\t\thalfViewportHeight = viewport.w * 0.5;\n\n\t\t\tvar size = 16 / viewport.w,\n\t\t\t\tscale = new THREE.Vector2( size * invAspect, size );\n\n\t\t\tvar screenPosition = new THREE.Vector3( 1, 1, 0 ),\n\t\t\t\tscreenPositionPixels = new THREE.Vector2( 1, 1 );\n\n\t\t\tvar validArea = new THREE.Box2();\n\n\t\t\tvalidArea.min.set( 0, 0 );\n\t\t\tvalidArea.max.set( viewport.z - 16, viewport.w - 16 );\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tinit();\n\n\t\t\t}\n\n\t\t\tgl.useProgram( program );\n\n\t\t\tstate.initAttributes();\n\t\t\tstate.enableAttribute( attributes.vertex );\n\t\t\tstate.enableAttribute( attributes.uv );\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\t// loop through all lens flares to update their occlusion and positions\n\t\t\t// setup gl and common used attribs/uniforms\n\n\t\t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n\t\t\tgl.uniform1i( uniforms.map, 1 );\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\t\tstate.disable( gl.CULL_FACE );\n\t\t\tstate.setDepthWrite( false );\n\n\t\t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\n\t\t\t\tsize = 16 / viewport.w;\n\t\t\t\tscale.set( size * invAspect, size );\n\n\t\t\t\t// calc object screen position\n\n\t\t\t\tvar flare = flares[ i ];\n\n\t\t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\n\n\t\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n\t\t\t\ttempPosition.applyProjection( camera.projectionMatrix );\n\n\t\t\t\t// setup arrays for gl programs\n\n\t\t\t\tscreenPosition.copy( tempPosition );\n\n\t\t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n\t\t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\n\t\t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\n\n\t\t\t\t// screen cull\n\n\t\t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\n\n\t\t\t\t\t// save current RGB to temp texture\n\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n\t\t\t\t\t// render pink quad\n\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\n\t\t\t\t\tstate.disable( gl.BLEND );\n\t\t\t\t\tstate.enable( gl.DEPTH_TEST );\n\n\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t\t// copy result to occlusionMap\n\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n\t\t\t\t\t// restore graphics\n\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n\t\t\t\t\tstate.disable( gl.DEPTH_TEST );\n\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t\t// update object positions\n\n\t\t\t\t\tflare.positionScreen.copy( screenPosition );\n\n\t\t\t\t\tif ( flare.customUpdateCallback ) {\n\n\t\t\t\t\t\tflare.customUpdateCallback( flare );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tflare.updateLensFlares();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// render flares\n\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n\t\t\t\t\tstate.enable( gl.BLEND );\n\n\t\t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\n\t\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\n\t\t\t\t\t\t\tscreenPosition.x = sprite.x;\n\t\t\t\t\t\t\tscreenPosition.y = sprite.y;\n\t\t\t\t\t\t\tscreenPosition.z = sprite.z;\n\n\t\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\n\n\t\t\t\t\t\t\tscale.x = size * invAspect;\n\t\t\t\t\t\t\tscale.y = size;\n\n\t\t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t\t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\n\t\t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n\t\t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\n\t\t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n\t\t\t\t\t\t\trenderer.setTexture2D( sprite.texture, 1 );\n\n\t\t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restore gl\n\n\t\t\tstate.enable( gl.CULL_FACE );\n\t\t\tstate.enable( gl.DEPTH_TEST );\n\t\t\tstate.setDepthWrite( true );\n\n\t\t\trenderer.resetGLState();\n\n\t\t};\n\n\t\tfunction createProgram ( shader ) {\n\n\t\t\tvar program = gl.createProgram();\n\n\t\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\n\t\t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n\n\t\t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n\t\t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\n\t\t\tgl.compileShader( fragmentShader );\n\t\t\tgl.compileShader( vertexShader );\n\n\t\t\tgl.attachShader( program, fragmentShader );\n\t\t\tgl.attachShader( program, vertexShader );\n\n\t\t\tgl.linkProgram( program );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t};\n\n\t// File:src/renderers/webgl/plugins/SpritePlugin.js\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.SpritePlugin = function ( renderer, sprites ) {\n\n\t\tvar gl = renderer.context;\n\t\tvar state = renderer.state;\n\n\t\tvar vertexBuffer, elementBuffer;\n\t\tvar program, attributes, uniforms;\n\n\t\tvar texture;\n\n\t\t// decompose matrixWorld\n\n\t\tvar spritePosition = new THREE.Vector3();\n\t\tvar spriteRotation = new THREE.Quaternion();\n\t\tvar spriteScale = new THREE.Vector3();\n\n\t\tfunction init() {\n\n\t\t\tvar vertices = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5,  0, 0,\n\t\t\t\t  0.5, - 0.5,  1, 0,\n\t\t\t\t  0.5,   0.5,  1, 1,\n\t\t\t\t- 0.5,   0.5,  0, 1\n\t\t\t] );\n\n\t\t\tvar faces = new Uint16Array( [\n\t\t\t\t0, 1, 2,\n\t\t\t\t0, 2, 3\n\t\t\t] );\n\n\t\t\tvertexBuffer  = gl.createBuffer();\n\t\t\telementBuffer = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\t\tprogram = createProgram();\n\n\t\t\tattributes = {\n\t\t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\n\t\t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\n\t\t\t};\n\n\t\t\tuniforms = {\n\t\t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\n\t\t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\n\n\t\t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\n\t\t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\n\n\t\t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\n\t\t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\n\t\t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\n\n\t\t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\n\t\t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\n\n\t\t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\n\t\t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\n\t\t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\n\t\t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\n\t\t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\n\n\t\t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\n\t\t\t};\n\n\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\tcanvas.width = 8;\n\t\t\tcanvas.height = 8;\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.fillStyle = 'white';\n\t\t\tcontext.fillRect( 0, 0, 8, 8 );\n\n\t\t\ttexture = new THREE.Texture( canvas );\n\t\t\ttexture.needsUpdate = true;\n\n\t\t}\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( sprites.length === 0 ) return;\n\n\t\t\t// setup gl\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tinit();\n\n\t\t\t}\n\n\t\t\tgl.useProgram( program );\n\n\t\t\tstate.initAttributes();\n\t\t\tstate.enableAttribute( attributes.position );\n\t\t\tstate.enableAttribute( attributes.uv );\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\tstate.disable( gl.CULL_FACE );\n\t\t\tstate.enable( gl.BLEND );\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\tgl.uniform1i( uniforms.map, 0 );\n\n\t\t\tvar oldFogType = 0;\n\t\t\tvar sceneFogType = 0;\n\t\t\tvar fog = scene.fog;\n\n\t\t\tif ( fog ) {\n\n\t\t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\n\t\t\t\tif ( fog instanceof THREE.Fog ) {\n\n\t\t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n\t\t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n\t\t\t\t\toldFogType = 1;\n\t\t\t\t\tsceneFogType = 1;\n\n\t\t\t\t} else if ( fog instanceof THREE.FogExp2 ) {\n\n\t\t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n\t\t\t\t\toldFogType = 2;\n\t\t\t\t\tsceneFogType = 2;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 0 );\n\t\t\t\toldFogType = 0;\n\t\t\t\tsceneFogType = 0;\n\n\t\t\t}\n\n\n\t\t\t// update positions and sort\n\n\t\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\t\tvar sprite = sprites[ i ];\n\n\t\t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n\t\t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\n\t\t\t}\n\n\t\t\tsprites.sort( painterSortStable );\n\n\t\t\t// render all sprites\n\n\t\t\tvar scale = [];\n\n\t\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\t\tvar sprite = sprites[ i ];\n\t\t\t\tvar material = sprite.material;\n\n\t\t\t\tif ( material.visible === false ) continue;\n\n\t\t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n\t\t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\n\t\t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\n\t\t\t\tscale[ 0 ] = spriteScale.x;\n\t\t\t\tscale[ 1 ] = spriteScale.y;\n\n\t\t\t\tvar fogType = 0;\n\n\t\t\t\tif ( scene.fog && material.fog ) {\n\n\t\t\t\t\tfogType = sceneFogType;\n\n\t\t\t\t}\n\n\t\t\t\tif ( oldFogType !== fogType ) {\n\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n\t\t\t\t\toldFogType = fogType;\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.map !== null ) {\n\n\t\t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n\t\t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n\t\t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\n\t\t\t\t}\n\n\t\t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n\t\t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\n\t\t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n\t\t\t\tgl.uniform2fv( uniforms.scale, scale );\n\n\t\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n\t\t\t\tstate.setDepthTest( material.depthTest );\n\t\t\t\tstate.setDepthWrite( material.depthWrite );\n\n\t\t\t\tif ( material.map ) {\n\n\t\t\t\t\trenderer.setTexture2D( material.map, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setTexture2D( texture, 0 );\n\n\t\t\t\t}\n\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t\t}\n\n\t\t\t// restore gl\n\n\t\t\tstate.enable( gl.CULL_FACE );\n\n\t\t\trenderer.resetGLState();\n\n\t\t};\n\n\t\tfunction createProgram () {\n\n\t\t\tvar program = gl.createProgram();\n\n\t\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\n\t\t\tgl.shaderSource( vertexShader, [\n\n\t\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform float rotation;',\n\t\t\t\t'uniform vec2 scale;',\n\t\t\t\t'uniform vec2 uvOffset;',\n\t\t\t\t'uniform vec2 uvScale;',\n\n\t\t\t\t'attribute vec2 position;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'varying vec2 vUV;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t\t'vUV = uvOffset + uv * uvScale;',\n\n\t\t\t\t\t'vec2 alignedPosition = position * scale;',\n\n\t\t\t\t\t'vec2 rotatedPosition;',\n\t\t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n\t\t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\n\t\t\t\t\t'vec4 finalPosition;',\n\n\t\t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n\t\t\t\t\t'finalPosition.xy += rotatedPosition;',\n\t\t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\n\n\t\t\t\t\t'gl_Position = finalPosition;',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' ) );\n\n\t\t\tgl.shaderSource( fragmentShader, [\n\n\t\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n\t\t\t\t'uniform vec3 color;',\n\t\t\t\t'uniform sampler2D map;',\n\t\t\t\t'uniform float opacity;',\n\n\t\t\t\t'uniform int fogType;',\n\t\t\t\t'uniform vec3 fogColor;',\n\t\t\t\t'uniform float fogDensity;',\n\t\t\t\t'uniform float fogNear;',\n\t\t\t\t'uniform float fogFar;',\n\t\t\t\t'uniform float alphaTest;',\n\n\t\t\t\t'varying vec2 vUV;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t\t'vec4 texture = texture2D( map, vUV );',\n\n\t\t\t\t\t'if ( texture.a < alphaTest ) discard;',\n\n\t\t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\n\t\t\t\t\t'if ( fogType > 0 ) {',\n\n\t\t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\n\t\t\t\t\t\t'float fogFactor = 0.0;',\n\n\t\t\t\t\t\t'if ( fogType == 1 ) {',\n\n\t\t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\n\n\t\t\t\t\t\t'} else {',\n\n\t\t\t\t\t\t\t'const float LOG2 = 1.442695;',\n\t\t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\n\t\t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\n\t\t\t\t\t\t'}',\n\n\t\t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\n\n\t\t\t\t\t'}',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' ) );\n\n\t\t\tgl.compileShader( vertexShader );\n\t\t\tgl.compileShader( fragmentShader );\n\n\t\t\tgl.attachShader( program, vertexShader );\n\t\t\tgl.attachShader( program, fragmentShader );\n\n\t\t\tgl.linkProgram( program );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\tfunction painterSortStable ( a, b ) {\n\n\t\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t\t} else if ( a.z !== b.z ) {\n\n\t\t\t\treturn b.z - a.z;\n\n\t\t\t} else {\n\n\t\t\t\treturn b.id - a.id;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t// File:src/Three.Legacy.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tObject.assign( THREE, {\n\t\tFace4: function ( a, b, c, d, normal, color, materialIndex ) {\n\t\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\t\treturn new THREE.Face3( a, b, c, normal, color, materialIndex );\n\t\t},\n\t\tLineStrip: 0,\n\t\tLinePieces: 1,\n\t\tMeshFaceMaterial: THREE.MultiMaterial,\n\t\tPointCloud: function ( geometry, material ) {\n\t\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\t\treturn new THREE.Points( geometry, material );\n\t\t},\n\t\tParticle: THREE.Sprite,\n\t\tParticleSystem: function ( geometry, material ) {\n\t\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\t\treturn new THREE.Points( geometry, material );\n\t\t},\n\t\tPointCloudMaterial: function ( parameters ) {\n\t\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\t\treturn new THREE.PointsMaterial( parameters );\n\t\t},\n\t\tParticleBasicMaterial: function ( parameters ) {\n\t\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\t\treturn new THREE.PointsMaterial( parameters );\n\t\t},\n\t\tParticleSystemMaterial: function ( parameters ) {\n\t\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\t\treturn new THREE.PointsMaterial( parameters );\n\t\t},\n\t\tVertex: function ( x, y, z ) {\n\t\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\t\treturn new THREE.Vector3( x, y, z );\n\t\t}\n\t} );\n\n\t//\n\n\tObject.assign( THREE.Box2.prototype, {\n\t\tempty: function () {\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\t\t}\n\t} );\n\n\tObject.assign( THREE.Box3.prototype, {\n\t\tempty: function () {\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\t\t}\n\t} );\n\n\tObject.assign( THREE.Matrix3.prototype, {\n\t\tmultiplyVector3: function ( vector ) {\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix3( this );\n\t\t},\n\t\tmultiplyVector3Array: function ( a ) {\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t\t\treturn this.applyToVector3Array( a );\n\t\t}\n\t} );\n\n\tObject.assign( THREE.Matrix4.prototype, {\n\t\textractPosition: function ( m ) {\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\t\treturn this.copyPosition( m );\n\t\t},\n\t\tsetRotationFromQuaternion: function ( q ) {\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\t\treturn this.makeRotationFromQuaternion( q );\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\n\t\t\treturn vector.applyProjection( this );\n\t\t},\n\t\tmultiplyVector4: function ( vector ) {\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\t\t},\n\t\tmultiplyVector3Array: function ( a ) {\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t\t\treturn this.applyToVector3Array( a );\n\t\t},\n\t\trotateAxis: function ( v ) {\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\t\tv.transformDirection( this );\n\t\t},\n\t\tcrossVector: function ( vector ) {\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\t\t},\n\t\ttranslate: function ( v ) {\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\t\t},\n\t\trotateX: function ( angle ) {\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\t\t},\n\t\trotateY: function ( angle ) {\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\t\t},\n\t\trotateZ: function ( angle ) {\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\t\t},\n\t\trotateByAxis: function ( axis, angle ) {\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\t\t}\n\t} );\n\n\tObject.assign( THREE.Plane.prototype, {\n\t\tisIntersectionLine: function ( line ) {\n\t\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\t\treturn this.intersectsLine( line );\n\t\t}\n\t} );\n\n\tObject.assign( THREE.Quaternion.prototype, {\n\t\tmultiplyVector3: function ( vector ) {\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\t\treturn vector.applyQuaternion( this );\n\t\t}\n\t} );\n\n\tObject.assign( THREE.Ray.prototype, {\n\t\tisIntersectionBox: function ( box ) {\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\t\t},\n\t\tisIntersectionPlane: function ( plane ) {\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\t\treturn this.intersectsPlane( plane );\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\t\t}\n\t} );\n\n\tObject.assign( THREE.Vector3.prototype, {\n\t\tsetEulerFromRotationMatrix: function () {\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\t\t},\n\t\tsetEulerFromQuaternion: function () {\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\t\t},\n\t\tgetPositionFromMatrix: function ( m ) {\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\t\treturn this.setFromMatrixPosition( m );\n\t\t},\n\t\tgetScaleFromMatrix: function ( m ) {\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\t\treturn this.setFromMatrixScale( m );\n\t\t},\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\t\treturn this.setFromMatrixColumn( matrix, index );\n\t\t}\n\t} );\n\n\t//\n\n\tObject.assign( THREE.Object3D.prototype, {\n\t\tgetChildByName: function ( name ) {\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\t\treturn this.getObjectByName( name );\n\t\t},\n\t\trenderDepth: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\t\t},\n\t\ttranslate: function ( distance, axis ) {\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\t\treturn this.translateOnAxis( axis, distance );\n\t\t}\n\t} );\n\n\tObject.defineProperties( THREE.Object3D.prototype, {\n\t\teulerOrder: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\treturn this.rotation.order;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\tthis.rotation.order = value;\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t\t\t}\n\t\t}\n\t} );\n\n\tObject.defineProperties( THREE.LOD.prototype, {\n\t\tobjects: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\t\treturn this.levels;\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tTHREE.PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\t\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\t\tthis.setFocalLength( focalLength );\n\n\t};\n\n\t//\n\n\tObject.defineProperties( THREE.Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\t\tthis.shadow.camera.fov = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\t\tthis.shadow.camera.left = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\t\tthis.shadow.camera.right = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\t\tthis.shadow.camera.top = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\t\tthis.shadow.camera.bottom = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\t\tthis.shadow.camera.near = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\t\tthis.shadow.camera.far = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\t\tthis.shadow.bias = value;\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\t\tthis.shadow.mapSize.width = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\t\tthis.shadow.mapSize.height = value;\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.defineProperties( THREE.BufferAttribute.prototype, {\n\t\tlength: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n\t\t\t\treturn this.array.length;\n\t\t\t}\n\t\t}\n\t} );\n\n\tObject.assign( THREE.BufferGeometry.prototype, {\n\t\taddIndex: function ( index ) {\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\t\tthis.setIndex( index );\n\t\t},\n\t\taddDrawCall: function ( start, count, indexOffset ) {\n\t\t\tif ( indexOffset !== undefined ) {\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\t\t\t}\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\t\tthis.addGroup( start, count );\n\t\t},\n\t\tclearDrawCalls: function () {\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\t\tthis.clearGroups();\n\t\t},\n\t\tcomputeTangents: function () {\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\t\t},\n\t\tcomputeOffsets: function () {\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\t\t}\n\t} );\n\n\tObject.defineProperties( THREE.BufferGeometry.prototype, {\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.defineProperties( THREE.Material.prototype, {\n\t\twrapAround: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t\t\t}\n\t\t},\n\t\twrapRGB: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\n\t\t\t\treturn new THREE.Color();\n\t\t\t}\n\t\t}\n\t} );\n\n\tObject.defineProperties( THREE.MeshPhongMaterial.prototype, {\n\t\tmetal: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\t\t\t}\n\t\t}\n\t} );\n\n\tObject.defineProperties( THREE.ShaderMaterial.prototype, {\n\t\tderivatives: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\treturn this.extensions.derivatives;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\tthis.extensions.derivatives = value;\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tTHREE.EventDispatcher.prototype = Object.assign( Object.create( {\n\n\t\t// Note: Extra base ensures these properties are not 'assign'ed.\n\n\t\tconstructor: THREE.EventDispatcher,\n\n\t\tapply: function ( target ) {\n\n\t\t\tconsole.warn( \"THREE.EventDispatcher: .apply is deprecated, \" +\n\t\t\t\t\t\"just inherit or Object.assign the prototype to mix-in.\" );\n\n\t\t\tObject.assign( target, this );\n\n\t\t}\n\n\t} ), THREE.EventDispatcher.prototype );\n\n\t//\n\n\tObject.assign( THREE.WebGLRenderer.prototype, {\n\t\tsupportsFloatTextures: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\n\t\t},\n\t\tsupportsHalfFloatTextures: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\t\t},\n\t\tsupportsStandardDerivatives: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\t\t},\n\t\tsupportsCompressedTextureS3TC: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t\t},\n\t\tsupportsCompressedTexturePVRTC: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\t\t},\n\t\tsupportsBlendMinMax: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\t\t},\n\t\tsupportsVertexTextures: function () {\n\t\t\treturn this.capabilities.vertexTextures;\n\t\t},\n\t\tsupportsInstancedArrays: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\t\t},\n\t\tenableScissorTest: function ( boolean ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\t\tthis.setScissorTest( boolean );\n\t\t},\n\t\tinitMaterial: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\t\t},\n\t\taddPrePlugin: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\t\t},\n\t\taddPostPlugin: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\t\t},\n\t\tupdateShadowMap: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\t\t}\n\t} );\n\n\tObject.defineProperties( THREE.WebGLRenderer.prototype, {\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.enabled;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\t\tthis.shadowMap.enabled = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.type;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\t\tthis.shadowMap.type = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.cullFace;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\n\t\t\t\tthis.shadowMap.cullFace = value;\n\t\t\t}\n\t\t}\n\t} );\n\n\tObject.defineProperties( THREE.WebGLShadowMap.prototype, {\n\t\tcullFace: {\n\t\t\tget: function () {\n\t\t\t\treturn this.renderReverseSided ? THREE.CullFaceFront : THREE.CullFaceBack;\n\t\t\t},\n\t\t\tset: function ( cullFace ) {\n\t\t\t\tvar value = ( cullFace !== THREE.CullFaceBack );\n\t\t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\n\t\t\t\tthis.renderReverseSided = value;\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.defineProperties( THREE.WebGLRenderTarget.prototype, {\n\t\twrapS: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\treturn this.texture.wrapS;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\tthis.texture.wrapS = value;\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\treturn this.texture.wrapT;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\tthis.texture.wrapT = value;\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\treturn this.texture.magFilter;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\tthis.texture.magFilter = value;\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\treturn this.texture.minFilter;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\tthis.texture.minFilter = value;\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\treturn this.texture.anisotropy;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\tthis.texture.anisotropy = value;\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\treturn this.texture.offset;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\tthis.texture.offset = value;\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\treturn this.texture.repeat;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\tthis.texture.repeat = value;\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\treturn this.texture.format;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\tthis.texture.format = value;\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\treturn this.texture.type;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\tthis.texture.type = value;\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\treturn this.texture.generateMipmaps;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\tthis.texture.generateMipmaps = value;\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.assign( THREE.Audio.prototype, {\n\t\tload: function ( file ) {\n\t\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );\n\t\t\tvar scope = this;\n\t\t\tvar audioLoader = new THREE.AudioLoader();\n\t\t\taudioLoader.load( file, function ( buffer ) {\n\t\t\t\tscope.setBuffer( buffer );\n\t\t\t} );\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\tObject.assign( THREE.AudioAnalyser.prototype, {\n\t\tgetData: function ( file ) {\n\t\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\t\treturn this.getFrequencyData();\n\t\t}\n\t} );\n\n\t//\n\n\tTHREE.GeometryUtils = {\n\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\n\t\t\tvar matrix;\n\n\t\t\tif ( geometry2 instanceof THREE.Mesh ) {\n\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t\t}\n\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t\t},\n\n\t\tcenter: function ( geometry ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\t\treturn geometry.center();\n\n\t\t}\n\n\t};\n\n\tTHREE.ImageUtils = {\n\n\t\tcrossOrigin: undefined,\n\n\t\tloadTexture: function ( url, mapping, onLoad, onError ) {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\t\tvar loader = new THREE.TextureLoader();\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\t\tvar loader = new THREE.CubeTextureLoader();\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tloadCompressedTexture: function () {\n\n\t\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t\t},\n\n\t\tloadCompressedTextureCube: function () {\n\n\t\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tTHREE.Projector = function () {\n\n\t\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\n\t\tthis.projectVector = function ( vector, camera ) {\n\n\t\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\t\tvector.project( camera );\n\n\t\t};\n\n\t\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\t\tvector.unproject( camera );\n\n\t\t};\n\n\t\tthis.pickingRay = function ( vector, camera ) {\n\n\t\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t\t};\n\n\t};\n\n\t//\n\n\tTHREE.CanvasRenderer = function () {\n\n\t\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\n\t\tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\tthis.clear = function () {};\n\t\tthis.render = function () {};\n\t\tthis.setClearColor = function () {};\n\t\tthis.setSize = function () {};\n\n\t};\n\n\t// File:src/extras/CurveUtils.js\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tTHREE.CurveUtils = {\n\n\t\ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\n\n\t\t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\n\n\t\t},\n\n\t\t// Puay Bing, thanks for helping with this derivative!\n\n\t\ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\n\n\t\t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\n\t\t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\n\t\t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\n\t\t\t\t3 * t * t * p3;\n\n\t\t},\n\n\t\ttangentSpline: function ( t, p0, p1, p2, p3 ) {\n\n\t\t\t// To check if my formulas are correct\n\n\t\t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\n\t\t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\n\t\t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\n\t\t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\n\n\t\t\treturn h00 + h10 + h01 + h11;\n\n\t\t},\n\n\t\t// Catmull-Rom\n\n\t\tinterpolate: function( p0, p1, p2, p3, t ) {\n\n\t\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\t\tvar t2 = t * t;\n\t\t\tvar t3 = t * t2;\n\t\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t\t}\n\n\t};\n\n\t// File:src/extras/SceneUtils.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.SceneUtils = {\n\n\t\tcreateMultiMaterialObject: function ( geometry, materials ) {\n\n\t\t\tvar group = new THREE.Group();\n\n\t\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\t\tgroup.add( new THREE.Mesh( geometry, materials[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn group;\n\n\t\t},\n\n\t\tdetach: function ( child, parent, scene ) {\n\n\t\t\tchild.applyMatrix( parent.matrixWorld );\n\t\t\tparent.remove( child );\n\t\t\tscene.add( child );\n\n\t\t},\n\n\t\tattach: function ( child, scene, parent ) {\n\n\t\t\tvar matrixWorldInverse = new THREE.Matrix4();\n\t\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\t\t\tchild.applyMatrix( matrixWorldInverse );\n\n\t\t\tscene.remove( child );\n\t\t\tparent.add( child );\n\n\t\t}\n\n\t};\n\n\t// File:src/extras/ShapeUtils.js\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tTHREE.ShapeUtils = {\n\n\t\t// calculate area of the contour polygon\n\n\t\tarea: function ( contour ) {\n\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\n\t\t},\n\n\t\ttriangulate: ( function () {\n\n\t\t\t/**\n\t\t\t * This code is a quick port of code written in C++ which was submitted to\n\t\t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\n\t\t\t * See original code and more information here:\n\t\t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n\t\t\t *\n\t\t\t * ported to actionscript by Zevan Rosser\n\t\t\t * www.actionsnippet.com\n\t\t\t *\n\t\t\t * ported to javascript by Joshua Koo\n\t\t\t * http://www.lab4games.net/zz85/blog\n\t\t\t *\n\t\t\t */\n\n\t\t\tfunction snip( contour, u, v, w, n, verts ) {\n\n\t\t\t\tvar p;\n\t\t\t\tvar ax, ay, bx, by;\n\t\t\t\tvar cx, cy, px, py;\n\n\t\t\t\tax = contour[ verts[ u ] ].x;\n\t\t\t\tay = contour[ verts[ u ] ].y;\n\n\t\t\t\tbx = contour[ verts[ v ] ].x;\n\t\t\t\tby = contour[ verts[ v ] ].y;\n\n\t\t\t\tcx = contour[ verts[ w ] ].x;\n\t\t\t\tcy = contour[ verts[ w ] ].y;\n\n\t\t\t\tif ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\n\n\t\t\t\tvar aX, aY, bX, bY, cX, cY;\n\t\t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\n\t\t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\n\n\t\t\t\taX = cx - bx;  aY = cy - by;\n\t\t\t\tbX = ax - cx;  bY = ay - cy;\n\t\t\t\tcX = bx - ax;  cY = by - ay;\n\n\t\t\t\tfor ( p = 0; p < n; p ++ ) {\n\n\t\t\t\t\tpx = contour[ verts[ p ] ].x;\n\t\t\t\t\tpy = contour[ verts[ p ] ].y;\n\n\t\t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\n\t\t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\n\t\t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\n\n\t\t\t\t\tapx = px - ax;  apy = py - ay;\n\t\t\t\t\tbpx = px - bx;  bpy = py - by;\n\t\t\t\t\tcpx = px - cx;  cpy = py - cy;\n\n\t\t\t\t\t// see if p is inside triangle abc\n\n\t\t\t\t\taCROSSbp = aX * bpy - aY * bpx;\n\t\t\t\t\tcCROSSap = cX * apy - cY * apx;\n\t\t\t\t\tbCROSScp = bX * cpy - bY * cpx;\n\n\t\t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// takes in an contour array and returns\n\n\t\t\treturn function triangulate( contour, indices ) {\n\n\t\t\t\tvar n = contour.length;\n\n\t\t\t\tif ( n < 3 ) return null;\n\n\t\t\t\tvar result = [],\n\t\t\t\t\tverts = [],\n\t\t\t\t\tvertIndices = [];\n\n\t\t\t\t/* we want a counter-clockwise polygon in verts */\n\n\t\t\t\tvar u, v, w;\n\n\t\t\t\tif ( THREE.ShapeUtils.area( contour ) > 0.0 ) {\n\n\t\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n\n\t\t\t\t}\n\n\t\t\t\tvar nv = n;\n\n\t\t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\n\n\t\t\t\tvar count = 2 * nv;   /* error detection */\n\n\t\t\t\tfor ( v = nv - 1; nv > 2; ) {\n\n\t\t\t\t\t/* if we loop, it is probably a non-simple polygon */\n\n\t\t\t\t\tif ( ( count -- ) <= 0 ) {\n\n\t\t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\n\n\t\t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\n\t\t\t\t\t\t//return null;\n\t\t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\n\t\t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\n\n\t\t\t\t\t\tif ( indices ) return vertIndices;\n\t\t\t\t\t\treturn result;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\n\n\t\t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\n\t\t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\n\t\t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\n\n\t\t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\n\n\t\t\t\t\t\tvar a, b, c, s, t;\n\n\t\t\t\t\t\t/* true names of the vertices */\n\n\t\t\t\t\t\ta = verts[ u ];\n\t\t\t\t\t\tb = verts[ v ];\n\t\t\t\t\t\tc = verts[ w ];\n\n\t\t\t\t\t\t/* output Triangle */\n\n\t\t\t\t\t\tresult.push( [ contour[ a ],\n\t\t\t\t\t\t\tcontour[ b ],\n\t\t\t\t\t\t\tcontour[ c ] ] );\n\n\n\t\t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\n\t\t\t\t\t\t/* remove v from the remaining polygon */\n\n\t\t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\n\n\t\t\t\t\t\t\tverts[ s ] = verts[ t ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnv --;\n\n\t\t\t\t\t\t/* reset error detection counter */\n\n\t\t\t\t\t\tcount = 2 * nv;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( indices ) return vertIndices;\n\t\t\t\treturn result;\n\n\t\t\t}\n\n\t\t} )(),\n\n\t\ttriangulateShape: function ( contour, holes ) {\n\n\t\t\tfunction removeDupEndPts(points) {\n\n\t\t\t\tvar l = points.length;\n\n\t\t\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\t\tpoints.pop();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tremoveDupEndPts( contour );\n\t\t\tholes.forEach( removeDupEndPts );\n\n\t\t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\n\n\t\t\t\t// inOtherPt needs to be collinear to the inSegment\n\t\t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\n\n\t\t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\n\n\t\t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\n\n\t\t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\n\n\t\t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n\t\t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n\n\t\t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n\t\t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n\n\t\t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\n\t\t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\n\t\t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\n\t\t\t\t\tvar perpSeg2;\n\t\t\t\t\tif ( limit > 0 ) {\n\n\t\t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\n\t\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\n\t\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// i.e. to reduce rounding errors\n\t\t\t\t\t// intersection at endpoint of segment#1?\n\t\t\t\t\tif ( perpSeg2 === 0 ) {\n\n\t\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( perpSeg2 === limit ) {\n\n\t\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\t\treturn [ inSeg1Pt2 ];\n\n\t\t\t\t\t}\n\t\t\t\t\t// intersection at endpoint of segment#2?\n\t\t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\n\t\t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\n\n\t\t\t\t\t// return real intersection point\n\t\t\t\t\tvar factorSeg1 = perpSeg2 / limit;\n\t\t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n\t\t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( ( perpSeg1 !== 0 ) ||\n\t\t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\n\n\t\t\t\t\t// they are collinear or degenerate\n\t\t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\n\t\t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\n\t\t\t\t\t// both segments are points\n\t\t\t\t\tif ( seg1Pt && seg2Pt ) {\n\n\t\t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\n\t\t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\n\n\t\t\t\t\t}\n\t\t\t\t\t// segment#1  is a single point\n\t\t\t\t\tif ( seg1Pt ) {\n\n\t\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];\n\n\t\t\t\t\t}\n\t\t\t\t\t// segment#2  is a single point\n\t\t\t\t\tif ( seg2Pt ) {\n\n\t\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\n\t\t\t\t\t\treturn [ inSeg2Pt1 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// they are collinear segments, which might overlap\n\t\t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\n\t\t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\n\t\t\t\t\tif ( seg1dx !== 0 ) {\n\n\t\t\t\t\t\t// the segments are NOT on a vertical line\n\t\t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\n\n\t\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\n\n\t\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// the segments are on a vertical line\n\t\t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\n\n\t\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\n\n\t\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( seg1minVal <= seg2minVal ) {\n\n\t\t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\n\t\t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\n\n\t\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\t\treturn [ seg2min ];\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\n\t\t\t\t\t\treturn\t[ seg2min, seg2max ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\n\t\t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\n\n\t\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\t\treturn [ seg1min ];\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\n\t\t\t\t\t\treturn\t[ seg1min, seg2max ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\n\n\t\t\t\t// The order of legs is important\n\n\t\t\t\t// translation of all points, so that Vertex is at (0,0)\n\t\t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\n\t\t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\n\t\t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\n\n\t\t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n\t\t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\n\t\t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\n\n\t\t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\n\n\t\t\t\t\t// angle != 180 deg.\n\n\t\t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\n\t\t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\n\t\t\t\t\tif ( from2toAngle > 0 ) {\n\n\t\t\t\t\t\t// main angle < 180 deg.\n\t\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// main angle > 180 deg.\n\t\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// angle == 180 deg.\n\t\t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n\t\t\t\t\treturn\t( from2otherAngle > 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tfunction removeHoles( contour, holes ) {\n\n\t\t\t\tvar shape = contour.concat(); // work on this shape\n\t\t\t\tvar hole;\n\n\t\t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\n\n\t\t\t\t\t// Check if hole point lies within angle around shape point\n\t\t\t\t\tvar lastShapeIdx = shape.length - 1;\n\n\t\t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\n\t\t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\n\n\t\t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\n\t\t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\n\n\t\t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\n\t\t\t\t\tif ( ! insideAngle ) {\n\n\t\t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n\t\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if shape point lies within angle around hole point\n\t\t\t\t\tvar lastHoleIdx = hole.length - 1;\n\n\t\t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\n\t\t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\n\n\t\t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\n\t\t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\n\n\t\t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\n\t\t\t\t\tif ( ! insideAngle ) {\n\n\t\t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n\t\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn\ttrue;\n\n\t\t\t\t}\n\n\t\t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\n\n\t\t\t\t\t// checks for intersections with shape edges\n\t\t\t\t\tvar sIdx, nextIdx, intersection;\n\t\t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\n\n\t\t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\n\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\n\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t}\n\n\t\t\t\tvar indepHoles = [];\n\n\t\t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\n\n\t\t\t\t\t// checks for intersections with hole edges\n\t\t\t\t\tvar ihIdx, chkHole,\n\t\t\t\t\t\thIdx, nextIdx, intersection;\n\t\t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\n\n\t\t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\n\t\t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\n\n\t\t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\n\t\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\n\t\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t}\n\n\t\t\t\tvar holeIndex, shapeIndex,\n\t\t\t\t\tshapePt, holePt,\n\t\t\t\t\tholeIdx, cutKey, failedCuts = [],\n\t\t\t\t\ttmpShape1, tmpShape2,\n\t\t\t\t\ttmpHole1, tmpHole2;\n\n\t\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tindepHoles.push( h );\n\n\t\t\t\t}\n\n\t\t\t\tvar minShapeIndex = 0;\n\t\t\t\tvar counter = indepHoles.length * 2;\n\t\t\t\twhile ( indepHoles.length > 0 ) {\n\n\t\t\t\t\tcounter --;\n\t\t\t\t\tif ( counter < 0 ) {\n\n\t\t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// search for shape-vertex and hole-vertex,\n\t\t\t\t\t// which can be connected without intersections\n\t\t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\n\n\t\t\t\t\t\tshapePt = shape[ shapeIndex ];\n\t\t\t\t\t\tholeIndex\t= - 1;\n\n\t\t\t\t\t\t// search for hole which can be reached without intersections\n\t\t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\n\n\t\t\t\t\t\t\tholeIdx = indepHoles[ h ];\n\n\t\t\t\t\t\t\t// prevent multiple checks\n\t\t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n\t\t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\n\n\t\t\t\t\t\t\thole = holes[ holeIdx ];\n\t\t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\n\n\t\t\t\t\t\t\t\tholePt = hole[ h2 ];\n\t\t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\n\t\t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\n\t\t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\n\n\t\t\t\t\t\t\t\tholeIndex = h2;\n\t\t\t\t\t\t\t\tindepHoles.splice( h, 1 );\n\n\t\t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\n\t\t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\n\t\t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\n\t\t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\n\n\t\t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\n\t\t\t\t\t\t\t\tminShapeIndex = shapeIndex;\n\n\t\t\t\t\t\t\t\t// Debug only, to show the selected cuts\n\t\t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n\t\t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn shape; \t\t\t/* shape with no holes */\n\n\t\t\t}\n\n\n\t\t\tvar i, il, f, face,\n\t\t\t\tkey, index,\n\t\t\t\tallPointsMap = {};\n\n\t\t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\n\t\t\tvar allpoints = contour.concat();\n\n\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\n\n\t\t\t}\n\n\t\t\t//console.log( \"allpoints\",allpoints, allpoints.length );\n\n\t\t\t// prepare all points map\n\n\t\t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\n\t\t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\n\n\t\t\t\tif ( allPointsMap[ key ] !== undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.ShapeUtils: Duplicate point\", key, i );\n\n\t\t\t\t}\n\n\t\t\t\tallPointsMap[ key ] = i;\n\n\t\t\t}\n\n\t\t\t// remove holes by cutting paths to holes and adding them to the shape\n\t\t\tvar shapeWithoutHoles = removeHoles( contour, holes );\n\n\t\t\tvar triangles = THREE.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\n\t\t\t//console.log( \"triangles\",triangles, triangles.length );\n\n\t\t\t// check all face vertices against all points map\n\n\t\t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\n\n\t\t\t\tface = triangles[ i ];\n\n\t\t\t\tfor ( f = 0; f < 3; f ++ ) {\n\n\t\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\n\n\t\t\t\t\tindex = allPointsMap[ key ];\n\n\t\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\t\tface[ f ] = index;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn triangles.concat();\n\n\t\t},\n\n\t\tisClockWise: function ( pts ) {\n\n\t\t\treturn THREE.ShapeUtils.area( pts ) < 0;\n\n\t\t},\n\n\t\t// Bezier Curves formulas obtained from\n\t\t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n\t\t// Quad Bezier Functions\n\n\t\tb2: ( function () {\n\n\t\t\tfunction b2p0( t, p ) {\n\n\t\t\t\tvar k = 1 - t;\n\t\t\t\treturn k * k * p;\n\n\t\t\t}\n\n\t\t\tfunction b2p1( t, p ) {\n\n\t\t\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t\t\t}\n\n\t\t\tfunction b2p2( t, p ) {\n\n\t\t\t\treturn t * t * p;\n\n\t\t\t}\n\n\t\t\treturn function b2( t, p0, p1, p2 ) {\n\n\t\t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\t// Cubic Bezier Functions\n\n\t\tb3: ( function () {\n\n\t\t\tfunction b3p0( t, p ) {\n\n\t\t\t\tvar k = 1 - t;\n\t\t\t\treturn k * k * k * p;\n\n\t\t\t}\n\n\t\t\tfunction b3p1( t, p ) {\n\n\t\t\t\tvar k = 1 - t;\n\t\t\t\treturn 3 * k * k * t * p;\n\n\t\t\t}\n\n\t\t\tfunction b3p2( t, p ) {\n\n\t\t\t\tvar k = 1 - t;\n\t\t\t\treturn 3 * k * t * t * p;\n\n\t\t\t}\n\n\t\t\tfunction b3p3( t, p ) {\n\n\t\t\t\treturn t * t * t * p;\n\n\t\t\t}\n\n\t\t\treturn function b3( t, p0, p1, p2, p3 ) {\n\n\t\t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\n\n\t\t\t};\n\n\t\t} )()\n\n\t};\n\n\t// File:src/extras/core/Curve.js\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Extensible curve object\n\t *\n\t * Some common of Curve methods\n\t * .getPoint(t), getTangent(t)\n\t * .getPointAt(u), getTagentAt(u)\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following classes subclasses THREE.Curve:\n\t *\n\t * -- 2d classes --\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.SplineCurve\n\t * THREE.ArcCurve\n\t * THREE.EllipseCurve\n\t *\n\t * -- 3d classes --\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.SplineCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tAbstract Curve base class\n\t **************************************************************/\n\n\tTHREE.Curve = function () {\n\n\t};\n\n\tTHREE.Curve.prototype = {\n\n\t\tconstructor: THREE.Curve,\n\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\t\tgetPoint: function ( t ) {\n\n\t\t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\t\tgetPointAt: function ( u ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getPoint( t );\n\n\t\t},\n\n\t\t// Get sequence of points using getPoint( t )\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tif ( ! divisions ) divisions = 5;\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get sequence of points using getPointAt( u )\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( ! divisions ) divisions = 5;\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get total curve arc length\n\n\t\tgetLength: function () {\n\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[ lengths.length - 1 ];\n\n\t\t},\n\n\t\t// Get list of cumulative segment lengths\n\n\t\tgetLengths: function ( divisions ) {\n\n\t\t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\n\n\t\t\tif ( this.cacheArcLengths\n\t\t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\n\t\t\t\t&& ! this.needsUpdate ) {\n\n\t\t\t\t//console.log( \"cached\", this.cacheArcLengths );\n\t\t\t\treturn this.cacheArcLengths;\n\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\n\t\t\tvar cache = [];\n\t\t\tvar current, last = this.getPoint( 0 );\n\t\t\tvar p, sum = 0;\n\n\t\t\tcache.push( 0 );\n\n\t\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\t\tcurrent = this.getPoint ( p / divisions );\n\t\t\t\tsum += current.distanceTo( last );\n\t\t\t\tcache.push( sum );\n\t\t\t\tlast = current;\n\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\n\t\t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\n\n\t\t},\n\n\t\tupdateArcLengths: function() {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\n\t\t},\n\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\t\tgetUtoTmapping: function ( u, distance ) {\n\n\t\t\tvar arcLengths = this.getLengths();\n\n\t\t\tvar i = 0, il = arcLengths.length;\n\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif ( distance ) {\n\n\t\t\t\ttargetArcLength = distance;\n\n\t\t\t} else {\n\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t\t}\n\n\t\t\t//var time = Date.now();\n\n\t\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\t\tvar low = 0, high = il - 1, comparison;\n\n\t\t\twhile ( low <= high ) {\n\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\t\tlow = i + 1;\n\n\t\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\t\thigh = i - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// DONE\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\t//console.log('b' , i, low, high, Date.now()- time);\n\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\t\tvar t = i / ( il - 1 );\n\t\t\t\treturn t;\n\n\t\t\t}\n\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\t\tvar lengthBefore = arcLengths[ i ];\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t\t// determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t\t// add that fractional amount to t\n\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\t\tgetTangent: function( t ) {\n\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta;\n\n\t\t\t// Capping in case of danger\n\n\t\t\tif ( t1 < 0 ) t1 = 0;\n\t\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\t\tvar pt1 = this.getPoint( t1 );\n\t\t\tvar pt2 = this.getPoint( t2 );\n\n\t\t\tvar vec = pt2.clone().sub( pt1 );\n\t\t\treturn vec.normalize();\n\n\t\t},\n\n\t\tgetTangentAt: function ( u ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getTangent( t );\n\n\t\t}\n\n\t};\n\n\t// TODO: Transformation for Curves?\n\n\t/**************************************************************\n\t *\t3D Curves\n\t **************************************************************/\n\n\t// A Factory method for creating new curve subclasses\n\n\tTHREE.Curve.create = function ( constructor, getPointFunc ) {\n\n\t\tconstructor.prototype = Object.create( THREE.Curve.prototype );\n\t\tconstructor.prototype.constructor = constructor;\n\t\tconstructor.prototype.getPoint = getPointFunc;\n\n\t\treturn constructor;\n\n\t};\n\n\t// File:src/extras/core/CurvePath.js\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *  curves, but retains the api of a curve\n\t **************************************************************/\n\n\tTHREE.CurvePath = function () {\n\n\t\tthis.curves = [];\n\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t};\n\n\tTHREE.CurvePath.prototype = Object.assign( Object.create( THREE.Curve.prototype ), {\n\n\t\tconstructor: THREE.CurvePath,\n\n\t\tadd: function ( curve ) {\n\n\t\t\tthis.curves.push( curve );\n\n\t\t},\n\n\t\tclosePath: function () {\n\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\t\tthis.curves.push( new THREE.LineCurve( endPoint, startPoint ) );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\t\tgetPoint: function ( t ) {\n\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0;\n\n\t\t\t// To think about boundaries points.\n\n\t\t\twhile ( i < curveLengths.length ) {\n\n\t\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t\t},\n\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\t\tgetLength: function () {\n\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[ lens.length - 1 ];\n\n\t\t},\n\n\t\t// cacheLengths must be recalculated.\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getLengths();\n\n\t\t},\n\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\t\tgetCurveLengths: function () {\n\n\t\t\t// We use cache values if curves and cache array are same length\n\n\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\t\treturn this.cacheLengths;\n\n\t\t\t}\n\n\t\t\t// Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\t\t\tvar lengths = [], sums = 0;\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tsums += this.curves[ i ].getLength();\n\t\t\t\tlengths.push( sums );\n\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\n\t\t\treturn lengths;\n\n\t\t},\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( ! divisions ) divisions = 40;\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tdivisions = divisions || 12;\n\n\t\t\tvar points = [], last;\n\n\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\t\tvar curve = curves[ i ];\n\t\t\t\tvar resolution = curve instanceof THREE.EllipseCurve ? divisions * 2\n\t\t\t\t\t: curve instanceof THREE.LineCurve ? 1\n\t\t\t\t\t: curve instanceof THREE.SplineCurve ? divisions * curve.points.length\n\t\t\t\t\t: divisions;\n\n\t\t\t\tvar pts = curve.getPoints( resolution );\n\n\t\t\t\tfor ( var j = 0; j < pts.length; j++ ) {\n\n\t\t\t\t\tvar point = pts[ j ];\n\n\t\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push( point );\n\t\t\t\t\tlast = point;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t/**************************************************************\n\t\t *\tCreate Geometries Helpers\n\t\t **************************************************************/\n\n\t\t/// Generate geometry from path points (for Line or Points objects)\n\n\t\tcreatePointsGeometry: function ( divisions ) {\n\n\t\t\tvar pts = this.getPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\t// Generate geometry from equidistant sampling along the path\n\n\t\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\t\tvar pts = this.getSpacedPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateGeometry: function ( points ) {\n\n\t\t\tvar geometry = new THREE.Geometry();\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tgeometry.vertices.push( new THREE.Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\t// File:src/extras/core/Font.js\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.Font = function ( data ) {\n\n\t\tthis.data = data;\n\n\t};\n\n\tObject.assign( THREE.Font.prototype, {\n\n\t\tgenerateShapes: function ( text, size, divisions ) {\n\n\t\t\tfunction createPaths( text ) {\n\n\t\t\t\tvar chars = String( text ).split( '' );\n\t\t\t\tvar scale = size / data.resolution;\n\t\t\t\tvar offset = 0;\n\n\t\t\t\tvar paths = [];\n\n\t\t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\t\t\t\tvar ret = createPath( chars[ i ], scale, offset );\n\t\t\t\t\toffset += ret.offset;\n\n\t\t\t\t\tpaths.push( ret.path );\n\n\t\t\t\t}\n\n\t\t\t\treturn paths;\n\n\t\t\t}\n\n\t\t\tfunction createPath( c, scale, offset ) {\n\n\t\t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\n\n\t\t\t\tif ( ! glyph ) return;\n\n\t\t\t\tvar path = new THREE.ShapePath();\n\n\t\t\t\tvar pts = [], b2 = THREE.ShapeUtils.b2, b3 = THREE.ShapeUtils.b3;\n\t\t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\n\t\t\t\tif ( glyph.o ) {\n\n\t\t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\t\t\t\tvar action = outline[ i ++ ];\n\n\t\t\t\t\t\tswitch ( action ) {\n\n\t\t\t\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n\t\t\t\t\t\t\t\tif ( laste ) {\n\n\t\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n\t\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\t\t\t\tb2( t, cpx0, cpx1, cpx );\n\t\t\t\t\t\t\t\t\t\tb2( t, cpy0, cpy1, cpy );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n\t\t\t\t\t\t\t\tif ( laste ) {\n\n\t\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n\t\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\t\t\t\tb3( t, cpx0, cpx1, cpx2, cpx );\n\t\t\t\t\t\t\t\t\t\tb3( t, cpy0, cpy1, cpy2, cpy );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn { offset: glyph.ha * scale, path: path };\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( size === undefined ) size = 100;\n\t\t\tif ( divisions === undefined ) divisions = 4;\n\n\t\t\tvar data = this.data;\n\n\t\t\tvar paths = createPaths( text );\n\t\t\tvar shapes = [];\n\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\t// File:src/extras/core/Path.js\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Creates free form 2d path using series of points, lines or curves.\n\t *\n\t **/\n\n\tTHREE.Path = function ( points ) {\n\n\t\tTHREE.CurvePath.call( this );\n\t\tthis.currentPoint = new THREE.Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.fromPoints( points );\n\n\t\t}\n\n\t};\n\n\tTHREE.Path.prototype = Object.assign( Object.create( THREE.CurvePath.prototype ), {\n\n\t\tconstructor: THREE.Path,\n\n\t\t// Create path using straight lines to connect all points\n\t\t// - vectors: array of Vector2\n\t\tfromPoints: function ( vectors ) {\n\n\t\t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\n\n\t\t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\n\n\t\t\t}\n\n\t\t},\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tvar curve = new THREE.LineCurve( this.currentPoint.clone(), new THREE.Vector2( x, y ) );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( x, y );\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tvar curve = new THREE.QuadraticBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew THREE.Vector2( aCPx, aCPy ),\n\t\t\t\tnew THREE.Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tvar curve = new THREE.CubicBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew THREE.Vector2( aCP1x, aCP1y ),\n\t\t\t\tnew THREE.Vector2( aCP2x, aCP2y ),\n\t\t\t\tnew THREE.Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t},\n\n\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\t\tvar curve = new THREE.SplineCurve( npts );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\t},\n\n\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\t},\n\n\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\t},\n\n\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t},\n\n\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint( 0 );\n\n\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tvar lastPoint = curve.getPoint( 1 );\n\t\t\tthis.currentPoint.copy( lastPoint );\n\n\t\t}\n\n\t} );\n\n\n\t// minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\tTHREE.ShapePath = function() {\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\t}\n\n\tTHREE.ShapePath.prototype = {\n\t\tmoveTo: function ( x, y ) {\n\t\t\tthis.currentPath = new THREE.Path();\n\t\t\tthis.subPaths.push(this.currentPath);\n\t\t\tthis.currentPath.moveTo( x, y );\n\t\t},\n\t\tlineTo: function ( x, y ) {\n\t\t\tthis.currentPath.lineTo( x, y );\n\t\t},\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\t\t},\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\t\t},\n\t\tsplineThru: function ( pts ) {\n\t\t\tthis.currentPath.splineThru( pts );\n\t\t},\n\n\t\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\t\tvar tmpShape = new THREE.Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\t\tvar inside = false;\n\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\t\tvar edgeLowPt  = inPolygon[ p ];\n\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn\tinside;\n\n\t\t\t}\n\n\t\t\tvar isClockWise = THREE.ShapeUtils.isClockWise;\n\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif ( subPaths.length === 0 ) return [];\n\n\t\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\t\tif ( subPaths.length === 1 ) {\n\n\t\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\t\ttmpShape = new THREE.Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\n\t\t\tnewShapes[ mainIdx ] = undefined;\n\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\t\ttmpPath = subPaths[ i ];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\t\tif ( solid ) {\n\n\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\t\tnewShapes[ mainIdx ] = { s: new THREE.Shape(), p: tmpPoints };\n\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t\t//console.log('cw', i);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t\t//console.log('ccw', i);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\t\tif ( newShapes.length > 1 ) {\n\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//console.log(\"shape\", shapes);\n\n\t\t\treturn shapes;\n\n\t\t}\n\t}\n\n\t// File:src/extras/core/Shape.js\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Defines a 2d shape plane using paths.\n\t **/\n\n\t// STEP 1 Create a path.\n\t// STEP 2 Turn path into shape.\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n\t// STEP 3a - Extract points from each shape, turn to vertices\n\t// STEP 3b - Triangulate each shape, add faces.\n\n\tTHREE.Shape = function () {\n\n\t\tTHREE.Path.apply( this, arguments );\n\n\t\tthis.holes = [];\n\n\t};\n\n\tTHREE.Shape.prototype = Object.assign( Object.create( THREE.Path.prototype ), {\n\n\t\tconstructor: THREE.Shape,\n\n\t\t// Convenience method to return ExtrudeGeometry\n\n\t\textrude: function ( options ) {\n\n\t\t\treturn new THREE.ExtrudeGeometry( this, options );\n\n\t\t},\n\n\t\t// Convenience method to return ShapeGeometry\n\n\t\tmakeGeometry: function ( options ) {\n\n\t\t\treturn new THREE.ShapeGeometry( this, options );\n\n\t\t},\n\n\t\tgetPointsHoles: function ( divisions ) {\n\n\t\t\tvar holesPts = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t\t}\n\n\t\t\treturn holesPts;\n\n\t\t},\n\n\t\t// Get points of shape and holes (keypoints based on segments parameter)\n\n\t\textractAllPoints: function ( divisions ) {\n\n\t\t\treturn {\n\n\t\t\t\tshape: this.getPoints( divisions ),\n\t\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t\t};\n\n\t\t},\n\n\t\textractPoints: function ( divisions ) {\n\n\t\t\treturn this.extractAllPoints( divisions );\n\n\t\t}\n\n\t} );\n\n\t// File:src/extras/curves/LineCurve.js\n\n\t/**************************************************************\n\t *\tLine\n\t **************************************************************/\n\n\tTHREE.LineCurve = function ( v1, v2 ) {\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t};\n\n\tTHREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );\n\tTHREE.LineCurve.prototype.constructor = THREE.LineCurve;\n\n\tTHREE.LineCurve.prototype.getPoint = function ( t ) {\n\n\t\tif ( t === 1 ) {\n\n\t\t\treturn this.v2.clone();\n\n\t\t}\n\n\t\tvar point = this.v2.clone().sub( this.v1 );\n\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tTHREE.LineCurve.prototype.getPointAt = function ( u ) {\n\n\t\treturn this.getPoint( u );\n\n\t};\n\n\tTHREE.LineCurve.prototype.getTangent = function( t ) {\n\n\t\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\t\treturn tangent.normalize();\n\n\t};\n\n\t// File:src/extras/curves/QuadraticBezierCurve.js\n\n\t/**************************************************************\n\t *\tQuadratic Bezier curve\n\t **************************************************************/\n\n\n\tTHREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t};\n\n\tTHREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );\n\tTHREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;\n\n\n\tTHREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {\n\n\t\tvar b2 = THREE.ShapeUtils.b2;\n\n\t\treturn new THREE.Vector2(\n\t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\n\t\t);\n\n\t};\n\n\n\tTHREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {\n\n\t\tvar tangentQuadraticBezier = THREE.CurveUtils.tangentQuadraticBezier;\n\n\t\treturn new THREE.Vector2(\n\t\t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\n\t\t).normalize();\n\n\t};\n\n\t// File:src/extras/curves/CubicBezierCurve.js\n\n\t/**************************************************************\n\t *\tCubic Bezier curve\n\t **************************************************************/\n\n\tTHREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t};\n\n\tTHREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );\n\tTHREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;\n\n\tTHREE.CubicBezierCurve.prototype.getPoint = function ( t ) {\n\n\t\tvar b3 = THREE.ShapeUtils.b3;\n\n\t\treturn new THREE.Vector2( \n\t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t\t);\n\n\t};\n\n\tTHREE.CubicBezierCurve.prototype.getTangent = function( t ) {\n\n\t\tvar tangentCubicBezier = THREE.CurveUtils.tangentCubicBezier;\n\n\t\treturn new THREE.Vector2( \n\t\t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t\t).normalize();\n\n\t};\n\n\t// File:src/extras/curves/SplineCurve.js\n\n\t/**************************************************************\n\t *\tSpline curve\n\t **************************************************************/\n\n\tTHREE.SplineCurve = function ( points /* array of Vector2 */ ) {\n\n\t\tthis.points = ( points == undefined ) ? [] : points;\n\n\t};\n\n\tTHREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );\n\tTHREE.SplineCurve.prototype.constructor = THREE.SplineCurve;\n\n\tTHREE.SplineCurve.prototype.getPoint = function ( t ) {\n\n\t\tvar points = this.points;\n\t\tvar point = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( point );\n\t\tvar weight = point - intPoint;\n\n\t\tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tvar point1 = points[ intPoint ];\n\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tvar interpolate = THREE.CurveUtils.interpolate;\n\n\t\treturn new THREE.Vector2(\n\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\n\t\t);\n\n\t};\n\n\t// File:src/extras/curves/EllipseCurve.js\n\n\t/**************************************************************\n\t *\tEllipse curve\n\t **************************************************************/\n\n\tTHREE.EllipseCurve = function( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tthis.aX = aX;\n\t\tthis.aY = aY;\n\n\t\tthis.xRadius = xRadius;\n\t\tthis.yRadius = yRadius;\n\n\t\tthis.aStartAngle = aStartAngle;\n\t\tthis.aEndAngle = aEndAngle;\n\n\t\tthis.aClockwise = aClockwise;\n\n\t\tthis.aRotation = aRotation || 0;\n\n\t};\n\n\tTHREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );\n\tTHREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;\n\n\tTHREE.EllipseCurve.prototype.getPoint = function( t ) {\n\n\t\tvar twoPi = Math.PI * 2;\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tvar cos = Math.cos( this.aRotation );\n\t\t\tvar sin = Math.sin( this.aRotation );\n\n\t\t\tvar tx = x - this.aX;\n\t\t\tvar ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn new THREE.Vector2( x, y );\n\n\t};\n\n\t// File:src/extras/curves/ArcCurve.js\n\n\t/**************************************************************\n\t *\tArc curve\n\t **************************************************************/\n\n\tTHREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tTHREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t};\n\n\tTHREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );\n\tTHREE.ArcCurve.prototype.constructor = THREE.ArcCurve;\n\n\t// File:src/extras/curves/LineCurve3.js\n\n\t/**************************************************************\n\t *\tLine3D\n\t **************************************************************/\n\n\tTHREE.LineCurve3 = THREE.Curve.create(\n\n\t\tfunction ( v1, v2 ) {\n\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\n\t\t},\n\n\t\tfunction ( t ) {\n\n\t\t\tif ( t === 1 ) {\n\n\t\t\t\treturn this.v2.clone();\n\n\t\t\t}\n\n\t\t\tvar vector = new THREE.Vector3();\n\n\t\t\tvector.subVectors( this.v2, this.v1 ); // diff\n\t\t\tvector.multiplyScalar( t );\n\t\t\tvector.add( this.v1 );\n\n\t\t\treturn vector;\n\n\t\t}\n\n\t);\n\n\t// File:src/extras/curves/QuadraticBezierCurve3.js\n\n\t/**************************************************************\n\t *\tQuadratic Bezier 3D curve\n\t **************************************************************/\n\n\tTHREE.QuadraticBezierCurve3 = THREE.Curve.create(\n\n\t\tfunction ( v0, v1, v2 ) {\n\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\n\t\t},\n\n\t\tfunction ( t ) {\n\n\t\t\tvar b2 = THREE.ShapeUtils.b2;\t\t\n\n\t\t\treturn new THREE.Vector3(\n\t\t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\n\t\t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\n\t\t\t);\n\n\t\t}\n\n\t);\n\n\t// File:src/extras/curves/CubicBezierCurve3.js\n\n\t/**************************************************************\n\t *\tCubic Bezier 3D curve\n\t **************************************************************/\n\n\tTHREE.CubicBezierCurve3 = THREE.Curve.create(\n\n\t\tfunction ( v0, v1, v2, v3 ) {\n\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t\tthis.v3 = v3;\n\n\t\t},\n\n\t\tfunction ( t ) {\n\n\t\t\tvar b3 = THREE.ShapeUtils.b3;\n\n\t\t\treturn new THREE.Vector3(\n\t\t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\n\t\t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\n\t\t\t);\n\n\t\t}\n\n\t);\n\n\t// File:src/extras/curves/SplineCurve3.js\n\n\t/**************************************************************\n\t *\tSpline 3D curve\n\t **************************************************************/\n\n\n\tTHREE.SplineCurve3 = THREE.Curve.create(\n\n\t\tfunction ( points /* array of Vector3 */ ) {\n\n\t\t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\n\t\t\tthis.points = ( points == undefined ) ? [] : points;\n\n\t\t},\n\n\t\tfunction ( t ) {\n\n\t\t\tvar points = this.points;\n\t\t\tvar point = ( points.length - 1 ) * t;\n\n\t\t\tvar intPoint = Math.floor( point );\n\t\t\tvar weight = point - intPoint;\n\n\t\t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\n\t\t\tvar point1 = points[ intPoint ];\n\t\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\t\tvar interpolate = THREE.CurveUtils.interpolate;\n\n\t\t\treturn new THREE.Vector3(\n\t\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\n\t\t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\n\t\t\t);\n\n\t\t}\n\n\t);\n\n\t// File:src/extras/curves/CatmullRomCurve3.js\n\n\t/**\n\t * @author zz85 https://github.com/zz85\n\t *\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\tTHREE.CatmullRomCurve3 = ( function() {\n\n\t\tvar\n\t\t\ttmp = new THREE.Vector3(),\n\t\t\tpx = new CubicPoly(),\n\t\t\tpy = new CubicPoly(),\n\t\t\tpz = new CubicPoly();\n\n\t\t/*\n\t\tBased on an optimized c++ solution in\n\t\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t\t - http://ideone.com/NoEbVM\n\n\t\tThis CubicPoly class could be used for reusing some variables and calculations,\n\t\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\t\twhich can be placed in CurveUtils.\n\t\t*/\n\n\t\tfunction CubicPoly() {\n\n\t\t}\n\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *   p(0) = x0, p(1) = x1\n\t\t *  and\n\t\t *   p'(0) = t0, p'(1) = t1.\n\t\t */\n\t\tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\n\n\t\t\tthis.c0 = x0;\n\t\t\tthis.c1 = t0;\n\t\t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t\t};\n\n\t\tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\tt1 *= dt1;\n\t\t\tt2 *= dt1;\n\n\t\t\t// initCubicPoly\n\t\t\tthis.init( x1, x2, t1, t2 );\n\n\t\t};\n\n\t\t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\n\t\tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\n\n\t\t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t};\n\n\t\tCubicPoly.prototype.calc = function( t ) {\n\n\t\t\tvar t2 = t * t;\n\t\t\tvar t3 = t2 * t;\n\t\t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\n\n\t\t};\n\n\t\t// Subclass Three.js curve\n\t\treturn THREE.Curve.create(\n\n\t\t\tfunction ( p /* array of Vector3 */ ) {\n\n\t\t\t\tthis.points = p || [];\n\t\t\t\tthis.closed = false;\n\n\t\t\t},\n\n\t\t\tfunction ( t ) {\n\n\t\t\t\tvar points = this.points,\n\t\t\t\t\tpoint, intPoint, weight, l;\n\n\t\t\t\tl = points.length;\n\n\t\t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\n\n\t\t\t\tpoint = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\t\t\tintPoint = Math.floor( point );\n\t\t\t\tweight = point - intPoint;\n\n\t\t\t\tif ( this.closed ) {\n\n\t\t\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\n\t\t\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\t\t\tintPoint = l - 2;\n\t\t\t\t\tweight = 1;\n\n\t\t\t\t}\n\n\t\t\t\tvar p0, p1, p2, p3; // 4 points\n\n\t\t\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// extrapolate first point\n\t\t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\t\t\tp0 = tmp;\n\n\t\t\t\t}\n\n\t\t\t\tp1 = points[ intPoint % l ];\n\t\t\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\t\t\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// extrapolate last point\n\t\t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\t\t\tp3 = tmp;\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\n\n\t\t\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\n\t\t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t\t\t// safety check for repeated points\n\t\t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t\t\t} else if ( this.type === 'catmullrom' ) {\n\n\t\t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\n\t\t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\n\t\t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\n\t\t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\n\n\t\t\t\t}\n\n\t\t\t\tvar v = new THREE.Vector3(\n\t\t\t\t\tpx.calc( weight ),\n\t\t\t\t\tpy.calc( weight ),\n\t\t\t\t\tpz.calc( weight )\n\t\t\t\t);\n\n\t\t\t\treturn v;\n\n\t\t\t}\n\n\t\t);\n\n\t} )();\n\n\t// File:src/extras/curves/ClosedSplineCurve3.js\n\n\t/**************************************************************\n\t *\tClosed Spline 3D curve\n\t **************************************************************/\n\n\n\tTHREE.ClosedSplineCurve3 = function ( points ) {\n\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );\n\n\t\tTHREE.CatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\t\tthis.closed = true;\n\n\t};\n\n\tTHREE.ClosedSplineCurve3.prototype = Object.create( THREE.CatmullRomCurve3.prototype );\n\n\t// File:src/extras/geometries/BoxGeometry.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\n\t */\n\n\tTHREE.BoxGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\tTHREE.Geometry.call( this );\n\n\t\tthis.type = 'BoxGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new THREE.BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t\tthis.mergeVertices();\n\n\t};\n\n\tTHREE.BoxGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;\n\n\tTHREE.CubeGeometry = THREE.BoxGeometry;\n\n\t// File:src/extras/geometries/BoxBufferGeometry.js\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tTHREE.BoxBufferGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\tTHREE.BufferGeometry.call( this );\n\n\t\tthis.type = 'BoxBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tvar scope = this;\n\n\t\t// segments\n\t\twidthSegments = Math.floor( widthSegments ) || 1;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\t\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t\t// these are used to calculate buffer length\n\t\tvar vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );\n\t\tvar indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );\n\n\t\t// buffers\n\t\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\t\tvar vertices = new Float32Array( vertexCount * 3 );\n\t\tvar normals = new Float32Array( vertexCount * 3 );\n\t\tvar uvs = new Float32Array( vertexCount * 2 );\n\n\t\t// offset variables\n\t\tvar vertexBufferOffset = 0;\n\t\tvar uvBufferOffset = 0;\n\t\tvar indexBufferOffset = 0;\n\t\tvar numberOfVertices = 0;\n\n\t\t// group variables\n\t\tvar groupStart = 0;\n\n\t\t// build each side of the box geometry\n\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\n\t\tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\n\t\tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\n\t\tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\n\t\tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\n\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\n\n\t\t// build geometry\n\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n\t\t// helper functions\n\n\t\tfunction calculateVertexCount ( w, h, d ) {\n\n\t\t\tvar vertices = 0;\n\n\t\t\t// calculate the amount of vertices for each side (plane)\n\t\t\tvertices += (w + 1) * (h + 1) * 2; // xy\n\t\t\tvertices += (w + 1) * (d + 1) * 2; // xz\n\t\t\tvertices += (d + 1) * (h + 1) * 2; // zy\n\n\t\t\treturn vertices;\n\n\t\t}\n\n\t\tfunction calculateIndexCount ( w, h, d ) {\n\n\t\t\tvar index = 0;\n\n\t\t\t// calculate the amount of squares for each side\n\t\t\tindex += w * h * 2; // xy\n\t\t\tindex += w * d * 2; // xz\n\t\t\tindex += d * h * 2; // zy\n\n\t\t\treturn index * 6; // two triangles per square => six vertices per square\n\n\t\t}\n\n\t\tfunction buildPlane ( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\tvar segmentWidth\t= width / gridX;\n\t\t\tvar segmentHeight = height / gridY;\n\n\t\t\tvar widthHalf = width / 2;\n\t\t\tvar heightHalf = height / 2;\n\t\t\tvar depthHalf = depth / 2;\n\n\t\t\tvar gridX1 = gridX + 1;\n\t\t\tvar gridY1 = gridY + 1;\n\n\t\t\tvar vertexCounter = 0;\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar vector = new THREE.Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t// set values to correct vector component\n\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t// now apply vector to vertex buffer\n\t\t\t\t\tvertices[ vertexBufferOffset ] = vector.x;\n\t\t\t\t\tvertices[ vertexBufferOffset + 1 ] = vector.y;\n\t\t\t\t\tvertices[ vertexBufferOffset + 2 ] = vector.z;\n\n\t\t\t\t\t// set values to correct vector component\n\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t// now apply vector to normal buffer\n\t\t\t\t\tnormals[ vertexBufferOffset ] = vector.x;\n\t\t\t\t\tnormals[ vertexBufferOffset + 1 ] = vector.y;\n\t\t\t\t\tnormals[ vertexBufferOffset + 2 ] = vector.z;\n\n\t\t\t\t\t// uvs\n\t\t\t\t\tuvs[ uvBufferOffset ] = ix / gridX;\n\t\t\t\t\tuvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );\n\n\t\t\t\t\t// update offsets and counters\n\t\t\t\t\tvertexBufferOffset += 3;\n\t\t\t\t\tuvBufferOffset += 2;\n\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// 1. you need three indices to draw a single face\n\t\t\t// 2. a single segment consists of two faces\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\t// indices\n\t\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t// face one\n\t\t\t\t\tindices[ indexBufferOffset ] = a;\n\t\t\t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t\t\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\n\t\t\t\t\t// face two\n\t\t\t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t\t\t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t\t\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\n\t\t\t\t\t// update offsets and counters\n\t\t\t\t\tindexBufferOffset += 6;\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t// calculate new start value for groups\n\t\t\tgroupStart += groupCount;\n\n\t\t\t// update total number of vertices\n\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t}\n\n\t};\n\n\tTHREE.BoxBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.BoxBufferGeometry.prototype.constructor = THREE.BoxBufferGeometry;\n\n\t// File:src/extras/geometries/CircleGeometry.js\n\n\t/**\n\t * @author hughes\n\t */\n\n\tTHREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {\n\n\t\tTHREE.Geometry.call( this );\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new THREE.CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\n\t};\n\n\tTHREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry;\n\n\t// File:src/extras/geometries/CircleBufferGeometry.js\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tTHREE.CircleBufferGeometry = function ( radius, segments, thetaStart, thetaLength ) {\n\n\t\tTHREE.BufferGeometry.call( this );\n\n\t\tthis.type = 'CircleBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 50;\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\tvar vertices = segments + 2;\n\n\t\tvar positions = new Float32Array( vertices * 3 );\n\t\tvar normals = new Float32Array( vertices * 3 );\n\t\tvar uvs = new Float32Array( vertices * 2 );\n\n\t\t// center data is already zero, but need to set a few extras\n\t\tnormals[ 2 ] = 1.0;\n\t\tuvs[ 0 ] = 0.5;\n\t\tuvs[ 1 ] = 0.5;\n\n\t\tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\n\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\t\tpositions[ i ] = radius * Math.cos( segment );\n\t\t\tpositions[ i + 1 ] = radius * Math.sin( segment );\n\n\t\t\tnormals[ i + 2 ] = 1; // normal z\n\n\t\t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\n\t\t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t}\n\n\t\tvar indices = [];\n\n\t\tfor ( var i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\tthis.setIndex( new THREE.BufferAttribute( new Uint16Array( indices ), 1 ) );\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n\t\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n\t};\n\n\tTHREE.CircleBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.CircleBufferGeometry.prototype.constructor = THREE.CircleBufferGeometry;\n\n\t// File:src/extras/geometries/CylinderBufferGeometry.js\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tTHREE.CylinderBufferGeometry = function( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tTHREE.BufferGeometry.call( this );\n\n\t\tthis.type = 'CylinderBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tvar scope = this;\n\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 20;\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n\t\theight = height !== undefined ? height : 100;\n\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;\n\n\t\t// used to calculate buffer length\n\n\t\tvar nbCap = 0;\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) nbCap ++;\n\t\t\tif ( radiusBottom > 0 ) nbCap ++;\n\n\t\t}\n\n\t\tvar vertexCount = calculateVertexCount();\n\t\tvar indexCount = calculateIndexCount();\n\n\t\t// buffers\n\n\t\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );\n\t\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t\t// helper variables\n\n\t\tvar index = 0,\n\t\t    indexOffset = 0,\n\t\t    indexArray = [],\n\t\t    halfHeight = height / 2;\n\n\t\t// group variables\n\t\tvar groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', vertices );\n\t\tthis.addAttribute( 'normal', normals );\n\t\tthis.addAttribute( 'uv', uvs );\n\n\t\t// helper functions\n\n\t\tfunction calculateVertexCount() {\n\n\t\t\tvar count = ( radialSegments + 1 ) * ( heightSegments + 1 );\n\n\t\t\tif ( openEnded === false ) {\n\n\t\t\t\tcount += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );\n\n\t\t\t}\n\n\t\t\treturn count;\n\n\t\t}\n\n\t\tfunction calculateIndexCount() {\n\n\t\t\tvar count = radialSegments * heightSegments * 2 * 3;\n\n\t\t\tif ( openEnded === false ) {\n\n\t\t\t\tcount += radialSegments * nbCap * 3;\n\n\t\t\t}\n\n\t\t\treturn count;\n\n\t\t}\n\n\t\tfunction generateTorso() {\n\n\t\t\tvar x, y;\n\t\t\tvar normal = new THREE.Vector3();\n\t\t\tvar vertex = new THREE.Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tvar tanTheta = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tvar indexRow = [];\n\n\t\t\t\tvar v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertex.x = radius * Math.sin( u * thetaLength + thetaStart );\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * Math.cos( u * thetaLength + thetaStart );\n\t\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\t\t\t\t\tnormal.copy( vertex );\n\n\t\t\t\t\t// handle special case if radiusTop/radiusBottom is zero\n\n\t\t\t\t\tif ( ( radiusTop === 0 && y === 0 ) || ( radiusBottom === 0 && y === heightSegments ) ) {\n\n\t\t\t\t\t\tnormal.x = Math.sin( u * thetaLength + thetaStart );\n\t\t\t\t\t\tnormal.z = Math.cos( u * thetaLength + thetaStart );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnormal.setY( Math.sqrt( normal.x * normal.x + normal.z * normal.z ) * tanTheta ).normalize();\n\t\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\t\t\t\t\tuvs.setXY( index, u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\t\t\t\t\tindexRow.push( index );\n\n\t\t\t\t\t// increase index\n\t\t\t\t\tindex ++;\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\t\t\t\t\tvar i1 = indexArray[ y ][ x ];\n\t\t\t\t\tvar i2 = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tvar i3 = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tvar i4 = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// face one\n\t\t\t\t\tindices.setX( indexOffset, i1 ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\n\t\t\t\t\t// face two\n\t\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, i3 ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\n\t\t\t\t\t// update counters\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\tvar x, centerIndexStart, centerIndexEnd;\n\n\t\t\tvar uv = new THREE.Vector2();\n\t\t\tvar vertex = new THREE.Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// save the index of the first center vertex\n\t\t\tcenterIndexStart = index;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\t\t\t\tvertices.setXYZ( index, 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\t\t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\n\t\t\t\t// uv\n\t\t\t\tuv.x = 0.5;\n\t\t\t\tuv.y = 0.5;\n\n\t\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t\t// increase index\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\t\t\tcenterIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tvar u = x / radialSegments;\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\t\t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\n\t\t\t\t// uv\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t\t// increase index\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tvar c = centerIndexStart + x;\n\t\t\t\tvar i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\t\t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\t\t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\n\t\t\t\t}\n\n\t\t\t\t// update counters\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t};\n\n\tTHREE.CylinderBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.CylinderBufferGeometry.prototype.constructor = THREE.CylinderBufferGeometry;\n\n\t// File:src/extras/geometries/CylinderGeometry.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tTHREE.Geometry.call( this );\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new THREE.CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t};\n\n\tTHREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;\n\n\t// File:src/extras/geometries/ConeBufferGeometry.js\n\n\t/*\n\t * @author: abelnation / http://github.com/abelnation\n\t */\n\n\tTHREE.ConeBufferGeometry = function (\n\t\tradius, height,\n\t\tradialSegments, heightSegments,\n\t\topenEnded, thetaStart, thetaLength ) {\n\n\t\tTHREE.CylinderBufferGeometry.call( this,\n\t\t\t0, radius, height,\n\t\t\tradialSegments, heightSegments,\n\t\t\topenEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t};\n\n\tTHREE.ConeBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.ConeBufferGeometry.prototype.constructor = THREE.ConeBufferGeometry;\n\n\t// File:src/extras/geometries/ConeGeometry.js\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\tTHREE.ConeGeometry = function (\n\t\tradius, height,\n\t\tradialSegments, heightSegments,\n\t\topenEnded, thetaStart, thetaLength ) {\n\n\t\tTHREE.CylinderGeometry.call( this,\n\t\t\t0, radius, height,\n\t\t\tradialSegments, heightSegments,\n\t\t\topenEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t};\n\n\tTHREE.ConeGeometry.prototype = Object.create( THREE.CylinderGeometry.prototype );\n\tTHREE.ConeGeometry.prototype.constructor = THREE.ConeGeometry;\n\n\t// File:src/extras/geometries/EdgesGeometry.js\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tTHREE.EdgesGeometry = function ( geometry, thresholdAngle ) {\n\n\t\tTHREE.BufferGeometry.call( this );\n\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\t\tvar thresholdDot = Math.cos( THREE.Math.DEG2RAD * thresholdAngle );\n\n\t\tvar edge = [ 0, 0 ], hash = {};\n\n\t\tfunction sortFunction( a, b ) {\n\n\t\t\treturn a - b;\n\n\t\t}\n\n\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\tvar geometry2;\n\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tgeometry2 = new THREE.Geometry();\n\t\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t\t} else {\n\n\t\t\tgeometry2 = geometry.clone();\n\n\t\t}\n\n\t\tgeometry2.mergeVertices();\n\t\tgeometry2.computeFaceNormals();\n\n\t\tvar vertices = geometry2.vertices;\n\t\tvar faces = geometry2.faces;\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge.sort( sortFunction );\n\n\t\t\t\tvar key = edge.toString();\n\n\t\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t\t} else {\n\n\t\t\t\t\thash[ key ].face2 = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar coords = [];\n\n\t\tfor ( var key in hash ) {\n\n\t\t\tvar h = hash[ key ];\n\n\t\t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\t\tvar vertex = vertices[ h.vert1 ];\n\t\t\t\tcoords.push( vertex.x );\n\t\t\t\tcoords.push( vertex.y );\n\t\t\t\tcoords.push( vertex.z );\n\n\t\t\t\tvertex = vertices[ h.vert2 ];\n\t\t\t\tcoords.push( vertex.x );\n\t\t\t\tcoords.push( vertex.y );\n\t\t\t\tcoords.push( vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( coords ), 3 ) );\n\n\t};\n\n\tTHREE.EdgesGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry;\n\n\t// File:src/extras/geometries/ExtrudeGeometry.js\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *  curveSegments: <int>, // number of points on the curves\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *  amount: <int>, // Depth to extrude the shape\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t *  bevelSize: <float>, // how far from shape outline is bevel\n\t *  bevelSegments: <int>, // number of bevel layers\n\t *\n\t *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\n\t *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\n\t *\n\t *  uvGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t **/\n\n\tTHREE.ExtrudeGeometry = function ( shapes, options ) {\n\n\t\tif ( typeof( shapes ) === \"undefined\" ) {\n\n\t\t\tshapes = [];\n\t\t\treturn;\n\n\t\t}\n\n\t\tTHREE.Geometry.call( this );\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tthis.addShapeList( shapes, options );\n\n\t\tthis.computeFaceNormals();\n\n\t\t// can't really use automatic vertex normals\n\t\t// as then front and back sides get smoothed too\n\t\t// should do separate smoothing just for sides\n\n\t\t//this.computeVertexNormals();\n\n\t\t//console.log( \"took\", ( Date.now() - startTime ) );\n\n\t};\n\n\tTHREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;\n\n\tTHREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n\t\tvar sl = shapes.length;\n\n\t\tfor ( var s = 0; s < sl; s ++ ) {\n\n\t\t\tvar shape = shapes[ s ];\n\t\t\tthis.addShape( shape, options );\n\n\t\t}\n\n\t};\n\n\tTHREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\n\n\t\tvar amount = options.amount !== undefined ? options.amount : 100;\n\n\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\n\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\n\t\tvar extrudePath = options.extrudePath;\n\t\tvar extrudePts, extrudeByPath = false;\n\n\t\t// Use default WorldUVGenerator if no UV generators are specified.\n\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;\n\n\t\tvar splineTube, binormal, normal, position2;\n\t\tif ( extrudePath ) {\n\n\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\textrudeByPath = true;\n\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t// SETUP TNB variables\n\n\t\t\t// Reuse TNB from TubeGeomtry for now.\n\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\tsplineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames( extrudePath, steps, false );\n\n\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\tbinormal = new THREE.Vector3();\n\t\t\tnormal = new THREE.Vector3();\n\t\t\tposition2 = new THREE.Vector3();\n\n\t\t}\n\n\t\t// Safeguards if bevels are not enabled\n\n\t\tif ( ! bevelEnabled ) {\n\n\t\t\tbevelSegments = 0;\n\t\t\tbevelThickness = 0;\n\t\t\tbevelSize = 0;\n\n\t\t}\n\n\t\t// Variables initialization\n\n\t\tvar ahole, h, hl; // looping of holes\n\t\tvar scope = this;\n\n\t\tvar shapesOffset = this.vertices.length;\n\n\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\t\tvar vertices = shapePoints.shape;\n\t\tvar holes = shapePoints.holes;\n\n\t\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\n\n\t\tif ( reverse ) {\n\n\t\t\tvertices = vertices.reverse();\n\n\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\tif ( THREE.ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\n\n\t\t}\n\n\n\t\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t/* Vertices */\n\n\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\n\t\t\tvertices = vertices.concat( ahole );\n\n\t\t}\n\n\n\t\tfunction scalePt2 ( pt, vec, size ) {\n\n\t\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\n\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t}\n\n\t\tvar b, bs, t, z,\n\t\t\tvert, vlen = vertices.length,\n\t\t\tface, flen = faces.length;\n\n\n\t\t// Find directions for point movement\n\n\n\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t//\n\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\n\n\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\n\t\t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\n\n\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t// check for collinear edges\n\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t// not collinear\n\n\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\n\t\t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t//  but prevent crazy spikes\n\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\treturn\tnew THREE.Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\tvar direction_eq = false;\t\t// assumes: opposite\n\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\tv_trans_y =  v_prev_x;\n\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn\tnew THREE.Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t}\n\n\n\t\tvar contourMovements = [];\n\n\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\tif ( j === il ) j = 0;\n\t\t\tif ( k === il ) k = 0;\n\n\t\t\t//  (j)---(i)---(k)\n\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t}\n\n\t\tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\n\t\t\toneHoleMovements = [];\n\n\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t}\n\n\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t}\n\n\n\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\tt = b / bevelSegments;\n\t\t\tz = bevelThickness * ( 1 - t );\n\n\t\t\t//z = bevelThickness * t;\n\t\t\tbs = bevelSize * ( Math.sin ( t * Math.PI / 2 ) ); // curved\n\t\t\t//bs = bevelSize * t; // linear\n\n\t\t\t// contract shape\n\n\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\tv( vert.x, vert.y,  - z );\n\n\t\t\t}\n\n\t\t\t// expand holes\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y,  - z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tbs = bevelSize;\n\n\t\t// Back facing vertices\n\n\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t} else {\n\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Add stepped vertices...\n\t\t// Including front facing vertices\n\n\t\tvar s;\n\n\t\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\t// Add bevel segments planes\n\n\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\tt = b / bevelSegments;\n\t\t\tz = bevelThickness * ( 1 - t );\n\t\t\t//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );\n\t\t\tbs = bevelSize * Math.sin ( t * Math.PI / 2 );\n\n\t\t\t// contract shape\n\n\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\tv( vert.x, vert.y,  amount + z );\n\n\t\t\t}\n\n\t\t\t// expand holes\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y,  amount + z );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t/* Faces */\n\n\t\t// Top and bottom faces\n\n\t\tbuildLidFaces();\n\n\t\t// Sides faces\n\n\t\tbuildSideFaces();\n\n\n\t\t/////  Internal functions\n\n\t\tfunction buildLidFaces() {\n\n\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\tvar layer = 0; // steps + 1\n\t\t\t\tvar offset = vlen * layer;\n\n\t\t\t\t// Bottom faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t}\n\n\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t// Top faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Bottom faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\t// Top faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Create faces for the z-sides of the shape\n\n\t\tfunction buildSideFaces() {\n\n\t\t\tvar layeroffset = 0;\n\t\t\tsidewalls( contour, layeroffset );\n\t\t\tlayeroffset += contour.length;\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t//, true\n\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\tvar j, k;\n\t\t\ti = contour.length;\n\n\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\tj = i;\n\t\t\t\tk = i - 1;\n\t\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\n\n\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tfunction v( x, y, z ) {\n\n\t\t\tscope.vertices.push( new THREE.Vector3( x, y, z ) );\n\n\t\t}\n\n\t\tfunction f3( a, b, c ) {\n\n\t\t\ta += shapesOffset;\n\t\t\tb += shapesOffset;\n\t\t\tc += shapesOffset;\n\n\t\t\tscope.faces.push( new THREE.Face3( a, b, c, null, null, 0 ) );\n\n\t\t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\n\n\t\t\tscope.faceVertexUvs[ 0 ].push( uvs );\n\n\t\t}\n\n\t\tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\n\n\t\t\ta += shapesOffset;\n\t\t\tb += shapesOffset;\n\t\t\tc += shapesOffset;\n\t\t\td += shapesOffset;\n\n\t\t\tscope.faces.push( new THREE.Face3( a, b, d, null, null, 1 ) );\n\t\t\tscope.faces.push( new THREE.Face3( b, c, d, null, null, 1 ) );\n\n\t\t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\n\n\t\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\n\t\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\n\n\t\t}\n\n\t};\n\n\tTHREE.ExtrudeGeometry.WorldUVGenerator = {\n\n\t\tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\n\n\t\t\tvar vertices = geometry.vertices;\n\n\t\t\tvar a = vertices[ indexA ];\n\t\t\tvar b = vertices[ indexB ];\n\t\t\tvar c = vertices[ indexC ];\n\n\t\t\treturn [\n\t\t\t\tnew THREE.Vector2( a.x, a.y ),\n\t\t\t\tnew THREE.Vector2( b.x, b.y ),\n\t\t\t\tnew THREE.Vector2( c.x, c.y )\n\t\t\t];\n\n\t\t},\n\n\t\tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\n\n\t\t\tvar vertices = geometry.vertices;\n\n\t\t\tvar a = vertices[ indexA ];\n\t\t\tvar b = vertices[ indexB ];\n\t\t\tvar c = vertices[ indexC ];\n\t\t\tvar d = vertices[ indexD ];\n\n\t\t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew THREE.Vector2( a.x, 1 - a.z ),\n\t\t\t\t\tnew THREE.Vector2( b.x, 1 - b.z ),\n\t\t\t\t\tnew THREE.Vector2( c.x, 1 - c.z ),\n\t\t\t\t\tnew THREE.Vector2( d.x, 1 - d.z )\n\t\t\t\t];\n\n\t\t\t} else {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew THREE.Vector2( a.y, 1 - a.z ),\n\t\t\t\t\tnew THREE.Vector2( b.y, 1 - b.z ),\n\t\t\t\t\tnew THREE.Vector2( c.y, 1 - c.z ),\n\t\t\t\t\tnew THREE.Vector2( d.y, 1 - d.z )\n\t\t\t\t];\n\n\t\t\t}\n\n\t\t}\n\t};\n\n\t// File:src/extras/geometries/ShapeGeometry.js\n\n\t/**\n\t * @author jonobr1 / http://jonobr1.com\n\t *\n\t * Creates a one-sided polygonal geometry from a path shape. Similar to\n\t * ExtrudeGeometry.\n\t *\n\t * parameters = {\n\t *\n\t *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\n\t *\n\t *\tmaterial: <int> // material index for front and back faces\n\t *\tuvGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t **/\n\n\tTHREE.ShapeGeometry = function ( shapes, options ) {\n\n\t\tTHREE.Geometry.call( this );\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\n\n\t\tthis.addShapeList( shapes, options );\n\n\t\tthis.computeFaceNormals();\n\n\t};\n\n\tTHREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;\n\n\t/**\n\t * Add an array of shapes to THREE.ShapeGeometry.\n\t */\n\tTHREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tthis.addShape( shapes[ i ], options );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\n\t */\n\tTHREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {\n\n\t\tif ( options === undefined ) options = {};\n\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n\t\tvar material = options.material;\n\t\tvar uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\n\n\t\t//\n\n\t\tvar i, l, hole;\n\n\t\tvar shapesOffset = this.vertices.length;\n\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\t\tvar vertices = shapePoints.shape;\n\t\tvar holes = shapePoints.holes;\n\n\t\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\n\n\t\tif ( reverse ) {\n\n\t\t\tvertices = vertices.reverse();\n\n\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\n\n\t\t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n\t\t\t\thole = holes[ i ];\n\n\t\t\t\tif ( THREE.ShapeUtils.isClockWise( hole ) ) {\n\n\t\t\t\t\tholes[ i ] = hole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treverse = false;\n\n\t\t}\n\n\t\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t// Vertices\n\n\t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n\t\t\thole = holes[ i ];\n\t\t\tvertices = vertices.concat( hole );\n\n\t\t}\n\n\t\t//\n\n\t\tvar vert, vlen = vertices.length;\n\t\tvar face, flen = faces.length;\n\n\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\tvert = vertices[ i ];\n\n\t\t\tthis.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );\n\n\t\t}\n\n\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\tface = faces[ i ];\n\n\t\t\tvar a = face[ 0 ] + shapesOffset;\n\t\t\tvar b = face[ 1 ] + shapesOffset;\n\t\t\tvar c = face[ 2 ] + shapesOffset;\n\n\t\t\tthis.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\n\n\t\t}\n\n\t};\n\n\t// File:src/extras/geometries/LatheBufferGeometry.js\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t // points - to create a closed torus, one must use a set of points\n\t //    like so: [ a, b, c, d, a ], see first is the same as last.\n\t // segments - the number of circumference segments to create\n\t // phiStart - the starting radian\n\t // phiLength - the radian (0 to 2PI) range of the lathed section\n\t //    2PI is a closed lathe, less than 2PI is a portion.\n\n\tTHREE.LatheBufferGeometry = function ( points, segments, phiStart, phiLength ) {\n\n\t\tTHREE.BufferGeometry.call( this );\n\n\t\tthis.type = 'LatheBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments ) || 12;\n\t\tphiStart = phiStart || 0;\n\t\tphiLength = phiLength || Math.PI * 2;\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\t\tphiLength = THREE.Math.clamp( phiLength, 0, Math.PI * 2 );\n\n\t\t// these are used to calculate buffer length\n\t\tvar vertexCount = ( segments + 1 ) * points.length;\n\t\tvar indexCount = segments * points.length * 2 * 3;\n\n\t\t// buffers\n\t\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t\t// helper variables\n\t\tvar index = 0, indexOffset = 0, base;\n\t\tvar inversePointLength = 1.0 / ( points.length - 1 );\n\t\tvar inverseSegments = 1.0 / segments;\n\t\tvar vertex = new THREE.Vector3();\n\t\tvar uv = new THREE.Vector2();\n\t\tvar i, j;\n\n\t\t// generate vertices and uvs\n\n\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tvar sin = Math.sin( phi );\n\t\t\tvar cos = Math.cos( phi );\n\n\t\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\t\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t\t// increase index\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tbase = j + i * points.length;\n\n\t\t\t\t// indices\n\t\t\t\tvar a = base;\n\t\t\t\tvar b = base + points.length;\n\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\tvar d = base + 1;\n\n\t\t\t\t// face one\n\t\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t\t\t// face two\n\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', vertices );\n\t\tthis.addAttribute( 'uv', uvs );\n\n\t\t// generate normals\n\n\t\tthis.computeVertexNormals();\n\n\t\t// if the geometry is closed, we need to average the normals along the seam.\n\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\tif( phiLength === Math.PI * 2 ) {\n\n\t\t\tvar normals = this.attributes.normal.array;\n\t\t\tvar n1 = new THREE.Vector3();\n\t\t\tvar n2 = new THREE.Vector3();\n\t\t\tvar n = new THREE.Vector3();\n\n\t\t\t// this is the buffer offset for the last line of vertices\n\t\t\tbase = segments * points.length * 3;\n\n\t\t\tfor( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t\t// select the normal of the vertex in the first line\n\t\t\t\tn1.x = normals[ j + 0 ];\n\t\t\t\tn1.y = normals[ j + 1 ];\n\t\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t\t// select the normal of the vertex in the last line\n\t\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t\t// average normals\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t\t// assign the new values to both normals\n\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t\t} // next row\n\n\t\t}\n\n\t};\n\n\tTHREE.LatheBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.LatheBufferGeometry.prototype.constructor = THREE.LatheBufferGeometry;\n\n\t// File:src/extras/geometries/LatheGeometry.js\n\n\t/**\n\t * @author astrodud / http://astrodud.isgreat.org/\n\t * @author zz85 / https://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t */\n\n\t// points - to create a closed torus, one must use a set of points\n\t//    like so: [ a, b, c, d, a ], see first is the same as last.\n\t// segments - the number of circumference segments to create\n\t// phiStart - the starting radian\n\t// phiLength - the radian (0 to 2PI) range of the lathed section\n\t//    2PI is a closed lathe, less than 2PI is a portion.\n\n\tTHREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {\n\n\t\tTHREE.Geometry.call( this );\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new THREE.LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t\tthis.mergeVertices();\n\n\t};\n\n\tTHREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;\n\n\t// File:src/extras/geometries/PlaneGeometry.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n\t */\n\n\tTHREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {\n\n\t\tTHREE.Geometry.call( this );\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new THREE.PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\n\t};\n\n\tTHREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;\n\n\t// File:src/extras/geometries/PlaneBufferGeometry.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n\t */\n\n\tTHREE.PlaneBufferGeometry = function ( width, height, widthSegments, heightSegments ) {\n\n\t\tTHREE.BufferGeometry.call( this );\n\n\t\tthis.type = 'PlaneBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tvar width_half = width / 2;\n\t\tvar height_half = height / 2;\n\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar segment_width = width / gridX;\n\t\tvar segment_height = height / gridY;\n\n\t\tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\n\t\tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\n\t\tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\n\n\t\tvar offset = 0;\n\t\tvar offset2 = 0;\n\n\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\t\tvertices[ offset ] = x;\n\t\t\t\tvertices[ offset + 1 ] = - y;\n\n\t\t\t\tnormals[ offset + 2 ] = 1;\n\n\t\t\t\tuvs[ offset2 ] = ix / gridX;\n\t\t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\n\n\t\t\t\toffset += 3;\n\t\t\t\toffset2 += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\toffset = 0;\n\n\t\tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\n\n\t\tfor ( var iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tvar a = ix + gridX1 * iy;\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\tindices[ offset ] = a;\n\t\t\t\tindices[ offset + 1 ] = b;\n\t\t\t\tindices[ offset + 2 ] = d;\n\n\t\t\t\tindices[ offset + 3 ] = b;\n\t\t\t\tindices[ offset + 4 ] = c;\n\t\t\t\tindices[ offset + 5 ] = d;\n\n\t\t\t\toffset += 6;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n\t};\n\n\tTHREE.PlaneBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry;\n\n\t// File:src/extras/geometries/RingBufferGeometry.js\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tTHREE.RingBufferGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tTHREE.BufferGeometry.call( this );\n\n\t\tthis.type = 'RingBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tinnerRadius = innerRadius || 20;\n\t\touterRadius = outerRadius || 50;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t\t// these are used to calculate buffer length\n\t\tvar vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );\n\t\tvar indexCount = thetaSegments * phiSegments * 2 * 3;\n\n\t\t// buffers\n\t\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t\t// some helper variables\n\t\tvar index = 0, indexOffset = 0, segment;\n\t\tvar radius = innerRadius;\n\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tvar vertex = new THREE.Vector3();\n\t\tvar uv = new THREE.Vector2();\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\t// values are generate from the inside of the ring to the outside\n\n\t\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\t\t\t\tnormals.setXYZ( index, 0, 0, 1 );\n\n\t\t\t\t// uv\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\t\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t\t// increase index\n\t\t\t\tindex++;\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\t\t// indices\n\t\t\t\tvar a = segment;\n\t\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\t\tvar d = segment + 1;\n\n\t\t\t\t// face one\n\t\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\n\t\t\t\t// face two\n\t\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', vertices );\n\t\tthis.addAttribute( 'normal', normals );\n\t\tthis.addAttribute( 'uv', uvs );\n\n\t};\n\n\tTHREE.RingBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.RingBufferGeometry.prototype.constructor = THREE.RingBufferGeometry;\n\n\t// File:src/extras/geometries/RingGeometry.js\n\n\t/**\n\t * @author Kaleb Murphy\n\t */\n\n\tTHREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tTHREE.Geometry.call( this );\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new THREE.RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\n\t};\n\n\tTHREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.RingGeometry.prototype.constructor = THREE.RingGeometry;\n\n\t// File:src/extras/geometries/SphereGeometry.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tTHREE.Geometry.call( this );\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new THREE.SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\n\t};\n\n\tTHREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;\n\n\t// File:src/extras/geometries/SphereBufferGeometry.js\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * based on THREE.SphereGeometry\n\t */\n\n\tTHREE.SphereBufferGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tTHREE.BufferGeometry.call( this );\n\n\t\tthis.type = 'SphereBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 50;\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\t\tvar thetaEnd = thetaStart + thetaLength;\n\n\t\tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\n\n\t\tvar positions = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t\tvar index = 0, vertices = [], normal = new THREE.Vector3();\n\n\t\tfor ( var y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\tvar verticesRow = [];\n\n\t\t\tvar v = y / heightSegments;\n\n\t\t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\n\n\t\t\t\tvar u = x / widthSegments;\n\n\t\t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tnormal.set( px, py, pz ).normalize();\n\n\t\t\t\tpositions.setXYZ( index, px, py, pz );\n\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t\t\t\tuvs.setXY( index, u, 1 - v );\n\n\t\t\t\tverticesRow.push( index );\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\tvertices.push( verticesRow );\n\n\t\t}\n\n\t\tvar indices = [];\n\n\t\tfor ( var y = 0; y < heightSegments; y ++ ) {\n\n\t\t\tfor ( var x = 0; x < widthSegments; x ++ ) {\n\n\t\t\t\tvar v1 = vertices[ y ][ x + 1 ];\n\t\t\t\tvar v2 = vertices[ y ][ x ];\n\t\t\t\tvar v3 = vertices[ y + 1 ][ x ];\n\t\t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\n\n\t\t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\n\t\t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setIndex( new ( positions.count > 65535 ? THREE.Uint32Attribute : THREE.Uint16Attribute )( indices, 1 ) );\n\t\tthis.addAttribute( 'position', positions );\n\t\tthis.addAttribute( 'normal', normals );\n\t\tthis.addAttribute( 'uv', uvs );\n\n\t\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n\t};\n\n\tTHREE.SphereBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry;\n\n\t// File:src/extras/geometries/TextGeometry.js\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *  font: <THREE.Font>, // font\n\t *\n\t *  size: <float>, // size of the text\n\t *  height: <float>, // thickness to extrude text\n\t *  curveSegments: <int>, // number of points on the curves\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into text bevel goes\n\t *  bevelSize: <float> // how far from text outline is bevel\n\t * }\n\t */\n\n\tTHREE.TextGeometry = function ( text, parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar font = parameters.font;\n\n\t\tif ( font instanceof THREE.Font === false ) {\n\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\t\treturn new THREE.Geometry();\n\n\t\t}\n\n\t\tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\n\t\t// translate parameters to ExtrudeGeometry API\n\n\t\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\n\t\t// defaults\n\n\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\t\tTHREE.ExtrudeGeometry.call( this, shapes, parameters );\n\n\t\tthis.type = 'TextGeometry';\n\n\t};\n\n\tTHREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );\n\tTHREE.TextGeometry.prototype.constructor = THREE.TextGeometry;\n\n\t// File:src/extras/geometries/TorusBufferGeometry.js\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tTHREE.TorusBufferGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tTHREE.BufferGeometry.call( this );\n\n\t\tthis.type = 'TorusBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradius = radius || 100;\n\t\ttube = tube || 40;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t\tarc = arc || Math.PI * 2;\n\n\t\t// used to calculate buffer length\n\t\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\t\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\n\t\t// buffers\n\t\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\t\tvar vertices = new Float32Array( vertexCount * 3 );\n\t\tvar normals = new Float32Array( vertexCount * 3 );\n\t\tvar uvs = new Float32Array( vertexCount * 2 );\n\n\t\t// offset variables\n\t\tvar vertexBufferOffset = 0;\n\t\tvar uvBufferOffset = 0;\n\t\tvar indexBufferOffset = 0;\n\n\t\t// helper variables\n\t\tvar center = new THREE.Vector3();\n\t\tvar vertex = new THREE.Vector3();\n\t\tvar normal = new THREE.Vector3();\n\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices[ vertexBufferOffset ] = vertex.x;\n\t\t\t\tvertices[ vertexBufferOffset + 1 ] = vertex.y;\n\t\t\t\tvertices[ vertexBufferOffset + 2 ] = vertex.z;\n\n\t\t\t\t// this vector is used to calculate the normal\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\n\t\t\t\t// normal\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals[ vertexBufferOffset ] = normal.x;\n\t\t\t\tnormals[ vertexBufferOffset + 1 ] = normal.y;\n\t\t\t\tnormals[ vertexBufferOffset + 2 ] = normal.z;\n\n\t\t\t\t// uv\n\t\t\t\tuvs[ uvBufferOffset ] = i / tubularSegments;\n\t\t\t\tuvs[ uvBufferOffset + 1 ] = j / radialSegments;\n\n\t\t\t\t// update offsets\n\t\t\t\tvertexBufferOffset += 3;\n\t\t\t\tuvBufferOffset += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// face one\n\t\t\t\tindices[ indexBufferOffset ] = a;\n\t\t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\n\t\t\t\t// face two\n\t\t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t\t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\n\t\t\t\t// update offset\n\t\t\t\tindexBufferOffset += 6;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n\t};\n\n\tTHREE.TorusBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.TorusBufferGeometry.prototype.constructor = THREE.TorusBufferGeometry;\n\n\t// File:src/extras/geometries/TorusGeometry.js\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author mrdoob / http://mrdoob.com/\n\t * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\n\t */\n\n\tTHREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tTHREE.Geometry.call( this );\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tthis.fromBufferGeometry( new THREE.TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\n\t};\n\n\tTHREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;\n\n\t// File:src/extras/geometries/TorusKnotBufferGeometry.js\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * see: http://www.blackpawn.com/texts/pqtorus/\n\t */\n\tTHREE.TorusKnotBufferGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\t\tTHREE.BufferGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tradius = radius || 100;\n\t\ttube = tube || 40;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\tp = p || 2;\n\t\tq = q || 3;\n\n\t\t// used to calculate buffer length\n\t\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\t\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\n\t\t// buffers\n\t\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t\t// helper variables\n\t\tvar i, j, index = 0, indexOffset = 0;\n\n\t\tvar vertex = new THREE.Vector3();\n\t\tvar normal = new THREE.Vector3();\n\t\tvar uv = new THREE.Vector2();\n\n\t\tvar P1 = new THREE.Vector3();\n\t\tvar P2 = new THREE.Vector3();\n\n\t\tvar B = new THREE.Vector3();\n\t\tvar T = new THREE.Vector3();\n\t\tvar N = new THREE.Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\t// vertex\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\tuv.y = j / radialSegments;\n\t\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t\t// increase index\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// face one\n\t\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t\t\t// face two\n\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', vertices );\n\t\tthis.addAttribute( 'normal', normals );\n\t\tthis.addAttribute( 'uv', uvs );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tvar cu = Math.cos( u );\n\t\t\tvar su = Math.sin( u );\n\t\t\tvar quOverP = q / p * u;\n\t\t\tvar cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t};\n\n\tTHREE.TorusKnotBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.TorusKnotBufferGeometry.prototype.constructor = THREE.TorusKnotBufferGeometry;\n\n\t// File:src/extras/geometries/TorusKnotGeometry.js\n\n\t/**\n\t * @author oosmoxiecode\n\t */\n\n\tTHREE.TorusKnotGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\t\tTHREE.Geometry.call( this );\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tif( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\n\t\tthis.fromBufferGeometry( new THREE.TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t\tthis.mergeVertices();\n\n\t};\n\n\tTHREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;\n\n\t// File:src/extras/geometries/TubeGeometry.js\n\n\t/**\n\t * @author WestLangley / https://github.com/WestLangley\n\t * @author zz85 / https://github.com/zz85\n\t * @author miningold / https://github.com/miningold\n\t * @author jonobr1 / https://github.com/jonobr1\n\t *\n\t * Modified from the TorusKnotGeometry by @oosmoxiecode\n\t *\n\t * Creates a tube which extrudes along a 3d spline\n\t *\n\t * Uses parallel transport frames as described in\n\t * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\t */\n\n\tTHREE.TubeGeometry = function ( path, segments, radius, radialSegments, closed, taper ) {\n\n\t\tTHREE.Geometry.call( this );\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\tsegments: segments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed,\n\t\t\ttaper: taper\n\t\t};\n\n\t\tsegments = segments || 64;\n\t\tradius = radius || 1;\n\t\tradialSegments = radialSegments || 8;\n\t\tclosed = closed || false;\n\t\ttaper = taper || THREE.TubeGeometry.NoTaper;\n\n\t\tvar grid = [];\n\n\t\tvar scope = this,\n\n\t\t\ttangent,\n\t\t\tnormal,\n\t\t\tbinormal,\n\n\t\t\tnumpoints = segments + 1,\n\n\t\t\tu, v, r,\n\n\t\t\tcx, cy,\n\t\t\tpos, pos2 = new THREE.Vector3(),\n\t\t\ti, j,\n\t\t\tip, jp,\n\t\t\ta, b, c, d,\n\t\t\tuva, uvb, uvc, uvd;\n\n\t\tvar frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),\n\t\t\ttangents = frames.tangents,\n\t\t\tnormals = frames.normals,\n\t\t\tbinormals = frames.binormals;\n\n\t\t// proxy internals\n\t\tthis.tangents = tangents;\n\t\tthis.normals = normals;\n\t\tthis.binormals = binormals;\n\n\t\tfunction vert( x, y, z ) {\n\n\t\t\treturn scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;\n\n\t\t}\n\n\t\t// construct the grid\n\n\t\tfor ( i = 0; i < numpoints; i ++ ) {\n\n\t\t\tgrid[ i ] = [];\n\n\t\t\tu = i / ( numpoints - 1 );\n\n\t\t\tpos = path.getPointAt( u );\n\n\t\t\ttangent = tangents[ i ];\n\t\t\tnormal = normals[ i ];\n\t\t\tbinormal = binormals[ i ];\n\n\t\t\tr = radius * taper( u );\n\n\t\t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n\t\t\t\tv = j / radialSegments * 2 * Math.PI;\n\n\t\t\t\tcx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n\t\t\t\tcy = r * Math.sin( v );\n\n\t\t\t\tpos2.copy( pos );\n\t\t\t\tpos2.x += cx * normal.x + cy * binormal.x;\n\t\t\t\tpos2.y += cx * normal.y + cy * binormal.y;\n\t\t\t\tpos2.z += cx * normal.z + cy * binormal.z;\n\n\t\t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\t// construct the mesh\n\n\t\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n\t\t\t\tip = ( closed ) ? ( i + 1 ) % segments : i + 1;\n\t\t\t\tjp = ( j + 1 ) % radialSegments;\n\n\t\t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\n\t\t\t\tb = grid[ ip ][ j ];\n\t\t\t\tc = grid[ ip ][ jp ];\n\t\t\t\td = grid[ i ][ jp ];\n\n\t\t\t\tuva = new THREE.Vector2( i / segments, j / radialSegments );\n\t\t\t\tuvb = new THREE.Vector2( ( i + 1 ) / segments, j / radialSegments );\n\t\t\t\tuvc = new THREE.Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\n\t\t\t\tuvd = new THREE.Vector2( i / segments, ( j + 1 ) / radialSegments );\n\n\t\t\t\tthis.faces.push( new THREE.Face3( a, b, d ) );\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\n\t\t\t\tthis.faces.push( new THREE.Face3( b, c, d ) );\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeFaceNormals();\n\t\tthis.computeVertexNormals();\n\n\t};\n\n\tTHREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;\n\n\tTHREE.TubeGeometry.NoTaper = function ( u ) {\n\n\t\treturn 1;\n\n\t};\n\n\tTHREE.TubeGeometry.SinusoidalTaper = function ( u ) {\n\n\t\treturn Math.sin( Math.PI * u );\n\n\t};\n\n\t// For computing of Frenet frames, exposing the tangents, normals and binormals the spline\n\tTHREE.TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\n\n\t\tvar\tnormal = new THREE.Vector3(),\n\n\t\t\ttangents = [],\n\t\t\tnormals = [],\n\t\t\tbinormals = [],\n\n\t\t\tvec = new THREE.Vector3(),\n\t\t\tmat = new THREE.Matrix4(),\n\n\t\t\tnumpoints = segments + 1,\n\t\t\ttheta,\n\t\t\tsmallest,\n\n\t\t\ttx, ty, tz,\n\t\t\ti, u;\n\n\n\t\t// expose internals\n\t\tthis.tangents = tangents;\n\t\tthis.normals = normals;\n\t\tthis.binormals = binormals;\n\n\t\t// compute the tangent vectors for each segment on the path\n\n\t\tfor ( i = 0; i < numpoints; i ++ ) {\n\n\t\t\tu = i / ( numpoints - 1 );\n\n\t\t\ttangents[ i ] = path.getTangentAt( u );\n\t\t\ttangents[ i ].normalize();\n\n\t\t}\n\n\t\tinitialNormal3();\n\n\t\t/*\n\t\tfunction initialNormal1(lastBinormal) {\n\t\t\t// fixed start binormal. Has dangers of 0 vectors\n\t\t\tnormals[ 0 ] = new THREE.Vector3();\n\t\t\tbinormals[ 0 ] = new THREE.Vector3();\n\t\t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\n\t\t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\t\t}\n\n\t\tfunction initialNormal2() {\n\n\t\t\t// This uses the Frenet-Serret formula for deriving binormal\n\t\t\tvar t2 = path.getTangentAt( epsilon );\n\n\t\t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\n\t\t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\t\t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\n\t\t}\n\t\t*/\n\n\t\tfunction initialNormal3() {\n\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the smallest tangent xyz component\n\n\t\t\tnormals[ 0 ] = new THREE.Vector3();\n\t\t\tbinormals[ 0 ] = new THREE.Vector3();\n\t\t\tsmallest = Number.MAX_VALUE;\n\t\t\ttx = Math.abs( tangents[ 0 ].x );\n\t\t\tty = Math.abs( tangents[ 0 ].y );\n\t\t\ttz = Math.abs( tangents[ 0 ].z );\n\n\t\t\tif ( tx <= smallest ) {\n\n\t\t\t\tsmallest = tx;\n\t\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( ty <= smallest ) {\n\n\t\t\t\tsmallest = ty;\n\t\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t\t}\n\n\t\t\tif ( tz <= smallest ) {\n\n\t\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t\t}\n\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\t\t}\n\n\n\t\t// compute the slowly-varying normal and binormal vectors for each segment on the path\n\n\t\tfor ( i = 1; i < numpoints; i ++ ) {\n\n\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\tvec.normalize();\n\n\t\t\t\ttheta = Math.acos( THREE.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t}\n\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t}\n\n\n\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\tif ( closed ) {\n\n\t\t\ttheta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );\n\t\t\ttheta /= ( numpoints - 1 );\n\n\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {\n\n\t\t\t\ttheta = - theta;\n\n\t\t\t}\n\n\t\t\tfor ( i = 1; i < numpoints; i ++ ) {\n\n\t\t\t\t// twist a little...\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t// File:src/extras/geometries/PolyhedronGeometry.js\n\n\t/**\n\t * @author clockworkgeek / https://github.com/clockworkgeek\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tTHREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {\n\n\t\tTHREE.Geometry.call( this );\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tdetail = detail || 0;\n\n\t\tvar that = this;\n\n\t\tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\n\n\t\t\tprepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\n\n\t\t}\n\n\t\tvar p = this.vertices;\n\n\t\tvar faces = [];\n\n\t\tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\n\n\t\t\tvar v1 = p[ indices[ i ] ];\n\t\t\tvar v2 = p[ indices[ i + 1 ] ];\n\t\t\tvar v3 = p[ indices[ i + 2 ] ];\n\n\t\t\tfaces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\n\t\t}\n\n\t\tvar centroid = new THREE.Vector3();\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tsubdivide( faces[ i ], detail );\n\n\t\t}\n\n\n\t\t// Handle case when face straddles the seam\n\n\t\tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\n\n\t\t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\tvar x0 = uvs[ 0 ].x;\n\t\t\tvar x1 = uvs[ 1 ].x;\n\t\t\tvar x2 = uvs[ 2 ].x;\n\n\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\n\t\t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\n\t\t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\n\n\t\t\t}\n\n\t\t}\n\n\n\t\t// Apply radius\n\n\t\tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n\t\t\tthis.vertices[ i ].multiplyScalar( radius );\n\n\t\t}\n\n\n\t\t// Merge vertices\n\n\t\tthis.mergeVertices();\n\n\t\tthis.computeFaceNormals();\n\n\t\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n\n\t\t// Project vector onto sphere's surface\n\n\t\tfunction prepare( vector ) {\n\n\t\t\tvar vertex = vector.normalize().clone();\n\t\t\tvertex.index = that.vertices.push( vertex ) - 1;\n\n\t\t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\n\n\t\t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\n\t\t\tvar v = inclination( vector ) / Math.PI + 0.5;\n\t\t\tvertex.uv = new THREE.Vector2( u, 1 - v );\n\n\t\t\treturn vertex;\n\n\t\t}\n\n\n\t\t// Approximate a curved face with recursively sub-divided triangles.\n\n\t\tfunction make( v1, v2, v3 ) {\n\n\t\t\tvar face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\t\t\tthat.faces.push( face );\n\n\t\t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\n\n\t\t\tvar azi = azimuth( centroid );\n\n\t\t\tthat.faceVertexUvs[ 0 ].push( [\n\t\t\t\tcorrectUV( v1.uv, v1, azi ),\n\t\t\t\tcorrectUV( v2.uv, v2, azi ),\n\t\t\t\tcorrectUV( v3.uv, v3, azi )\n\t\t\t] );\n\n\t\t}\n\n\n\t\t// Analytically subdivide a face to the required detail level.\n\n\t\tfunction subdivide( face, detail ) {\n\n\t\t\tvar cols = Math.pow( 2, detail );\n\t\t\tvar a = prepare( that.vertices[ face.a ] );\n\t\t\tvar b = prepare( that.vertices[ face.b ] );\n\t\t\tvar c = prepare( that.vertices[ face.c ] );\n\t\t\tvar v = [];\n\n\t\t\t// Construct all of the vertices for this subdivision.\n\n\t\t\tfor ( var i = 0 ; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\n\t\t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\n\t\t\t\tvar rows = cols - i;\n\n\t\t\t\tfor ( var j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Construct all of the faces.\n\n\t\t\tfor ( var i = 0; i < cols ; i ++ ) {\n\n\t\t\t\tfor ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tmake(\n\t\t\t\t\t\t\tv[ i ][ k + 1 ],\n\t\t\t\t\t\t\tv[ i + 1 ][ k ],\n\t\t\t\t\t\t\tv[ i ][ k ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmake(\n\t\t\t\t\t\t\tv[ i ][ k + 1 ],\n\t\t\t\t\t\t\tv[ i + 1 ][ k + 1 ],\n\t\t\t\t\t\t\tv[ i + 1 ][ k ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\n\t\t// Texture fixing helper. Spheres have some odd behaviours.\n\n\t\tfunction correctUV( uv, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\n\t\t\treturn uv.clone();\n\n\t\t}\n\n\n\t};\n\n\tTHREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;\n\n\t// File:src/extras/geometries/DodecahedronGeometry.js\n\n\t/**\n\t * @author Abe Pazos / https://hamoid.com\n\t */\n\n\tTHREE.DodecahedronGeometry = function ( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tvar r = 1 / t;\n\n\t\tvar vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,    - 1, - 1,  1,\n\t\t\t- 1,  1, - 1,    - 1,  1,  1,\n\t\t\t 1, - 1, - 1,     1, - 1,  1,\n\t\t\t 1,  1, - 1,     1,  1,  1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t 0, - r, - t,     0, - r,  t,\n\t\t\t 0,  r, - t,     0,  r,  t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t,  0,    - r,  t,  0,\n\t\t\t r, - t,  0,     r,  t,  0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t,  0, - r,     t,  0, - r,\n\t\t\t- t,  0,  r,     t,  0,  r\n\t\t];\n\n\t\tvar indices = [\n\t\t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\n\t\t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\n\t\t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\n\t\t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\n\t\t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\n\t\t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\n\t\t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\n\t\t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\n\t\t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\n\t\t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\n\t\t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\n\t\t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\n\t\t];\n\n\t\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t};\n\n\tTHREE.DodecahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\n\tTHREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry;\n\n\t// File:src/extras/geometries/IcosahedronGeometry.js\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t */\n\n\tTHREE.IcosahedronGeometry = function ( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tvar vertices = [\n\t\t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\n\t\t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\n\t\t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\n\t\t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\n\t\t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\n\t\t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\n\t\t];\n\n\t\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t};\n\n\tTHREE.IcosahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\n\tTHREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;\n\n\t// File:src/extras/geometries/OctahedronGeometry.js\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t */\n\n\tTHREE.OctahedronGeometry = function ( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\n\t\t];\n\n\t\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t};\n\n\tTHREE.OctahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\n\tTHREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;\n\n\t// File:src/extras/geometries/TetrahedronGeometry.js\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t */\n\n\tTHREE.TetrahedronGeometry = function ( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\n\t\t];\n\n\t\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t};\n\n\tTHREE.TetrahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\n\tTHREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;\n\n\t// File:src/extras/geometries/ParametricGeometry.js\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n\t *\n\t * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\n\t *\n\t */\n\n\tTHREE.ParametricGeometry = function ( func, slices, stacks ) {\n\n\t\tTHREE.Geometry.call( this );\n\n\t\tthis.type = 'ParametricGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\tvar verts = this.vertices;\n\t\tvar faces = this.faces;\n\t\tvar uvs = this.faceVertexUvs[ 0 ];\n\n\t\tvar i, j, p;\n\t\tvar u, v;\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\t\tv = i / stacks;\n\n\t\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\t\tu = j / slices;\n\n\t\t\t\tp = func( u, v );\n\t\t\t\tverts.push( p );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar a, b, c, d;\n\t\tvar uva, uvb, uvc, uvd;\n\n\t\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\t\ta = i * sliceCount + j;\n\t\t\t\tb = i * sliceCount + j + 1;\n\t\t\t\tc = ( i + 1 ) * sliceCount + j + 1;\n\t\t\t\td = ( i + 1 ) * sliceCount + j;\n\n\t\t\t\tuva = new THREE.Vector2( j / slices, i / stacks );\n\t\t\t\tuvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );\n\t\t\t\tuvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\n\t\t\t\tuvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );\n\n\t\t\t\tfaces.push( new THREE.Face3( a, b, d ) );\n\t\t\t\tuvs.push( [ uva, uvb, uvd ] );\n\n\t\t\t\tfaces.push( new THREE.Face3( b, c, d ) );\n\t\t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// console.log(this);\n\n\t\t// magic bullet\n\t\t// var diff = this.mergeVertices();\n\t\t// console.log('removed ', diff, ' vertices by merging');\n\n\t\tthis.computeFaceNormals();\n\t\tthis.computeVertexNormals();\n\n\t};\n\n\tTHREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;\n\n\t// File:src/extras/geometries/WireframeGeometry.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.WireframeGeometry = function ( geometry ) {\n\n\t\tTHREE.BufferGeometry.call( this );\n\n\t\tvar edge = [ 0, 0 ], hash = {};\n\n\t\tfunction sortFunction( a, b ) {\n\n\t\t\treturn a - b;\n\n\t\t}\n\n\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar numEdges = 0;\n\n\t\t\t// allocate maximal size\n\t\t\tvar edges = new Uint32Array( 6 * faces.length );\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t\t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\t\tedge.sort( sortFunction );\n\n\t\t\t\t\tvar key = edge.toString();\n\n\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t\t\t\t\t\thash[ key ] = true;\n\t\t\t\t\t\tnumEdges ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n\t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n\t\t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\n\n\t\t\t\t\tvar index = 6 * i + 3 * j;\n\t\t\t\t\tcoords[ index + 0 ] = vertex.x;\n\t\t\t\t\tcoords[ index + 1 ] = vertex.y;\n\t\t\t\t\tcoords[ index + 2 ] = vertex.z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\n\t\t} else if ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// Indexed BufferGeometry\n\n\t\t\t\tvar indices = geometry.index.array;\n\t\t\t\tvar vertices = geometry.attributes.position;\n\t\t\t\tvar groups = geometry.groups;\n\t\t\t\tvar numEdges = 0;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgeometry.addGroup( 0, indices.length );\n\n\t\t\t\t}\n\n\t\t\t\t// allocate maximal size\n\t\t\t\tvar edges = new Uint32Array( 2 * indices.length );\n\n\t\t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tvar group = groups[ o ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\n\t\t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\n\t\t\t\t\t\t\tedge.sort( sortFunction );\n\n\t\t\t\t\t\t\tvar key = edge.toString();\n\n\t\t\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t\t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t\t\t\t\t\t\t\thash[ key ] = true;\n\t\t\t\t\t\t\t\tnumEdges ++;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n\t\t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n\t\t\t\t\t\tvar index = 6 * i + 3 * j;\n\t\t\t\t\t\tvar index2 = edges[ 2 * i + j ];\n\n\t\t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\n\t\t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\n\t\t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tvar vertices = geometry.attributes.position.array;\n\t\t\t\tvar numEdges = vertices.length / 3;\n\t\t\t\tvar numTris = numEdges / 3;\n\n\t\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\n\n\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\tvar index = 18 * i + 6 * j;\n\n\t\t\t\t\t\tvar index1 = 9 * i + 3 * j;\n\t\t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\n\t\t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\n\t\t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\n\n\t\t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\n\t\t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\n\t\t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\n\t\t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tTHREE.WireframeGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry;\n\n\t// File:src/extras/helpers/AxisHelper.js\n\n\t/**\n\t * @author sroucheray / http://sroucheray.org/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.AxisHelper = function ( size ) {\n\n\t\tsize = size || 1;\n\n\t\tvar vertices = new Float32Array( [\n\t\t\t0, 0, 0,  size, 0, 0,\n\t\t\t0, 0, 0,  0, size, 0,\n\t\t\t0, 0, 0,  0, 0, size\n\t\t] );\n\n\t\tvar colors = new Float32Array( [\n\t\t\t1, 0, 0,  1, 0.6, 0,\n\t\t\t0, 1, 0,  0.6, 1, 0,\n\t\t\t0, 0, 1,  0, 0.6, 1\n\t\t] );\n\n\t\tvar geometry = new THREE.BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\n\n\t\tTHREE.LineSegments.call( this, geometry, material );\n\n\t};\n\n\tTHREE.AxisHelper.prototype = Object.create( THREE.LineSegments.prototype );\n\tTHREE.AxisHelper.prototype.constructor = THREE.AxisHelper;\n\n\t// File:src/extras/helpers/ArrowHelper.js\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author zz85 / http://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t *\n\t * Creates an arrow for visualizing directions\n\t *\n\t * Parameters:\n\t *  dir - Vector3\n\t *  origin - Vector3\n\t *  length - Number\n\t *  color - color in hex value\n\t *  headLength - Number\n\t *  headWidth - Number\n\t */\n\n\tTHREE.ArrowHelper = ( function () {\n\n\t\tvar lineGeometry = new THREE.BufferGeometry();\n\t\tlineGeometry.addAttribute( 'position', new THREE.Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\tvar coneGeometry = new THREE.CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\tconeGeometry.translate( 0, - 0.5, 0 );\n\n\t\treturn function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t\t// dir is assumed to be normalized\n\n\t\t\tTHREE.Object3D.call( this );\n\n\t\t\tif ( color === undefined ) color = 0xffff00;\n\t\t\tif ( length === undefined ) length = 1;\n\t\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\t\t\tthis.position.copy( origin );\n\n\t\t\tthis.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: color } ) );\n\t\t\tthis.line.matrixAutoUpdate = false;\n\t\t\tthis.add( this.line );\n\n\t\t\tthis.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: color } ) );\n\t\t\tthis.cone.matrixAutoUpdate = false;\n\t\t\tthis.add( this.cone );\n\n\t\t\tthis.setDirection( dir );\n\t\t\tthis.setLength( length, headLength, headWidth );\n\n\t\t};\n\n\t}() );\n\n\tTHREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );\n\tTHREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;\n\n\tTHREE.ArrowHelper.prototype.setDirection = ( function () {\n\n\t\tvar axis = new THREE.Vector3();\n\t\tvar radians;\n\n\t\treturn function setDirection( dir ) {\n\n\t\t\t// dir is assumed to be normalized\n\n\t\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t\t} else {\n\n\t\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\t\tradians = Math.acos( dir.y );\n\n\t\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\n\t\t\t}\n\n\t\t};\n\n\t}() );\n\n\tTHREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\t\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t};\n\n\tTHREE.ArrowHelper.prototype.setColor = function ( color ) {\n\n\t\tthis.line.material.color.copy( color );\n\t\tthis.cone.material.color.copy( color );\n\n\t};\n\n\t// File:src/extras/helpers/BoxHelper.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.BoxHelper = function ( object, color ) {\n\n\t\tif ( color === undefined ) color = 0xffff00;\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tvar positions = new Float32Array( 8 * 3 );\n\n\t\tvar geometry = new THREE.BufferGeometry();\n\t\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\t\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\n\t\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color } ) );\n\n\t\tif ( object !== undefined ) {\n\n\t\t\tthis.update( object );\n\n\t\t}\n\n\t};\n\n\tTHREE.BoxHelper.prototype = Object.create( THREE.LineSegments.prototype );\n\tTHREE.BoxHelper.prototype.constructor = THREE.BoxHelper;\n\n\tTHREE.BoxHelper.prototype.update = ( function () {\n\n\t\tvar box = new THREE.Box3();\n\n\t\treturn function update( object ) {\n\n\t\t\tif ( object instanceof THREE.Box3 ) {\n\n\t\t\t\tbox.copy( object );\n\n\t\t\t} else {\n\n\t\t\t\tbox.setFromObject( object );\n\n\t\t\t}\n\n\t\t\tif ( box.isEmpty() ) return;\n\n\t\t\tvar min = box.min;\n\t\t\tvar max = box.max;\n\n\t\t\t/*\n\t\t\t  5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\n\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\n\t\t\tvar position = this.geometry.attributes.position;\n\t\t\tvar array = position.array;\n\n\t\t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\n\t\t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\n\t\t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\n\t\t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t\tthis.geometry.computeBoundingSphere();\n\n\t\t};\n\n\t} )();\n\n\t// File:src/extras/helpers/BoundingBoxHelper.js\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\t// a helper to show the world-axis-aligned bounding box for an object\n\n\tTHREE.BoundingBoxHelper = function ( object, hex ) {\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0x888888;\n\n\t\tthis.object = object;\n\n\t\tthis.box = new THREE.Box3();\n\n\t\tTHREE.Mesh.call( this, new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );\n\n\t};\n\n\tTHREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );\n\tTHREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;\n\n\tTHREE.BoundingBoxHelper.prototype.update = function () {\n\n\t\tthis.box.setFromObject( this.object );\n\n\t\tthis.box.size( this.scale );\n\n\t\tthis.box.center( this.position );\n\n\t};\n\n\t// File:src/extras/helpers/CameraHelper.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\tTHREE.CameraHelper = function ( camera ) {\n\n\t\tvar geometry = new THREE.Geometry();\n\t\tvar material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );\n\n\t\tvar pointMap = {};\n\n\t\t// colors\n\n\t\tvar hexFrustum = 0xffaa00;\n\t\tvar hexCone = 0xff0000;\n\t\tvar hexUp = 0x00aaff;\n\t\tvar hexTarget = 0xffffff;\n\t\tvar hexCross = 0x333333;\n\n\t\t// near\n\n\t\taddLine( \"n1\", \"n2\", hexFrustum );\n\t\taddLine( \"n2\", \"n4\", hexFrustum );\n\t\taddLine( \"n4\", \"n3\", hexFrustum );\n\t\taddLine( \"n3\", \"n1\", hexFrustum );\n\n\t\t// far\n\n\t\taddLine( \"f1\", \"f2\", hexFrustum );\n\t\taddLine( \"f2\", \"f4\", hexFrustum );\n\t\taddLine( \"f4\", \"f3\", hexFrustum );\n\t\taddLine( \"f3\", \"f1\", hexFrustum );\n\n\t\t// sides\n\n\t\taddLine( \"n1\", \"f1\", hexFrustum );\n\t\taddLine( \"n2\", \"f2\", hexFrustum );\n\t\taddLine( \"n3\", \"f3\", hexFrustum );\n\t\taddLine( \"n4\", \"f4\", hexFrustum );\n\n\t\t// cone\n\n\t\taddLine( \"p\", \"n1\", hexCone );\n\t\taddLine( \"p\", \"n2\", hexCone );\n\t\taddLine( \"p\", \"n3\", hexCone );\n\t\taddLine( \"p\", \"n4\", hexCone );\n\n\t\t// up\n\n\t\taddLine( \"u1\", \"u2\", hexUp );\n\t\taddLine( \"u2\", \"u3\", hexUp );\n\t\taddLine( \"u3\", \"u1\", hexUp );\n\n\t\t// target\n\n\t\taddLine( \"c\", \"t\", hexTarget );\n\t\taddLine( \"p\", \"c\", hexCross );\n\n\t\t// cross\n\n\t\taddLine( \"cn1\", \"cn2\", hexCross );\n\t\taddLine( \"cn3\", \"cn4\", hexCross );\n\n\t\taddLine( \"cf1\", \"cf2\", hexCross );\n\t\taddLine( \"cf3\", \"cf4\", hexCross );\n\n\t\tfunction addLine( a, b, hex ) {\n\n\t\t\taddPoint( a, hex );\n\t\t\taddPoint( b, hex );\n\n\t\t}\n\n\t\tfunction addPoint( id, hex ) {\n\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\t\tgeometry.colors.push( new THREE.Color( hex ) );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( geometry.vertices.length - 1 );\n\n\t\t}\n\n\t\tTHREE.LineSegments.call( this, geometry, material );\n\n\t\tthis.camera = camera;\n\t\tif( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t};\n\n\tTHREE.CameraHelper.prototype = Object.create( THREE.LineSegments.prototype );\n\tTHREE.CameraHelper.prototype.constructor = THREE.CameraHelper;\n\n\tTHREE.CameraHelper.prototype.update = function () {\n\n\t\tvar geometry, pointMap;\n\n\t\tvar vector = new THREE.Vector3();\n\t\tvar camera = new THREE.Camera();\n\n\t\tfunction setPoint( point, x, y, z ) {\n\n\t\t\tvector.set( x, y, z ).unproject( camera );\n\n\t\t\tvar points = pointMap[ point ];\n\n\t\t\tif ( points !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn function update() {\n\n\t\t\tgeometry = this.geometry;\n\t\t\tpointMap = this.pointMap;\n\n\t\t\tvar w = 1, h = 1;\n\n\t\t\t// we need just camera projection matrix\n\t\t\t// world matrix must be identity\n\n\t\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\n\t\t\t// center / target\n\n\t\t\tsetPoint( \"c\", 0, 0, - 1 );\n\t\t\tsetPoint( \"t\", 0, 0,  1 );\n\n\t\t\t// near\n\n\t\t\tsetPoint( \"n1\", - w, - h, - 1 );\n\t\t\tsetPoint( \"n2\",   w, - h, - 1 );\n\t\t\tsetPoint( \"n3\", - w,   h, - 1 );\n\t\t\tsetPoint( \"n4\",   w,   h, - 1 );\n\n\t\t\t// far\n\n\t\t\tsetPoint( \"f1\", - w, - h, 1 );\n\t\t\tsetPoint( \"f2\",   w, - h, 1 );\n\t\t\tsetPoint( \"f3\", - w,   h, 1 );\n\t\t\tsetPoint( \"f4\",   w,   h, 1 );\n\n\t\t\t// up\n\n\t\t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\n\t\t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\n\t\t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\n\n\t\t\t// cross\n\n\t\t\tsetPoint( \"cf1\", - w,   0, 1 );\n\t\t\tsetPoint( \"cf2\",   w,   0, 1 );\n\t\t\tsetPoint( \"cf3\",   0, - h, 1 );\n\t\t\tsetPoint( \"cf4\",   0,   h, 1 );\n\n\t\t\tsetPoint( \"cn1\", - w,   0, - 1 );\n\t\t\tsetPoint( \"cn2\",   w,   0, - 1 );\n\t\t\tsetPoint( \"cn3\",   0, - h, - 1 );\n\t\t\tsetPoint( \"cn4\",   0,   h, - 1 );\n\n\t\t\tgeometry.verticesNeedUpdate = true;\n\n\t\t};\n\n\t}();\n\n\t// File:src/extras/helpers/DirectionalLightHelper.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tTHREE.DirectionalLightHelper = function ( light, size ) {\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tif ( size === undefined ) size = 1;\n\n\t\tvar geometry = new THREE.BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( [\n\t\t\t- size,   size, 0,\n\t\t\t  size,   size, 0,\n\t\t\t  size, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size,   size, 0\n\t\t], 3 ) );\n\n\t\tvar material = new THREE.LineBasicMaterial( { fog: false } );\n\n\t\tthis.add( new THREE.Line( geometry, material ) );\n\n\t\tgeometry = new THREE.BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.add( new THREE.Line( geometry, material ));\n\n\t\tthis.update();\n\n\t};\n\n\tTHREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );\n\tTHREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;\n\n\tTHREE.DirectionalLightHelper.prototype.dispose = function () {\n\n\t\tvar lightPlane = this.children[ 0 ];\n\t\tvar targetLine = this.children[ 1 ];\n\n\t\tlightPlane.geometry.dispose();\n\t\tlightPlane.material.dispose();\n\t\ttargetLine.geometry.dispose();\n\t\ttargetLine.material.dispose();\n\n\t};\n\n\tTHREE.DirectionalLightHelper.prototype.update = function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar v2 = new THREE.Vector3();\n\t\tvar v3 = new THREE.Vector3();\n\n\t\treturn function update() {\n\n\t\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n\t\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t\tv3.subVectors( v2, v1 );\n\n\t\t\tvar lightPlane = this.children[ 0 ];\n\t\t\tvar targetLine = this.children[ 1 ];\n\n\t\t\tlightPlane.lookAt( v3 );\n\t\t\tlightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t\t\ttargetLine.lookAt( v3 );\n\t\t\ttargetLine.scale.z = v3.length();\n\n\t\t};\n\n\t}();\n\n\t// File:src/extras/helpers/EdgesHelper.js\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @param object THREE.Mesh whose geometry will be used\n\t * @param hex line color\n\t * @param thresholdAngle the minimum angle (in degrees),\n\t * between the face normals of adjacent faces,\n\t * that is required to render an edge. A value of 10 means\n\t * an edge is only rendered if the angle is at least 10 degrees.\n\t */\n\n\tTHREE.EdgesHelper = function ( object, hex, thresholdAngle ) {\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\n\n\t\tTHREE.LineSegments.call( this, new THREE.EdgesGeometry( object.geometry, thresholdAngle ), new THREE.LineBasicMaterial( { color: color } ) );\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t};\n\n\tTHREE.EdgesHelper.prototype = Object.create( THREE.LineSegments.prototype );\n\tTHREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper;\n\n\t// File:src/extras/helpers/FaceNormalsHelper.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tTHREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {\n\n\t\t// FaceNormalsHelper only supports THREE.Geometry\n\n\t\tthis.object = object;\n\n\t\tthis.size = ( size !== undefined ) ? size : 1;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t\t//\n\n\t\tvar nNormals = 0;\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry instanceof THREE.Geometry ) {\n\n\t\t\tnNormals = objGeometry.faces.length;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n\t\t}\n\n\t\t//\n\n\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\n\n\t\tgeometry.addAttribute( 'position', positions );\n\n\t\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t\t//\n\n\t\tthis.matrixAutoUpdate = false;\n\t\tthis.update();\n\n\t};\n\n\tTHREE.FaceNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\n\tTHREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;\n\n\tTHREE.FaceNormalsHelper.prototype.update = ( function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar v2 = new THREE.Vector3();\n\t\tvar normalMatrix = new THREE.Matrix3();\n\n\t\treturn function update() {\n\n\t\t\tthis.object.updateMatrixWorld( true );\n\n\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\t\tvar position = this.geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tvar objGeometry = this.object.geometry;\n\n\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\tvar faces = objGeometry.faces;\n\n\t\t\tvar idx = 0;\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tvar normal = face.normal;\n\n\t\t\t\tv1.copy( vertices[ face.a ] )\n\t\t\t\t\t.add( vertices[ face.b ] )\n\t\t\t\t\t.add( vertices[ face.c ] )\n\t\t\t\t\t.divideScalar( 3 )\n\t\t\t\t\t.applyMatrix4( matrixWorld );\n\n\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t}\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}() );\n\n\t// File:src/extras/helpers/GridHelper.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.GridHelper = function ( size, divisions, color1, color2 ) {\n\n\t\tdivisions = divisions || 1;\n\t\tcolor1 = new THREE.Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new THREE.Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar center = divisions / 2;\n\t\tvar step = ( size * 2 ) / divisions;\n\t\tvar vertices = [], colors = [];\n\n\t\tfor ( var i = 0, j = 0, k = - size; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - size, 0, k, size, 0, k );\n\t\t\tvertices.push( k, 0, - size, k, 0, size );\n\n\t\t\tvar color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tvar geometry = new THREE.BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new THREE.Float32Attribute( colors, 3 ) );\n\n\t\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\n\n\t\tTHREE.LineSegments.call( this, geometry, material );\n\n\t};\n\n\tTHREE.GridHelper.prototype = Object.create( THREE.LineSegments.prototype );\n\tTHREE.GridHelper.prototype.constructor = THREE.GridHelper;\n\n\tTHREE.GridHelper.prototype.setColors = function () {\n\n\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n\t};\n\n\t// File:src/extras/helpers/HemisphereLightHelper.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.HemisphereLightHelper = function ( light, sphereSize ) {\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.colors = [ new THREE.Color(), new THREE.Color() ];\n\n\t\tvar geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );\n\t\tgeometry.rotateX( - Math.PI / 2 );\n\n\t\tfor ( var i = 0, il = 8; i < il; i ++ ) {\n\n\t\t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\n\n\t\t}\n\n\t\tvar material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );\n\n\t\tthis.lightSphere = new THREE.Mesh( geometry, material );\n\t\tthis.add( this.lightSphere );\n\n\t\tthis.update();\n\n\t};\n\n\tTHREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );\n\tTHREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;\n\n\tTHREE.HemisphereLightHelper.prototype.dispose = function () {\n\n\t\tthis.lightSphere.geometry.dispose();\n\t\tthis.lightSphere.material.dispose();\n\n\t};\n\n\tTHREE.HemisphereLightHelper.prototype.update = function () {\n\n\t\tvar vector = new THREE.Vector3();\n\n\t\treturn function update() {\n\n\t\t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\n\n\t\t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\t\t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\n\n\t\t};\n\n\t}();\n\n\t// File:src/extras/helpers/PointLightHelper.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.PointLightHelper = function ( light, sphereSize ) {\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tvar geometry = new THREE.SphereBufferGeometry( sphereSize, 4, 2 );\n\t\tvar material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\n\t\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t\tTHREE.Mesh.call( this, geometry, material );\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\t/*\n\t\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\t\tvar d = light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\n\t\tthis.add( this.lightDistance );\n\t\t*/\n\n\t};\n\n\tTHREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );\n\tTHREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;\n\n\tTHREE.PointLightHelper.prototype.dispose = function () {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t};\n\n\tTHREE.PointLightHelper.prototype.update = function () {\n\n\t\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t\t/*\n\t\tvar d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t};\n\n\t// File:src/extras/helpers/SkeletonHelper.js\n\n\t/**\n\t * @author Sean Griffin / http://twitter.com/sgrif\n\t * @author Michael Guerrero / http://realitymeltdown.com\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tTHREE.SkeletonHelper = function ( object ) {\n\n\t\tthis.bones = this.getBoneList( object );\n\n\t\tvar geometry = new THREE.Geometry();\n\n\t\tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n\t\t\tvar bone = this.bones[ i ];\n\n\t\t\tif ( bone.parent instanceof THREE.Bone ) {\n\n\t\t\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\t\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\t\t\tgeometry.colors.push( new THREE.Color( 0, 0, 1 ) );\n\t\t\t\tgeometry.colors.push( new THREE.Color( 0, 1, 0 ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.dynamic = true;\n\n\t\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n\t\tTHREE.LineSegments.call( this, geometry, material );\n\n\t\tthis.root = object;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t};\n\n\n\tTHREE.SkeletonHelper.prototype = Object.create( THREE.LineSegments.prototype );\n\tTHREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;\n\n\tTHREE.SkeletonHelper.prototype.getBoneList = function( object ) {\n\n\t\tvar boneList = [];\n\n\t\tif ( object instanceof THREE.Bone ) {\n\n\t\t\tboneList.push( object );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\n\n\t\t}\n\n\t\treturn boneList;\n\n\t};\n\n\tTHREE.SkeletonHelper.prototype.update = function () {\n\n\t\tvar geometry = this.geometry;\n\n\t\tvar matrixWorldInv = new THREE.Matrix4().getInverse( this.root.matrixWorld );\n\n\t\tvar boneMatrix = new THREE.Matrix4();\n\n\t\tvar j = 0;\n\n\t\tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n\t\t\tvar bone = this.bones[ i ];\n\n\t\t\tif ( bone.parent instanceof THREE.Bone ) {\n\n\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n\t\t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\n\n\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t\tgeometry.computeBoundingSphere();\n\n\t};\n\n\t// File:src/extras/helpers/SpotLightHelper.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tTHREE.SpotLightHelper = function ( light ) {\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\tvar positions = [\n\t\t\t0, 0, 0,   0,   0,   1,\n\t\t\t0, 0, 0,   1,   0,   1,\n\t\t\t0, 0, 0, - 1,   0,   1,\n\t\t\t0, 0, 0,   0,   1,   1,\n\t\t\t0, 0, 0,   0, - 1,   1\n\t\t];\n\n\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( positions, 3 ) );\n\n\t\tvar material = new THREE.LineBasicMaterial( { fog: false } );\n\n\t\tthis.cone = new THREE.LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t};\n\n\tTHREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );\n\tTHREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;\n\n\tTHREE.SpotLightHelper.prototype.dispose = function () {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t};\n\n\tTHREE.SpotLightHelper.prototype.update = function () {\n\n\t\tvar vector = new THREE.Vector3();\n\t\tvar vector2 = new THREE.Vector3();\n\n\t\treturn function update() {\n\n\t\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n\t\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\t\tthis.cone.lookAt( vector2.sub( vector ) );\n\n\t\t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t\t};\n\n\t}();\n\n\t// File:src/extras/helpers/VertexNormalsHelper.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tTHREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {\n\n\t\tthis.object = object;\n\n\t\tthis.size = ( size !== undefined ) ? size : 1;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t\t//\n\n\t\tvar nNormals = 0;\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry instanceof THREE.Geometry ) {\n\n\t\t\tnNormals = objGeometry.faces.length * 3;\n\n\t\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tnNormals = objGeometry.attributes.normal.count;\n\n\t\t}\n\n\t\t//\n\n\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\n\n\t\tgeometry.addAttribute( 'position', positions );\n\n\t\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t\t//\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t};\n\n\tTHREE.VertexNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\n\tTHREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;\n\n\tTHREE.VertexNormalsHelper.prototype.update = ( function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar v2 = new THREE.Vector3();\n\t\tvar normalMatrix = new THREE.Matrix3();\n\n\t\treturn function update() {\n\n\t\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\t\tthis.object.updateMatrixWorld( true );\n\n\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\t\tvar position = this.geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tvar objGeometry = this.object.geometry;\n\n\t\t\tif ( objGeometry instanceof THREE.Geometry ) {\n\n\t\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\t\tvar faces = objGeometry.faces;\n\n\t\t\t\tvar idx = 0;\n\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\n\t\t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n\t\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\tvar objPos = objGeometry.attributes.position;\n\n\t\t\t\tvar objNorm = objGeometry.attributes.normal;\n\n\t\t\t\tvar idx = 0;\n\n\t\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n\t\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n\t\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n\t\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}() );\n\n\t// File:src/extras/helpers/WireframeHelper.js\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.WireframeHelper = function ( object, hex ) {\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\n\n\t\tTHREE.LineSegments.call( this, new THREE.WireframeGeometry( object.geometry ), new THREE.LineBasicMaterial( { color: color } ) );\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t};\n\n\tTHREE.WireframeHelper.prototype = Object.create( THREE.LineSegments.prototype );\n\tTHREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper;\n\n\t// File:src/extras/objects/ImmediateRenderObject.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.ImmediateRenderObject = function ( material ) {\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tthis.material = material;\n\t\tthis.render = function ( renderCallback ) {};\n\n\t};\n\n\tTHREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );\n\tTHREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;\n\n\t// File:src/extras/objects/MorphBlendMesh.js\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.MorphBlendMesh = function( geometry, material ) {\n\n\t\tTHREE.Mesh.call( this, geometry, material );\n\n\t\tthis.animationsMap = {};\n\t\tthis.animationsList = [];\n\n\t\t// prepare default animation\n\t\t// (all frames played together in 1 second)\n\n\t\tvar numFrames = this.geometry.morphTargets.length;\n\n\t\tvar name = \"__default\";\n\n\t\tvar startFrame = 0;\n\t\tvar endFrame = numFrames - 1;\n\n\t\tvar fps = numFrames / 1;\n\n\t\tthis.createAnimation( name, startFrame, endFrame, fps );\n\t\tthis.setAnimationWeight( name, 1 );\n\n\t};\n\n\tTHREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );\n\tTHREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;\n\n\tTHREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\n\n\t\tvar animation = {\n\n\t\t\tstart: start,\n\t\t\tend: end,\n\n\t\t\tlength: end - start + 1,\n\n\t\t\tfps: fps,\n\t\t\tduration: ( end - start ) / fps,\n\n\t\t\tlastFrame: 0,\n\t\t\tcurrentFrame: 0,\n\n\t\t\tactive: false,\n\n\t\t\ttime: 0,\n\t\t\tdirection: 1,\n\t\t\tweight: 1,\n\n\t\t\tdirectionBackwards: false,\n\t\t\tmirroredLoop: false\n\n\t\t};\n\n\t\tthis.animationsMap[ name ] = animation;\n\t\tthis.animationsList.push( animation );\n\n\t};\n\n\tTHREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\n\n\t\tvar pattern = /([a-z]+)_?(\\d+)/i;\n\n\t\tvar firstAnimation, frameRanges = {};\n\n\t\tvar geometry = this.geometry;\n\n\t\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\n\n\t\t\tvar morph = geometry.morphTargets[ i ];\n\t\t\tvar chunks = morph.name.match( pattern );\n\n\t\t\tif ( chunks && chunks.length > 1 ) {\n\n\t\t\t\tvar name = chunks[ 1 ];\n\n\t\t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\n\n\t\t\t\tvar range = frameRanges[ name ];\n\n\t\t\t\tif ( i < range.start ) range.start = i;\n\t\t\t\tif ( i > range.end ) range.end = i;\n\n\t\t\t\tif ( ! firstAnimation ) firstAnimation = name;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var name in frameRanges ) {\n\n\t\t\tvar range = frameRanges[ name ];\n\t\t\tthis.createAnimation( name, range.start, range.end, fps );\n\n\t\t}\n\n\t\tthis.firstAnimation = firstAnimation;\n\n\t};\n\n\tTHREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\n\n\t\tvar animation = this.animationsMap[ name ];\n\n\t\tif ( animation ) {\n\n\t\t\tanimation.direction = 1;\n\t\t\tanimation.directionBackwards = false;\n\n\t\t}\n\n\t};\n\n\tTHREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\n\n\t\tvar animation = this.animationsMap[ name ];\n\n\t\tif ( animation ) {\n\n\t\t\tanimation.direction = - 1;\n\t\t\tanimation.directionBackwards = true;\n\n\t\t}\n\n\t};\n\n\tTHREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\n\n\t\tvar animation = this.animationsMap[ name ];\n\n\t\tif ( animation ) {\n\n\t\t\tanimation.fps = fps;\n\t\t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\n\n\t\t}\n\n\t};\n\n\tTHREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\n\n\t\tvar animation = this.animationsMap[ name ];\n\n\t\tif ( animation ) {\n\n\t\t\tanimation.duration = duration;\n\t\t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\n\n\t\t}\n\n\t};\n\n\tTHREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\n\n\t\tvar animation = this.animationsMap[ name ];\n\n\t\tif ( animation ) {\n\n\t\t\tanimation.weight = weight;\n\n\t\t}\n\n\t};\n\n\tTHREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\n\n\t\tvar animation = this.animationsMap[ name ];\n\n\t\tif ( animation ) {\n\n\t\t\tanimation.time = time;\n\n\t\t}\n\n\t};\n\n\tTHREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\n\n\t\tvar time = 0;\n\n\t\tvar animation = this.animationsMap[ name ];\n\n\t\tif ( animation ) {\n\n\t\t\ttime = animation.time;\n\n\t\t}\n\n\t\treturn time;\n\n\t};\n\n\tTHREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\n\n\t\tvar duration = - 1;\n\n\t\tvar animation = this.animationsMap[ name ];\n\n\t\tif ( animation ) {\n\n\t\t\tduration = animation.duration;\n\n\t\t}\n\n\t\treturn duration;\n\n\t};\n\n\tTHREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {\n\n\t\tvar animation = this.animationsMap[ name ];\n\n\t\tif ( animation ) {\n\n\t\t\tanimation.time = 0;\n\t\t\tanimation.active = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\n\n\t\t}\n\n\t};\n\n\tTHREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {\n\n\t\tvar animation = this.animationsMap[ name ];\n\n\t\tif ( animation ) {\n\n\t\t\tanimation.active = false;\n\n\t\t}\n\n\t};\n\n\tTHREE.MorphBlendMesh.prototype.update = function ( delta ) {\n\n\t\tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\n\n\t\t\tvar animation = this.animationsList[ i ];\n\n\t\t\tif ( ! animation.active ) continue;\n\n\t\t\tvar frameTime = animation.duration / animation.length;\n\n\t\t\tanimation.time += animation.direction * delta;\n\n\t\t\tif ( animation.mirroredLoop ) {\n\n\t\t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\n\n\t\t\t\t\tanimation.direction *= - 1;\n\n\t\t\t\t\tif ( animation.time > animation.duration ) {\n\n\t\t\t\t\t\tanimation.time = animation.duration;\n\t\t\t\t\t\tanimation.directionBackwards = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( animation.time < 0 ) {\n\n\t\t\t\t\t\tanimation.time = 0;\n\t\t\t\t\t\tanimation.directionBackwards = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tanimation.time = animation.time % animation.duration;\n\n\t\t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\n\n\t\t\t}\n\n\t\t\tvar keyframe = animation.start + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\n\t\t\tvar weight = animation.weight;\n\n\t\t\tif ( keyframe !== animation.currentFrame ) {\n\n\t\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\n\n\t\t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\n\n\t\t\t\tanimation.lastFrame = animation.currentFrame;\n\t\t\t\tanimation.currentFrame = keyframe;\n\n\t\t\t}\n\n\t\t\tvar mix = ( animation.time % frameTime ) / frameTime;\n\n\t\t\tif ( animation.directionBackwards ) mix = 1 - mix;\n\n\t\t\tif ( animation.currentFrame !== animation.lastFrame ) {\n\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\n\t\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\n\n\t\t\t} else {\n\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tif( typeof define !== \"undefined\" && define instanceof Function && define.amd != undefined ){\n\n\t\tdefine(function(){\n\n\t\t\treturn THREE;\n\n\t\t});\n\n\t}\n\telse if( typeof module !== \"undefined\" && module.exports ){\n\n\t\tmodule.exports = THREE;\n\n\t}\n\telse if( this != undefined ){\n\n\t\tthis.THREE = THREE;\n\n\t};\n\n})(this || {});","module.exports = function( THREE ){\n\n\t/**\n\t * @author miibond\n\t * Generate a texture that represents the luminosity of the current scene, adapted over time\n\t * to simulate the optic nerve responding to the amount of light it is receiving.\n\t * Based on a GDC2007 presentation by Wolfgang Engel titled \"Post-Processing Pipeline\"\n\t *\n\t * Full-screen tone-mapping shader based on http://www.graphics.cornell.edu/~jaf/publications/sig02_paper.pdf\n\t */\n\n\tTHREE.AdaptiveToneMappingPass = function ( adaptive, resolution ) {\n\n\t\tthis.resolution = ( resolution !== undefined ) ? resolution : 256;\n\t\tthis.needsInit = true;\n\t\tthis.adaptive = adaptive !== undefined ? !! adaptive : true;\n\n\t\tthis.luminanceRT = null;\n\t\tthis.previousLuminanceRT = null;\n\t\tthis.currentLuminanceRT = null;\n\n\t\tif ( THREE.CopyShader === undefined )\n\t\t\tconsole.error( \"THREE.AdaptiveToneMappingPass relies on THREE.CopyShader\" );\n\n\t\tvar copyShader = THREE.CopyShader;\n\n\t\tthis.copyUniforms = THREE.UniformsUtils.clone( copyShader.uniforms );\n\n\t\tthis.materialCopy = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: this.copyUniforms,\n\t\t\tvertexShader: copyShader.vertexShader,\n\t\t\tfragmentShader: copyShader.fragmentShader,\n\t\t\tblending: THREE.NoBlending,\n\t\t\tdepthTest: false\n\n\t\t} );\n\n\t\tif ( THREE.LuminosityShader === undefined )\n\t\t\tconsole.error( \"THREE.AdaptiveToneMappingPass relies on THREE.LuminosityShader\" );\n\n\t\tthis.materialLuminance = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: THREE.UniformsUtils.clone( THREE.LuminosityShader.uniforms ),\n\t\t\tvertexShader: THREE.LuminosityShader.vertexShader,\n\t\t\tfragmentShader: THREE.LuminosityShader.fragmentShader,\n\t\t\tblending: THREE.NoBlending,\n\t\t} );\n\n\t\tthis.adaptLuminanceShader = {\n\t\t\tdefines: {\n\t\t\t\t\"MIP_LEVEL_1X1\" : ( Math.log( this.resolution ) / Math.log( 2.0 ) ).toFixed( 1 ),\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\t\"lastLum\": { type: \"t\", value: null },\n\t\t\t\t\"currentLum\": { type: \"t\", value: null },\n\t\t\t\t\"delta\": { type: 'f', value: 0.016 },\n\t\t\t\t\"tau\": { type: 'f', value: 1.0 }\n\t\t\t},\n\t\t\tvertexShader: [\n\t\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\t\"}\"\n\t\t\t].join( '\\n' ),\n\t\t\tfragmentShader: [\n\t\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\t\"uniform sampler2D lastLum;\",\n\t\t\t\t\"uniform sampler2D currentLum;\",\n\t\t\t\t\"uniform float delta;\",\n\t\t\t\t\"uniform float tau;\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t\"vec4 lastLum = texture2D( lastLum, vUv, MIP_LEVEL_1X1 );\",\n\t\t\t\t\t\"vec4 currentLum = texture2D( currentLum, vUv, MIP_LEVEL_1X1 );\",\n\n\t\t\t\t\t\"float fLastLum = lastLum.r;\",\n\t\t\t\t\t\"float fCurrentLum = currentLum.r;\",\n\n\t\t\t\t\t//The adaption seems to work better in extreme lighting differences\n\t\t\t\t\t//if the input luminance is squared.\n\t\t\t\t\t\"fCurrentLum *= fCurrentLum;\",\n\n\t\t\t\t\t// Adapt the luminance using Pattanaik's technique\n\t\t\t\t\t\"float fAdaptedLum = fLastLum + (fCurrentLum - fLastLum) * (1.0 - exp(-delta * tau));\",\n\t\t\t\t\t// \"fAdaptedLum = sqrt(fAdaptedLum);\",\n\t\t\t\t\t\"gl_FragColor = vec4( vec3( fAdaptedLum ), 1.0 );\",\n\t\t\t\t\"}\",\n\t\t\t].join( '\\n' )\n\t\t};\n\n\t\tthis.materialAdaptiveLum = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: THREE.UniformsUtils.clone( this.adaptLuminanceShader.uniforms ),\n\t\t\tvertexShader: this.adaptLuminanceShader.vertexShader,\n\t\t\tfragmentShader: this.adaptLuminanceShader.fragmentShader,\n\t\t\tdefines: this.adaptLuminanceShader.defines,\n\t\t\tblending: THREE.NoBlending\n\t\t} );\n\n\t\tif ( THREE.ToneMapShader === undefined )\n\t\t\tconsole.error( \"THREE.AdaptiveToneMappingPass relies on THREE.ToneMapShader\" );\n\n\t\tthis.materialToneMap = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: THREE.UniformsUtils.clone( THREE.ToneMapShader.uniforms ),\n\t\t\tvertexShader: THREE.ToneMapShader.vertexShader,\n\t\t\tfragmentShader: THREE.ToneMapShader.fragmentShader,\n\t\t\tblending: THREE.NoBlending\n\t\t} );\n\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = true;\n\t\tthis.clear = false;\n\n\t\tthis.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tthis.scene  = new THREE.Scene();\n\n\t\tthis.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );\n\t\tthis.scene.add( this.quad );\n\n\t};\n\n\tTHREE.AdaptiveToneMappingPass.prototype = {\n\n\t\trender: function ( renderer, writeBuffer, readBuffer, delta, maskActive ) {\n\n\t\t\tif ( this.needsInit ) {\n\n\t\t\t\tthis.reset( renderer );\n\t\t\t\tthis.luminanceRT.type = readBuffer.type;\n\t\t\t\tthis.previousLuminanceRT.type = readBuffer.type;\n\t\t\t\tthis.currentLuminanceRT.type = readBuffer.type;\n\t\t\t\tthis.needsInit = false;\n\n\t\t\t}\n\n\t\t\tif ( this.adaptive ) {\n\n\t\t\t\t//Render the luminance of the current scene into a render target with mipmapping enabled\n\t\t\t\tthis.quad.material = this.materialLuminance;\n\t\t\t\tthis.materialLuminance.uniforms.tDiffuse.value = readBuffer;\n\t\t\t\trenderer.render( this.scene, this.camera, this.currentLuminanceRT );\n\n\t\t\t\t//Use the new luminance values, the previous luminance and the frame delta to\n\t\t\t\t//adapt the luminance over time.\n\t\t\t\tthis.quad.material = this.materialAdaptiveLum;\n\t\t\t\tthis.materialAdaptiveLum.uniforms.delta.value = delta;\n\t\t\t\tthis.materialAdaptiveLum.uniforms.lastLum.value = this.previousLuminanceRT;\n\t\t\t\tthis.materialAdaptiveLum.uniforms.currentLum.value = this.currentLuminanceRT;\n\t\t\t\trenderer.render( this.scene, this.camera, this.luminanceRT );\n\n\t\t\t\t//Copy the new adapted luminance value so that it can be used by the next frame.\n\t\t\t\tthis.quad.material = this.materialCopy;\n\t\t\t\tthis.copyUniforms.tDiffuse.value = this.luminanceRT;\n\t\t\t\trenderer.render( this.scene, this.camera, this.previousLuminanceRT );\n\n\t\t\t}\n\n\t\t\tthis.quad.material = this.materialToneMap;\n\t\t\tthis.materialToneMap.uniforms.tDiffuse.value = readBuffer;\n\t\t\trenderer.render( this.scene, this.camera, writeBuffer, this.clear );\n\n\t\t},\n\n\t\treset: function( renderer ) {\n\n\t\t\t// render targets\n\t\t\tif ( this.luminanceRT ) {\n\n\t\t\t\tthis.luminanceRT.dispose();\n\n\t\t\t}\n\t\t\tif ( this.currentLuminanceRT ) {\n\n\t\t\t\tthis.currentLuminanceRT.dispose();\n\n\t\t\t}\n\t\t\tif ( this.previousLuminanceRT ) {\n\n\t\t\t\tthis.previousLuminanceRT.dispose();\n\n\t\t\t}\n\t\t\tvar pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat };\n\n\t\t\tthis.luminanceRT = new THREE.WebGLRenderTarget( this.resolution, this.resolution, pars );\n\t\t\tthis.luminanceRT.generateMipmaps = false;\n\t\t\tthis.previousLuminanceRT = new THREE.WebGLRenderTarget( this.resolution, this.resolution, pars );\n\t\t\tthis.previousLuminanceRT.generateMipmaps = false;\n\n\t\t\t//We only need mipmapping for the current luminosity because we want a down-sampled version to sample in our adaptive shader\n\t\t\tpars.minFilter = THREE.LinearMipMapLinearFilter;\n\t\t\tthis.currentLuminanceRT = new THREE.WebGLRenderTarget( this.resolution, this.resolution, pars );\n\n\t\t\tif ( this.adaptive ) {\n\n\t\t\t\tthis.materialToneMap.defines[ \"ADAPTED_LUMINANCE\" ] = \"\";\n\t\t\t\tthis.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT;\n\n\t\t\t}\n\t\t\t//Put something in the adaptive luminance texture so that the scene can render initially\n\t\t\tthis.quad.material = new THREE.MeshBasicMaterial( { color: 0x777777 } );\n\t\t\tthis.materialLuminance.needsUpdate = true;\n\t\t\tthis.materialAdaptiveLum.needsUpdate = true;\n\t\t\tthis.materialToneMap.needsUpdate = true;\n\t\t\t// renderer.render( this.scene, this.camera, this.luminanceRT );\n\t\t\t// renderer.render( this.scene, this.camera, this.previousLuminanceRT );\n\t\t\t// renderer.render( this.scene, this.camera, this.currentLuminanceRT );\n\n\t\t},\n\n\t\tsetAdaptive: function( adaptive ) {\n\n\t\t\tif ( adaptive ) {\n\n\t\t\t\tthis.adaptive = true;\n\t\t\t\tthis.materialToneMap.defines[ \"ADAPTED_LUMINANCE\" ] = \"\";\n\t\t\t\tthis.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT;\n\n\t\t\t} else {\n\n\t\t\t\tthis.adaptive = false;\n\t\t\t\tdelete this.materialToneMap.defines[ \"ADAPTED_LUMINANCE\" ];\n\t\t\t\tthis.materialToneMap.uniforms.luminanceMap.value = undefined;\n\n\t\t\t}\n\t\t\tthis.materialToneMap.needsUpdate = true;\n\n\t\t},\n\n\t\tsetAdaptionRate: function( rate ) {\n\n\t\t\tif ( rate ) {\n\n\t\t\t\tthis.materialAdaptiveLum.uniforms.tau.value = Math.abs( rate );\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetMaxLuminance: function( maxLum ) {\n\n\t\t\tif ( maxLum ) {\n\n\t\t\t\tthis.materialToneMap.uniforms.maxLuminance.value = maxLum;\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetAverageLuminance: function( avgLum ) {\n\n\t\t\tif ( avgLum ) {\n\n\t\t\t\tthis.materialToneMap.uniforms.averageLuminance.value = avgLum;\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetMiddleGrey: function( middleGrey ) {\n\n\t\t\tif ( middleGrey ) {\n\n\t\t\t\tthis.materialToneMap.uniforms.middleGrey.value = middleGrey;\n\n\t\t\t}\n\n\t\t},\n\n\t\tdispose: function() {\n\n\t\t\tif ( this.luminanceRT ) {\n\n\t\t\t\tthis.luminanceRT.dispose();\n\n\t\t\t}\n\t\t\tif ( this.previousLuminanceRT ) {\n\n\t\t\t\tthis.previousLuminanceRT.dispose();\n\n\t\t\t}\n\t\t\tif ( this.currentLuminanceRT ) {\n\n\t\t\t\tthis.currentLuminanceRT.dispose();\n\n\t\t\t}\n\t\t\tif ( this.materialLuminance ) {\n\n\t\t\t\tthis.materialLuminance.dispose();\n\n\t\t\t}\n\t\t\tif ( this.materialAdaptiveLum ) {\n\n\t\t\t\tthis.materialAdaptiveLum.dispose();\n\n\t\t\t}\n\t\t\tif ( this.materialCopy ) {\n\n\t\t\t\tthis.materialCopy.dispose();\n\n\t\t\t}\n\t\t\tif ( this.materialToneMap ) {\n\n\t\t\t\tthis.materialToneMap.dispose();\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author mrdoob / http://www.mrdoob.com\n\t *\n\t * Simple test shader\n\t */\n\n\tTHREE.BasicShader = {\n\n\t\tuniforms: {},\n\n\t\tvertexShader: [\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 0.0, 0.5 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Bleach bypass shader [http://en.wikipedia.org/wiki/Bleach_bypass]\n\t * - based on Nvidia example\n\t * http://developer.download.nvidia.com/shaderlibrary/webpages/shader_library.html#post_bleach_bypass\n\t */\n\n\tTHREE.BleachBypassShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\"opacity\":  { type: \"f\", value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float opacity;\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 base = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\t\"vec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\",\n\t\t\t\t\"float lum = dot( lumCoeff, base.rgb );\",\n\t\t\t\t\"vec3 blend = vec3( lum );\",\n\n\t\t\t\t\"float L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\",\n\n\t\t\t\t\"vec3 result1 = 2.0 * base.rgb * blend;\",\n\t\t\t\t\"vec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\",\n\n\t\t\t\t\"vec3 newColor = mix( result1, result2, L );\",\n\n\t\t\t\t\"float A2 = opacity * base.a;\",\n\t\t\t\t\"vec3 mixRGB = A2 * newColor.rgb;\",\n\t\t\t\t\"mixRGB += ( ( 1.0 - A2 ) * base.rgb );\",\n\n\t\t\t\t\"gl_FragColor = vec4( mixRGB, base.a );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Blend two textures\n\t */\n\n\tTHREE.BlendShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse1\": { type: \"t\", value: null },\n\t\t\t\"tDiffuse2\": { type: \"t\", value: null },\n\t\t\t\"mixRatio\":  { type: \"f\", value: 0.5 },\n\t\t\t\"opacity\":   { type: \"f\", value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float opacity;\",\n\t\t\t\"uniform float mixRatio;\",\n\n\t\t\t\"uniform sampler2D tDiffuse1;\",\n\t\t\t\"uniform sampler2D tDiffuse2;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 texel1 = texture2D( tDiffuse1, vUv );\",\n\t\t\t\t\"vec4 texel2 = texture2D( tDiffuse2, vUv );\",\n\t\t\t\t\"gl_FragColor = opacity * mix( texel1, texel2, mixRatio );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}","module.exports = function( THREE ){\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.BloomPass = function ( strength, kernelSize, sigma, resolution ) {\n\n\t\tstrength = ( strength !== undefined ) ? strength : 1;\n\t\tkernelSize = ( kernelSize !== undefined ) ? kernelSize : 25;\n\t\tsigma = ( sigma !== undefined ) ? sigma : 4.0;\n\t\tresolution = ( resolution !== undefined ) ? resolution : 256;\n\n\t\t// render targets\n\n\t\tvar pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat };\n\n\t\tthis.renderTargetX = new THREE.WebGLRenderTarget( resolution, resolution, pars );\n\t\tthis.renderTargetY = new THREE.WebGLRenderTarget( resolution, resolution, pars );\n\n\t\t// copy material\n\n\t\tif ( THREE.CopyShader === undefined )\n\t\t\tconsole.error( \"THREE.BloomPass relies on THREE.CopyShader\" );\n\n\t\tvar copyShader = THREE.CopyShader;\n\n\t\tthis.copyUniforms = THREE.UniformsUtils.clone( copyShader.uniforms );\n\n\t\tthis.copyUniforms[ \"opacity\" ].value = strength;\n\n\t\tthis.materialCopy = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: this.copyUniforms,\n\t\t\tvertexShader: copyShader.vertexShader,\n\t\t\tfragmentShader: copyShader.fragmentShader,\n\t\t\tblending: THREE.AdditiveBlending,\n\t\t\ttransparent: true\n\n\t\t} );\n\n\t\t// convolution material\n\n\t\tif ( THREE.ConvolutionShader === undefined )\n\t\t\tconsole.error( \"THREE.BloomPass relies on THREE.ConvolutionShader\" );\n\n\t\tvar convolutionShader = THREE.ConvolutionShader;\n\n\t\tthis.convolutionUniforms = THREE.UniformsUtils.clone( convolutionShader.uniforms );\n\n\t\tthis.convolutionUniforms[ \"uImageIncrement\" ].value = THREE.BloomPass.blurX;\n\t\tthis.convolutionUniforms[ \"cKernel\" ].value = THREE.ConvolutionShader.buildKernel( sigma );\n\n\t\tthis.materialConvolution = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: this.convolutionUniforms,\n\t\t\tvertexShader:  convolutionShader.vertexShader,\n\t\t\tfragmentShader: convolutionShader.fragmentShader,\n\t\t\tdefines: {\n\t\t\t\t\"KERNEL_SIZE_FLOAT\": kernelSize.toFixed( 1 ),\n\t\t\t\t\"KERNEL_SIZE_INT\": kernelSize.toFixed( 0 )\n\t\t\t}\n\n\t\t} );\n\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = false;\n\t\tthis.clear = false;\n\n\n\t\tthis.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tthis.scene  = new THREE.Scene();\n\n\t\tthis.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );\n\t\tthis.scene.add( this.quad );\n\n\t};\n\n\tTHREE.BloomPass.prototype = {\n\n\t\trender: function ( renderer, writeBuffer, readBuffer, delta, maskActive ) {\n\n\t\t\tif ( maskActive ) renderer.context.disable( renderer.context.STENCIL_TEST );\n\n\t\t\t// Render quad with blured scene into texture (convolution pass 1)\n\n\t\t\tthis.quad.material = this.materialConvolution;\n\n\t\t\tthis.convolutionUniforms[ \"tDiffuse\" ].value = readBuffer;\n\t\t\tthis.convolutionUniforms[ \"uImageIncrement\" ].value = THREE.BloomPass.blurX;\n\n\t\t\trenderer.render( this.scene, this.camera, this.renderTargetX, true );\n\n\n\t\t\t// Render quad with blured scene into texture (convolution pass 2)\n\n\t\t\tthis.convolutionUniforms[ \"tDiffuse\" ].value = this.renderTargetX;\n\t\t\tthis.convolutionUniforms[ \"uImageIncrement\" ].value = THREE.BloomPass.blurY;\n\n\t\t\trenderer.render( this.scene, this.camera, this.renderTargetY, true );\n\n\t\t\t// Render original scene with superimposed blur to texture\n\n\t\t\tthis.quad.material = this.materialCopy;\n\n\t\t\tthis.copyUniforms[ \"tDiffuse\" ].value = this.renderTargetY;\n\n\t\t\tif ( maskActive ) renderer.context.enable( renderer.context.STENCIL_TEST );\n\n\t\t\trenderer.render( this.scene, this.camera, readBuffer, this.clear );\n\n\t\t}\n\n\t};\n\n\tTHREE.BloomPass.blurX = new THREE.Vector2( 0.001953125, 0.0 );\n\tTHREE.BloomPass.blurY = new THREE.Vector2( 0.0, 0.001953125 );\n\n};\n","module.exports = function( THREE ){\n\n\t/**\n\t * Depth-of-field post-process with bokeh shader\n\t */\n\n\n\tTHREE.BokehPass = function ( scene, camera, params ) {\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tvar focus = ( params.focus !== undefined ) ? params.focus : 1.0;\n\t\tvar aspect = ( params.aspect !== undefined ) ? params.aspect : camera.aspect;\n\t\tvar aperture = ( params.aperture !== undefined ) ? params.aperture : 0.025;\n\t\tvar maxblur = ( params.maxblur !== undefined ) ? params.maxblur : 1.0;\n\n\t\t// render targets\n\n\t\tvar width = params.width || window.innerWidth || 1;\n\t\tvar height = params.height || window.innerHeight || 1;\n\n\t\tthis.renderTargetColor = new THREE.WebGLRenderTarget( width, height, {\n\t\t\tminFilter: THREE.LinearFilter,\n\t\t\tmagFilter: THREE.LinearFilter,\n\t\t\tformat: THREE.RGBFormat\n\t\t} );\n\n\t\tthis.renderTargetDepth = this.renderTargetColor.clone();\n\n\t\t// depth material\n\n\t\tthis.materialDepth = new THREE.MeshDepthMaterial();\n\n\t\t// bokeh material\n\n\t\tif ( THREE.BokehShader === undefined ) {\n\n\t\t\tconsole.error( \"THREE.BokehPass relies on THREE.BokehShader\" );\n\n\t\t}\n\t\t\n\t\tvar bokehShader = THREE.BokehShader;\n\t\tvar bokehUniforms = THREE.UniformsUtils.clone( bokehShader.uniforms );\n\n\t\tbokehUniforms[ \"tDepth\" ].value = this.renderTargetDepth;\n\n\t\tbokehUniforms[ \"focus\" ].value = focus;\n\t\tbokehUniforms[ \"aspect\" ].value = aspect;\n\t\tbokehUniforms[ \"aperture\" ].value = aperture;\n\t\tbokehUniforms[ \"maxblur\" ].value = maxblur;\n\n\t\tthis.materialBokeh = new THREE.ShaderMaterial( {\n\t\t\tuniforms: bokehUniforms,\n\t\t\tvertexShader: bokehShader.vertexShader,\n\t\t\tfragmentShader: bokehShader.fragmentShader\n\t\t} );\n\n\t\tthis.uniforms = bokehUniforms;\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = false;\n\t\tthis.renderToScreen = false;\n\t\tthis.clear = false;\n\n\t\tthis.camera2 = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tthis.scene2  = new THREE.Scene();\n\n\t\tthis.quad2 = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );\n\t\tthis.scene2.add( this.quad2 );\n\n\t};\n\n\tTHREE.BokehPass.prototype = {\n\n\t\trender: function ( renderer, writeBuffer, readBuffer, delta, maskActive ) {\n\n\t\t\tthis.quad2.material = this.materialBokeh;\n\n\t\t\t// Render depth into texture\n\n\t\t\tthis.scene.overrideMaterial = this.materialDepth;\n\n\t\t\trenderer.render( this.scene, this.camera, this.renderTargetDepth, true );\n\n\t\t\t// Render bokeh composite\n\n\t\t\tthis.uniforms[ \"tColor\" ].value = readBuffer;\n\n\t\t\tif ( this.renderToScreen ) {\n\n\t\t\t\trenderer.render( this.scene2, this.camera2 );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( this.scene2, this.camera2, writeBuffer, this.clear );\n\n\t\t\t}\n\n\t\t\tthis.scene.overrideMaterial = null;\n\n\t\t}\n\n\t};\n\n};\n\n","module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Depth-of-field shader with bokeh\n\t * ported from GLSL shader by Martins Upitis\n\t * http://artmartinsh.blogspot.com/2010/02/glsl-lens-blur-filter-with-bokeh.html\n\t */\n\n\tTHREE.BokehShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tColor\":   { type: \"t\", value: null },\n\t\t\t\"tDepth\":   { type: \"t\", value: null },\n\t\t\t\"focus\":    { type: \"f\", value: 1.0 },\n\t\t\t\"aspect\":   { type: \"f\", value: 1.0 },\n\t\t\t\"aperture\": { type: \"f\", value: 0.025 },\n\t\t\t\"maxblur\":  { type: \"f\", value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"uniform sampler2D tColor;\",\n\t\t\t\"uniform sampler2D tDepth;\",\n\n\t\t\t\"uniform float maxblur;\",  // max blur amount\n\t\t\t\"uniform float aperture;\", // aperture - bigger values for shallower depth of field\n\n\t\t\t\"uniform float focus;\",\n\t\t\t\"uniform float aspect;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec2 aspectcorrect = vec2( 1.0, aspect );\",\n\n\t\t\t\t\"vec4 depth1 = texture2D( tDepth, vUv );\",\n\n\t\t\t\t\"float factor = depth1.x - focus;\",\n\n\t\t\t\t\"vec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );\",\n\n\t\t\t\t\"vec2 dofblur9 = dofblur * 0.9;\",\n\t\t\t\t\"vec2 dofblur7 = dofblur * 0.7;\",\n\t\t\t\t\"vec2 dofblur4 = dofblur * 0.4;\",\n\n\t\t\t\t\"vec4 col = vec4( 0.0 );\",\n\n\t\t\t\t\"col += texture2D( tColor, vUv.xy );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );\",\n\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\",\n\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );\",\n\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\",\n\t\t\t\t\"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );\",\n\n\t\t\t\t\"gl_FragColor = col / 41.0;\",\n\t\t\t\t\"gl_FragColor.a = 1.0;\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author zz85 / https://github.com/zz85 | twitter.com/blurspline\n\t *\n\t * Depth-of-field shader with bokeh\n\t * ported from GLSL shader by Martins Upitis\n\t * http://blenderartists.org/forum/showthread.php?237488-GLSL-depth-of-field-with-bokeh-v2-4-(update)\n\t *\n\t * Requires #define RINGS and SAMPLES integers\n\t */\n\n\n\n\tTHREE.BokehShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"textureWidth\":  { type: \"f\", value: 1.0 },\n\t\t\t\"textureHeight\":  { type: \"f\", value: 1.0 },\n\n\t\t\t\"focalDepth\":   { type: \"f\", value: 1.0 },\n\t\t\t\"focalLength\":   { type: \"f\", value: 24.0 },\n\t\t\t\"fstop\": { type: \"f\", value: 0.9 },\n\n\t\t\t\"tColor\":   { type: \"t\", value: null },\n\t\t\t\"tDepth\":   { type: \"t\", value: null },\n\n\t\t\t\"maxblur\":  { type: \"f\", value: 1.0 },\n\n\t\t\t\"showFocus\":   { type: \"i\", value: 0 },\n\t\t\t\"manualdof\":   { type: \"i\", value: 0 },\n\t\t\t\"vignetting\":   { type: \"i\", value: 0 },\n\t\t\t\"depthblur\":   { type: \"i\", value: 0 },\n\n\t\t\t\"threshold\":  { type: \"f\", value: 0.5 },\n\t\t\t\"gain\":  { type: \"f\", value: 2.0 },\n\t\t\t\"bias\":  { type: \"f\", value: 0.5 },\n\t\t\t\"fringe\":  { type: \"f\", value: 0.7 },\n\n\t\t\t\"znear\":  { type: \"f\", value: 0.1 },\n\t\t\t\"zfar\":  { type: \"f\", value: 100 },\n\n\t\t\t\"noise\":  { type: \"i\", value: 1 },\n\t\t\t\"dithering\":  { type: \"f\", value: 0.0001 },\n\t\t\t\"pentagon\": { type: \"i\", value: 0 },\n\n\t\t\t\"shaderFocus\":  { type: \"i\", value: 1 },\n\t\t\t\"focusCoords\":  { type: \"v2\", value: new THREE.Vector2() },\n\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"uniform sampler2D tColor;\",\n\t\t\t\"uniform sampler2D tDepth;\",\n\t\t\t\"uniform float textureWidth;\",\n\t\t\t\"uniform float textureHeight;\",\n\n\t\t\t\"const float PI = 3.14159265;\",\n\n\t\t\t\"uniform float focalDepth;  //focal distance value in meters, but you may use autofocus option below\",\n\t\t\t\"uniform float focalLength; //focal length in mm\",\n\t\t\t\"uniform float fstop; //f-stop value\",\n\t\t\t\"uniform bool showFocus; //show debug focus point and focal range (red = focal point, green = focal range)\",\n\n\t\t\t\"/*\",\n\t\t\t\"make sure that these two values are the same for your camera, otherwise distances will be wrong.\",\n\t\t\t\"*/\",\n\n\t\t\t\"uniform float znear; // camera clipping start\",\n\t\t\t\"uniform float zfar; // camera clipping end\",\n\n\t\t\t\"//------------------------------------------\",\n\t\t\t\"//user variables\",\n\n\t\t\t\"const int samples = SAMPLES; //samples on the first ring\",\n\t\t\t\"const int rings = RINGS; //ring count\",\n\n\t\t\t\"const int maxringsamples = rings * samples;\",\n\n\t\t\t\"uniform bool manualdof; // manual dof calculation\",\n\t\t\t\"float ndofstart = 1.0; // near dof blur start\",\n\t\t\t\"float ndofdist = 2.0; // near dof blur falloff distance\",\n\t\t\t\"float fdofstart = 1.0; // far dof blur start\",\n\t\t\t\"float fdofdist = 3.0; // far dof blur falloff distance\",\n\n\t\t\t\"float CoC = 0.03; //circle of confusion size in mm (35mm film = 0.03mm)\",\n\n\t\t\t\"uniform bool vignetting; // use optical lens vignetting\",\n\n\t\t\t\"float vignout = 1.3; // vignetting outer border\",\n\t\t\t\"float vignin = 0.0; // vignetting inner border\",\n\t\t\t\"float vignfade = 22.0; // f-stops till vignete fades\",\n\n\t\t\t\"uniform bool shaderFocus;\",\n\t\t\t\"// disable if you use external focalDepth value\",\n\n\t\t\t\"uniform vec2 focusCoords;\",\n\t\t\t\"// autofocus point on screen (0.0,0.0 - left lower corner, 1.0,1.0 - upper right)\",\n\t\t\t\"// if center of screen use vec2(0.5, 0.5);\",\n\n\t\t\t\"uniform float maxblur;\",\n\t\t\t\"//clamp value of max blur (0.0 = no blur, 1.0 default)\",\n\n\t\t\t\"uniform float threshold; // highlight threshold;\",\n\t\t\t\"uniform float gain; // highlight gain;\",\n\n\t\t\t\"uniform float bias; // bokeh edge bias\",\n\t\t\t\"uniform float fringe; // bokeh chromatic aberration / fringing\",\n\n\t\t\t\"uniform bool noise; //use noise instead of pattern for sample dithering\",\n\n\t\t\t\"uniform float dithering;\",\n\n\t\t\t\"uniform bool depthblur; // blur the depth buffer\",\n\t\t\t\"float dbsize = 1.25; // depth blur size\",\n\n\t\t\t\"/*\",\n\t\t\t\"next part is experimental\",\n\t\t\t\"not looking good with small sample and ring count\",\n\t\t\t\"looks okay starting from samples = 4, rings = 4\",\n\t\t\t\"*/\",\n\n\t\t\t\"uniform bool pentagon; //use pentagon as bokeh shape?\",\n\t\t\t\"float feather = 0.4; //pentagon shape feather\",\n\n\t\t\t\"//------------------------------------------\",\n\n\t\t\t\"float penta(vec2 coords) {\",\n\t\t\t\t\"//pentagonal shape\",\n\t\t\t\t\"float scale = float(rings) - 1.3;\",\n\t\t\t\t\"vec4  HS0 = vec4( 1.0,         0.0,         0.0,  1.0);\",\n\t\t\t\t\"vec4  HS1 = vec4( 0.309016994, 0.951056516, 0.0,  1.0);\",\n\t\t\t\t\"vec4  HS2 = vec4(-0.809016994, 0.587785252, 0.0,  1.0);\",\n\t\t\t\t\"vec4  HS3 = vec4(-0.809016994,-0.587785252, 0.0,  1.0);\",\n\t\t\t\t\"vec4  HS4 = vec4( 0.309016994,-0.951056516, 0.0,  1.0);\",\n\t\t\t\t\"vec4  HS5 = vec4( 0.0        ,0.0         , 1.0,  1.0);\",\n\n\t\t\t\t\"vec4  one = vec4( 1.0 );\",\n\n\t\t\t\t\"vec4 P = vec4((coords),vec2(scale, scale));\",\n\n\t\t\t\t\"vec4 dist = vec4(0.0);\",\n\t\t\t\t\"float inorout = -4.0;\",\n\n\t\t\t\t\"dist.x = dot( P, HS0 );\",\n\t\t\t\t\"dist.y = dot( P, HS1 );\",\n\t\t\t\t\"dist.z = dot( P, HS2 );\",\n\t\t\t\t\"dist.w = dot( P, HS3 );\",\n\n\t\t\t\t\"dist = smoothstep( -feather, feather, dist );\",\n\n\t\t\t\t\"inorout += dot( dist, one );\",\n\n\t\t\t\t\"dist.x = dot( P, HS4 );\",\n\t\t\t\t\"dist.y = HS5.w - abs( P.z );\",\n\n\t\t\t\t\"dist = smoothstep( -feather, feather, dist );\",\n\t\t\t\t\"inorout += dist.x;\",\n\n\t\t\t\t\"return clamp( inorout, 0.0, 1.0 );\",\n\t\t\t\"}\",\n\n\t\t\t\"float bdepth(vec2 coords) {\",\n\t\t\t\t\"// Depth buffer blur\",\n\t\t\t\t\"float d = 0.0;\",\n\t\t\t\t\"float kernel[9];\",\n\t\t\t\t\"vec2 offset[9];\",\n\n\t\t\t\t\"vec2 wh = vec2(1.0/textureWidth,1.0/textureHeight) * dbsize;\",\n\n\t\t\t\t\"offset[0] = vec2(-wh.x,-wh.y);\",\n\t\t\t\t\"offset[1] = vec2( 0.0, -wh.y);\",\n\t\t\t\t\"offset[2] = vec2( wh.x -wh.y);\",\n\n\t\t\t\t\"offset[3] = vec2(-wh.x,  0.0);\",\n\t\t\t\t\"offset[4] = vec2( 0.0,   0.0);\",\n\t\t\t\t\"offset[5] = vec2( wh.x,  0.0);\",\n\n\t\t\t\t\"offset[6] = vec2(-wh.x, wh.y);\",\n\t\t\t\t\"offset[7] = vec2( 0.0,  wh.y);\",\n\t\t\t\t\"offset[8] = vec2( wh.x, wh.y);\",\n\n\t\t\t\t\"kernel[0] = 1.0/16.0;   kernel[1] = 2.0/16.0;   kernel[2] = 1.0/16.0;\",\n\t\t\t\t\"kernel[3] = 2.0/16.0;   kernel[4] = 4.0/16.0;   kernel[5] = 2.0/16.0;\",\n\t\t\t\t\"kernel[6] = 1.0/16.0;   kernel[7] = 2.0/16.0;   kernel[8] = 1.0/16.0;\",\n\n\n\t\t\t\t\"for( int i=0; i<9; i++ ) {\",\n\t\t\t\t\t\"float tmp = texture2D(tDepth, coords + offset[i]).r;\",\n\t\t\t\t\t\"d += tmp * kernel[i];\",\n\t\t\t\t\"}\",\n\n\t\t\t\t\"return d;\",\n\t\t\t\"}\",\n\n\n\t\t\t\"vec3 color(vec2 coords,float blur) {\",\n\t\t\t\t\"//processing the sample\",\n\n\t\t\t\t\"vec3 col = vec3(0.0);\",\n\t\t\t\t\"vec2 texel = vec2(1.0/textureWidth,1.0/textureHeight);\",\n\n\t\t\t\t\"col.r = texture2D(tColor,coords + vec2(0.0,1.0)*texel*fringe*blur).r;\",\n\t\t\t\t\"col.g = texture2D(tColor,coords + vec2(-0.866,-0.5)*texel*fringe*blur).g;\",\n\t\t\t\t\"col.b = texture2D(tColor,coords + vec2(0.866,-0.5)*texel*fringe*blur).b;\",\n\n\t\t\t\t\"vec3 lumcoeff = vec3(0.299,0.587,0.114);\",\n\t\t\t\t\"float lum = dot(col.rgb, lumcoeff);\",\n\t\t\t\t\"float thresh = max((lum-threshold)*gain, 0.0);\",\n\t\t\t\t\"return col+mix(vec3(0.0),col,thresh*blur);\",\n\t\t\t\"}\",\n\n\t\t\t\"vec2 rand(vec2 coord) {\",\n\t\t\t\t\"// generating noise / pattern texture for dithering\",\n\n\t\t\t\t\"float noiseX = ((fract(1.0-coord.s*(textureWidth/2.0))*0.25)+(fract(coord.t*(textureHeight/2.0))*0.75))*2.0-1.0;\",\n\t\t\t\t\"float noiseY = ((fract(1.0-coord.s*(textureWidth/2.0))*0.75)+(fract(coord.t*(textureHeight/2.0))*0.25))*2.0-1.0;\",\n\n\t\t\t\t\"if (noise) {\",\n\t\t\t\t\t\"noiseX = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233))) * 43758.5453),0.0,1.0)*2.0-1.0;\",\n\t\t\t\t\t\"noiseY = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233)*2.0)) * 43758.5453),0.0,1.0)*2.0-1.0;\",\n\t\t\t\t\"}\",\n\n\t\t\t\t\"return vec2(noiseX,noiseY);\",\n\t\t\t\"}\",\n\n\t\t\t\"vec3 debugFocus(vec3 col, float blur, float depth) {\",\n\t\t\t\t\"float edge = 0.002*depth; //distance based edge smoothing\",\n\t\t\t\t\"float m = clamp(smoothstep(0.0,edge,blur),0.0,1.0);\",\n\t\t\t\t\"float e = clamp(smoothstep(1.0-edge,1.0,blur),0.0,1.0);\",\n\n\t\t\t\t\"col = mix(col,vec3(1.0,0.5,0.0),(1.0-m)*0.6);\",\n\t\t\t\t\"col = mix(col,vec3(0.0,0.5,1.0),((1.0-e)-(1.0-m))*0.2);\",\n\n\t\t\t\t\"return col;\",\n\t\t\t\"}\",\n\n\t\t\t\"float linearize(float depth) {\",\n\t\t\t\t\"return -zfar * znear / (depth * (zfar - znear) - zfar);\",\n\t\t\t\"}\",\n\n\n\t\t\t\"float vignette() {\",\n\t\t\t\t\"float dist = distance(vUv.xy, vec2(0.5,0.5));\",\n\t\t\t\t\"dist = smoothstep(vignout+(fstop/vignfade), vignin+(fstop/vignfade), dist);\",\n\t\t\t\t\"return clamp(dist,0.0,1.0);\",\n\t\t\t\"}\",\n\n\t\t\t\"float gather(float i, float j, int ringsamples, inout vec3 col, float w, float h, float blur) {\",\n\t\t\t\t\"float rings2 = float(rings);\",\n\t\t\t\t\"float step = PI*2.0 / float(ringsamples);\",\n\t\t\t\t\"float pw = cos(j*step)*i;\",\n\t\t\t\t\"float ph = sin(j*step)*i;\",\n\t\t\t\t\"float p = 1.0;\",\n\t\t\t\t\"if (pentagon) {\",\n\t\t\t\t\t\"p = penta(vec2(pw,ph));\",\n\t\t\t\t\"}\",\n\t\t\t\t\"col += color(vUv.xy + vec2(pw*w,ph*h), blur) * mix(1.0, i/rings2, bias) * p;\",\n\t\t\t\t\"return 1.0 * mix(1.0, i /rings2, bias) * p;\",\n\t\t\t\"}\",\n\n\t\t\t\"void main() {\",\n\t\t\t\t\"//scene depth calculation\",\n\n\t\t\t\t\"float depth = linearize(texture2D(tDepth,vUv.xy).x);\",\n\n\t\t\t\t\"// Blur depth?\",\n\t\t\t\t\"if (depthblur) {\",\n\t\t\t\t\t\"depth = linearize(bdepth(vUv.xy));\",\n\t\t\t\t\"}\",\n\n\t\t\t\t\"//focal plane calculation\",\n\n\t\t\t\t\"float fDepth = focalDepth;\",\n\n\t\t\t\t\"if (shaderFocus) {\",\n\n\t\t\t\t\t\"fDepth = linearize(texture2D(tDepth,focusCoords).x);\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\t\"// dof blur factor calculation\",\n\n\t\t\t\t\"float blur = 0.0;\",\n\n\t\t\t\t\"if (manualdof) {\",\n\t\t\t\t\t\"float a = depth-fDepth; // Focal plane\",\n\t\t\t\t\t\"float b = (a-fdofstart)/fdofdist; // Far DoF\",\n\t\t\t\t\t\"float c = (-a-ndofstart)/ndofdist; // Near Dof\",\n\t\t\t\t\t\"blur = (a>0.0) ? b : c;\",\n\t\t\t\t\"} else {\",\n\t\t\t\t\t\"float f = focalLength; // focal length in mm\",\n\t\t\t\t\t\"float d = fDepth*1000.0; // focal plane in mm\",\n\t\t\t\t\t\"float o = depth*1000.0; // depth in mm\",\n\n\t\t\t\t\t\"float a = (o*f)/(o-f);\",\n\t\t\t\t\t\"float b = (d*f)/(d-f);\",\n\t\t\t\t\t\"float c = (d-f)/(d*fstop*CoC);\",\n\n\t\t\t\t\t\"blur = abs(a-b)*c;\",\n\t\t\t\t\"}\",\n\n\t\t\t\t\"blur = clamp(blur,0.0,1.0);\",\n\n\t\t\t\t\"// calculation of pattern for dithering\",\n\n\t\t\t\t\"vec2 noise = rand(vUv.xy)*dithering*blur;\",\n\n\t\t\t\t\"// getting blur x and y step factor\",\n\n\t\t\t\t\"float w = (1.0/textureWidth)*blur*maxblur+noise.x;\",\n\t\t\t\t\"float h = (1.0/textureHeight)*blur*maxblur+noise.y;\",\n\n\t\t\t\t\"// calculation of final color\",\n\n\t\t\t\t\"vec3 col = vec3(0.0);\",\n\n\t\t\t\t\"if(blur < 0.05) {\",\n\t\t\t\t\t\"//some optimization thingy\",\n\t\t\t\t\t\"col = texture2D(tColor, vUv.xy).rgb;\",\n\t\t\t\t\"} else {\",\n\t\t\t\t\t\"col = texture2D(tColor, vUv.xy).rgb;\",\n\t\t\t\t\t\"float s = 1.0;\",\n\t\t\t\t\t\"int ringsamples;\",\n\n\t\t\t\t\t\"for (int i = 1; i <= rings; i++) {\",\n\t\t\t\t\t\t\"/*unboxstart*/\",\n\t\t\t\t\t\t\"ringsamples = i * samples;\",\n\n\t\t\t\t\t\t\"for (int j = 0 ; j < maxringsamples ; j++) {\",\n\t\t\t\t\t\t\t\"if (j >= ringsamples) break;\",\n\t\t\t\t\t\t\t\"s += gather(float(i), float(j), ringsamples, col, w, h, blur);\",\n\t\t\t\t\t\t\"}\",\n\t\t\t\t\t\t\"/*unboxend*/\",\n\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\"col /= s; //divide by sample count\",\n\t\t\t\t\"}\",\n\n\t\t\t\t\"if (showFocus) {\",\n\t\t\t\t\t\"col = debugFocus(col, blur, depth);\",\n\t\t\t\t\"}\",\n\n\t\t\t\t\"if (vignetting) {\",\n\t\t\t\t\t\"col *= vignette();\",\n\t\t\t\t\"}\",\n\n\t\t\t\t\"gl_FragColor.rgb = col;\",\n\t\t\t\t\"gl_FragColor.a = 1.0;\",\n\t\t\t\"} \"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author tapio / http://tapio.github.com/\n\t *\n\t * Brightness and contrast adjustment\n\t * https://github.com/evanw/glfx.js\n\t * brightness: -1 to 1 (-1 is solid black, 0 is no change, and 1 is solid white)\n\t * contrast: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\n\t */\n\n\tTHREE.BrightnessContrastShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\":   { type: \"t\", value: null },\n\t\t\t\"brightness\": { type: \"f\", value: 0 },\n\t\t\t\"contrast\":   { type: \"f\", value: 0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform float brightness;\",\n\t\t\t\"uniform float contrast;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"gl_FragColor = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\t\"gl_FragColor.rgb += brightness;\",\n\n\t\t\t\t\"if (contrast > 0.0) {\",\n\t\t\t\t\t\"gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;\",\n\t\t\t\t\"} else {\",\n\t\t\t\t\t\"gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;\",\n\t\t\t\t\"}\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.SpriteCanvasMaterial = function ( parameters ) {\n\n\t\tTHREE.Material.call( this );\n\n\t\tthis.type = 'SpriteCanvasMaterial';\n\n\t\tthis.color = new THREE.Color( 0xffffff );\n\t\tthis.program = function ( context, color ) {};\n\n\t\tthis.setValues( parameters );\n\n\t};\n\n\tTHREE.SpriteCanvasMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n\n\tTHREE.SpriteCanvasMaterial.prototype.clone = function () {\n\n\t\tvar material = new THREE.SpriteCanvasMaterial();\n\n\t\tmaterial.copy( this );\n\t\tmaterial.color.copy( this.color );\n\t\tmaterial.program = this.program;\n\n\t\treturn material;\n\n\t};\n\n\t//\n\n\tTHREE.CanvasRenderer = function ( parameters ) {\n\n\t\tconsole.log( 'THREE.CanvasRenderer', THREE.REVISION );\n\n\t\tparameters = parameters || {};\n\n\t\tvar _this = this,\n\t\t_renderData, _elements, _lights,\n\t\t_projector = new THREE.Projector(),\n\n\t\t_canvas = parameters.canvas !== undefined\n\t\t\t\t ? parameters.canvas\n\t\t\t\t : document.createElement( 'canvas' ),\n\n\t\t_canvasWidth = _canvas.width,\n\t\t_canvasHeight = _canvas.height,\n\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 ),\n\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 ),\n\n\t\t_viewportX = 0,\n\t\t_viewportY = 0,\n\t\t_viewportWidth = _canvasWidth,\n\t\t_viewportHeight = _canvasHeight,\n\n\t\t_pixelRatio = 1,\n\n\t\t_context = _canvas.getContext( '2d', {\n\t\t\talpha: parameters.alpha === true\n\t\t} ),\n\n\t\t_clearColor = new THREE.Color( 0x000000 ),\n\t\t_clearAlpha = parameters.alpha === true ? 0 : 1,\n\n\t\t_contextGlobalAlpha = 1,\n\t\t_contextGlobalCompositeOperation = 0,\n\t\t_contextStrokeStyle = null,\n\t\t_contextFillStyle = null,\n\t\t_contextLineWidth = null,\n\t\t_contextLineCap = null,\n\t\t_contextLineJoin = null,\n\t\t_contextLineDash = [],\n\n\t\t_camera,\n\n\t\t_v1, _v2, _v3, _v4,\n\t\t_v5 = new THREE.RenderableVertex(),\n\t\t_v6 = new THREE.RenderableVertex(),\n\n\t\t_v1x, _v1y, _v2x, _v2y, _v3x, _v3y,\n\t\t_v4x, _v4y, _v5x, _v5y, _v6x, _v6y,\n\n\t\t_color = new THREE.Color(),\n\t\t_color1 = new THREE.Color(),\n\t\t_color2 = new THREE.Color(),\n\t\t_color3 = new THREE.Color(),\n\t\t_color4 = new THREE.Color(),\n\n\t\t_diffuseColor = new THREE.Color(),\n\t\t_emissiveColor = new THREE.Color(),\n\n\t\t_lightColor = new THREE.Color(),\n\n\t\t_patterns = {},\n\n\t\t_image, _uvs,\n\t\t_uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y,\n\n\t\t_clipBox = new THREE.Box2(),\n\t\t_clearBox = new THREE.Box2(),\n\t\t_elemBox = new THREE.Box2(),\n\n\t\t_ambientLight = new THREE.Color(),\n\t\t_directionalLights = new THREE.Color(),\n\t\t_pointLights = new THREE.Color(),\n\n\t\t_vector3 = new THREE.Vector3(), // Needed for PointLight\n\t\t_centroid = new THREE.Vector3(),\n\t\t_normal = new THREE.Vector3(),\n\t\t_normalViewMatrix = new THREE.Matrix3();\n\n\t\t/* TODO\n\t\t_canvas.mozImageSmoothingEnabled = false;\n\t\t_canvas.webkitImageSmoothingEnabled = false;\n\t\t_canvas.msImageSmoothingEnabled = false;\n\t\t_canvas.imageSmoothingEnabled = false;\n\t\t*/\n\n\t\t// dash+gap fallbacks for Firefox and everything else\n\n\t\tif ( _context.setLineDash === undefined ) {\n\n\t\t\t_context.setLineDash = function () {};\n\n\t\t}\n\n\t\tthis.domElement = _canvas;\n\n\t\tthis.autoClear = true;\n\t\tthis.sortObjects = true;\n\t\tthis.sortElements = true;\n\n\t\tthis.info = {\n\n\t\t\trender: {\n\n\t\t\t\tvertices: 0,\n\t\t\t\tfaces: 0\n\n\t\t\t}\n\n\t\t};\n\n\t\t// WebGLRenderer compatibility\n\n\t\tthis.supportsVertexTextures = function () {};\n\t\tthis.setFaceCulling = function () {};\n\n\t\t// API\n\n\t\tthis.getContext = function () {\n\n\t\t\treturn _context;\n\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\n\t\t\treturn _context.getContextAttributes();\n\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\n\t\t\treturn _pixelRatio;\n\n\t\t};\n\n\t\tthis.setPixelRatio = function ( value ) {\n\n\t\t\tif ( value !== undefined ) _pixelRatio = value;\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t\t_canvasWidth = width * _pixelRatio;\n\t\t\t_canvasHeight = height * _pixelRatio;\n\n\t\t\t_canvas.width = _canvasWidth;\n\t\t\t_canvas.height = _canvasHeight;\n\n\t\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 );\n\t\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 );\n\n\t\t\tif ( updateStyle !== false ) {\n\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\n\t\t\t}\n\n\t\t\t_clipBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t\t_clipBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t\t\t_contextGlobalAlpha = 1;\n\t\t\t_contextGlobalCompositeOperation = 0;\n\t\t\t_contextStrokeStyle = null;\n\t\t\t_contextFillStyle = null;\n\t\t\t_contextLineWidth = null;\n\t\t\t_contextLineCap = null;\n\t\t\t_contextLineJoin = null;\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t\t_viewportX = x * _pixelRatio;\n\t\t\t_viewportY = y * _pixelRatio;\n\n\t\t\t_viewportWidth = width * _pixelRatio;\n\t\t\t_viewportHeight = height * _pixelRatio;\n\n\t\t};\n\n\t\tthis.setScissor = function () {};\n\t\tthis.setScissorTest = function () {};\n\n\t\tthis.setClearColor = function ( color, alpha ) {\n\n\t\t\t_clearColor.set( color );\n\t\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n\t\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t\t};\n\n\t\tthis.setClearColorHex = function ( hex, alpha ) {\n\n\t\t\tconsole.warn( 'THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.' );\n\t\t\tthis.setClearColor( hex, alpha );\n\n\t\t};\n\n\t\tthis.getClearColor = function () {\n\n\t\t\treturn _clearColor;\n\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\n\t\t\treturn _clearAlpha;\n\n\t\t};\n\n\t\tthis.getMaxAnisotropy = function () {\n\n\t\t\treturn 0;\n\n\t\t};\n\n\t\tthis.clear = function () {\n\n\t\t\tif ( _clearBox.isEmpty() === false ) {\n\n\t\t\t\t_clearBox.intersect( _clipBox );\n\t\t\t\t_clearBox.expandByScalar( 2 );\n\n\t\t\t\t_clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n\t\t\t\t_clearBox.min.y =  - _clearBox.min.y + _canvasHeightHalf;\t\t// higher y value !\n\t\t\t\t_clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n\t\t\t\t_clearBox.max.y =  - _clearBox.max.y + _canvasHeightHalf;\t\t// lower y value !\n\n\t\t\t\tif ( _clearAlpha < 1 ) {\n\n\t\t\t\t\t_context.clearRect(\n\t\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( _clearAlpha > 0 ) {\n\n\t\t\t\t\tsetBlending( THREE.NormalBlending );\n\t\t\t\t\tsetOpacity( 1 );\n\n\t\t\t\t\tsetFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearAlpha + ')' );\n\n\t\t\t\t\t_context.fillRect(\n\t\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\t_clearBox.makeEmpty();\n\n\t\t\t}\n\n\t\t};\n\n\t\t// compatibility\n\n\t\tthis.clearColor = function () {};\n\t\tthis.clearDepth = function () {};\n\t\tthis.clearStencil = function () {};\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( camera instanceof THREE.Camera === false ) {\n\n\t\t\t\tconsole.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.autoClear === true ) this.clear();\n\n\t\t\t_this.info.render.vertices = 0;\n\t\t\t_this.info.render.faces = 0;\n\n\t\t\t_context.setTransform( _viewportWidth / _canvasWidth, 0, 0, - _viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY );\n\t\t\t_context.translate( _canvasWidthHalf, _canvasHeightHalf );\n\n\t\t\t_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );\n\t\t\t_elements = _renderData.elements;\n\t\t\t_lights = _renderData.lights;\n\t\t\t_camera = camera;\n\n\t\t\t_normalViewMatrix.getNormalMatrix( camera.matrixWorldInverse );\n\n\t\t\t/* DEBUG\n\t\t\tsetFillStyle( 'rgba( 0, 255, 255, 0.5 )' );\n\t\t\t_context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );\n\t\t\t*/\n\n\t\t\tcalculateLights();\n\n\t\t\tfor ( var e = 0, el = _elements.length; e < el; e ++ ) {\n\n\t\t\t\tvar element = _elements[ e ];\n\n\t\t\t\tvar material = element.material;\n\n\t\t\t\tif ( material === undefined || material.opacity === 0 ) continue;\n\n\t\t\t\t_elemBox.makeEmpty();\n\n\t\t\t\tif ( element instanceof THREE.RenderableSprite ) {\n\n\t\t\t\t\t_v1 = element;\n\t\t\t\t\t_v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf;\n\n\t\t\t\t\trenderSprite( _v1, element, material );\n\n\t\t\t\t} else if ( element instanceof THREE.RenderableLine ) {\n\n\t\t\t\t\t_v1 = element.v1; _v2 = element.v2;\n\n\t\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\n\t\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t\t_v2.positionScreen\n\t\t\t\t\t] );\n\n\t\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\t\trenderLine( _v1, _v2, element, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( element instanceof THREE.RenderableFace ) {\n\n\t\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;\n\n\t\t\t\t\tif ( _v1.positionScreen.z < - 1 || _v1.positionScreen.z > 1 ) continue;\n\t\t\t\t\tif ( _v2.positionScreen.z < - 1 || _v2.positionScreen.z > 1 ) continue;\n\t\t\t\t\tif ( _v3.positionScreen.z < - 1 || _v3.positionScreen.z > 1 ) continue;\n\n\t\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t\t_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;\n\n\t\t\t\t\tif ( material.overdraw > 0 ) {\n\n\t\t\t\t\t\texpand( _v1.positionScreen, _v2.positionScreen, material.overdraw );\n\t\t\t\t\t\texpand( _v2.positionScreen, _v3.positionScreen, material.overdraw );\n\t\t\t\t\t\texpand( _v3.positionScreen, _v1.positionScreen, material.overdraw );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t\t_v2.positionScreen,\n\t\t\t\t\t\t_v3.positionScreen\n\t\t\t\t\t] );\n\n\t\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\t\trenderFace3( _v1, _v2, _v3, 0, 1, 2, element, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t/* DEBUG\n\t\t\t\tsetLineWidth( 1 );\n\t\t\t\tsetStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );\n\t\t\t\t_context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );\n\t\t\t\t*/\n\n\t\t\t\t_clearBox.union( _elemBox );\n\n\t\t\t}\n\n\t\t\t/* DEBUG\n\t\t\tsetLineWidth( 1 );\n\t\t\tsetStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );\n\t\t\t_context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );\n\t\t\t*/\n\n\t\t\t_context.setTransform( 1, 0, 0, 1, 0, 0 );\n\n\t\t};\n\n\t\t//\n\n\t\tfunction calculateLights() {\n\n\t\t\t_ambientLight.setRGB( 0, 0, 0 );\n\t\t\t_directionalLights.setRGB( 0, 0, 0 );\n\t\t\t_pointLights.setRGB( 0, 0, 0 );\n\n\t\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\n\t\t\t\tvar light = _lights[ l ];\n\t\t\t\tvar lightColor = light.color;\n\n\t\t\t\tif ( light instanceof THREE.AmbientLight ) {\n\n\t\t\t\t\t_ambientLight.add( lightColor );\n\n\t\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\n\n\t\t\t\t\t// for sprites\n\n\t\t\t\t\t_directionalLights.add( lightColor );\n\n\t\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\n\t\t\t\t\t// for sprites\n\n\t\t\t\t\t_pointLights.add( lightColor );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction calculateLight( position, normal, color ) {\n\n\t\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\n\t\t\t\tvar light = _lights[ l ];\n\n\t\t\t\t_lightColor.copy( light.color );\n\n\t\t\t\tif ( light instanceof THREE.DirectionalLight ) {\n\n\t\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld ).normalize();\n\n\t\t\t\t\tvar amount = normal.dot( lightPosition );\n\n\t\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\t\tamount *= light.intensity;\n\n\t\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\n\t\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\n\t\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\t\tvar amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );\n\n\t\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\t\tamount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );\n\n\t\t\t\t\tif ( amount == 0 ) continue;\n\n\t\t\t\t\tamount *= light.intensity;\n\n\t\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderSprite( v1, element, material ) {\n\n\t\t\tsetOpacity( material.opacity );\n\t\t\tsetBlending( material.blending );\n\n\t\t\tvar scaleX = element.scale.x * _canvasWidthHalf;\n\t\t\tvar scaleY = element.scale.y * _canvasHeightHalf;\n\n\t\t\tvar dist = 0.5 * Math.sqrt( scaleX * scaleX + scaleY * scaleY ); // allow for rotated sprite\n\t\t\t_elemBox.min.set( v1.x - dist, v1.y - dist );\n\t\t\t_elemBox.max.set( v1.x + dist, v1.y + dist );\n\n\t\t\tif ( material instanceof THREE.SpriteMaterial ) {\n\n\t\t\t\tvar texture = material.map;\n\n\t\t\t\tif ( texture !== null ) {\n\n\t\t\t\t\tvar pattern = _patterns[ texture.id ];\n\n\t\t\t\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\n\t\t\t\t\t\tpattern = textureToPattern( texture );\n\t\t\t\t\t\t_patterns[ texture.id ] = pattern;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( pattern.canvas !== undefined ) {\n\n\t\t\t\t\t\tsetFillStyle( pattern.canvas );\n\n\t\t\t\t\t\tvar bitmap = texture.image;\n\n\t\t\t\t\t\tvar ox = bitmap.width * texture.offset.x;\n\t\t\t\t\t\tvar oy = bitmap.height * texture.offset.y;\n\n\t\t\t\t\t\tvar sx = bitmap.width * texture.repeat.x;\n\t\t\t\t\t\tvar sy = bitmap.height * texture.repeat.y;\n\n\t\t\t\t\t\tvar cx = scaleX / sx;\n\t\t\t\t\t\tvar cy = scaleY / sy;\n\n\t\t\t\t\t\t_context.save();\n\t\t\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t\t\t_context.translate( - scaleX / 2, - scaleY / 2 );\n\t\t\t\t\t\t_context.scale( cx, cy );\n\t\t\t\t\t\t_context.translate( - ox, - oy );\n\t\t\t\t\t\t_context.fillRect( ox, oy, sx, sy );\n\t\t\t\t\t\t_context.restore();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// no texture\n\n\t\t\t\t\tsetFillStyle( material.color.getStyle() );\n\n\t\t\t\t\t_context.save();\n\t\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t\t_context.scale( scaleX, - scaleY );\n\t\t\t\t\t_context.fillRect( - 0.5, - 0.5, 1, 1 );\n\t\t\t\t\t_context.restore();\n\n\t\t\t\t}\n\n\t\t\t} else if ( material instanceof THREE.SpriteCanvasMaterial ) {\n\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\t\t\tsetFillStyle( material.color.getStyle() );\n\n\t\t\t\t_context.save();\n\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t_context.scale( scaleX, scaleY );\n\n\t\t\t\tmaterial.program( _context );\n\n\t\t\t\t_context.restore();\n\n\t\t\t}\n\n\t\t\t/* DEBUG\n\t\t\tsetStrokeStyle( 'rgb(255,255,0)' );\n\t\t\t_context.beginPath();\n\t\t\t_context.moveTo( v1.x - 10, v1.y );\n\t\t\t_context.lineTo( v1.x + 10, v1.y );\n\t\t\t_context.moveTo( v1.x, v1.y - 10 );\n\t\t\t_context.lineTo( v1.x, v1.y + 10 );\n\t\t\t_context.stroke();\n\t\t\t*/\n\n\t\t}\n\n\t\tfunction renderLine( v1, v2, element, material ) {\n\n\t\t\tsetOpacity( material.opacity );\n\t\t\tsetBlending( material.blending );\n\n\t\t\t_context.beginPath();\n\t\t\t_context.moveTo( v1.positionScreen.x, v1.positionScreen.y );\n\t\t\t_context.lineTo( v2.positionScreen.x, v2.positionScreen.y );\n\n\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\n\n\t\t\t\tsetLineWidth( material.linewidth );\n\t\t\t\tsetLineCap( material.linecap );\n\t\t\t\tsetLineJoin( material.linejoin );\n\n\t\t\t\tif ( material.vertexColors !== THREE.VertexColors ) {\n\n\t\t\t\t\tsetStrokeStyle( material.color.getStyle() );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar colorStyle1 = element.vertexColors[ 0 ].getStyle();\n\t\t\t\t\tvar colorStyle2 = element.vertexColors[ 1 ].getStyle();\n\n\t\t\t\t\tif ( colorStyle1 === colorStyle2 ) {\n\n\t\t\t\t\t\tsetStrokeStyle( colorStyle1 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttry {\n\n\t\t\t\t\t\t\tvar grad = _context.createLinearGradient(\n\t\t\t\t\t\t\t\tv1.positionScreen.x,\n\t\t\t\t\t\t\t\tv1.positionScreen.y,\n\t\t\t\t\t\t\t\tv2.positionScreen.x,\n\t\t\t\t\t\t\t\tv2.positionScreen.y\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tgrad.addColorStop( 0, colorStyle1 );\n\t\t\t\t\t\t\tgrad.addColorStop( 1, colorStyle2 );\n\n\t\t\t\t\t\t} catch ( exception ) {\n\n\t\t\t\t\t\t\tgrad = colorStyle1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsetStrokeStyle( grad );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t_context.stroke();\n\t\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\n\n\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\n\n\t\t\t\tsetLineWidth( material.linewidth );\n\t\t\t\tsetLineCap( material.linecap );\n\t\t\t\tsetLineJoin( material.linejoin );\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\t\t\tsetLineDash( [ material.dashSize, material.gapSize ] );\n\n\t\t\t\t_context.stroke();\n\n\t\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\n\n\t\t\t\tsetLineDash( [] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderFace3( v1, v2, v3, uv1, uv2, uv3, element, material ) {\n\n\t\t\t_this.info.render.vertices += 3;\n\t\t\t_this.info.render.faces ++;\n\n\t\t\tsetOpacity( material.opacity );\n\t\t\tsetBlending( material.blending );\n\n\t\t\t_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;\n\t\t\t_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;\n\t\t\t_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;\n\n\t\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y );\n\n\t\t\tif ( ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) && material.map === null ) {\n\n\t\t\t\t_diffuseColor.copy( material.color );\n\t\t\t\t_emissiveColor.copy( material.emissive );\n\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\n\t\t\t\t\t_diffuseColor.multiply( element.color );\n\n\t\t\t\t}\n\n\t\t\t\t_color.copy( _ambientLight );\n\n\t\t\t\t_centroid.copy( v1.positionWorld ).add( v2.positionWorld ).add( v3.positionWorld ).divideScalar( 3 );\n\n\t\t\t\tcalculateLight( _centroid, element.normalModel, _color );\n\n\t\t\t\t_color.multiply( _diffuseColor ).add( _emissiveColor );\n\n\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t : fillPath( _color );\n\n\t\t\t} else if ( material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t\t    material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t\t    material instanceof THREE.MeshPhongMaterial ) {\n\n\t\t\t\tif ( material.map !== null ) {\n\n\t\t\t\t\tvar mapping = material.map.mapping;\n\n\t\t\t\t\tif ( mapping === THREE.UVMapping ) {\n\n\t\t\t\t\t\t_uvs = element.uvs;\n\t\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[ uv1 ].x, _uvs[ uv1 ].y, _uvs[ uv2 ].x, _uvs[ uv2 ].y, _uvs[ uv3 ].x, _uvs[ uv3 ].y, material.map );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.envMap !== null ) {\n\n\t\t\t\t\tif ( material.envMap.mapping === THREE.SphericalReflectionMapping ) {\n\n\t\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv1 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t\t_uv1x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t\t_uv1y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv2 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t\t_uv2x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t\t_uv2y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv3 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t\t_uv3x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t\t_uv3y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_color.copy( material.color );\n\n\t\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\n\t\t\t\t\t\t_color.multiply( element.color );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t\t : fillPath( _color );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\n\n\t\t\t\t_normal.copy( element.normalModel ).applyMatrix3( _normalViewMatrix );\n\n\t\t\t\t_color.setRGB( _normal.x, _normal.y, _normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\n\n\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t : fillPath( _color );\n\n\t\t\t} else {\n\n\t\t\t\t_color.setRGB( 1, 1, 1 );\n\n\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t : fillPath( _color );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction drawTriangle( x0, y0, x1, y1, x2, y2 ) {\n\n\t\t\t_context.beginPath();\n\t\t\t_context.moveTo( x0, y0 );\n\t\t\t_context.lineTo( x1, y1 );\n\t\t\t_context.lineTo( x2, y2 );\n\t\t\t_context.closePath();\n\n\t\t}\n\n\t\tfunction strokePath( color, linewidth, linecap, linejoin ) {\n\n\t\t\tsetLineWidth( linewidth );\n\t\t\tsetLineCap( linecap );\n\t\t\tsetLineJoin( linejoin );\n\t\t\tsetStrokeStyle( color.getStyle() );\n\n\t\t\t_context.stroke();\n\n\t\t\t_elemBox.expandByScalar( linewidth * 2 );\n\n\t\t}\n\n\t\tfunction fillPath( color ) {\n\n\t\t\tsetFillStyle( color.getStyle() );\n\t\t\t_context.fill();\n\n\t\t}\n\n\t\tfunction textureToPattern( texture ) {\n\n\t\t\tif ( texture.version === 0 ||\n\t\t\t\ttexture instanceof THREE.CompressedTexture ||\n\t\t\t\ttexture instanceof THREE.DataTexture ) {\n\n\t\t\t\treturn {\n\t\t\t\t\tcanvas: undefined,\n\t\t\t\t\tversion: texture.version\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar image = texture.image;\n\n\t\t\tif ( image.complete === false ) {\n\n\t\t\t\treturn {\n\t\t\t\t\tcanvas: undefined,\n\t\t\t\t\tversion: 0\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar canvas = document.createElement( 'canvas' );\n\t\t\tcanvas.width = image.width;\n\t\t\tcanvas.height = image.height;\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.setTransform( 1, 0, 0, - 1, 0, image.height );\n\t\t\tcontext.drawImage( image, 0, 0 );\n\n\t\t\tvar repeatX = texture.wrapS === THREE.RepeatWrapping;\n\t\t\tvar repeatY = texture.wrapT === THREE.RepeatWrapping;\n\n\t\t\tvar repeat = 'no-repeat';\n\n\t\t\tif ( repeatX === true && repeatY === true ) {\n\n\t\t\t\trepeat = 'repeat';\n\n\t\t\t} else if ( repeatX === true ) {\n\n\t\t\t\trepeat = 'repeat-x';\n\n\t\t\t} else if ( repeatY === true ) {\n\n\t\t\t\trepeat = 'repeat-y';\n\n\t\t\t}\n\n\t\t\tvar pattern = _context.createPattern( canvas, repeat );\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t\treturn {\n\t\t\t\tcanvas: pattern,\n\t\t\t\tversion: texture.version\n\t\t\t};\n\n\t\t}\n\n\t\tfunction patternPath( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture ) {\n\n\t\t\tvar pattern = _patterns[ texture.id ];\n\n\t\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\n\t\t\t\tpattern = textureToPattern( texture );\n\t\t\t\t_patterns[ texture.id ] = pattern;\n\n\t\t\t}\n\n\t\t\tif ( pattern.canvas !== undefined ) {\n\n\t\t\t\tsetFillStyle( pattern.canvas );\n\n\t\t\t} else {\n\n\t\t\t\tsetFillStyle( 'rgba( 0, 0, 0, 1)' );\n\t\t\t\t_context.fill();\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\n\t\t\tvar a, b, c, d, e, f, det, idet,\n\t\t\toffsetX = texture.offset.x / texture.repeat.x,\n\t\t\toffsetY = texture.offset.y / texture.repeat.y,\n\t\t\twidth = texture.image.width * texture.repeat.x,\n\t\t\theight = texture.image.height * texture.repeat.y;\n\n\t\t\tu0 = ( u0 + offsetX ) * width;\n\t\t\tv0 = ( v0 + offsetY ) * height;\n\n\t\t\tu1 = ( u1 + offsetX ) * width;\n\t\t\tv1 = ( v1 + offsetY ) * height;\n\n\t\t\tu2 = ( u2 + offsetX ) * width;\n\t\t\tv2 = ( v2 + offsetY ) * height;\n\n\t\t\tx1 -= x0; y1 -= y0;\n\t\t\tx2 -= x0; y2 -= y0;\n\n\t\t\tu1 -= u0; v1 -= v0;\n\t\t\tu2 -= u0; v2 -= v0;\n\n\t\t\tdet = u1 * v2 - u2 * v1;\n\n\t\t\tif ( det === 0 ) return;\n\n\t\t\tidet = 1 / det;\n\n\t\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\n\t\t\te = x0 - a * u0 - c * v0;\n\t\t\tf = y0 - b * u0 - d * v0;\n\n\t\t\t_context.save();\n\t\t\t_context.transform( a, b, c, d, e, f );\n\t\t\t_context.fill();\n\t\t\t_context.restore();\n\n\t\t}\n\n\t\tfunction clipImage( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image ) {\n\n\t\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\n\t\t\tvar a, b, c, d, e, f, det, idet,\n\t\t\twidth = image.width - 1,\n\t\t\theight = image.height - 1;\n\n\t\t\tu0 *= width; v0 *= height;\n\t\t\tu1 *= width; v1 *= height;\n\t\t\tu2 *= width; v2 *= height;\n\n\t\t\tx1 -= x0; y1 -= y0;\n\t\t\tx2 -= x0; y2 -= y0;\n\n\t\t\tu1 -= u0; v1 -= v0;\n\t\t\tu2 -= u0; v2 -= v0;\n\n\t\t\tdet = u1 * v2 - u2 * v1;\n\n\t\t\tidet = 1 / det;\n\n\t\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\n\t\t\te = x0 - a * u0 - c * v0;\n\t\t\tf = y0 - b * u0 - d * v0;\n\n\t\t\t_context.save();\n\t\t\t_context.transform( a, b, c, d, e, f );\n\t\t\t_context.clip();\n\t\t\t_context.drawImage( image, 0, 0 );\n\t\t\t_context.restore();\n\n\t\t}\n\n\t\t// Hide anti-alias gaps\n\n\t\tfunction expand( v1, v2, pixels ) {\n\n\t\t\tvar x = v2.x - v1.x, y = v2.y - v1.y,\n\t\t\tdet = x * x + y * y, idet;\n\n\t\t\tif ( det === 0 ) return;\n\n\t\t\tidet = pixels / Math.sqrt( det );\n\n\t\t\tx *= idet; y *= idet;\n\n\t\t\tv2.x += x; v2.y += y;\n\t\t\tv1.x -= x; v1.y -= y;\n\n\t\t}\n\n\t\t// Context cached methods.\n\n\t\tfunction setOpacity( value ) {\n\n\t\t\tif ( _contextGlobalAlpha !== value ) {\n\n\t\t\t\t_context.globalAlpha = value;\n\t\t\t\t_contextGlobalAlpha = value;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setBlending( value ) {\n\n\t\t\tif ( _contextGlobalCompositeOperation !== value ) {\n\n\t\t\t\tif ( value === THREE.NormalBlending ) {\n\n\t\t\t\t\t_context.globalCompositeOperation = 'source-over';\n\n\t\t\t\t} else if ( value === THREE.AdditiveBlending ) {\n\n\t\t\t\t\t_context.globalCompositeOperation = 'lighter';\n\n\t\t\t\t} else if ( value === THREE.SubtractiveBlending ) {\n\n\t\t\t\t\t_context.globalCompositeOperation = 'darker';\n\n\t\t\t\t}\n\n\t\t\t\t_contextGlobalCompositeOperation = value;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setLineWidth( value ) {\n\n\t\t\tif ( _contextLineWidth !== value ) {\n\n\t\t\t\t_context.lineWidth = value;\n\t\t\t\t_contextLineWidth = value;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setLineCap( value ) {\n\n\t\t\t// \"butt\", \"round\", \"square\"\n\n\t\t\tif ( _contextLineCap !== value ) {\n\n\t\t\t\t_context.lineCap = value;\n\t\t\t\t_contextLineCap = value;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setLineJoin( value ) {\n\n\t\t\t// \"round\", \"bevel\", \"miter\"\n\n\t\t\tif ( _contextLineJoin !== value ) {\n\n\t\t\t\t_context.lineJoin = value;\n\t\t\t\t_contextLineJoin = value;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setStrokeStyle( value ) {\n\n\t\t\tif ( _contextStrokeStyle !== value ) {\n\n\t\t\t\t_context.strokeStyle = value;\n\t\t\t\t_contextStrokeStyle = value;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setFillStyle( value ) {\n\n\t\t\tif ( _contextFillStyle !== value ) {\n\n\t\t\t\t_context.fillStyle = value;\n\t\t\t\t_contextFillStyle = value;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setLineDash( value ) {\n\n\t\t\tif ( _contextLineDash.length !== value.length ) {\n\n\t\t\t\t_context.setLineDash( value );\n\t\t\t\t_contextLineDash = value;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n};","module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Color correction\n\t */\n\n\tTHREE.ColorCorrectionShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\"powRGB\":   { type: \"v3\", value: new THREE.Vector3( 2, 2, 2 ) },\n\t\t\t\"mulRGB\":   { type: \"v3\", value: new THREE.Vector3( 1, 1, 1 ) },\n\t\t\t\"addRGB\":   { type: \"v3\", value: new THREE.Vector3( 0, 0, 0 ) }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform vec3 powRGB;\",\n\t\t\t\"uniform vec3 mulRGB;\",\n\t\t\t\"uniform vec3 addRGB;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"gl_FragColor = texture2D( tDiffuse, vUv );\",\n\t\t\t\t\"gl_FragColor.rgb = mulRGB * pow( ( gl_FragColor.rgb + addRGB ), powRGB );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Colorify shader\n\t */\n\n\tTHREE.ColorifyShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\"color\":    { type: \"c\", value: new THREE.Color( 0xffffff ) }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec3 color;\",\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 texel = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\t\"vec3 luma = vec3( 0.299, 0.587, 0.114 );\",\n\t\t\t\t\"float v = dot( texel.xyz, luma );\",\n\n\t\t\t\t\"gl_FragColor = vec4( v * color, texel.w );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Convolution shader\n\t * ported from o3d sample to WebGL / GLSL\n\t * http://o3d.googlecode.com/svn/trunk/samples/convolution.html\n\t */\n\n\tTHREE.ConvolutionShader = {\n\n\t\tdefines: {\n\n\t\t\t\"KERNEL_SIZE_FLOAT\": \"25.0\",\n\t\t\t\"KERNEL_SIZE_INT\": \"25\",\n\n\t\t},\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\":        { type: \"t\", value: null },\n\t\t\t\"uImageIncrement\": { type: \"v2\", value: new THREE.Vector2( 0.001953125, 0.0 ) },\n\t\t\t\"cKernel\":         { type: \"fv1\", value: [] }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"uniform vec2 uImageIncrement;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float cKernel[ KERNEL_SIZE_INT ];\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform vec2 uImageIncrement;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec2 imageCoord = vUv;\",\n\t\t\t\t\"vec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );\",\n\n\t\t\t\t\"for( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {\",\n\n\t\t\t\t\t\"sum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];\",\n\t\t\t\t\t\"imageCoord += uImageIncrement;\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\t\"gl_FragColor = sum;\",\n\n\t\t\t\"}\"\n\n\n\t\t].join( \"\\n\" ),\n\n\t\tbuildKernel: function ( sigma ) {\n\n\t\t\t// We lop off the sqrt(2 * pi) * sigma term, since we're going to normalize anyway.\n\n\t\t\tfunction gauss( x, sigma ) {\n\n\t\t\t\treturn Math.exp( - ( x * x ) / ( 2.0 * sigma * sigma ) );\n\n\t\t\t}\n\n\t\t\tvar i, values, sum, halfWidth, kMaxKernelSize = 25, kernelSize = 2 * Math.ceil( sigma * 3.0 ) + 1;\n\n\t\t\tif ( kernelSize > kMaxKernelSize ) kernelSize = kMaxKernelSize;\n\t\t\thalfWidth = ( kernelSize - 1 ) * 0.5;\n\n\t\t\tvalues = new Array( kernelSize );\n\t\t\tsum = 0.0;\n\t\t\tfor ( i = 0; i < kernelSize; ++ i ) {\n\n\t\t\t\tvalues[ i ] = gauss( i - halfWidth, sigma );\n\t\t\t\tsum += values[ i ];\n\n\t\t\t}\n\n\t\t\t// normalize the kernel\n\n\t\t\tfor ( i = 0; i < kernelSize; ++ i ) values[ i ] /= sum;\n\n\t\t\treturn values;\n\n\t\t}\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Full-screen textured quad shader\n\t */\n\n\tTHREE.CopyShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\"opacity\":  { type: \"f\", value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float opacity;\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 texel = texture2D( tDiffuse, vUv );\",\n\t\t\t\t\"gl_FragColor = opacity * texel;\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\n\t/*\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.DDSLoader = function () {\n\n\t\tthis._parser = THREE.DDSLoader.parse;\n\n\t};\n\n\tTHREE.DDSLoader.prototype = Object.create( THREE.CompressedTextureLoader.prototype );\n\tTHREE.DDSLoader.prototype.constructor = THREE.DDSLoader;\n\n\tTHREE.DDSLoader.parse = function ( buffer, loadMipmaps ) {\n\n\t\tvar dds = { mipmaps: [], width: 0, height: 0, format: null, mipmapCount: 1 };\n\n\t\t// Adapted from @toji's DDS utils\n\t\t// https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js\n\n\t\t// All values and structures referenced from:\n\t\t// http://msdn.microsoft.com/en-us/library/bb943991.aspx/\n\n\t\tvar DDS_MAGIC = 0x20534444;\n\n\t\tvar DDSD_CAPS = 0x1,\n\t\t\tDDSD_HEIGHT = 0x2,\n\t\t\tDDSD_WIDTH = 0x4,\n\t\t\tDDSD_PITCH = 0x8,\n\t\t\tDDSD_PIXELFORMAT = 0x1000,\n\t\t\tDDSD_MIPMAPCOUNT = 0x20000,\n\t\t\tDDSD_LINEARSIZE = 0x80000,\n\t\t\tDDSD_DEPTH = 0x800000;\n\n\t\tvar DDSCAPS_COMPLEX = 0x8,\n\t\t\tDDSCAPS_MIPMAP = 0x400000,\n\t\t\tDDSCAPS_TEXTURE = 0x1000;\n\n\t\tvar DDSCAPS2_CUBEMAP = 0x200,\n\t\t\tDDSCAPS2_CUBEMAP_POSITIVEX = 0x400,\n\t\t\tDDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,\n\t\t\tDDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,\n\t\t\tDDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,\n\t\t\tDDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,\n\t\t\tDDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000,\n\t\t\tDDSCAPS2_VOLUME = 0x200000;\n\n\t\tvar DDPF_ALPHAPIXELS = 0x1,\n\t\t\tDDPF_ALPHA = 0x2,\n\t\t\tDDPF_FOURCC = 0x4,\n\t\t\tDDPF_RGB = 0x40,\n\t\t\tDDPF_YUV = 0x200,\n\t\t\tDDPF_LUMINANCE = 0x20000;\n\n\t\tfunction fourCCToInt32( value ) {\n\n\t\t\treturn value.charCodeAt( 0 ) +\n\t\t\t\t( value.charCodeAt( 1 ) << 8 ) +\n\t\t\t\t( value.charCodeAt( 2 ) << 16 ) +\n\t\t\t\t( value.charCodeAt( 3 ) << 24 );\n\n\t\t}\n\n\t\tfunction int32ToFourCC( value ) {\n\n\t\t\treturn String.fromCharCode(\n\t\t\t\tvalue & 0xff,\n\t\t\t\t( value >> 8 ) & 0xff,\n\t\t\t\t( value >> 16 ) & 0xff,\n\t\t\t\t( value >> 24 ) & 0xff\n\t\t\t);\n\n\t\t}\n\n\t\tfunction loadARGBMip( buffer, dataOffset, width, height ) {\n\n\t\t\tvar dataLength = width * height * 4;\n\t\t\tvar srcBuffer = new Uint8Array( buffer, dataOffset, dataLength );\n\t\t\tvar byteArray = new Uint8Array( dataLength );\n\t\t\tvar dst = 0;\n\t\t\tvar src = 0;\n\t\t\tfor ( var y = 0; y < height; y ++ ) {\n\n\t\t\t\tfor ( var x = 0; x < width; x ++ ) {\n\n\t\t\t\t\tvar b = srcBuffer[ src ]; src ++;\n\t\t\t\t\tvar g = srcBuffer[ src ]; src ++;\n\t\t\t\t\tvar r = srcBuffer[ src ]; src ++;\n\t\t\t\t\tvar a = srcBuffer[ src ]; src ++;\n\t\t\t\t\tbyteArray[ dst ] = r; dst ++;\t//r\n\t\t\t\t\tbyteArray[ dst ] = g; dst ++;\t//g\n\t\t\t\t\tbyteArray[ dst ] = b; dst ++;\t//b\n\t\t\t\t\tbyteArray[ dst ] = a; dst ++;\t//a\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\treturn byteArray;\n\n\t\t}\n\n\t\tvar FOURCC_DXT1 = fourCCToInt32( \"DXT1\" );\n\t\tvar FOURCC_DXT3 = fourCCToInt32( \"DXT3\" );\n\t\tvar FOURCC_DXT5 = fourCCToInt32( \"DXT5\" );\n\t\tvar FOURCC_ETC1 = fourCCToInt32( \"ETC1\" );\n\n\t\tvar headerLengthInt = 31; // The header length in 32 bit ints\n\n\t\t// Offsets into the header array\n\n\t\tvar off_magic = 0;\n\n\t\tvar off_size = 1;\n\t\tvar off_flags = 2;\n\t\tvar off_height = 3;\n\t\tvar off_width = 4;\n\n\t\tvar off_mipmapCount = 7;\n\n\t\tvar off_pfFlags = 20;\n\t\tvar off_pfFourCC = 21;\n\t\tvar off_RGBBitCount = 22;\n\t\tvar off_RBitMask = 23;\n\t\tvar off_GBitMask = 24;\n\t\tvar off_BBitMask = 25;\n\t\tvar off_ABitMask = 26;\n\n\t\tvar off_caps = 27;\n\t\tvar off_caps2 = 28;\n\t\tvar off_caps3 = 29;\n\t\tvar off_caps4 = 30;\n\n\t\t// Parse header\n\n\t\tvar header = new Int32Array( buffer, 0, headerLengthInt );\n\n\t\tif ( header[ off_magic ] !== DDS_MAGIC ) {\n\n\t\t\tconsole.error( 'THREE.DDSLoader.parse: Invalid magic number in DDS header.' );\n\t\t\treturn dds;\n\n\t\t}\n\n\t\tif ( ! header[ off_pfFlags ] & DDPF_FOURCC ) {\n\n\t\t\tconsole.error( 'THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.' );\n\t\t\treturn dds;\n\n\t\t}\n\n\t\tvar blockBytes;\n\n\t\tvar fourCC = header[ off_pfFourCC ];\n\n\t\tvar isRGBAUncompressed = false;\n\n\t\tswitch ( fourCC ) {\n\n\t\t\tcase FOURCC_DXT1:\n\n\t\t\t\tblockBytes = 8;\n\t\t\t\tdds.format = THREE.RGB_S3TC_DXT1_Format;\n\t\t\t\tbreak;\n\n\t\t\tcase FOURCC_DXT3:\n\n\t\t\t\tblockBytes = 16;\n\t\t\t\tdds.format = THREE.RGBA_S3TC_DXT3_Format;\n\t\t\t\tbreak;\n\n\t\t\tcase FOURCC_DXT5:\n\n\t\t\t\tblockBytes = 16;\n\t\t\t\tdds.format = THREE.RGBA_S3TC_DXT5_Format;\n\t\t\t\tbreak;\n\n\t\t\tcase FOURCC_ETC1:\n\n\t\t\t\tblockBytes = 8;\n\t\t\t\tdds.format = THREE.RGB_ETC1_Format;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tif ( header[ off_RGBBitCount ] === 32\n\t\t\t\t\t&& header[ off_RBitMask ] & 0xff0000\n\t\t\t\t\t&& header[ off_GBitMask ] & 0xff00\n\t\t\t\t\t&& header[ off_BBitMask ] & 0xff\n\t\t\t\t\t&& header[ off_ABitMask ] & 0xff000000  ) {\n\n\t\t\t\t\tisRGBAUncompressed = true;\n\t\t\t\t\tblockBytes = 64;\n\t\t\t\t\tdds.format = THREE.RGBAFormat;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.DDSLoader.parse: Unsupported FourCC code ', int32ToFourCC( fourCC ) );\n\t\t\t\t\treturn dds;\n\n\t\t\t\t}\n\t\t}\n\n\t\tdds.mipmapCount = 1;\n\n\t\tif ( header[ off_flags ] & DDSD_MIPMAPCOUNT && loadMipmaps !== false ) {\n\n\t\t\tdds.mipmapCount = Math.max( 1, header[ off_mipmapCount ] );\n\n\t\t}\n\n\t\tvar caps2 = header[ off_caps2 ];\n\t\tdds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;\n\t\tif ( dds.isCubemap && (\n\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_POSITIVEX ) ||\n\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX ) ||\n\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_POSITIVEY ) ||\n\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY ) ||\n\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ ) ||\n\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ )\n\t\t\t) ) {\n\n\t\t\tconsole.error( 'THREE.DDSLoader.parse: Incomplete cubemap faces' );\n\t\t\treturn dds;\n\n\t\t}\n\n\t\tdds.width = header[ off_width ];\n\t\tdds.height = header[ off_height ];\n\n\t\tvar dataOffset = header[ off_size ] + 4;\n\n\t\t// Extract mipmaps buffers\n\n\t\tvar faces = dds.isCubemap ? 6 : 1;\n\n\t\tfor ( var face = 0; face < faces; face ++ ) {\n\n\t\t\tvar width = dds.width;\n\t\t\tvar height = dds.height;\n\n\t\t\tfor ( var i = 0; i < dds.mipmapCount; i ++ ) {\n\n\t\t\t\tif ( isRGBAUncompressed ) {\n\n\t\t\t\t\tvar byteArray = loadARGBMip( buffer, dataOffset, width, height );\n\t\t\t\t\tvar dataLength = byteArray.length;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar dataLength = Math.max( 4, width ) / 4 * Math.max( 4, height ) / 4 * blockBytes;\n\t\t\t\t\tvar byteArray = new Uint8Array( buffer, dataOffset, dataLength );\n\n\t\t\t\t}\n\n\t\t\t\tvar mipmap = { \"data\": byteArray, \"width\": width, \"height\": height };\n\t\t\t\tdds.mipmaps.push( mipmap );\n\n\t\t\t\tdataOffset += dataLength;\n\n\t\t\t\twidth = Math.max( width >> 1, 1 );\n\t\t\t\theight = Math.max( height >> 1, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn dds;\n\n\t};\n\n};","module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Depth-of-field shader using mipmaps\n\t * - from Matt Handley @applmak\n\t * - requires power-of-2 sized render target with enabled mipmaps\n\t */\n\n\tTHREE.DOFMipMapShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tColor\":   { type: \"t\", value: null },\n\t\t\t\"tDepth\":   { type: \"t\", value: null },\n\t\t\t\"focus\":    { type: \"f\", value: 1.0 },\n\t\t\t\"maxblur\":  { type: \"f\", value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float focus;\",\n\t\t\t\"uniform float maxblur;\",\n\n\t\t\t\"uniform sampler2D tColor;\",\n\t\t\t\"uniform sampler2D tDepth;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 depth = texture2D( tDepth, vUv );\",\n\n\t\t\t\t\"float factor = depth.x - focus;\",\n\n\t\t\t\t\"vec4 col = texture2D( tColor, vUv, 2.0 * maxblur * abs( focus - depth.x ) );\",\n\n\t\t\t\t\"gl_FragColor = col;\",\n\t\t\t\t\"gl_FragColor.a = 1.0;\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author felixturner / http://airtight.cc/\n\t *\n\t * RGB Shift Shader\n\t * Shifts red and blue channels from center in opposite directions\n\t * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\n\t * by Tom Butterworth / http://kriss.cx/tom/\n\t *\n\t * amount: shift distance (1 is width of input)\n\t * angle: shift angle in radians\n\t */\n\n\tTHREE.DigitalGlitch = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\":\t\t{ type: \"t\", value: null },//diffuse texture\n\t\t\t\"tDisp\":\t\t{ type: \"t\", value: null },//displacement texture for digital glitch squares\n\t\t\t\"byp\":\t\t\t{ type: \"i\", value: 0 },//apply the glitch ?\n\t\t\t\"amount\":\t\t{ type: \"f\", value: 0.08 },\n\t\t\t\"angle\":\t\t{ type: \"f\", value: 0.02 },\n\t\t\t\"seed\":\t\t\t{ type: \"f\", value: 0.02 },\n\t\t\t\"seed_x\":\t\t{ type: \"f\", value: 0.02 },//-1,1\n\t\t\t\"seed_y\":\t\t{ type: \"f\", value: 0.02 },//-1,1\n\t\t\t\"distortion_x\":\t{ type: \"f\", value: 0.5 },\n\t\t\t\"distortion_y\":\t{ type: \"f\", value: 0.6 },\n\t\t\t\"col_s\":\t\t{ type: \"f\", value: 0.05 }\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\t\t\t\"void main() {\",\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\t\"}\"\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\t\t\t\"uniform int byp;\",//should we apply the glitch ?\n\t\t\t\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform sampler2D tDisp;\",\n\t\t\t\n\t\t\t\"uniform float amount;\",\n\t\t\t\"uniform float angle;\",\n\t\t\t\"uniform float seed;\",\n\t\t\t\"uniform float seed_x;\",\n\t\t\t\"uniform float seed_y;\",\n\t\t\t\"uniform float distortion_x;\",\n\t\t\t\"uniform float distortion_y;\",\n\t\t\t\"uniform float col_s;\",\n\t\t\t\t\n\t\t\t\"varying vec2 vUv;\",\n\t\t\t\n\t\t\t\n\t\t\t\"float rand(vec2 co){\",\n\t\t\t\t\"return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\",\n\t\t\t\"}\",\n\t\t\t\t\t\n\t\t\t\"void main() {\",\n\t\t\t\t\"if(byp<1) {\",\n\t\t\t\t\t\"vec2 p = vUv;\",\n\t\t\t\t\t\"float xs = floor(gl_FragCoord.x / 0.5);\",\n\t\t\t\t\t\"float ys = floor(gl_FragCoord.y / 0.5);\",\n\t\t\t\t\t//based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\n\t\t\t\t\t\"vec4 normal = texture2D (tDisp, p*seed*seed);\",\n\t\t\t\t\t\"if(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {\",\n\t\t\t\t\t\t\"if(seed_x>0.){\",\n\t\t\t\t\t\t\t\"p.y = 1. - (p.y + distortion_y);\",\n\t\t\t\t\t\t\"}\",\n\t\t\t\t\t\t\"else {\",\n\t\t\t\t\t\t\t\"p.y = distortion_y;\",\n\t\t\t\t\t\t\"}\",\n\t\t\t\t\t\"}\",\n\t\t\t\t\t\"if(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {\",\n\t\t\t\t\t\t\"if(seed_y>0.){\",\n\t\t\t\t\t\t\t\"p.x=distortion_x;\",\n\t\t\t\t\t\t\"}\",\n\t\t\t\t\t\t\"else {\",\n\t\t\t\t\t\t\t\"p.x = 1. - (p.x + distortion_x);\",\n\t\t\t\t\t\t\"}\",\n\t\t\t\t\t\"}\",\n\t\t\t\t\t\"p.x+=normal.x*seed_x*(seed/5.);\",\n\t\t\t\t\t\"p.y+=normal.y*seed_y*(seed/5.);\",\n\t\t\t\t\t//base from RGB shift shader\n\t\t\t\t\t\"vec2 offset = amount * vec2( cos(angle), sin(angle));\",\n\t\t\t\t\t\"vec4 cr = texture2D(tDiffuse, p + offset);\",\n\t\t\t\t\t\"vec4 cga = texture2D(tDiffuse, p);\",\n\t\t\t\t\t\"vec4 cb = texture2D(tDiffuse, p - offset);\",\n\t\t\t\t\t\"gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\",\n\t\t\t\t\t//add noise\n\t\t\t\t\t\"vec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);\",\n\t\t\t\t\t\"gl_FragColor = gl_FragColor+ snow;\",\n\t\t\t\t\"}\",\n\t\t\t\t\"else {\",\n\t\t\t\t\t\"gl_FragColor=texture2D (tDiffuse, vUv);\",\n\t\t\t\t\"}\",\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.DotScreenPass = function ( center, angle, scale ) {\n\n\t\tif ( THREE.DotScreenShader === undefined )\n\t\t\tconsole.error( \"THREE.DotScreenPass relies on THREE.DotScreenShader\" );\n\n\t\tvar shader = THREE.DotScreenShader;\n\n\t\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\t\tif ( center !== undefined ) this.uniforms[ \"center\" ].value.copy( center );\n\t\tif ( angle !== undefined ) this.uniforms[ \"angle\" ].value = angle;\n\t\tif ( scale !== undefined ) this.uniforms[ \"scale\" ].value = scale;\n\n\t\tthis.material = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t\tthis.enabled = true;\n\t\tthis.renderToScreen = false;\n\t\tthis.needsSwap = true;\n\n\n\t\tthis.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tthis.scene  = new THREE.Scene();\n\n\t\tthis.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );\n\t\tthis.scene.add( this.quad );\n\n\t};\n\n\tTHREE.DotScreenPass.prototype = {\n\n\t\trender: function ( renderer, writeBuffer, readBuffer, delta ) {\n\n\t\t\tthis.uniforms[ \"tDiffuse\" ].value = readBuffer;\n\t\t\tthis.uniforms[ \"tSize\" ].value.set( readBuffer.width, readBuffer.height );\n\n\t\t\tthis.quad.material = this.material;\n\n\t\t\tif ( this.renderToScreen ) {\n\n\t\t\t\trenderer.render( this.scene, this.camera );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( this.scene, this.camera, writeBuffer, false );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n};\n","module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Dot screen shader\n\t * based on glfx.js sepia shader\n\t * https://github.com/evanw/glfx.js\n\t */\n\n\tTHREE.DotScreenShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\"tSize\":    { type: \"v2\", value: new THREE.Vector2( 256, 256 ) },\n\t\t\t\"center\":   { type: \"v2\", value: new THREE.Vector2( 0.5, 0.5 ) },\n\t\t\t\"angle\":    { type: \"f\", value: 1.57 },\n\t\t\t\"scale\":    { type: \"f\", value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec2 center;\",\n\t\t\t\"uniform float angle;\",\n\t\t\t\"uniform float scale;\",\n\t\t\t\"uniform vec2 tSize;\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"float pattern() {\",\n\n\t\t\t\t\"float s = sin( angle ), c = cos( angle );\",\n\n\t\t\t\t\"vec2 tex = vUv * tSize - center;\",\n\t\t\t\t\"vec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\",\n\n\t\t\t\t\"return ( sin( point.x ) * sin( point.y ) ) * 4.0;\",\n\n\t\t\t\"}\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 color = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\t\"float average = ( color.r + color.g + color.b ) / 3.0;\",\n\n\t\t\t\t\"gl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n\t *\n\t * Edge Detection Shader using Frei-Chen filter\n\t * Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n\t *\n\t * aspect: vec2 of (1/width, 1/height)\n\t */\n\n\tTHREE.EdgeShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\"aspect\":    { type: \"v2\", value: new THREE.Vector2( 512, 512 ) },\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"uniform vec2 aspect;\",\n\n\t\t\t\"vec2 texel = vec2(1.0 / aspect.x, 1.0 / aspect.y);\",\n\n\n\t\t\t\"mat3 G[9];\",\n\n\t\t\t// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\n\n\t\t\t\"const mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\",\n\t\t\t\"const mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\",\n\t\t\t\"const mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\",\n\t\t\t\"const mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\",\n\t\t\t\"const mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\",\n\t\t\t\"const mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\",\n\t\t\t\"const mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\",\n\t\t\t\"const mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\",\n\t\t\t\"const mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\",\n\n\t\t\t\"void main(void)\",\n\t\t\t\"{\",\n\n\t\t\t\t\"G[0] = g0,\",\n\t\t\t\t\"G[1] = g1,\",\n\t\t\t\t\"G[2] = g2,\",\n\t\t\t\t\"G[3] = g3,\",\n\t\t\t\t\"G[4] = g4,\",\n\t\t\t\t\"G[5] = g5,\",\n\t\t\t\t\"G[6] = g6,\",\n\t\t\t\t\"G[7] = g7,\",\n\t\t\t\t\"G[8] = g8;\",\n\n\t\t\t\t\"mat3 I;\",\n\t\t\t\t\"float cnv[9];\",\n\t\t\t\t\"vec3 sample;\",\n\n\t\t\t\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\t\t\t\t\"for (float i=0.0; i<3.0; i++) {\",\n\t\t\t\t\t\"for (float j=0.0; j<3.0; j++) {\",\n\t\t\t\t\t\t\"sample = texture2D(tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\",\n\t\t\t\t\t\t\"I[int(i)][int(j)] = length(sample);\",\n\t\t\t\t\t\"}\",\n\t\t\t\t\"}\",\n\n\t\t\t\t/* calculate the convolution values for all the masks */\n\t\t\t\t\"for (int i=0; i<9; i++) {\",\n\t\t\t\t\t\"float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\",\n\t\t\t\t\t\"cnv[i] = dp3 * dp3;\",\n\t\t\t\t\"}\",\n\n\t\t\t\t\"float M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\",\n\t\t\t\t\"float S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\",\n\n\t\t\t\t\"gl_FragColor = vec4(vec3(sqrt(M/S)), 1.0);\",\n\t\t\t\"}\",\n\n\t\t].join( \"\\n\" )\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n\t *\n\t * Edge Detection Shader using Sobel filter\n\t * Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n\t *\n\t * aspect: vec2 of (1/width, 1/height)\n\t */\n\n\tTHREE.EdgeShader2 = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\"aspect\":    { type: \"v2\", value: new THREE.Vector2( 512, 512 ) },\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"varying vec2 vUv;\",\n\t\t\t\"uniform vec2 aspect;\",\n\n\n\t\t\t\"vec2 texel = vec2(1.0 / aspect.x, 1.0 / aspect.y);\",\n\n\t\t\t\"mat3 G[2];\",\n\n\t\t\t\"const mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\",\n\t\t\t\"const mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\",\n\n\n\t\t\t\"void main(void)\",\n\t\t\t\"{\",\n\t\t\t\t\"mat3 I;\",\n\t\t\t\t\"float cnv[2];\",\n\t\t\t\t\"vec3 sample;\",\n\n\t\t\t\t\"G[0] = g0;\",\n\t\t\t\t\"G[1] = g1;\",\n\n\t\t\t\t/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n\t\t\t\t\"for (float i=0.0; i<3.0; i++)\",\n\t\t\t\t\"for (float j=0.0; j<3.0; j++) {\",\n\t\t\t\t\t\"sample = texture2D( tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\",\n\t\t\t\t\t\"I[int(i)][int(j)] = length(sample);\",\n\t\t\t\t\"}\",\n\n\t\t\t\t/* calculate the convolution values for all the masks */\n\t\t\t\t\"for (int i=0; i<2; i++) {\",\n\t\t\t\t\t\"float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\",\n\t\t\t\t\t\"cnv[i] = dp3 * dp3; \",\n\t\t\t\t\"}\",\n\n\t\t\t\t\"gl_FragColor = vec4(0.5 * sqrt(cnv[0]*cnv[0]+cnv[1]*cnv[1]));\",\n\t\t\t\"} \",\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.EffectComposer = function ( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tvar pixelRatio = renderer.getPixelRatio();\n\n\t\t\tvar width  = Math.floor( renderer.context.canvas.width  / pixelRatio ) || 1;\n\t\t\tvar height = Math.floor( renderer.context.canvas.height / pixelRatio ) || 1;\n\t\t\tvar parameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat, stencilBuffer: false };\n\n\t\t\trenderTarget = new THREE.WebGLRenderTarget( width, height, parameters );\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.passes = [];\n\n\t\tif ( THREE.CopyShader === undefined )\n\t\t\tconsole.error( \"THREE.EffectComposer relies on THREE.CopyShader\" );\n\n\t\tthis.copyPass = new THREE.ShaderPass( THREE.CopyShader );\n\n\t};\n\n\tTHREE.EffectComposer.prototype = {\n\n\t\tswapBuffers: function() {\n\n\t\t\tvar tmp = this.readBuffer;\n\t\t\tthis.readBuffer = this.writeBuffer;\n\t\t\tthis.writeBuffer = tmp;\n\n\t\t},\n\n\t\taddPass: function ( pass ) {\n\n\t\t\tthis.passes.push( pass );\n\n\t\t},\n\n\t\tinsertPass: function ( pass, index ) {\n\n\t\t\tthis.passes.splice( index, 0, pass );\n\n\t\t},\n\n\t\trender: function ( delta ) {\n\n\t\t\tthis.writeBuffer = this.renderTarget1;\n\t\t\tthis.readBuffer = this.renderTarget2;\n\n\t\t\tvar maskActive = false;\n\n\t\t\tvar pass, i, il = this.passes.length;\n\n\t\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\t\tpass = this.passes[ i ];\n\n\t\t\t\tif ( ! pass.enabled ) continue;\n\n\t\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, delta, maskActive );\n\n\t\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\t\tvar context = this.renderer.context;\n\n\t\t\t\t\t\tcontext.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, delta );\n\n\t\t\t\t\t\tcontext.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.swapBuffers();\n\n\t\t\t\t}\n\n\t\t\t\tif ( pass instanceof THREE.MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof THREE.ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\treset: function ( renderTarget ) {\n\n\t\t\tif ( renderTarget === undefined ) {\n\n\t\t\t\trenderTarget = this.renderTarget1.clone();\n\n\t\t\t\tvar pixelRatio = this.renderer.getPixelRatio();\n\n\t\t\t\trenderTarget.width  = Math.floor( this.renderer.context.canvas.width  / pixelRatio );\n\t\t\t\trenderTarget.height = Math.floor( this.renderer.context.canvas.height / pixelRatio );\n\n\t\t\t}\n\n\t\t\tthis.renderTarget1.dispose();\n\t\t\tthis.renderTarget1 = renderTarget;\n\t\t\tthis.renderTarget2.dispose();\n\t\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\t\tthis.writeBuffer = this.renderTarget1;\n\t\t\tthis.readBuffer = this.renderTarget2;\n\n\t\t},\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tthis.renderTarget1.setSize( width, height );\n\t\t\tthis.renderTarget2.setSize( width, height );\n\n\t\t}\n\n\t};\n\n};\n","module.exports = function( THREE ){\n\n\t/**\n\t * @author mattdsl / https://github.com/mattdesl/three-shader-fxaa\n\t */\n\t\n\tTHREE.FXAAShader = {\n\t\tuniforms: {\n\t\t\ttDiffuse: {\n\t\t\t\ttype: \"t\",\n\t\t\t\tvalue: new THREE.Texture()\n\t\t\t},\n\t\t\tresolution: {\n\t\t\t\ttype: \"v2\",\n\t\t\t\tvalue: new THREE.Vector2()\n\t\t\t}\n\t\t},\n\t\tvertexShader: \"#define GLSLIFY 1\\nvarying vec2 vUv;\\n\\nvarying vec2 v_rgbNW;\\nvarying vec2 v_rgbNE;\\nvarying vec2 v_rgbSW;\\nvarying vec2 v_rgbSE;\\nvarying vec2 v_rgbM;\\n\\nuniform vec2 resolution;\\n\\nvoid main() {\\n  vUv = uv;\\n  vec2 fragCoord = uv * resolution;\\n  vec2 inverseVP = 1.0 / resolution.xy;\\n  v_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\\n  v_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\\n  v_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\\n  v_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\\n  v_rgbM = vec2(fragCoord * inverseVP);\\n\\n  gl_Position = projectionMatrix *\\n              modelViewMatrix *\\n              vec4(position,1.0);\\n}\\n\",\n\t\tfragmentShader: \"#define GLSLIFY 1\\nvarying vec2 vUv;\\n\\n//texcoords computed in vertex step\\n//to avoid dependent texture reads\\nvarying vec2 v_rgbNW;\\nvarying vec2 v_rgbNE;\\nvarying vec2 v_rgbSW;\\nvarying vec2 v_rgbSE;\\nvarying vec2 v_rgbM;\\n\\n//make sure to have a resolution uniform set to the screen size\\nuniform vec2 resolution;\\nuniform sampler2D tDiffuse;\\n\\n/**\\nBasic FXAA implementation based on the code on geeks3d.com with the\\nmodification that the texture2DLod stuff was removed since it's\\nunsupported by WebGL.\\n\\n--\\n\\nFrom:\\nhttps://github.com/mitsuhiko/webgl-meincraft\\n\\nCopyright (c) 2011 by Armin Ronacher.\\n\\nSome rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are\\nmet:\\n\\n    * Redistributions of source code must retain the above copyright\\n      notice, this list of conditions and the following disclaimer.\\n\\n    * Redistributions in binary form must reproduce the above\\n      copyright notice, this list of conditions and the following\\n      disclaimer in the documentation and/or other materials provided\\n      with the distribution.\\n\\n    * The names of the contributors may not be used to endorse or\\n      promote products derived from this software without specific\\n      prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\\n\\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n*/\\n\\n#ifndef FXAA_REDUCE_MIN\\n    #define FXAA_REDUCE_MIN   (1.0/ 128.0)\\n#endif\\n#ifndef FXAA_REDUCE_MUL\\n    #define FXAA_REDUCE_MUL   (1.0 / 8.0)\\n#endif\\n#ifndef FXAA_SPAN_MAX\\n    #define FXAA_SPAN_MAX     8.0\\n#endif\\n\\n//optimized version for mobile, where dependent \\n//texture reads can be a bottleneck\\nvec4 fxaa_1540259130(sampler2D tex, vec2 fragCoord, vec2 resolution,\\n            vec2 v_rgbNW, vec2 v_rgbNE, \\n            vec2 v_rgbSW, vec2 v_rgbSE, \\n            vec2 v_rgbM) {\\n    vec4 color;\\n    mediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\\n    vec3 rgbNW = texture2D(tex, v_rgbNW).xyz;\\n    vec3 rgbNE = texture2D(tex, v_rgbNE).xyz;\\n    vec3 rgbSW = texture2D(tex, v_rgbSW).xyz;\\n    vec3 rgbSE = texture2D(tex, v_rgbSE).xyz;\\n    vec4 texColor = texture2D(tex, v_rgbM);\\n    vec3 rgbM  = texColor.xyz;\\n    vec3 luma = vec3(0.299, 0.587, 0.114);\\n    float lumaNW = dot(rgbNW, luma);\\n    float lumaNE = dot(rgbNE, luma);\\n    float lumaSW = dot(rgbSW, luma);\\n    float lumaSE = dot(rgbSE, luma);\\n    float lumaM  = dot(rgbM,  luma);\\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\\n    \\n    mediump vec2 dir;\\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\\n    \\n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\\n                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\\n    \\n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\\n    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\\n              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\\n              dir * rcpDirMin)) * inverseVP;\\n    \\n    vec3 rgbA = 0.5 * (\\n        texture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\\n        texture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\\n        texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +\\n        texture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);\\n\\n    float lumaB = dot(rgbB, luma);\\n    if ((lumaB < lumaMin) || (lumaB > lumaMax))\\n        color = vec4(rgbA, texColor.a);\\n    else\\n        color = vec4(rgbB, texColor.a);\\n    return color;\\n}\\n\\nvoid main() {\\n  vec2 fragCoord = vUv * resolution;   \\n  gl_FragColor = fxaa_1540259130(tDiffuse, fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\\n}\\n\"\n\t}\n\n}\n","module.exports = function( THREE ){\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.FilmPass = function ( noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale ) {\n\n\t\tif ( THREE.FilmShader === undefined )\n\t\t\tconsole.error( \"THREE.FilmPass relies on THREE.FilmShader\" );\n\n\t\tvar shader = THREE.FilmShader;\n\n\t\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t\tif ( grayscale !== undefined )\tthis.uniforms.grayscale.value = grayscale;\n\t\tif ( noiseIntensity !== undefined ) this.uniforms.nIntensity.value = noiseIntensity;\n\t\tif ( scanlinesIntensity !== undefined ) this.uniforms.sIntensity.value = scanlinesIntensity;\n\t\tif ( scanlinesCount !== undefined ) this.uniforms.sCount.value = scanlinesCount;\n\n\t\tthis.enabled = true;\n\t\tthis.renderToScreen = false;\n\t\tthis.needsSwap = true;\n\n\n\t\tthis.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tthis.scene  = new THREE.Scene();\n\n\t\tthis.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );\n\t\tthis.scene.add( this.quad );\n\n\t};\n\n\tTHREE.FilmPass.prototype = {\n\n\t\trender: function ( renderer, writeBuffer, readBuffer, delta ) {\n\n\t\t\tthis.uniforms[ \"tDiffuse\" ].value = readBuffer;\n\t\t\tthis.uniforms[ \"time\" ].value += delta;\n\n\t\t\tthis.quad.material = this.material;\n\n\t\t\tif ( this.renderToScreen ) {\n\n\t\t\t\trenderer.render( this.scene, this.camera );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( this.scene, this.camera, writeBuffer, false );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n};\n","module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Film grain & scanlines shader\n\t *\n\t * - ported from HLSL to WebGL / GLSL\n\t * http://www.truevision3d.com/forums/showcase/staticnoise_colorblackwhite_scanline_shaders-t18698.0.html\n\t *\n\t * Screen Space Static Postprocessor\n\t *\n\t * Produces an analogue noise overlay similar to a film grain / TV static\n\t *\n\t * Original implementation and noise algorithm\n\t * Pat 'Hawthorne' Shearon\n\t *\n\t * Optimized scanlines + noise version with intensity scaling\n\t * Georg 'Leviathan' Steinrohder\n\t *\n\t * This version is provided under a Creative Commons Attribution 3.0 License\n\t * http://creativecommons.org/licenses/by/3.0/\n\t */\n\n\tTHREE.FilmShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\":   { type: \"t\", value: null },\n\t\t\t\"time\":       { type: \"f\", value: 0.0 },\n\t\t\t\"nIntensity\": { type: \"f\", value: 0.5 },\n\t\t\t\"sIntensity\": { type: \"f\", value: 0.05 },\n\t\t\t\"sCount\":     { type: \"f\", value: 4096 },\n\t\t\t\"grayscale\":  { type: \"i\", value: 1 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t// control parameter\n\t\t\t\"uniform float time;\",\n\n\t\t\t\"uniform bool grayscale;\",\n\n\t\t\t// noise effect intensity value (0 = no effect, 1 = full effect)\n\t\t\t\"uniform float nIntensity;\",\n\n\t\t\t// scanlines effect intensity value (0 = no effect, 1 = full effect)\n\t\t\t\"uniform float sIntensity;\",\n\n\t\t\t// scanlines effect count value (0 = no effect, 4096 = full effect)\n\t\t\t\"uniform float sCount;\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t// sample the source\n\t\t\t\t\"vec4 cTextureScreen = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\t// make some noise\n\t\t\t\t\"float x = vUv.x * vUv.y * time *  1000.0;\",\n\t\t\t\t\"x = mod( x, 13.0 ) * mod( x, 123.0 );\",\n\t\t\t\t\"float dx = mod( x, 0.01 );\",\n\n\t\t\t\t// add noise\n\t\t\t\t\"vec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx * 100.0, 0.0, 1.0 );\",\n\n\t\t\t\t// get us a sine and cosine\n\t\t\t\t\"vec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\",\n\n\t\t\t\t// add scanlines\n\t\t\t\t\"cResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\",\n\n\t\t\t\t// interpolate between source and result by intensity\n\t\t\t\t\"cResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\",\n\n\t\t\t\t// convert to grayscale if desired\n\t\t\t\t\"if( grayscale ) {\",\n\n\t\t\t\t\t\"cResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\t\"gl_FragColor =  vec4( cResult, cTextureScreen.a );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Focus shader\n\t * based on PaintEffect postprocess from ro.me\n\t * http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js\n\t */\n\n\tTHREE.FocusShader = {\n\n\t\tuniforms : {\n\n\t\t\t\"tDiffuse\":       { type: \"t\", value: null },\n\t\t\t\"screenWidth\":    { type: \"f\", value: 1024 },\n\t\t\t\"screenHeight\":   { type: \"f\", value: 1024 },\n\t\t\t\"sampleDistance\": { type: \"f\", value: 0.94 },\n\t\t\t\"waveFactor\":     { type: \"f\", value: 0.00125 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float screenWidth;\",\n\t\t\t\"uniform float screenHeight;\",\n\t\t\t\"uniform float sampleDistance;\",\n\t\t\t\"uniform float waveFactor;\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 color, org, tmp, add;\",\n\t\t\t\t\"float sample_dist, f;\",\n\t\t\t\t\"vec2 vin;\",\n\t\t\t\t\"vec2 uv = vUv;\",\n\n\t\t\t\t\"add = color = org = texture2D( tDiffuse, uv );\",\n\n\t\t\t\t\"vin = ( uv - vec2( 0.5 ) ) * vec2( 1.4 );\",\n\t\t\t\t\"sample_dist = dot( vin, vin ) * 2.0;\",\n\n\t\t\t\t\"f = ( waveFactor * 100.0 + sample_dist ) * sampleDistance * 4.0;\",\n\n\t\t\t\t\"vec2 sampleSize = vec2(  1.0 / screenWidth, 1.0 / screenHeight ) * vec2( f );\",\n\n\t\t\t\t\"add += tmp = texture2D( tDiffuse, uv + vec2( 0.111964, 0.993712 ) * sampleSize );\",\n\t\t\t\t\"if( tmp.b < color.b ) color = tmp;\",\n\n\t\t\t\t\"add += tmp = texture2D( tDiffuse, uv + vec2( 0.846724, 0.532032 ) * sampleSize );\",\n\t\t\t\t\"if( tmp.b < color.b ) color = tmp;\",\n\n\t\t\t\t\"add += tmp = texture2D( tDiffuse, uv + vec2( 0.943883, -0.330279 ) * sampleSize );\",\n\t\t\t\t\"if( tmp.b < color.b ) color = tmp;\",\n\n\t\t\t\t\"add += tmp = texture2D( tDiffuse, uv + vec2( 0.330279, -0.943883 ) * sampleSize );\",\n\t\t\t\t\"if( tmp.b < color.b ) color = tmp;\",\n\n\t\t\t\t\"add += tmp = texture2D( tDiffuse, uv + vec2( -0.532032, -0.846724 ) * sampleSize );\",\n\t\t\t\t\"if( tmp.b < color.b ) color = tmp;\",\n\n\t\t\t\t\"add += tmp = texture2D( tDiffuse, uv + vec2( -0.993712, -0.111964 ) * sampleSize );\",\n\t\t\t\t\"if( tmp.b < color.b ) color = tmp;\",\n\n\t\t\t\t\"add += tmp = texture2D( tDiffuse, uv + vec2( -0.707107, 0.707107 ) * sampleSize );\",\n\t\t\t\t\"if( tmp.b < color.b ) color = tmp;\",\n\n\t\t\t\t\"color = color * vec4( 2.0 ) - ( add / vec4( 8.0 ) );\",\n\t\t\t\t\"color = color + ( add / vec4( 8.0 ) - color ) * ( vec4( 1.0 ) - vec4( sample_dist * 0.5 ) );\",\n\n\t\t\t\t\"gl_FragColor = vec4( color.rgb * color.rgb * vec3( 0.95 ) + color.rgb, 1.0 );\",\n\n\t\t\t\"}\"\n\n\n\t\t].join( \"\\n\" )\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Based on Nvidia Cg tutorial\n\t */\n\n\tTHREE.FresnelShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"mRefractionRatio\": { type: \"f\", value: 1.02 },\n\t\t\t\"mFresnelBias\": { type: \"f\", value: 0.1 },\n\t\t\t\"mFresnelPower\": { type: \"f\", value: 2.0 },\n\t\t\t\"mFresnelScale\": { type: \"f\", value: 1.0 },\n\t\t\t\"tCube\": { type: \"t\", value: null }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"uniform float mRefractionRatio;\",\n\t\t\t\"uniform float mFresnelBias;\",\n\t\t\t\"uniform float mFresnelScale;\",\n\t\t\t\"uniform float mFresnelPower;\",\n\n\t\t\t\"varying vec3 vReflect;\",\n\t\t\t\"varying vec3 vRefract[3];\",\n\t\t\t\"varying float vReflectionFactor;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\t\t\"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\t\"vec3 worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\",\n\n\t\t\t\t\"vec3 I = worldPosition.xyz - cameraPosition;\",\n\n\t\t\t\t\"vReflect = reflect( I, worldNormal );\",\n\t\t\t\t\"vRefract[0] = refract( normalize( I ), worldNormal, mRefractionRatio );\",\n\t\t\t\t\"vRefract[1] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.99 );\",\n\t\t\t\t\"vRefract[2] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.98 );\",\n\t\t\t\t\"vReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), worldNormal ), mFresnelPower );\",\n\n\t\t\t\t\"gl_Position = projectionMatrix * mvPosition;\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform samplerCube tCube;\",\n\n\t\t\t\"varying vec3 vReflect;\",\n\t\t\t\"varying vec3 vRefract[3];\",\n\t\t\t\"varying float vReflectionFactor;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\",\n\t\t\t\t\"vec4 refractedColor = vec4( 1.0 );\",\n\n\t\t\t\t\"refractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\",\n\t\t\t\t\"refractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\",\n\t\t\t\t\"refractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\",\n\n\t\t\t\t\"gl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Gamma Correction Shader\n\t * http://en.wikipedia.org/wiki/gamma_correction\n\t */\n\n\tTHREE.GammaCorrectionShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"#define GAMMA_OUTPUT\",\n\t\t\t\"#define GAMMA_FACTOR 2\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );\",\n\n\t\t\t\t\"gl_FragColor = vec4( linearToOutput( tex.rgb ), tex.a );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\n\t/**\n\t \n\t */\n\n\tTHREE.GlitchPass = function ( dt_size ) {\n\n\t\tif ( THREE.DigitalGlitch === undefined ) console.error( \"THREE.GlitchPass relies on THREE.DigitalGlitch\" );\n\t\t\n\t\tvar shader = THREE.DigitalGlitch;\n\t\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\t\tif ( dt_size == undefined ) dt_size = 64;\n\t\t\n\t\t\n\t\tthis.uniforms[ \"tDisp\" ].value = this.generateHeightmap( dt_size );\n\t\t\n\n\t\tthis.material = new THREE.ShaderMaterial( {\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\t\t} );\n\n\t\tthis.enabled = true;\n\t\tthis.renderToScreen = false;\n\t\tthis.needsSwap = true;\n\n\n\t\tthis.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tthis.scene  = new THREE.Scene();\n\n\t\tthis.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );\n\t\tthis.scene.add( this.quad );\n\t\t\n\t\tthis.goWild = false;\n\t\tthis.curF = 0;\n\t\tthis.generateTrigger();\n\t\t\n\t};\n\n\tTHREE.GlitchPass.prototype = {\n\n\t\trender: function ( renderer, writeBuffer, readBuffer, delta ) {\n\n\t\t\tthis.uniforms[ \"tDiffuse\" ].value = readBuffer;\n\t\t\tthis.uniforms[ 'seed' ].value = Math.random();//default seeding\n\t\t\tthis.uniforms[ 'byp' ].value = 0;\n\t\t\t\n\t\t\tif ( this.curF % this.randX == 0 || this.goWild == true ) {\n\n\t\t\t\tthis.uniforms[ 'amount' ].value = Math.random() / 30;\n\t\t\t\tthis.uniforms[ 'angle' ].value = THREE.Math.randFloat( - Math.PI, Math.PI );\n\t\t\t\tthis.uniforms[ 'seed_x' ].value = THREE.Math.randFloat( - 1, 1 );\n\t\t\t\tthis.uniforms[ 'seed_y' ].value = THREE.Math.randFloat( - 1, 1 );\n\t\t\t\tthis.uniforms[ 'distortion_x' ].value = THREE.Math.randFloat( 0, 1 );\n\t\t\t\tthis.uniforms[ 'distortion_y' ].value = THREE.Math.randFloat( 0, 1 );\n\t\t\t\tthis.curF = 0;\n\t\t\t\tthis.generateTrigger();\n\n\t\t\t} else if ( this.curF % this.randX < this.randX / 5 ) {\n\n\t\t\t\tthis.uniforms[ 'amount' ].value = Math.random() / 90;\n\t\t\t\tthis.uniforms[ 'angle' ].value = THREE.Math.randFloat( - Math.PI, Math.PI );\n\t\t\t\tthis.uniforms[ 'distortion_x' ].value = THREE.Math.randFloat( 0, 1 );\n\t\t\t\tthis.uniforms[ 'distortion_y' ].value = THREE.Math.randFloat( 0, 1 );\n\t\t\t\tthis.uniforms[ 'seed_x' ].value = THREE.Math.randFloat( - 0.3, 0.3 );\n\t\t\t\tthis.uniforms[ 'seed_y' ].value = THREE.Math.randFloat( - 0.3, 0.3 );\n\n\t\t\t} else if ( this.goWild == false ) {\n\n\t\t\t\tthis.uniforms[ 'byp' ].value = 1;\n\n\t\t\t}\n\t\t\tthis.curF ++;\n\t\t\t\n\t\t\tthis.quad.material = this.material;\n\t\t\tif ( this.renderToScreen ) {\n\n\t\t\t\trenderer.render( this.scene, this.camera );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( this.scene, this.camera, writeBuffer, false );\n\n\t\t\t}\n\n\t\t},\n\t\tgenerateTrigger: function() {\n\n\t\t\tthis.randX = THREE.Math.randInt( 120, 240 );\n\n\t\t},\n\t\tgenerateHeightmap: function( dt_size ) {\n\n\t\t\tvar data_arr = new Float32Array( dt_size * dt_size * 3 );\n\t\t\tvar length = dt_size * dt_size;\n\t\t\t\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar val = THREE.Math.randFloat( 0, 1 );\n\t\t\t\tdata_arr[ i * 3 + 0 ] = val;\n\t\t\t\tdata_arr[ i * 3 + 1 ] = val;\n\t\t\t\tdata_arr[ i * 3 + 2 ] = val;\n\n\t\t\t}\n\t\t\t\n\t\t\tvar texture = new THREE.DataTexture( data_arr, dt_size, dt_size, THREE.RGBFormat, THREE.FloatType );\n\t\t\ttexture.needsUpdate = true;\n\t\t\treturn texture;\n\n\t\t}\n\t};\n\n};\n","module.exports = function( THREE ){\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\n\t * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\n\t *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\n\t *\n\t * - 9 samples per pass\n\t * - standard deviation 2.7\n\t * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n\t */\n\n\tTHREE.HorizontalBlurShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\"h\":        { type: \"f\", value: 1.0 / 512.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform float h;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 sum = vec4( 0.0 );\",\n\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;\",\n\n\t\t\t\t\"gl_FragColor = sum;\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Simple fake tilt-shift effect, modulating two pass Gaussian blur (see above) by vertical position\n\t *\n\t * - 9 samples per pass\n\t * - standard deviation 2.7\n\t * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n\t * - \"r\" parameter control where \"focused\" horizontal line lies\n\t */\n\n\tTHREE.HorizontalTiltShiftShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\"h\":        { type: \"f\", value: 1.0 / 512.0 },\n\t\t\t\"r\":        { type: \"f\", value: 0.35 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform float h;\",\n\t\t\t\"uniform float r;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 sum = vec4( 0.0 );\",\n\n\t\t\t\t\"float hh = h * abs( r - vUv.y );\",\n\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\",\n\n\t\t\t\t\"gl_FragColor = sum;\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author tapio / http://tapio.github.com/\n\t *\n\t * Hue and saturation adjustment\n\t * https://github.com/evanw/glfx.js\n\t * hue: -1 to 1 (-1 is 180 degrees in the negative direction, 0 is no change, etc.\n\t * saturation: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\n\t */\n\n\tTHREE.HueSaturationShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\":   { type: \"t\", value: null },\n\t\t\t\"hue\":        { type: \"f\", value: 0 },\n\t\t\t\"saturation\": { type: \"f\", value: 0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform float hue;\",\n\t\t\t\"uniform float saturation;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"gl_FragColor = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\t// hue\n\t\t\t\t\"float angle = hue * 3.14159265;\",\n\t\t\t\t\"float s = sin(angle), c = cos(angle);\",\n\t\t\t\t\"vec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\",\n\t\t\t\t\"float len = length(gl_FragColor.rgb);\",\n\t\t\t\t\"gl_FragColor.rgb = vec3(\",\n\t\t\t\t\t\"dot(gl_FragColor.rgb, weights.xyz),\",\n\t\t\t\t\t\"dot(gl_FragColor.rgb, weights.zxy),\",\n\t\t\t\t\t\"dot(gl_FragColor.rgb, weights.yzx)\",\n\t\t\t\t\");\",\n\n\t\t\t\t// saturation\n\t\t\t\t\"float average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;\",\n\t\t\t\t\"if (saturation > 0.0) {\",\n\t\t\t\t\t\"gl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));\",\n\t\t\t\t\"} else {\",\n\t\t\t\t\t\"gl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);\",\n\t\t\t\t\"}\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.JSONLoader = function ( manager ) {\n\n\t\tif ( typeof manager === 'boolean' ) {\n\n\t\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t\t\tmanager = undefined;\n\n\t\t}\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t\tthis.withCredentials = false;\n\n\t};\n\n\tTHREE.JSONLoader.prototype = {\n\n\t\tconstructor: THREE.JSONLoader,\n\n\t\t// Deprecated\n\n\t\tget statusDomElement () {\n\n\t\t\tif ( this._statusDomElement === undefined ) {\n\n\t\t\t\tthis._statusDomElement = document.createElement( 'div' );\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.JSONLoader: .statusDomElement has been removed.' );\n\t\t\treturn this._statusDomElement;\n\n\t\t},\n\n\t\tload: function( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : THREE.Loader.prototype.extractUrlBase( url );\n\n\t\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\t\tloader.setWithCredentials( this.withCredentials );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = JSON.parse( text );\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata !== undefined ) {\n\n\t\t\t\t\tvar type = metadata.type;\n\n\t\t\t\t\tif ( type !== undefined ) {\n\n\t\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar object = scope.parse( json, texturePath );\n\t\t\t\tonLoad( object.geometry, object.materials );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tthis.texturePath = value;\n\n\t\t},\n\n\t\tparse: function ( json, texturePath ) {\n\n\t\t\tvar geometry = new THREE.Geometry(),\n\t\t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\n\n\t\t\tparseModel( scale );\n\n\t\t\tparseSkin();\n\t\t\tparseMorphing( scale );\n\t\t\tparseAnimations();\n\n\t\t\tgeometry.computeFaceNormals();\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\tfunction parseModel( scale ) {\n\n\t\t\t\tfunction isBitSet( value, position ) {\n\n\t\t\t\t\treturn value & ( 1 << position );\n\n\t\t\t\t}\n\n\t\t\t\tvar i, j, fi,\n\n\t\t\t\toffset, zLength,\n\n\t\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n\t\t\t\ttype,\n\t\t\t\tisQuad,\n\t\t\t\thasMaterial,\n\t\t\t\thasFaceVertexUv,\n\t\t\t\thasFaceNormal, hasFaceVertexNormal,\n\t\t\t\thasFaceColor, hasFaceVertexColor,\n\n\t\t\tvertex, face, faceA, faceB, hex, normal,\n\n\t\t\t\tuvLayer, uv, u, v,\n\n\t\t\t\tfaces = json.faces,\n\t\t\t\tvertices = json.vertices,\n\t\t\t\tnormals = json.normals,\n\t\t\t\tcolors = json.colors,\n\n\t\t\t\tnUvLayers = 0;\n\n\t\t\t\tif ( json.uvs !== undefined ) {\n\n\t\t\t\t\t// disregard empty arrays\n\n\t\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n\t\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0;\n\t\t\t\tzLength = vertices.length;\n\n\t\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\t\tvertex = new THREE.Vector3();\n\n\t\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n\t\t\t\t\tgeometry.vertices.push( vertex );\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0;\n\t\t\t\tzLength = faces.length;\n\n\t\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\t\ttype = faces[ offset ++ ];\n\n\n\t\t\t\t\tisQuad              = isBitSet( type, 0 );\n\t\t\t\t\thasMaterial         = isBitSet( type, 1 );\n\t\t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\n\t\t\t\t\thasFaceNormal       = isBitSet( type, 4 );\n\t\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t\t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\n\t\t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\n\n\t\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n\t\t\t\t\tif ( isQuad ) {\n\n\t\t\t\t\t\tfaceA = new THREE.Face3();\n\t\t\t\t\t\tfaceA.a = faces[ offset ];\n\t\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n\t\t\t\t\t\tfaceB = new THREE.Face3();\n\t\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\n\n\t\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tfaceA.normal.set(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\t\tnormal = new THREE.Vector3(\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t);\n\n\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\tfaceA.color.setHex( hex );\n\t\t\t\t\t\t\tfaceB.color.setHex( hex );\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.faces.push( faceA );\n\t\t\t\t\t\tgeometry.faces.push( faceB );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface = new THREE.Face3();\n\t\t\t\t\t\tface.a = faces[ offset ++ ];\n\t\t\t\t\t\tface.b = faces[ offset ++ ];\n\t\t\t\t\t\tface.c = faces[ offset ++ ];\n\n\t\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.materialIndex = materialIndex;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\n\n\t\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tface.normal.set(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\t\tnormal = new THREE.Vector3(\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\tface.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.faces.push( face );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tfunction parseSkin() {\n\n\t\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n\t\t\t\tif ( json.skinWeights ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\t\tvar x =                               json.skinWeights[ i ];\n\t\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n\t\t\t\t\t\tgeometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.skinIndices ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\t\tvar a =                               json.skinIndices[ i ];\n\t\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n\t\t\t\t\t\tgeometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.bones = json.bones;\n\n\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n\t\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tfunction parseMorphing( scale ) {\n\n\t\t\t\tif ( json.morphTargets !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n\t\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\n\t\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n\t\t\t\t\t\t\tvar vertex = new THREE.Vector3();\n\t\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n\t\t\t\t\t\t\tdstVertices.push( vertex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\n\t\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseAnimations() {\n\n\t\t\t\tvar outputAnimations = [];\n\n\t\t\t\t// parse old style Bone/Hierarchy animations\n\t\t\t\tvar animations = [];\n\n\t\t\t\tif ( json.animation !== undefined ) {\n\n\t\t\t\t\tanimations.push( json.animation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.animations !== undefined ) {\n\n\t\t\t\t\tif ( json.animations.length ) {\n\n\t\t\t\t\t\tanimations = animations.concat( json.animations );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tanimations.push( json.animations );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\n\t\t\t\t\tvar clip = THREE.AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n\t\t\t\t\tif ( clip ) outputAnimations.push( clip );\n\n\t\t\t\t}\n\n\t\t\t\t// parse implicit morph animations\n\t\t\t\tif ( geometry.morphTargets ) {\n\n\t\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t\t\t\t\tvar morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\n\t\t\t\t}\n\n\t\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\n\t\t\t};\n\n\t\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n\t\t\t\treturn { geometry: geometry };\n\n\t\t\t} else {\n\n\t\t\t\tvar materials = THREE.Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\n\t\t\t\treturn { geometry: geometry, materials: materials };\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n};","module.exports = function( THREE ){\n\t/**\n\t * @author felixturner / http://airtight.cc/\n\t *\n\t * Kaleidoscope Shader\n\t * Radial reflection around center point\n\t * Ported from: http://pixelshaders.com/editor/\n\t * by Toby Schachman / http://tobyschachman.com/\n\t *\n\t * sides: number of reflections\n\t * angle: initial angle in radians\n\t */\n\n\tTHREE.KaleidoShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\"sides\":    { type: \"f\", value: 6.0 },\n\t\t\t\"angle\":    { type: \"f\", value: 0.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform float sides;\",\n\t\t\t\"uniform float angle;\",\n\t\t\t\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec2 p = vUv - 0.5;\",\n\t\t\t\t\"float r = length(p);\",\n\t\t\t\t\"float a = atan(p.y, p.x) + angle;\",\n\t\t\t\t\"float tau = 2. * 3.1416 ;\",\n\t\t\t\t\"a = mod(a, tau/sides);\",\n\t\t\t\t\"a = abs(a - tau/sides/2.) ;\",\n\t\t\t\t\"p = r * vec2(cos(a), sin(a));\",\n\t\t\t\t\"vec4 color = texture2D(tDiffuse, p + 0.5);\",\n\t\t\t\t\"gl_FragColor = color;\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Luminosity\n\t * http://en.wikipedia.org/wiki/Luminosity\n\t */\n\n\tTHREE.LuminosityShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 texel = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\t\"vec3 luma = vec3( 0.299, 0.587, 0.114 );\",\n\n\t\t\t\t\"float v = dot( texel.xyz, luma );\",\n\n\t\t\t\t\"gl_FragColor = vec4( v, v, v, texel.w );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\n\t/**\n\t * Loads a Wavefront .mtl file specifying materials\n\t *\n\t * @author angelxuanchang\n\t */\n\n\tTHREE.MTLLoader = function( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t};\n\n\tTHREE.MTLLoader.prototype = {\n\n\t\tconstructor: THREE.MTLLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\n\t\t},\n\n\t\tsetBaseUrl: function( value ) {\n\n\t\t\t// TODO: Merge with setPath()? Or rename to setTexturePath?\n\n\t\t\tthis.baseUrl = value;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\n\t\t},\n\n\t\tsetMaterialOptions: function ( value ) {\n\n\t\t\tthis.materialOptions = value;\n\n\t\t},\n\n\t\t/**\n\t\t * Parses loaded MTL file\n\t\t * @param text - Content of MTL file\n\t\t * @return {THREE.MTLLoader.MaterialCreator}\n\t\t */\n\t\tparse: function ( text ) {\n\n\t\t\tvar lines = text.split( \"\\n\" );\n\t\t\tvar info = {};\n\t\t\tvar delimiter_pattern = /\\s+/;\n\t\t\tvar materialsInfo = {};\n\n\t\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\t\tvar line = lines[ i ];\n\t\t\t\tline = line.trim();\n\n\t\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\n\n\t\t\t\t\t// Blank line or comment ignore\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar pos = line.indexOf( ' ' );\n\n\t\t\t\tvar key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\n\t\t\t\tkey = key.toLowerCase();\n\n\t\t\t\tvar value = ( pos >= 0 ) ? line.substring( pos + 1 ) : \"\";\n\t\t\t\tvalue = value.trim();\n\n\t\t\t\tif ( key === \"newmtl\" ) {\n\n\t\t\t\t\t// New material\n\n\t\t\t\t\tinfo = { name: value };\n\t\t\t\t\tmaterialsInfo[ value ] = info;\n\n\t\t\t\t} else if ( info ) {\n\n\t\t\t\t\tif ( key === \"ka\" || key === \"kd\" || key === \"ks\" ) {\n\n\t\t\t\t\t\tvar ss = value.split( delimiter_pattern, 3 );\n\t\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tinfo[ key ] = value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar materialCreator = new THREE.MTLLoader.MaterialCreator( this.baseUrl, this.materialOptions );\n\t\t\tmaterialCreator.setCrossOrigin( this.crossOrigin );\n\t\t\tmaterialCreator.setManager( this.manager );\n\t\t\tmaterialCreator.setMaterials( materialsInfo );\n\t\t\treturn materialCreator;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * Create a new THREE-MTLLoader.MaterialCreator\n\t * @param baseUrl - Url relative to which textures are loaded\n\t * @param options - Set of options on how to construct the materials\n\t *                  side: Which side to apply the material\n\t *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\n\t *                  wrap: What type of wrapping to apply for textures\n\t *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n\t *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n\t *                                Default: false, assumed to be already normalized\n\t *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n\t *                                  Default: false\n\t * @constructor\n\t */\n\n\tTHREE.MTLLoader.MaterialCreator = function( baseUrl, options ) {\n\n\t\tthis.baseUrl = baseUrl;\n\t\tthis.options = options;\n\t\tthis.materialsInfo = {};\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t\tthis.side = ( this.options && this.options.side ) ? this.options.side : THREE.FrontSide;\n\t\tthis.wrap = ( this.options && this.options.wrap ) ? this.options.wrap : THREE.RepeatWrapping;\n\n\t};\n\n\tTHREE.MTLLoader.MaterialCreator.prototype = {\n\n\t\tconstructor: THREE.MTLLoader.MaterialCreator,\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\n\t\t},\n\n\t\tsetManager: function ( value ) {\n\n\t\t\tthis.manager = value;\n\n\t\t},\n\n\t\tsetMaterials: function( materialsInfo ) {\n\n\t\t\tthis.materialsInfo = this.convert( materialsInfo );\n\t\t\tthis.materials = {};\n\t\t\tthis.materialsArray = [];\n\t\t\tthis.nameLookup = {};\n\n\t\t},\n\n\t\tconvert: function( materialsInfo ) {\n\n\t\t\tif ( ! this.options ) return materialsInfo;\n\n\t\t\tvar converted = {};\n\n\t\t\tfor ( var mn in materialsInfo ) {\n\n\t\t\t\t// Convert materials info into normalized form based on options\n\n\t\t\t\tvar mat = materialsInfo[ mn ];\n\n\t\t\t\tvar covmat = {};\n\n\t\t\t\tconverted[ mn ] = covmat;\n\n\t\t\t\tfor ( var prop in mat ) {\n\n\t\t\t\t\tvar save = true;\n\t\t\t\t\tvar value = mat[ prop ];\n\t\t\t\t\tvar lprop = prop.toLowerCase();\n\n\t\t\t\t\tswitch ( lprop ) {\n\n\t\t\t\t\t\tcase 'kd':\n\t\t\t\t\t\tcase 'ka':\n\t\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\n\n\t\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\n\n\t\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 1 ] === 0 ) {\n\n\t\t\t\t\t\t\t\t\t// ignore\n\n\t\t\t\t\t\t\t\t\tsave = false;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( save ) {\n\n\t\t\t\t\t\tcovmat[ lprop ] = value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn converted;\n\n\t\t},\n\n\t\tpreload: function () {\n\n\t\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\t\tthis.create( mn );\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetIndex: function( materialName ) {\n\n\t\t\treturn this.nameLookup[ materialName ];\n\n\t\t},\n\n\t\tgetAsArray: function() {\n\n\t\t\tvar index = 0;\n\n\t\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\t\tthis.materialsArray[ index ] = this.create( mn );\n\t\t\t\tthis.nameLookup[ mn ] = index;\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\treturn this.materialsArray;\n\n\t\t},\n\n\t\tcreate: function ( materialName ) {\n\n\t\t\tif ( this.materials[ materialName ] === undefined ) {\n\n\t\t\t\tthis.createMaterial_( materialName );\n\n\t\t\t}\n\n\t\t\treturn this.materials[ materialName ];\n\n\t\t},\n\n\t\tcreateMaterial_: function ( materialName ) {\n\n\t\t\t// Create material\n\n\t\t\tvar mat = this.materialsInfo[ materialName ];\n\t\t\tvar params = {\n\n\t\t\t\tname: materialName,\n\t\t\t\tside: this.side\n\n\t\t\t};\n\n\t\t\tfor ( var prop in mat ) {\n\n\t\t\t\tvar value = mat[ prop ];\n\n\t\t\t\tif ( value === '' ) continue;\n\n\t\t\t\tswitch ( prop.toLowerCase() ) {\n\n\t\t\t\t\t// Ns is material specular exponent\n\n\t\t\t\t\tcase 'kd':\n\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\tparams[ 'color' ] = new THREE.Color().fromArray( value );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\n\t\t\t\t\t\tparams[ 'specular' ] = new THREE.Color().fromArray( value );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'map_kd':\n\n\t\t\t\t\t\t// Diffuse texture map\n\n\t\t\t\t\t\tparams[ 'map' ] = this.loadTexture( this.baseUrl + value );\n\t\t\t\t\t\tparams[ 'map' ].wrapS = this.wrap;\n\t\t\t\t\t\tparams[ 'map' ].wrapT = this.wrap;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ns':\n\n\t\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\n\t\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n\t\t\t\t\t\tparams[ 'shininess' ] = parseFloat( value );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'd':\n\n\t\t\t\t\t\tif ( value < 1 ) {\n\n\t\t\t\t\t\t\tparams[ 'opacity' ] = value;\n\t\t\t\t\t\t\tparams[ 'transparent' ] = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Tr':\n\n\t\t\t\t\t\tif ( value > 0 ) {\n\n\t\t\t\t\t\t\tparams[ 'opacity' ] = 1 - value;\n\t\t\t\t\t\t\tparams[ 'transparent' ] = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'map_bump':\n\t\t\t\t\tcase 'bump':\n\n\t\t\t\t\t\t// Bump texture map\n\n\t\t\t\t\t\tif ( params[ 'bumpMap' ] ) break; // Avoid loading twice.\n\n\t\t\t\t\t\tparams[ 'bumpMap' ] = this.loadTexture( this.baseUrl + value );\n\t\t\t\t\t\tparams[ 'bumpMap' ].wrapS = this.wrap;\n\t\t\t\t\t\tparams[ 'bumpMap' ].wrapT = this.wrap;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.materials[ materialName ] = new THREE.MeshPhongMaterial( params );\n\t\t\treturn this.materials[ materialName ];\n\n\t\t},\n\n\n\t\tloadTexture: function ( url, mapping, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture;\n\t\t\tvar loader = THREE.Loader.Handlers.get( url );\n\t\t\tvar manager = ( this.manager !== undefined ) ? this.manager : THREE.DefaultLoadingManager;\n\n\t\t\tif ( loader === null ) {\n\n\t\t\t\tloader = new THREE.TextureLoader( manager );\n\n\t\t\t}\n\n\t\t\tif ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );\n\t\t\ttexture = loader.load( url, onLoad, onProgress, onError );\n\n\t\t\tif ( mapping !== undefined ) texture.mapping = mapping;\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t};\n\n\tTHREE.EventDispatcher.prototype.apply( THREE.MTLLoader.prototype );\n\n};","module.exports = function( THREE ){\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Port of greggman's ThreeD version of marching cubes to Three.js\n\t * http://webglsamples.googlecode.com/hg/blob/blob.html\n\t */\n\n\tTHREE.MarchingCubes = function ( resolution, material, enableUvs, enableColors ) {\n\n\t\tTHREE.ImmediateRenderObject.call( this, material );\n\n\t\tthis.enableUvs = enableUvs !== undefined ? enableUvs : false;\n\t\tthis.enableColors = enableColors !== undefined ? enableColors : false;\n\n\t\t// functions have to be object properties\n\t\t// prototype functions kill performance\n\t\t// (tested and it was 4x slower !!!)\n\n\t\tthis.init = function ( resolution ) {\n\n\t\t\tthis.resolution = resolution;\n\n\t\t\t// parameters\n\n\t\t\tthis.isolation = 80.0;\n\n\t\t\t// size of field, 32 is pushing it in Javascript :)\n\n\t\t\tthis.size = resolution;\n\t\t\tthis.size2 = this.size * this.size;\n\t\t\tthis.size3 = this.size2 * this.size;\n\t\t\tthis.halfsize = this.size / 2.0;\n\n\t\t\t// deltas\n\n\t\t\tthis.delta = 2.0 / this.size;\n\t\t\tthis.yd = this.size;\n\t\t\tthis.zd = this.size2;\n\n\t\t\tthis.field = new Float32Array( this.size3 );\n\t\t\tthis.normal_cache = new Float32Array( this.size3 * 3 );\n\n\t\t\t// temp buffers used in polygonize\n\n\t\t\tthis.vlist = new Float32Array( 12 * 3 );\n\t\t\tthis.nlist = new Float32Array( 12 * 3 );\n\n\t\t\t// immediate render mode simulator\n\n\t\t\tthis.maxCount = 4096; // TODO: find the fastest size for this buffer\n\t\t\tthis.count = 0;\n\n\t\t\tthis.hasPositions = false;\n\t\t\tthis.hasNormals = false;\n\t\t\tthis.hasColors = false;\n\t\t\tthis.hasUvs = false;\n\n\t\t\tthis.positionArray = new Float32Array( this.maxCount * 3 );\n\t\t\tthis.normalArray   = new Float32Array( this.maxCount * 3 );\n\n\t\t\tif ( this.enableUvs ) {\n\n\t\t\t\tthis.uvArray = new Float32Array( this.maxCount * 2 );\n\n\t\t\t}\n\n\t\t\tif ( this.enableColors ) {\n\n\t\t\t\tthis.colorArray   = new Float32Array( this.maxCount * 3 );\n\n\t\t\t}\n\n\t\t};\n\n\t\t///////////////////////\n\t\t// Polygonization\n\t\t///////////////////////\n\n\t\tthis.lerp = function( a, b, t ) {\n\n\t\t\treturn a + ( b - a ) * t;\n\n\t\t};\n\n\t\tthis.VIntX = function( q, pout, nout, offset, isol, x, y, z, valp1, valp2 ) {\n\n\t\t\tvar mu = ( isol - valp1 ) / ( valp2 - valp1 ),\n\t\t\tnc = this.normal_cache;\n\n\t\t\tpout[ offset ] \t   = x + mu * this.delta;\n\t\t\tpout[ offset + 1 ] = y;\n\t\t\tpout[ offset + 2 ] = z;\n\n\t\t\tnout[ offset ] \t   = this.lerp( nc[ q ],     nc[ q + 3 ], mu );\n\t\t\tnout[ offset + 1 ] = this.lerp( nc[ q + 1 ], nc[ q + 4 ], mu );\n\t\t\tnout[ offset + 2 ] = this.lerp( nc[ q + 2 ], nc[ q + 5 ], mu );\n\n\t\t};\n\n\t\tthis.VIntY = function( q, pout, nout, offset, isol, x, y, z, valp1, valp2 ) {\n\n\t\t\tvar mu = ( isol - valp1 ) / ( valp2 - valp1 ),\n\t\t\tnc = this.normal_cache;\n\n\t\t\tpout[ offset ] \t   = x;\n\t\t\tpout[ offset + 1 ] = y + mu * this.delta;\n\t\t\tpout[ offset + 2 ] = z;\n\n\t\t\tvar q2 = q + this.yd * 3;\n\n\t\t\tnout[ offset ] \t   = this.lerp( nc[ q ],     nc[ q2 ],     mu );\n\t\t\tnout[ offset + 1 ] = this.lerp( nc[ q + 1 ], nc[ q2 + 1 ], mu );\n\t\t\tnout[ offset + 2 ] = this.lerp( nc[ q + 2 ], nc[ q2 + 2 ], mu );\n\n\t\t};\n\n\t\tthis.VIntZ = function( q, pout, nout, offset, isol, x, y, z, valp1, valp2 ) {\n\n\t\t\tvar mu = ( isol - valp1 ) / ( valp2 - valp1 ),\n\t\t\tnc = this.normal_cache;\n\n\t\t\tpout[ offset ] \t   = x;\n\t\t\tpout[ offset + 1 ] = y;\n\t\t\tpout[ offset + 2 ] = z + mu * this.delta;\n\n\t\t\tvar q2 = q + this.zd * 3;\n\n\t\t\tnout[ offset ] \t   = this.lerp( nc[ q ],     nc[ q2 ],     mu );\n\t\t\tnout[ offset + 1 ] = this.lerp( nc[ q + 1 ], nc[ q2 + 1 ], mu );\n\t\t\tnout[ offset + 2 ] = this.lerp( nc[ q + 2 ], nc[ q2 + 2 ], mu );\n\n\t\t};\n\n\t\tthis.compNorm = function( q ) {\n\n\t\t\tvar q3 = q * 3;\n\n\t\t\tif ( this.normal_cache[ q3 ] === 0.0 ) {\n\n\t\t\t\tthis.normal_cache[ q3 ] = this.field[ q - 1 ] \t    - this.field[ q + 1 ];\n\t\t\t\tthis.normal_cache[ q3 + 1 ] = this.field[ q - this.yd ] - this.field[ q + this.yd ];\n\t\t\t\tthis.normal_cache[ q3 + 2 ] = this.field[ q - this.zd ] - this.field[ q + this.zd ];\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Returns total number of triangles. Fills triangles.\n\t\t// (this is where most of time is spent - it's inner work of O(n3) loop )\n\n\t\tthis.polygonize = function( fx, fy, fz, q, isol, renderCallback ) {\n\n\t\t\t// cache indices\n\t\t\tvar q1 = q + 1,\n\t\t\t\tqy = q + this.yd,\n\t\t\t\tqz = q + this.zd,\n\t\t\t\tq1y = q1 + this.yd,\n\t\t\t\tq1z = q1 + this.zd,\n\t\t\t\tqyz = q + this.yd + this.zd,\n\t\t\t\tq1yz = q1 + this.yd + this.zd;\n\n\t\t\tvar cubeindex = 0,\n\t\t\t\tfield0 = this.field[ q ],\n\t\t\t\tfield1 = this.field[ q1 ],\n\t\t\t\tfield2 = this.field[ qy ],\n\t\t\t\tfield3 = this.field[ q1y ],\n\t\t\t\tfield4 = this.field[ qz ],\n\t\t\t\tfield5 = this.field[ q1z ],\n\t\t\t\tfield6 = this.field[ qyz ],\n\t\t\t\tfield7 = this.field[ q1yz ];\n\n\t\t\tif ( field0 < isol ) cubeindex |= 1;\n\t\t\tif ( field1 < isol ) cubeindex |= 2;\n\t\t\tif ( field2 < isol ) cubeindex |= 8;\n\t\t\tif ( field3 < isol ) cubeindex |= 4;\n\t\t\tif ( field4 < isol ) cubeindex |= 16;\n\t\t\tif ( field5 < isol ) cubeindex |= 32;\n\t\t\tif ( field6 < isol ) cubeindex |= 128;\n\t\t\tif ( field7 < isol ) cubeindex |= 64;\n\n\t\t\t// if cube is entirely in/out of the surface - bail, nothing to draw\n\n\t\t\tvar bits = THREE.edgeTable[ cubeindex ];\n\t\t\tif ( bits === 0 ) return 0;\n\n\t\t\tvar d = this.delta,\n\t\t\t\tfx2 = fx + d,\n\t\t\t\tfy2 = fy + d,\n\t\t\t\tfz2 = fz + d;\n\n\t\t\t// top of the cube\n\n\t\t\tif ( bits & 1 ) {\n\n\t\t\t\tthis.compNorm( q );\n\t\t\t\tthis.compNorm( q1 );\n\t\t\t\tthis.VIntX( q * 3, this.vlist, this.nlist, 0, isol, fx, fy, fz, field0, field1 );\n\n\t\t\t}\n\n\t\t\tif ( bits & 2 ) {\n\n\t\t\t\tthis.compNorm( q1 );\n\t\t\t\tthis.compNorm( q1y );\n\t\t\t\tthis.VIntY( q1 * 3, this.vlist, this.nlist, 3, isol, fx2, fy, fz, field1, field3 );\n\n\t\t\t}\n\n\t\t\tif ( bits & 4 ) {\n\n\t\t\t\tthis.compNorm( qy );\n\t\t\t\tthis.compNorm( q1y );\n\t\t\t\tthis.VIntX( qy * 3, this.vlist, this.nlist, 6, isol, fx, fy2, fz, field2, field3 );\n\n\t\t\t}\n\n\t\t\tif ( bits & 8 ) {\n\n\t\t\t\tthis.compNorm( q );\n\t\t\t\tthis.compNorm( qy );\n\t\t\t\tthis.VIntY( q * 3, this.vlist, this.nlist, 9, isol, fx, fy, fz, field0, field2 );\n\n\t\t\t}\n\n\t\t\t// bottom of the cube\n\n\t\t\tif ( bits & 16 ) {\n\n\t\t\t\tthis.compNorm( qz );\n\t\t\t\tthis.compNorm( q1z );\n\t\t\t\tthis.VIntX( qz * 3, this.vlist, this.nlist, 12, isol, fx, fy, fz2, field4, field5 );\n\n\t\t\t}\n\n\t\t\tif ( bits & 32 ) {\n\n\t\t\t\tthis.compNorm( q1z );\n\t\t\t\tthis.compNorm( q1yz );\n\t\t\t\tthis.VIntY( q1z * 3,  this.vlist, this.nlist, 15, isol, fx2, fy, fz2, field5, field7 );\n\n\t\t\t}\n\n\t\t\tif ( bits & 64 ) {\n\n\t\t\t\tthis.compNorm( qyz );\n\t\t\t\tthis.compNorm( q1yz );\n\t\t\t\tthis.VIntX( qyz * 3, this.vlist, this.nlist, 18, isol, fx, fy2, fz2, field6, field7 );\n\n\t\t\t}\n\n\t\t\tif ( bits & 128 ) {\n\n\t\t\t\tthis.compNorm( qz );\n\t\t\t\tthis.compNorm( qyz );\n\t\t\t\tthis.VIntY( qz * 3,  this.vlist, this.nlist, 21, isol, fx, fy, fz2, field4, field6 );\n\n\t\t\t}\n\n\t\t\t// vertical lines of the cube\n\n\t\t\tif ( bits & 256 ) {\n\n\t\t\t\tthis.compNorm( q );\n\t\t\t\tthis.compNorm( qz );\n\t\t\t\tthis.VIntZ( q * 3, this.vlist, this.nlist, 24, isol, fx, fy, fz, field0, field4 );\n\n\t\t\t}\n\n\t\t\tif ( bits & 512 ) {\n\n\t\t\t\tthis.compNorm( q1 );\n\t\t\t\tthis.compNorm( q1z );\n\t\t\t\tthis.VIntZ( q1 * 3,  this.vlist, this.nlist, 27, isol, fx2, fy,  fz, field1, field5 );\n\n\t\t\t}\n\n\t\t\tif ( bits & 1024 ) {\n\n\t\t\t\tthis.compNorm( q1y );\n\t\t\t\tthis.compNorm( q1yz );\n\t\t\t\tthis.VIntZ( q1y * 3, this.vlist, this.nlist, 30, isol, fx2, fy2, fz, field3, field7 );\n\n\t\t\t}\n\n\t\t\tif ( bits & 2048 ) {\n\n\t\t\t\tthis.compNorm( qy );\n\t\t\t\tthis.compNorm( qyz );\n\t\t\t\tthis.VIntZ( qy * 3, this.vlist, this.nlist, 33, isol, fx,  fy2, fz, field2, field6 );\n\n\t\t\t}\n\n\t\t\tcubeindex <<= 4;  // re-purpose cubeindex into an offset into triTable\n\n\t\t\tvar o1, o2, o3, numtris = 0, i = 0;\n\n\t\t\t// here is where triangles are created\n\n\t\t\twhile ( THREE.triTable[ cubeindex + i ] != - 1 ) {\n\n\t\t\t\to1 = cubeindex + i;\n\t\t\t\to2 = o1 + 1;\n\t\t\t\to3 = o1 + 2;\n\n\t\t\t\tthis.posnormtriv( this.vlist, this.nlist,\n\t\t\t\t\t\t\t\t  3 * THREE.triTable[ o1 ],\n\t\t\t\t\t\t\t\t  3 * THREE.triTable[ o2 ],\n\t\t\t\t\t\t\t\t  3 * THREE.triTable[ o3 ],\n\t\t\t\t\t\t\t\t  renderCallback );\n\n\t\t\t\ti += 3;\n\t\t\t\tnumtris ++;\n\n\t\t\t}\n\n\t\t\treturn numtris;\n\n\t\t};\n\n\t\t/////////////////////////////////////\n\t\t// Immediate render mode simulator\n\t\t/////////////////////////////////////\n\n\t\tthis.posnormtriv = function( pos, norm, o1, o2, o3, renderCallback ) {\n\n\t\t\tvar c = this.count * 3;\n\n\t\t\t// positions\n\n\t\t\tthis.positionArray[ c ] \t= pos[ o1 ];\n\t\t\tthis.positionArray[ c + 1 ] = pos[ o1 + 1 ];\n\t\t\tthis.positionArray[ c + 2 ] = pos[ o1 + 2 ];\n\n\t\t\tthis.positionArray[ c + 3 ] = pos[ o2 ];\n\t\t\tthis.positionArray[ c + 4 ] = pos[ o2 + 1 ];\n\t\t\tthis.positionArray[ c + 5 ] = pos[ o2 + 2 ];\n\n\t\t\tthis.positionArray[ c + 6 ] = pos[ o3 ];\n\t\t\tthis.positionArray[ c + 7 ] = pos[ o3 + 1 ];\n\t\t\tthis.positionArray[ c + 8 ] = pos[ o3 + 2 ];\n\n\t\t\t// normals\n\n\t\t\tthis.normalArray[ c ] \t  = norm[ o1 ];\n\t\t\tthis.normalArray[ c + 1 ] = norm[ o1 + 1 ];\n\t\t\tthis.normalArray[ c + 2 ] = norm[ o1 + 2 ];\n\n\t\t\tthis.normalArray[ c + 3 ] = norm[ o2 ];\n\t\t\tthis.normalArray[ c + 4 ] = norm[ o2 + 1 ];\n\t\t\tthis.normalArray[ c + 5 ] = norm[ o2 + 2 ];\n\n\t\t\tthis.normalArray[ c + 6 ] = norm[ o3 ];\n\t\t\tthis.normalArray[ c + 7 ] = norm[ o3 + 1 ];\n\t\t\tthis.normalArray[ c + 8 ] = norm[ o3 + 2 ];\n\n\t\t\t// uvs\n\n\t\t\tif ( this.enableUvs ) {\n\n\t\t\t\tvar d = this.count * 2;\n\n\t\t\t\tthis.uvArray[ d ] \t  = pos[ o1 ];\n\t\t\t\tthis.uvArray[ d + 1 ] = pos[ o1 + 2 ];\n\n\t\t\t\tthis.uvArray[ d + 2 ] = pos[ o2 ];\n\t\t\t\tthis.uvArray[ d + 3 ] = pos[ o2 + 2 ];\n\n\t\t\t\tthis.uvArray[ d + 4 ] = pos[ o3 ];\n\t\t\t\tthis.uvArray[ d + 5 ] = pos[ o3 + 2 ];\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tif ( this.enableColors ) {\n\n\t\t\t\tthis.colorArray[ c ] \t = pos[ o1 ];\n\t\t\t\tthis.colorArray[ c + 1 ] = pos[ o1 + 1 ];\n\t\t\t\tthis.colorArray[ c + 2 ] = pos[ o1 + 2 ];\n\n\t\t\t\tthis.colorArray[ c + 3 ] = pos[ o2 ];\n\t\t\t\tthis.colorArray[ c + 4 ] = pos[ o2 + 1 ];\n\t\t\t\tthis.colorArray[ c + 5 ] = pos[ o2 + 2 ];\n\n\t\t\t\tthis.colorArray[ c + 6 ] = pos[ o3 ];\n\t\t\t\tthis.colorArray[ c + 7 ] = pos[ o3 + 1 ];\n\t\t\t\tthis.colorArray[ c + 8 ] = pos[ o3 + 2 ];\n\n\t\t\t}\n\n\t\t\tthis.count += 3;\n\n\t\t\tif ( this.count >= this.maxCount - 3 ) {\n\n\t\t\t\tthis.hasPositions = true;\n\t\t\t\tthis.hasNormals = true;\n\n\t\t\t\tif ( this.enableUvs ) {\n\n\t\t\t\t\tthis.hasUvs = true;\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.enableColors ) {\n\n\t\t\t\t\tthis.hasColors = true;\n\n\t\t\t\t}\n\n\t\t\t\trenderCallback( this );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.begin = function( ) {\n\n\t\t\tthis.count = 0;\n\n\t\t\tthis.hasPositions = false;\n\t\t\tthis.hasNormals = false;\n\t\t\tthis.hasUvs = false;\n\t\t\tthis.hasColors = false;\n\n\t\t};\n\n\t\tthis.end = function( renderCallback ) {\n\n\t\t\tif ( this.count === 0 ) return;\n\n\t\t\tfor ( var i = this.count * 3; i < this.positionArray.length; i ++ ) {\n\n\t\t\t\tthis.positionArray[ i ] = 0.0;\n\n\t\t\t}\n\n\t\t\tthis.hasPositions = true;\n\t\t\tthis.hasNormals = true;\n\n\t\t\tif ( this.enableUvs ) {\n\n\t\t\t\tthis.hasUvs = true;\n\n\t\t\t}\n\n\t\t\tif ( this.enableColors ) {\n\n\t\t\t\tthis.hasColors = true;\n\n\t\t\t}\n\n\t\t\trenderCallback( this );\n\n\t\t};\n\n\t\t/////////////////////////////////////\n\t\t// Metaballs\n\t\t/////////////////////////////////////\n\n\t\t// Adds a reciprocal ball (nice and blobby) that, to be fast, fades to zero after\n\t\t// a fixed distance, determined by strength and subtract.\n\n\t\tthis.addBall = function( ballx, bally, ballz, strength, subtract ) {\n\n\t\t\t// Let's solve the equation to find the radius:\n\t\t\t// 1.0 / (0.000001 + radius^2) * strength - subtract = 0\n\t\t\t// strength / (radius^2) = subtract\n\t\t\t// strength = subtract * radius^2\n\t\t\t// radius^2 = strength / subtract\n\t\t\t// radius = sqrt(strength / subtract)\n\n\t\t\tvar radius = this.size * Math.sqrt( strength / subtract ),\n\t\t\t\tzs = ballz * this.size,\n\t\t\t\tys = bally * this.size,\n\t\t\t\txs = ballx * this.size;\n\n\t\t\tvar min_z = Math.floor( zs - radius ); if ( min_z < 1 ) min_z = 1;\n\t\t\tvar max_z = Math.floor( zs + radius ); if ( max_z > this.size - 1 ) max_z = this.size - 1;\n\t\t\tvar min_y = Math.floor( ys - radius ); if ( min_y < 1 ) min_y = 1;\n\t\t\tvar max_y = Math.floor( ys + radius ); if ( max_y > this.size - 1 ) max_y = this.size - 1;\n\t\t\tvar min_x = Math.floor( xs - radius ); if ( min_x < 1  ) min_x = 1;\n\t\t\tvar max_x = Math.floor( xs + radius ); if ( max_x > this.size - 1 ) max_x = this.size - 1;\n\n\n\t\t\t// Don't polygonize in the outer layer because normals aren't\n\t\t\t// well-defined there.\n\n\t\t\tvar x, y, z, y_offset, z_offset, fx, fy, fz, fz2, fy2, val;\n\n\t\t\tfor ( z = min_z; z < max_z; z ++ ) {\n\n\t\t\t\tz_offset = this.size2 * z,\n\t\t\t\tfz = z / this.size - ballz,\n\t\t\t\tfz2 = fz * fz;\n\n\t\t\t\tfor ( y = min_y; y < max_y; y ++ ) {\n\n\t\t\t\t\ty_offset = z_offset + this.size * y;\n\t\t\t\t\tfy = y / this.size - bally;\n\t\t\t\t\tfy2 = fy * fy;\n\n\t\t\t\t\tfor ( x = min_x; x < max_x; x ++ ) {\n\n\t\t\t\t\t\tfx = x / this.size - ballx;\n\t\t\t\t\t\tval = strength / ( 0.000001 + fx * fx + fy2 + fz2 ) - subtract;\n\t\t\t\t\t\tif ( val > 0.0 ) this.field[ y_offset + x ] += val;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.addPlaneX = function( strength, subtract ) {\n\n\t\t\tvar x, y, z, xx, val, xdiv, cxy,\n\n\t\t\t\t// cache attribute lookups\n\t\t\t\tsize = this.size,\n\t\t\t\tyd = this.yd,\n\t\t\t\tzd = this.zd,\n\t\t\t\tfield = this.field,\n\n\t\t\t\tdist = size * Math.sqrt( strength / subtract );\n\n\t\t\tif ( dist > size ) dist = size;\n\n\t\t\tfor ( x = 0; x < dist; x ++ ) {\n\n\t\t\t\txdiv = x / size;\n\t\t\t\txx = xdiv * xdiv;\n\t\t\t\tval = strength / ( 0.0001 + xx ) - subtract;\n\n\t\t\t\tif ( val > 0.0 ) {\n\n\t\t\t\t\tfor ( y = 0; y < size; y ++ ) {\n\n\t\t\t\t\t\tcxy = x + y * yd;\n\n\t\t\t\t\t\tfor ( z = 0; z < size; z ++ ) {\n\n\t\t\t\t\t\t\tfield[ zd * z + cxy ] += val;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.addPlaneY = function( strength, subtract ) {\n\n\t\t\tvar x, y, z, yy, val, ydiv, cy, cxy,\n\n\t\t\t\t// cache attribute lookups\n\t\t\t\tsize = this.size,\n\t\t\t\tyd = this.yd,\n\t\t\t\tzd = this.zd,\n\t\t\t\tfield = this.field,\n\n\t\t\t\tdist = size * Math.sqrt( strength / subtract );\n\n\t\t\tif ( dist > size ) dist = size;\n\n\t\t\tfor ( y = 0; y < dist; y ++ ) {\n\n\t\t\t\tydiv = y / size;\n\t\t\t\tyy = ydiv * ydiv;\n\t\t\t\tval = strength / ( 0.0001 + yy ) - subtract;\n\n\t\t\t\tif ( val > 0.0 ) {\n\n\t\t\t\t\tcy = y * yd;\n\n\t\t\t\t\tfor ( x = 0; x < size; x ++ ) {\n\n\t\t\t\t\t\tcxy = cy + x;\n\n\t\t\t\t\t\tfor ( z = 0; z < size; z ++ )\n\t\t\t\t\t\t\tfield[ zd * z + cxy ] += val;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.addPlaneZ = function( strength, subtract ) {\n\n\t\t\tvar x, y, z, zz, val, zdiv, cz, cyz,\n\n\t\t\t\t// cache attribute lookups\n\t\t\t\tsize = this.size,\n\t\t\t\tyd = this.yd,\n\t\t\t\tzd = this.zd,\n\t\t\t\tfield = this.field,\n\n\t\t\t\tdist = size * Math.sqrt( strength / subtract );\n\n\t\t\tif ( dist > size ) dist = size;\n\n\t\t\tfor ( z = 0; z < dist; z ++ ) {\n\n\t\t\t\tzdiv = z / size;\n\t\t\t\tzz = zdiv * zdiv;\n\t\t\t\tval = strength / ( 0.0001 + zz ) - subtract;\n\t\t\t\tif ( val > 0.0 ) {\n\n\t\t\t\t\tcz = zd * z;\n\n\t\t\t\t\tfor ( y = 0; y < size; y ++ ) {\n\n\t\t\t\t\t\tcyz = cz + y * yd;\n\n\t\t\t\t\t\tfor ( x = 0; x < size; x ++ )\n\t\t\t\t\t\t\tfield[ cyz + x ] += val;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\t/////////////////////////////////////\n\t\t// Updates\n\t\t/////////////////////////////////////\n\n\t\tthis.reset = function () {\n\n\t\t\tvar i;\n\n\t\t\t// wipe the normal cache\n\n\t\t\tfor ( i = 0; i < this.size3; i ++ ) {\n\n\t\t\t\tthis.normal_cache[ i * 3 ] = 0.0;\n\t\t\t\tthis.field[ i ] = 0.0;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.render = function ( renderCallback ) {\n\n\t\t\tthis.begin();\n\n\t\t\t// Triangulate. Yeah, this is slow.\n\n\t\t\tvar smin2 = this.size - 2;\n\n\t\t\tfor ( var z = 1; z < smin2; z ++ ) {\n\n\t\t\t\tvar z_offset = this.size2 * z;\n\t\t\t\tvar fz = ( z - this.halfsize ) / this.halfsize; //+ 1\n\n\t\t\t\tfor ( var y = 1; y < smin2; y ++ ) {\n\n\t\t\t\t\tvar y_offset = z_offset + this.size * y;\n\t\t\t\t\tvar fy = ( y - this.halfsize ) / this.halfsize; //+ 1\n\n\t\t\t\t\tfor ( var x = 1; x < smin2; x ++ ) {\n\n\t\t\t\t\t\tvar fx = ( x - this.halfsize ) / this.halfsize; //+ 1\n\t\t\t\t\t\tvar q = y_offset + x;\n\n\t\t\t\t\t\tthis.polygonize( fx, fy, fz, q, this.isolation, renderCallback );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.end( renderCallback );\n\n\t\t};\n\n\t\tthis.generateGeometry = function() {\n\n\t\t\tvar start = 0, geo = new THREE.Geometry();\n\t\t\tvar normals = [];\n\n\t\t\tvar geo_callback = function( object ) {\n\n\t\t\t\tvar i, x, y, z, vertex, normal,\n\t\t\t\t\tface, a, b, c, na, nb, nc, nfaces;\n\n\n\t\t\t\tfor ( i = 0; i < object.count; i ++ ) {\n\n\t\t\t\t\ta = i * 3;\n\t\t\t\t\tb = a + 1;\n\t\t\t\t\tc = a + 2;\n\n\t\t\t\t\tx = object.positionArray[ a ];\n\t\t\t\t\ty = object.positionArray[ b ];\n\t\t\t\t\tz = object.positionArray[ c ];\n\t\t\t\t\tvertex = new THREE.Vector3( x, y, z );\n\n\t\t\t\t\tx = object.normalArray[ a ];\n\t\t\t\t\ty = object.normalArray[ b ];\n\t\t\t\t\tz = object.normalArray[ c ];\n\t\t\t\t\tnormal = new THREE.Vector3( x, y, z );\n\t\t\t\t\tnormal.normalize();\n\n\t\t\t\t\tgeo.vertices.push( vertex );\n\t\t\t\t\tnormals.push( normal );\n\n\t\t\t\t}\n\n\t\t\t\tnfaces = object.count / 3;\n\n\t\t\t\tfor ( i = 0; i < nfaces; i ++ ) {\n\n\t\t\t\t\ta = ( start + i ) * 3;\n\t\t\t\t\tb = a + 1;\n\t\t\t\t\tc = a + 2;\n\n\t\t\t\t\tna = normals[ a ];\n\t\t\t\t\tnb = normals[ b ];\n\t\t\t\t\tnc = normals[ c ];\n\n\t\t\t\t\tface = new THREE.Face3( a, b, c, [ na, nb, nc ] );\n\n\t\t\t\t\tgeo.faces.push( face );\n\n\t\t\t\t}\n\n\t\t\t\tstart += nfaces;\n\t\t\t\tobject.count = 0;\n\n\t\t\t};\n\n\t\t\tthis.render( geo_callback );\n\n\t\t\t// console.log( \"generated \" + geo.faces.length + \" triangles\" );\n\n\t\t\treturn geo;\n\n\t\t};\n\n\t\tthis.init( resolution );\n\n\t};\n\n\tTHREE.MarchingCubes.prototype = Object.create( THREE.ImmediateRenderObject.prototype );\n\tTHREE.MarchingCubes.prototype.constructor = THREE.MarchingCubes;\n\n\n\t/////////////////////////////////////\n\t// Marching cubes lookup tables\n\t/////////////////////////////////////\n\n\t// These tables are straight from Paul Bourke's page:\n\t// http://local.wasp.uwa.edu.au/~pbourke/geometry/polygonise/\n\t// who in turn got them from Cory Gene Bloyd.\n\n\tTHREE.edgeTable = new Int32Array( [\n\t0x0, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,\n\t0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,\n\t0x190, 0x99, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c,\n\t0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,\n\t0x230, 0x339, 0x33, 0x13a, 0x636, 0x73f, 0x435, 0x53c,\n\t0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,\n\t0x3a0, 0x2a9, 0x1a3, 0xaa, 0x7a6, 0x6af, 0x5a5, 0x4ac,\n\t0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,\n\t0x460, 0x569, 0x663, 0x76a, 0x66, 0x16f, 0x265, 0x36c,\n\t0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,\n\t0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff, 0x3f5, 0x2fc,\n\t0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,\n\t0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55, 0x15c,\n\t0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,\n\t0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc,\n\t0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,\n\t0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc,\n\t0xcc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,\n\t0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,\n\t0x15c, 0x55, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,\n\t0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,\n\t0x2fc, 0x3f5, 0xff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,\n\t0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c,\n\t0x36c, 0x265, 0x16f, 0x66, 0x76a, 0x663, 0x569, 0x460,\n\t0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,\n\t0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa, 0x1a3, 0x2a9, 0x3a0,\n\t0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c,\n\t0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33, 0x339, 0x230,\n\t0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c,\n\t0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99, 0x190,\n\t0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,\n\t0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0 ] );\n\n\tTHREE.triTable = new Int32Array( [\n\t- 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 1, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 8, 3, 9, 8, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 3, 1, 2, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 2, 10, 0, 2, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 8, 3, 2, 10, 8, 10, 9, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 11, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 11, 2, 8, 11, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 9, 0, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 11, 2, 1, 9, 11, 9, 8, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 10, 1, 11, 10, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 10, 1, 0, 8, 10, 8, 11, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 9, 0, 3, 11, 9, 11, 10, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 8, 10, 10, 8, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 7, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 3, 0, 7, 3, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 1, 9, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 1, 9, 4, 7, 1, 7, 3, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 10, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 4, 7, 3, 0, 4, 1, 2, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 2, 10, 9, 0, 2, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, - 1, - 1, - 1, - 1,\n\t8, 4, 7, 3, 11, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t11, 4, 7, 11, 2, 4, 2, 0, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 0, 1, 8, 4, 7, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, - 1, - 1, - 1, - 1,\n\t3, 10, 1, 3, 11, 10, 7, 8, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, - 1, - 1, - 1, - 1,\n\t4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, - 1, - 1, - 1, - 1,\n\t4, 7, 11, 4, 11, 9, 9, 11, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 5, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 5, 4, 0, 8, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 5, 4, 1, 5, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 5, 4, 8, 3, 5, 3, 1, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 10, 9, 5, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 0, 8, 1, 2, 10, 4, 9, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 2, 10, 5, 4, 2, 4, 0, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, - 1, - 1, - 1, - 1,\n\t9, 5, 4, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 11, 2, 0, 8, 11, 4, 9, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 5, 4, 0, 1, 5, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, - 1, - 1, - 1, - 1,\n\t10, 3, 11, 10, 1, 3, 9, 5, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, - 1, - 1, - 1, - 1,\n\t5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, - 1, - 1, - 1, - 1,\n\t5, 4, 8, 5, 8, 10, 10, 8, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 7, 8, 5, 7, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 3, 0, 9, 5, 3, 5, 7, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 7, 8, 0, 1, 7, 1, 5, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 5, 3, 3, 5, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 7, 8, 9, 5, 7, 10, 1, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, - 1, - 1, - 1, - 1,\n\t8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, - 1, - 1, - 1, - 1,\n\t2, 10, 5, 2, 5, 3, 3, 5, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t7, 9, 5, 7, 8, 9, 3, 11, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, - 1, - 1, - 1, - 1,\n\t2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, - 1, - 1, - 1, - 1,\n\t11, 2, 1, 11, 1, 7, 7, 1, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, - 1, - 1, - 1, - 1,\n\t5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, - 1,\n\t11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, - 1,\n\t11, 10, 5, 7, 11, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 3, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 0, 1, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 8, 3, 1, 9, 8, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 6, 5, 2, 6, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 6, 5, 1, 2, 6, 3, 0, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 6, 5, 9, 0, 6, 0, 2, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, - 1, - 1, - 1, - 1,\n\t2, 3, 11, 10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t11, 0, 8, 11, 2, 0, 10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 1, 9, 2, 3, 11, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, - 1, - 1, - 1, - 1,\n\t6, 3, 11, 6, 5, 3, 5, 1, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, - 1, - 1, - 1, - 1,\n\t3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, - 1, - 1, - 1, - 1,\n\t6, 5, 9, 6, 9, 11, 11, 9, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 10, 6, 4, 7, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 3, 0, 4, 7, 3, 6, 5, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 9, 0, 5, 10, 6, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, - 1, - 1, - 1, - 1,\n\t6, 1, 2, 6, 5, 1, 4, 7, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, - 1, - 1, - 1, - 1,\n\t8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, - 1, - 1, - 1, - 1,\n\t7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, - 1,\n\t3, 11, 2, 7, 8, 4, 10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, - 1, - 1, - 1, - 1,\n\t0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, - 1, - 1, - 1, - 1,\n\t9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, - 1,\n\t8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, - 1, - 1, - 1, - 1,\n\t5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, - 1,\n\t0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, - 1,\n\t6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, - 1, - 1, - 1, - 1,\n\t10, 4, 9, 6, 4, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 10, 6, 4, 9, 10, 0, 8, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 0, 1, 10, 6, 0, 6, 4, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, - 1, - 1, - 1, - 1,\n\t1, 4, 9, 1, 2, 4, 2, 6, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, - 1, - 1, - 1, - 1,\n\t0, 2, 4, 4, 2, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 3, 2, 8, 2, 4, 4, 2, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 4, 9, 10, 6, 4, 11, 2, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, - 1, - 1, - 1, - 1,\n\t3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, - 1, - 1, - 1, - 1,\n\t6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, - 1,\n\t9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, - 1, - 1, - 1, - 1,\n\t8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, - 1,\n\t3, 11, 6, 3, 6, 0, 0, 6, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t6, 4, 8, 11, 6, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t7, 10, 6, 7, 8, 10, 8, 9, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, - 1, - 1, - 1, - 1,\n\t10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, - 1, - 1, - 1, - 1,\n\t10, 6, 7, 10, 7, 1, 1, 7, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, - 1, - 1, - 1, - 1,\n\t2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, - 1,\n\t7, 8, 0, 7, 0, 6, 6, 0, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t7, 3, 2, 6, 7, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, - 1, - 1, - 1, - 1,\n\t2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, - 1,\n\t1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, - 1,\n\t11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, - 1, - 1, - 1, - 1,\n\t8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, - 1,\n\t0, 9, 1, 11, 6, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, - 1, - 1, - 1, - 1,\n\t7, 11, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 0, 8, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 1, 9, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 1, 9, 8, 3, 1, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 1, 2, 6, 11, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 10, 3, 0, 8, 6, 11, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 9, 0, 2, 10, 9, 6, 11, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, - 1, - 1, - 1, - 1,\n\t7, 2, 3, 6, 2, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t7, 0, 8, 7, 6, 0, 6, 2, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 7, 6, 2, 3, 7, 0, 1, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, - 1, - 1, - 1, - 1,\n\t10, 7, 6, 10, 1, 7, 1, 3, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, - 1, - 1, - 1, - 1,\n\t0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, - 1, - 1, - 1, - 1,\n\t7, 6, 10, 7, 10, 8, 8, 10, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t6, 8, 4, 11, 8, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 6, 11, 3, 0, 6, 0, 4, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 6, 11, 8, 4, 6, 9, 0, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, - 1, - 1, - 1, - 1,\n\t6, 8, 4, 6, 11, 8, 2, 10, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, - 1, - 1, - 1, - 1,\n\t4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, - 1, - 1, - 1, - 1,\n\t10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, - 1,\n\t8, 2, 3, 8, 4, 2, 4, 6, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 4, 2, 4, 6, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, - 1, - 1, - 1, - 1,\n\t1, 9, 4, 1, 4, 2, 2, 4, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, - 1, - 1, - 1, - 1,\n\t10, 1, 0, 10, 0, 6, 6, 0, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, - 1,\n\t10, 9, 4, 6, 10, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 9, 5, 7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 3, 4, 9, 5, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 0, 1, 5, 4, 0, 7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, - 1, - 1, - 1, - 1,\n\t9, 5, 4, 10, 1, 2, 7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, - 1, - 1, - 1, - 1,\n\t7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, - 1, - 1, - 1, - 1,\n\t3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, - 1,\n\t7, 2, 3, 7, 6, 2, 5, 4, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, - 1, - 1, - 1, - 1,\n\t3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, - 1, - 1, - 1, - 1,\n\t6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, - 1,\n\t9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, - 1, - 1, - 1, - 1,\n\t1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, - 1,\n\t4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, - 1,\n\t7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, - 1, - 1, - 1, - 1,\n\t6, 9, 5, 6, 11, 9, 11, 8, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, - 1, - 1, - 1, - 1,\n\t0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, - 1, - 1, - 1, - 1,\n\t6, 11, 3, 6, 3, 5, 5, 3, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, - 1, - 1, - 1, - 1,\n\t0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, - 1,\n\t11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, - 1,\n\t6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, - 1, - 1, - 1, - 1,\n\t5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, - 1, - 1, - 1, - 1,\n\t9, 5, 6, 9, 6, 0, 0, 6, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, - 1,\n\t1, 5, 6, 2, 1, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, - 1,\n\t10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, - 1, - 1, - 1, - 1,\n\t0, 3, 8, 5, 6, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 5, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t11, 5, 10, 7, 5, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t11, 5, 10, 11, 7, 5, 8, 3, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 11, 7, 5, 10, 11, 1, 9, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, - 1, - 1, - 1, - 1,\n\t11, 1, 2, 11, 7, 1, 7, 5, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, - 1, - 1, - 1, - 1,\n\t9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, - 1, - 1, - 1, - 1,\n\t7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, - 1,\n\t2, 5, 10, 2, 3, 5, 3, 7, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, - 1, - 1, - 1, - 1,\n\t9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, - 1, - 1, - 1, - 1,\n\t9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, - 1,\n\t1, 3, 5, 3, 7, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 7, 0, 7, 1, 1, 7, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 0, 3, 9, 3, 5, 5, 3, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 8, 7, 5, 9, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 8, 4, 5, 10, 8, 10, 11, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, - 1, - 1, - 1, - 1,\n\t0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, - 1, - 1, - 1, - 1,\n\t10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, - 1,\n\t2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, - 1, - 1, - 1, - 1,\n\t0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, - 1,\n\t0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, - 1,\n\t9, 4, 5, 2, 11, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, - 1, - 1, - 1, - 1,\n\t5, 10, 2, 5, 2, 4, 4, 2, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, - 1,\n\t5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, - 1, - 1, - 1, - 1,\n\t8, 4, 5, 8, 5, 3, 3, 5, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 4, 5, 1, 0, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, - 1, - 1, - 1, - 1,\n\t9, 4, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 11, 7, 4, 9, 11, 9, 10, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, - 1, - 1, - 1, - 1,\n\t1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, - 1, - 1, - 1, - 1,\n\t3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, - 1,\n\t4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, - 1, - 1, - 1, - 1,\n\t9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, - 1,\n\t11, 7, 4, 11, 4, 2, 2, 4, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, - 1, - 1, - 1, - 1,\n\t2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, - 1, - 1, - 1, - 1,\n\t9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, - 1,\n\t3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, - 1,\n\t1, 10, 2, 8, 7, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 9, 1, 4, 1, 7, 7, 1, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, - 1, - 1, - 1, - 1,\n\t4, 0, 3, 7, 4, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 8, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 10, 8, 10, 11, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 0, 9, 3, 9, 11, 11, 9, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 1, 10, 0, 10, 8, 8, 10, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 1, 10, 11, 3, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 11, 1, 11, 9, 9, 11, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, - 1, - 1, - 1, - 1,\n\t0, 2, 11, 8, 0, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 2, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 3, 8, 2, 8, 10, 10, 8, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 10, 2, 0, 9, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, - 1, - 1, - 1, - 1,\n\t1, 10, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 3, 8, 9, 1, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 9, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 3, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t- 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1 ] );\n\n};","module.exports = function( THREE ){\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.MaskPass = function ( scene, camera ) {\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.enabled = true;\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.inverse = false;\n\n\t};\n\n\tTHREE.MaskPass.prototype = {\n\n\t\trender: function ( renderer, writeBuffer, readBuffer, delta ) {\n\n\t\t\tvar context = renderer.context;\n\n\t\t\t// don't update color or depth\n\n\t\t\tcontext.colorMask( false, false, false, false );\n\t\t\tcontext.depthMask( false );\n\n\t\t\t// set up stencil\n\n\t\t\tvar writeValue, clearValue;\n\n\t\t\tif ( this.inverse ) {\n\n\t\t\t\twriteValue = 0;\n\t\t\t\tclearValue = 1;\n\n\t\t\t} else {\n\n\t\t\t\twriteValue = 1;\n\t\t\t\tclearValue = 0;\n\n\t\t\t}\n\n\t\t\tcontext.enable( context.STENCIL_TEST );\n\t\t\tcontext.stencilOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\t\tcontext.stencilFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\t\tcontext.clearStencil( clearValue );\n\n\t\t\t// draw into the stencil buffer\n\n\t\t\trenderer.render( this.scene, this.camera, readBuffer, this.clear );\n\t\t\trenderer.render( this.scene, this.camera, writeBuffer, this.clear );\n\n\t\t\t// re-enable update of color and depth\n\n\t\t\tcontext.colorMask( true, true, true, true );\n\t\t\tcontext.depthMask( true );\n\n\t\t\t// only render where stencil is set to 1\n\n\t\t\tcontext.stencilFunc( context.EQUAL, 1, 0xffffffff );  // draw if == 1\n\t\t\tcontext.stencilOp( context.KEEP, context.KEEP, context.KEEP );\n\n\t\t}\n\n\t};\n\n\n\tTHREE.ClearMaskPass = function () {\n\n\t\tthis.enabled = true;\n\n\t};\n\n\tTHREE.ClearMaskPass.prototype = {\n\n\t\trender: function ( renderer, writeBuffer, readBuffer, delta ) {\n\n\t\t\tvar context = renderer.context;\n\n\t\t\tcontext.disable( context.STENCIL_TEST );\n\n\t\t}\n\n\t};\n\n};\n","module.exports = function( THREE ){\n\t/**\n\t * @author felixturner / http://airtight.cc/\n\t *\n\t * Mirror Shader\n\t * Copies half the input to the other half\n\t *\n\t * side: side of input to mirror (0 = left, 1 = right, 2 = top, 3 = bottom)\n\t */\n\n\tTHREE.MirrorShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\"side\":     { type: \"i\", value: 1 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform int side;\",\n\t\t\t\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec2 p = vUv;\",\n\t\t\t\t\"if (side == 0){\",\n\t\t\t\t\t\"if (p.x > 0.5) p.x = 1.0 - p.x;\",\n\t\t\t\t\"}else if (side == 1){\",\n\t\t\t\t\t\"if (p.x < 0.5) p.x = 1.0 - p.x;\",\n\t\t\t\t\"}else if (side == 2){\",\n\t\t\t\t\t\"if (p.y < 0.5) p.y = 1.0 - p.y;\",\n\t\t\t\t\"}else if (side == 3){\",\n\t\t\t\t\t\"if (p.y > 0.5) p.y = 1.0 - p.y;\",\n\t\t\t\t\"} \",\n\t\t\t\t\"vec4 color = texture2D(tDiffuse, p);\",\n\t\t\t\t\"gl_FragColor = color;\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Normal map shader\n\t * - compute normals from heightmap\n\t */\n\n\tTHREE.NormalMapShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"heightMap\":  { type: \"t\", value: null },\n\t\t\t\"resolution\": { type: \"v2\", value: new THREE.Vector2( 512, 512 ) },\n\t\t\t\"scale\":      { type: \"v2\", value: new THREE.Vector2( 1, 1 ) },\n\t\t\t\"height\":     { type: \"f\", value: 0.05 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float height;\",\n\t\t\t\"uniform vec2 resolution;\",\n\t\t\t\"uniform sampler2D heightMap;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"float val = texture2D( heightMap, vUv ).x;\",\n\n\t\t\t\t\"float valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\",\n\t\t\t\t\"float valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\",\n\n\t\t\t\t\"gl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.OBJLoader = function ( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t\tthis.materials = null;\n\n\t};\n\n\tTHREE.OBJLoader.prototype = {\n\n\t\tconstructor: THREE.OBJLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\n\t\t},\n\n\t\tsetMaterials: function ( materials ) {\n\n\t\t\tthis.materials = materials;\n\n\t\t},\n\n\t\tparse: function ( text ) {\n\n\t\t\tconsole.time( 'OBJLoader' );\n\n\t\t\tvar objects = [];\n\t\t\tvar object;\n\t\t\tvar foundObjects = false;\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\tfunction addObject( name ) {\n\n\t\t\t\tvar geometry = {\n\t\t\t\t\tvertices: [],\n\t\t\t\t\tnormals: [],\n\t\t\t\t\tuvs: []\n\t\t\t\t};\n\n\t\t\t\tvar material = {\n\t\t\t\t\tname: '',\n\t\t\t\t\tsmooth: true\n\t\t\t\t};\n\n\t\t\t\tobject = {\n\t\t\t\t\tname: name,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material\n\t\t\t\t};\n\n\t\t\t\tobjects.push( object );\n\n\t\t\t}\n\n\t\t\tfunction parseVertexIndex( value ) {\n\n\t\t\t\tvar index = parseInt( value );\n\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + vertices.length / 3 ) * 3;\n\n\t\t\t}\n\n\t\t\tfunction parseNormalIndex( value ) {\n\n\t\t\t\tvar index = parseInt( value );\n\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + normals.length / 3 ) * 3;\n\n\t\t\t}\n\n\t\t\tfunction parseUVIndex( value ) {\n\n\t\t\t\tvar index = parseInt( value );\n\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + uvs.length / 2 ) * 2;\n\n\t\t\t}\n\n\t\t\tfunction addVertex( a, b, c ) {\n\n\t\t\t\tobject.geometry.vertices.push(\n\t\t\t\t\tvertices[ a ], vertices[ a + 1 ], vertices[ a + 2 ],\n\t\t\t\t\tvertices[ b ], vertices[ b + 1 ], vertices[ b + 2 ],\n\t\t\t\t\tvertices[ c ], vertices[ c + 1 ], vertices[ c + 2 ]\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tfunction addNormal( a, b, c ) {\n\n\t\t\t\tobject.geometry.normals.push(\n\t\t\t\t\tnormals[ a ], normals[ a + 1 ], normals[ a + 2 ],\n\t\t\t\t\tnormals[ b ], normals[ b + 1 ], normals[ b + 2 ],\n\t\t\t\t\tnormals[ c ], normals[ c + 1 ], normals[ c + 2 ]\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tfunction addUV( a, b, c ) {\n\n\t\t\t\tobject.geometry.uvs.push(\n\t\t\t\t\tuvs[ a ], uvs[ a + 1 ],\n\t\t\t\t\tuvs[ b ], uvs[ b + 1 ],\n\t\t\t\t\tuvs[ c ], uvs[ c + 1 ]\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tfunction addFace( a, b, c, d,  ua, ub, uc, ud, na, nb, nc, nd ) {\n\n\t\t\t\tvar ia = parseVertexIndex( a );\n\t\t\t\tvar ib = parseVertexIndex( b );\n\t\t\t\tvar ic = parseVertexIndex( c );\n\t\t\t\tvar id;\n\n\t\t\t\tif ( d === undefined ) {\n\n\t\t\t\t\taddVertex( ia, ib, ic );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tid = parseVertexIndex( d );\n\n\t\t\t\t\taddVertex( ia, ib, id );\n\t\t\t\t\taddVertex( ib, ic, id );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ua !== undefined ) {\n\n\t\t\t\t\tia = parseUVIndex( ua );\n\t\t\t\t\tib = parseUVIndex( ub );\n\t\t\t\t\tic = parseUVIndex( uc );\n\n\t\t\t\t\tif ( d === undefined ) {\n\n\t\t\t\t\t\taddUV( ia, ib, ic );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tid = parseUVIndex( ud );\n\n\t\t\t\t\t\taddUV( ia, ib, id );\n\t\t\t\t\t\taddUV( ib, ic, id );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( na !== undefined ) {\n\n\t\t\t\t\tia = parseNormalIndex( na );\n\t\t\t\t\tib = parseNormalIndex( nb );\n\t\t\t\t\tic = parseNormalIndex( nc );\n\n\t\t\t\t\tif ( d === undefined ) {\n\n\t\t\t\t\t\taddNormal( ia, ib, ic );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tid = parseNormalIndex( nd );\n\n\t\t\t\t\t\taddNormal( ia, ib, id );\n\t\t\t\t\t\taddNormal( ib, ic, id );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\taddObject( '' );\n\n\t\t\t// v float float float\n\t\t\tvar vertex_pattern = /^v\\s+([\\d|\\.|\\+|\\-|e|E]+)\\s+([\\d|\\.|\\+|\\-|e|E]+)\\s+([\\d|\\.|\\+|\\-|e|E]+)/;\n\n\t\t\t// vn float float float\n\t\t\tvar normal_pattern = /^vn\\s+([\\d|\\.|\\+|\\-|e|E]+)\\s+([\\d|\\.|\\+|\\-|e|E]+)\\s+([\\d|\\.|\\+|\\-|e|E]+)/;\n\n\t\t\t// vt float float\n\t\t\tvar uv_pattern = /^vt\\s+([\\d|\\.|\\+|\\-|e|E]+)\\s+([\\d|\\.|\\+|\\-|e|E]+)/;\n\n\t\t\t// f vertex vertex vertex ...\n\t\t\tvar face_pattern1 = /^f\\s+(-?\\d+)\\s+(-?\\d+)\\s+(-?\\d+)(?:\\s+(-?\\d+))?/;\n\n\t\t\t// f vertex/uv vertex/uv vertex/uv ...\n\t\t\tvar face_pattern2 = /^f\\s+((-?\\d+)\\/(-?\\d+))\\s+((-?\\d+)\\/(-?\\d+))\\s+((-?\\d+)\\/(-?\\d+))(?:\\s+((-?\\d+)\\/(-?\\d+)))?/;\n\n\t\t\t// f vertex/uv/normal vertex/uv/normal vertex/uv/normal ...\n\t\t\tvar face_pattern3 = /^f\\s+((-?\\d+)\\/(-?\\d+)\\/(-?\\d+))\\s+((-?\\d+)\\/(-?\\d+)\\/(-?\\d+))\\s+((-?\\d+)\\/(-?\\d+)\\/(-?\\d+))(?:\\s+((-?\\d+)\\/(-?\\d+)\\/(-?\\d+)))?/;\n\n\t\t\t// f vertex//normal vertex//normal vertex//normal ...\n\t\t\tvar face_pattern4 = /^f\\s+((-?\\d+)\\/\\/(-?\\d+))\\s+((-?\\d+)\\/\\/(-?\\d+))\\s+((-?\\d+)\\/\\/(-?\\d+))(?:\\s+((-?\\d+)\\/\\/(-?\\d+)))?/;\n\n\t\t\tvar object_pattern = /^[og]\\s+(.+)/;\n\n\t\t\tvar smoothing_pattern = /^s\\s+(\\d+|on|off)/;\n\n\t\t\t//\n\n\t\t\tvar lines = text.split( '\\n' );\n\n\t\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\t\tvar line = lines[ i ];\n\t\t\t\tline = line.trim();\n\n\t\t\t\tvar result;\n\n\t\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t} else if ( ( result = vertex_pattern.exec( line ) ) !== null ) {\n\n\t\t\t\t\t// [\"v 1.0 2.0 3.0\", \"1.0\", \"2.0\", \"3.0\"]\n\n\t\t\t\t\tvertices.push(\n\t\t\t\t\t\tparseFloat( result[ 1 ] ),\n\t\t\t\t\t\tparseFloat( result[ 2 ] ),\n\t\t\t\t\t\tparseFloat( result[ 3 ] )\n\t\t\t\t\t);\n\n\t\t\t\t} else if ( ( result = normal_pattern.exec( line ) ) !== null ) {\n\n\t\t\t\t\t// [\"vn 1.0 2.0 3.0\", \"1.0\", \"2.0\", \"3.0\"]\n\n\t\t\t\t\tnormals.push(\n\t\t\t\t\t\tparseFloat( result[ 1 ] ),\n\t\t\t\t\t\tparseFloat( result[ 2 ] ),\n\t\t\t\t\t\tparseFloat( result[ 3 ] )\n\t\t\t\t\t);\n\n\t\t\t\t} else if ( ( result = uv_pattern.exec( line ) ) !== null ) {\n\n\t\t\t\t\t// [\"vt 0.1 0.2\", \"0.1\", \"0.2\"]\n\n\t\t\t\t\tuvs.push(\n\t\t\t\t\t\tparseFloat( result[ 1 ] ),\n\t\t\t\t\t\tparseFloat( result[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t} else if ( ( result = face_pattern1.exec( line ) ) !== null ) {\n\n\t\t\t\t\t// [\"f 1 2 3\", \"1\", \"2\", \"3\", undefined]\n\n\t\t\t\t\taddFace(\n\t\t\t\t\t\tresult[ 1 ], result[ 2 ], result[ 3 ], result[ 4 ]\n\t\t\t\t\t);\n\n\t\t\t\t} else if ( ( result = face_pattern2.exec( line ) ) !== null ) {\n\n\t\t\t\t\t// [\"f 1/1 2/2 3/3\", \" 1/1\", \"1\", \"1\", \" 2/2\", \"2\", \"2\", \" 3/3\", \"3\", \"3\", undefined, undefined, undefined]\n\n\t\t\t\t\taddFace(\n\t\t\t\t\t\tresult[ 2 ], result[ 5 ], result[ 8 ], result[ 11 ],\n\t\t\t\t\t\tresult[ 3 ], result[ 6 ], result[ 9 ], result[ 12 ]\n\t\t\t\t\t);\n\n\t\t\t\t} else if ( ( result = face_pattern3.exec( line ) ) !== null ) {\n\n\t\t\t\t\t// [\"f 1/1/1 2/2/2 3/3/3\", \" 1/1/1\", \"1\", \"1\", \"1\", \" 2/2/2\", \"2\", \"2\", \"2\", \" 3/3/3\", \"3\", \"3\", \"3\", undefined, undefined, undefined, undefined]\n\n\t\t\t\t\taddFace(\n\t\t\t\t\t\tresult[ 2 ], result[ 6 ], result[ 10 ], result[ 14 ],\n\t\t\t\t\t\tresult[ 3 ], result[ 7 ], result[ 11 ], result[ 15 ],\n\t\t\t\t\t\tresult[ 4 ], result[ 8 ], result[ 12 ], result[ 16 ]\n\t\t\t\t\t);\n\n\t\t\t\t} else if ( ( result = face_pattern4.exec( line ) ) !== null ) {\n\n\t\t\t\t\t// [\"f 1//1 2//2 3//3\", \" 1//1\", \"1\", \"1\", \" 2//2\", \"2\", \"2\", \" 3//3\", \"3\", \"3\", undefined, undefined, undefined]\n\n\t\t\t\t\taddFace(\n\t\t\t\t\t\tresult[ 2 ], result[ 5 ], result[ 8 ], result[ 11 ],\n\t\t\t\t\t\tundefined, undefined, undefined, undefined,\n\t\t\t\t\t\tresult[ 3 ], result[ 6 ], result[ 9 ], result[ 12 ]\n\t\t\t\t\t);\n\n\t\t\t\t} else if ( ( result = object_pattern.exec( line ) ) !== null ) {\n\n\t\t\t\t\t// o object_name\n\t\t\t\t\t// or\n\t\t\t\t\t// g group_name\n\n\t\t\t\t\tvar name = result[ 1 ].trim();\n\n\t\t\t\t\tif ( foundObjects === false ) {\n\n\t\t\t\t\t\tfoundObjects = true;\n\t\t\t\t\t\tobject.name = name;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\taddObject( name );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( /^usemtl /.test( line ) ) {\n\n\t\t\t\t\t// material\n\n\t\t\t\t\tobject.material.name = line.substring( 7 ).trim();\n\n\t\t\t\t} else if ( /^mtllib /.test( line ) ) {\n\n\t\t\t\t\t// mtl file\n\n\t\t\t\t} else if ( ( result = smoothing_pattern.exec( line ) ) !== null ) {\n\n\t\t\t\t\t// smooth shading\n\n\t\t\t\t\tobject.material.smooth = result[ 1 ] === \"1\" || result[ 1 ] === \"on\";\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( \"Unexpected line: \" + line );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar container = new THREE.Group();\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tobject = objects[ i ];\n\t\t\t\tvar geometry = object.geometry;\n\n\t\t\t\tvar buffergeometry = new THREE.BufferGeometry();\n\n\t\t\t\tbuffergeometry.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( geometry.vertices ), 3 ) );\n\n\t\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\t\tbuffergeometry.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( geometry.normals ), 3 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbuffergeometry.computeVertexNormals();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\t\tbuffergeometry.addAttribute( 'uv', new THREE.BufferAttribute( new Float32Array( geometry.uvs ), 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tvar material;\n\n\t\t\t\tif ( this.materials !== null ) {\n\n\t\t\t\t\tmaterial = this.materials.create( object.material.name );\n\n\t\t\t\t}\n\n\t\t\t\tif ( !material ) {\n\n\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial();\n\t\t\t\t\tmaterial.name = object.material.name;\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.shading = object.material.smooth ? THREE.SmoothShading : THREE.FlatShading;\n\n\t\t\t\tvar mesh = new THREE.Mesh( buffergeometry, material );\n\t\t\t\tmesh.name = object.name;\n\n\t\t\t\tcontainer.add( mesh );\n\n\t\t\t}\n\n\t\t\tconsole.timeEnd( 'OBJLoader' );\n\n\t\t\treturn container;\n\n\t\t}\n\n\t};\n\n};","﻿module.exports = function( THREE ){\n\t// Author: Aleksandr Albert\n\t// Website: www.routter.co.tt\n\n\t// Description: A deep water ocean shader set\n\t// based on an implementation of a Tessendorf Waves\n\t// originally presented by David Li ( www.david.li/waves )\n\n\t// The general method is to apply shaders to simulation Framebuffers\n\t// and then sample these framebuffers when rendering the ocean mesh\n\n\t// The set uses 7 shaders:\n\n\t// -- Simulation shaders\n\t// [1] ocean_sim_vertex         -> Vertex shader used to set up a 2x2 simulation plane centered at (0,0)\n\t// [2] ocean_subtransform       -> Fragment shader used to subtransform the mesh (generates the displacement map)\n\t// [3] ocean_initial_spectrum   -> Fragment shader used to set intitial wave frequency at a texel coordinate\n\t// [4] ocean_phase              -> Fragment shader used to set wave phase at a texel coordinate\n\t// [5] ocean_spectrum           -> Fragment shader used to set current wave frequency at a texel coordinate\n\t// [6] ocean_normal             -> Fragment shader used to set face normals at a texel coordinate\n\n\t// -- Rendering Shader\n\t// [7] ocean_main               -> Vertex and Fragment shader used to create the final render\n\n\n\tTHREE.ShaderLib[ 'ocean_sim_vertex' ] = {\n\t\tvarying: {\n\t\t\t\"vUV\": { type: \"v2\" }\n\t\t},\n\t\tvertexShader: [\n\t\t\t'varying vec2 vUV;',\n\n\t\t\t'void main (void) {',\n\t\t\t\t'vUV = position.xy * 0.5 + 0.5;',\n\t\t\t\t'gl_Position = vec4(position, 1.0 );',\n\t\t\t'}'\n\t\t].join( '\\n' )\n\t};\n\tTHREE.ShaderLib[ 'ocean_subtransform' ] = {\n\t\tuniforms: {\n\t\t\t\"u_input\": { type: \"t\", value: null },\n\t\t\t\"u_transformSize\": { type: \"f\", value: 512.0 },\n\t\t\t\"u_subtransformSize\": { type: \"f\", value: 250.0 }\n\t\t},\n\t\tvarying: {\n\t\t\t\"vUV\": { type: \"v2\" }\n\t\t},\n\t\tfragmentShader: [\n\t\t\t//GPU FFT using a Stockham formulation\n\t\t\t'precision highp float;',\n\n\t\t\t'const float PI = 3.14159265359;',\n\n\t\t\t'uniform sampler2D u_input;',\n\t\t\t'uniform float u_transformSize;',\n\t\t\t'uniform float u_subtransformSize;',\n\n\t\t\t'varying vec2 vUV;',\n\n\t\t\t'vec2 multiplyComplex (vec2 a, vec2 b) {',\n\t\t\t\t'return vec2(a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]);',\n\t\t\t'}',\n\n\t\t\t'void main (void) {',\n\t\t\t\t'#ifdef HORIZONTAL',\n\t\t\t\t'float index = vUV.x * u_transformSize - 0.5;',\n\t\t\t\t'#else',\n\t\t\t\t'float index = vUV.y * u_transformSize - 0.5;',\n\t\t\t\t'#endif',\n\n\t\t\t\t'float evenIndex = floor(index / u_subtransformSize) * (u_subtransformSize * 0.5) + mod(index, u_subtransformSize * 0.5);',\n\n\t\t\t\t//transform two complex sequences simultaneously\n\t\t\t\t'#ifdef HORIZONTAL',\n\t\t\t\t'vec4 even = texture2D(u_input, vec2(evenIndex + 0.5, gl_FragCoord.y) / u_transformSize).rgba;',\n\t\t\t\t'vec4 odd = texture2D(u_input, vec2(evenIndex + u_transformSize * 0.5 + 0.5, gl_FragCoord.y) / u_transformSize).rgba;',\n\t\t\t\t'#else',\n\t\t\t\t'vec4 even = texture2D(u_input, vec2(gl_FragCoord.x, evenIndex + 0.5) / u_transformSize).rgba;',\n\t\t\t\t'vec4 odd = texture2D(u_input, vec2(gl_FragCoord.x, evenIndex + u_transformSize * 0.5 + 0.5) / u_transformSize).rgba;',\n\t\t\t\t'#endif',\n\n\t\t\t\t'float twiddleArgument = -2.0 * PI * (index / u_subtransformSize);',\n\t\t\t\t'vec2 twiddle = vec2(cos(twiddleArgument), sin(twiddleArgument));',\n\n\t\t\t\t'vec2 outputA = even.xy + multiplyComplex(twiddle, odd.xy);',\n\t\t\t\t'vec2 outputB = even.zw + multiplyComplex(twiddle, odd.zw);',\n\n\t\t\t\t'gl_FragColor = vec4(outputA, outputB);',\n\t\t\t'}'\n\t\t].join( '\\n' )\n\t};\n\tTHREE.ShaderLib[ 'ocean_initial_spectrum' ] = {\n\t\tuniforms: {\n\t\t\t\"u_wind\": { type: \"v2\", value: new THREE.Vector2( 10.0, 10.0 ) },\n\t\t\t\"u_resolution\": { type: \"f\", value: 512.0 },\n\t\t\t\"u_size\": { type: \"f\", value: 250.0 },\n\t\t},\n\t\tfragmentShader: [\n\t\t\t'precision highp float;',\n\n\t\t\t'const float PI = 3.14159265359;',\n\t\t\t'const float G = 9.81;',\n\t\t\t'const float KM = 370.0;',\n\t\t\t'const float CM = 0.23;',\n\n\t\t\t'uniform vec2 u_wind;',\n\t\t\t'uniform float u_resolution;',\n\t\t\t'uniform float u_size;',\n\n\t\t\t'float square (float x) {',\n\t\t\t\t'return x * x;',\n\t\t\t'}',\n\n\t\t\t'float omega (float k) {',\n\t\t\t\t'return sqrt(G * k * (1.0 + square(k / KM)));',\n\t\t\t'}',\n\n\t\t\t'float tanh (float x) {',\n\t\t\t\t'return (1.0 - exp(-2.0 * x)) / (1.0 + exp(-2.0 * x));',\n\t\t\t'}',\n\n\t\t\t'void main (void) {',\n\t\t\t\t'vec2 coordinates = gl_FragCoord.xy - 0.5;',\n\n\t\t\t\t'float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;',\n\t\t\t\t'float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;',\n\n\t\t\t\t'vec2 K = (2.0 * PI * vec2(n, m)) / u_size;',\n\t\t\t\t'float k = length(K);',\n\n\t\t\t\t'float l_wind = length(u_wind);',\n\n\t\t\t\t'float Omega = 0.84;',\n\t\t\t\t'float kp = G * square(Omega / l_wind);',\n\n\t\t\t\t'float c = omega(k) / k;',\n\t\t\t\t'float cp = omega(kp) / kp;',\n\n\t\t\t\t'float Lpm = exp(-1.25 * square(kp / k));',\n\t\t\t\t'float gamma = 1.7;',\n\t\t\t\t'float sigma = 0.08 * (1.0 + 4.0 * pow(Omega, -3.0));',\n\t\t\t\t'float Gamma = exp(-square(sqrt(k / kp) - 1.0) / 2.0 * square(sigma));',\n\t\t\t\t'float Jp = pow(gamma, Gamma);',\n\t\t\t\t'float Fp = Lpm * Jp * exp(-Omega / sqrt(10.0) * (sqrt(k / kp) - 1.0));',\n\t\t\t\t'float alphap = 0.006 * sqrt(Omega);',\n\t\t\t\t'float Bl = 0.5 * alphap * cp / c * Fp;',\n\n\t\t\t\t'float z0 = 0.000037 * square(l_wind) / G * pow(l_wind / cp, 0.9);',\n\t\t\t\t'float uStar = 0.41 * l_wind / log(10.0 / z0);',\n\t\t\t\t'float alpham = 0.01 * ((uStar < CM) ? (1.0 + log(uStar / CM)) : (1.0 + 3.0 * log(uStar / CM)));',\n\t\t\t\t'float Fm = exp(-0.25 * square(k / KM - 1.0));',\n\t\t\t\t'float Bh = 0.5 * alpham * CM / c * Fm * Lpm;',\n\n\t\t\t\t'float a0 = log(2.0) / 4.0;',\n\t\t\t\t'float am = 0.13 * uStar / CM;',\n\t\t\t\t'float Delta = tanh(a0 + 4.0 * pow(c / cp, 2.5) + am * pow(CM / c, 2.5));',\n\n\t\t\t\t'float cosPhi = dot(normalize(u_wind), normalize(K));',\n\n\t\t\t\t'float S = (1.0 / (2.0 * PI)) * pow(k, -4.0) * (Bl + Bh) * (1.0 + Delta * (2.0 * cosPhi * cosPhi - 1.0));',\n\n\t\t\t\t'float dk = 2.0 * PI / u_size;',\n\t\t\t\t'float h = sqrt(S / 2.0) * dk;',\n\n\t\t\t\t'if (K.x == 0.0 && K.y == 0.0) {',\n\t\t\t\t\t'h = 0.0;', //no DC term\n\t\t\t\t'}',\n\t\t\t\t'gl_FragColor = vec4(h, 0.0, 0.0, 0.0);',\n\t\t\t'}'\n\t\t].join( '\\n' )\n\t};\n\tTHREE.ShaderLib[ 'ocean_phase' ] = {\n\t\tuniforms: {\n\t\t\t\"u_phases\": { type: \"t\", value: null },\n\t\t\t\"u_deltaTime\": { type: \"f\", value: null },\n\t\t\t\"u_resolution\": { type: \"f\", value: null },\n\t\t\t\"u_size\": { type: \"f\", value: null },\n\t\t},\n\t\tvarying: {\n\t\t\t\"vUV\": { type: \"v2\" }\n\t\t},\n\t\tfragmentShader: [\n\t\t\t'precision highp float;',\n\n\t\t\t'const float PI = 3.14159265359;',\n\t\t\t'const float G = 9.81;',\n\t\t\t'const float KM = 370.0;',\n\n\t\t\t'varying vec2 vUV;',\n\n\t\t\t'uniform sampler2D u_phases;',\n\t\t\t'uniform float u_deltaTime;',\n\t\t\t'uniform float u_resolution;',\n\t\t\t'uniform float u_size;',\n\n\t\t\t'float omega (float k) {',\n\t\t\t\t'return sqrt(G * k * (1.0 + k * k / KM * KM));',\n\t\t\t'}',\n\n\t\t\t'void main (void) {',\n\t\t\t\t'float deltaTime = 1.0 / 60.0;',\n\t\t\t\t'vec2 coordinates = gl_FragCoord.xy - 0.5;',\n\t\t\t\t'float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;',\n\t\t\t\t'float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;',\n\t\t\t\t'vec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;',\n\n\t\t\t\t'float phase = texture2D(u_phases, vUV).r;',\n\t\t\t\t'float deltaPhase = omega(length(waveVector)) * u_deltaTime;',\n\t\t\t\t'phase = mod(phase + deltaPhase, 2.0 * PI);',\n\n\t\t\t\t'gl_FragColor = vec4(phase, 0.0, 0.0, 0.0);',\n\t\t\t'}'\n\t\t].join( '\\n' )\n\t};\n\tTHREE.ShaderLib[ 'ocean_spectrum' ] = {\n\t\tuniforms: {\n\t\t\t\"u_size\": { type: \"f\", value: null },\n\t\t\t\"u_resolution\": { type: \"f\", value: null },\n\t\t\t\"u_choppiness\": { type: \"f\", value: null },\n\t\t\t\"u_phases\": { type: \"t\", value: null },\n\t\t\t\"u_initialSpectrum\": { type: \"t\", value: null },\n\t\t},\n\t\tvarying: {\n\t\t\t\"vUV\": { type: \"v2\" }\n\t\t},\n\t\tfragmentShader: [\n\t\t\t'precision highp float;',\n\n\t\t\t'const float PI = 3.14159265359;',\n\t\t\t'const float G = 9.81;',\n\t\t\t'const float KM = 370.0;',\n\n\t\t\t'varying vec2 vUV;',\n\n\t\t\t'uniform float u_size;',\n\t\t\t'uniform float u_resolution;',\n\t\t\t'uniform float u_choppiness;',\n\t\t\t'uniform sampler2D u_phases;',\n\t\t\t'uniform sampler2D u_initialSpectrum;',\n\n\t\t\t'vec2 multiplyComplex (vec2 a, vec2 b) {',\n\t\t\t\t'return vec2(a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]);',\n\t\t\t'}',\n\n\t\t\t'vec2 multiplyByI (vec2 z) {',\n\t\t\t\t'return vec2(-z[1], z[0]);',\n\t\t\t'}',\n\n\t\t\t'float omega (float k) {',\n\t\t\t\t'return sqrt(G * k * (1.0 + k * k / KM * KM));',\n\t\t\t'}',\n\n\t\t\t'void main (void) {',\n\t\t\t\t'vec2 coordinates = gl_FragCoord.xy - 0.5;',\n\t\t\t\t'float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;',\n\t\t\t\t'float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;',\n\t\t\t\t'vec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;',\n\n\t\t\t\t'float phase = texture2D(u_phases, vUV).r;',\n\t\t\t\t'vec2 phaseVector = vec2(cos(phase), sin(phase));',\n\n\t\t\t\t'vec2 h0 = texture2D(u_initialSpectrum, vUV).rg;',\n\t\t\t\t'vec2 h0Star = texture2D(u_initialSpectrum, vec2(1.0 - vUV + 1.0 / u_resolution)).rg;',\n\t\t\t\t'h0Star.y *= -1.0;',\n\n\t\t\t\t'vec2 h = multiplyComplex(h0, phaseVector) + multiplyComplex(h0Star, vec2(phaseVector.x, -phaseVector.y));',\n\n\t\t\t\t'vec2 hX = -multiplyByI(h * (waveVector.x / length(waveVector))) * u_choppiness;',\n\t\t\t\t'vec2 hZ = -multiplyByI(h * (waveVector.y / length(waveVector))) * u_choppiness;',\n\n\t\t\t\t//no DC term\n\t\t\t\t'if (waveVector.x == 0.0 && waveVector.y == 0.0) {',\n\t\t\t\t\t'h = vec2(0.0);',\n\t\t\t\t\t'hX = vec2(0.0);',\n\t\t\t\t\t'hZ = vec2(0.0);',\n\t\t\t\t'}',\n\n\t\t\t\t'gl_FragColor = vec4(hX + multiplyByI(h), hZ);',\n\t\t\t'}'\n\t\t].join( '\\n' )\n\t};\n\tTHREE.ShaderLib[ 'ocean_normals' ] = {\n\t\tuniforms: {\n\t\t\t\"u_displacementMap\": { type: \"t\", value: null },\n\t\t\t\"u_resolution\": { type: \"f\", value: null },\n\t\t\t\"u_size\": { type: \"f\", value: null },\n\t\t},\n\t\tvarying: {\n\t\t\t\"vUV\": { type: \"v2\" }\n\t\t},\n\t\tfragmentShader: [\n\t\t\t'precision highp float;',\n\n\t\t\t'varying vec2 vUV;',\n\n\t\t\t'uniform sampler2D u_displacementMap;',\n\t\t\t'uniform float u_resolution;',\n\t\t\t'uniform float u_size;',\n\n\t\t\t'void main (void) {',\n\t\t\t\t'float texel = 1.0 / u_resolution;',\n\t\t\t\t'float texelSize = u_size / u_resolution;',\n\n\t\t\t\t'vec3 center = texture2D(u_displacementMap, vUV).rgb;',\n\t\t\t\t'vec3 right = vec3(texelSize, 0.0, 0.0) + texture2D(u_displacementMap, vUV + vec2(texel, 0.0)).rgb - center;',\n\t\t\t\t'vec3 left = vec3(-texelSize, 0.0, 0.0) + texture2D(u_displacementMap, vUV + vec2(-texel, 0.0)).rgb - center;',\n\t\t\t\t'vec3 top = vec3(0.0, 0.0, -texelSize) + texture2D(u_displacementMap, vUV + vec2(0.0, -texel)).rgb - center;',\n\t\t\t\t'vec3 bottom = vec3(0.0, 0.0, texelSize) + texture2D(u_displacementMap, vUV + vec2(0.0, texel)).rgb - center;',\n\n\t\t\t\t'vec3 topRight = cross(right, top);',\n\t\t\t\t'vec3 topLeft = cross(top, left);',\n\t\t\t\t'vec3 bottomLeft = cross(left, bottom);',\n\t\t\t\t'vec3 bottomRight = cross(bottom, right);',\n\n\t\t\t\t'gl_FragColor = vec4(normalize(topRight + topLeft + bottomLeft + bottomRight), 1.0);',\n\t\t\t'}'\n\t\t].join( '\\n' )\n\t};\n\tTHREE.ShaderLib[ 'ocean_main' ] = {\n\t\tuniforms: {\n\t\t\t\"u_displacementMap\": { type: \"t\", value: null },\n\t\t\t\"u_normalMap\": { type: \"t\", value: null },\n\t\t\t\"u_geometrySize\": { type: \"f\", value: null },\n\t\t\t\"u_size\": { type: \"f\", value: null },\n\t\t\t\"u_projectionMatrix\": { type: \"m4\", value: null },\n\t\t\t\"u_viewMatrix\": { type: \"m4\", value: null },\n\t\t\t\"u_cameraPosition\": { type: \"v3\", value: null },\n\t\t\t\"u_skyColor\": { type: \"v3\", value: null },\n\t\t\t\"u_oceanColor\": { type: \"v3\", value: null },\n\t\t\t\"u_sunDirection\": { type: \"v3\", value: null },\n\t\t\t\"u_exposure\": { type: \"f\", value: null },\n\t\t},\n\t\tvarying: {\n\t\t\t\"vPos\": { type: \"v3\" },\n\t\t\t\"vUV\": { type: \"v2\" }\n\t\t},\n\t\tvertexShader: [\n\t\t\t'precision highp float;',\n\n\t\t\t'varying vec3 vPos;',\n\t\t\t'varying vec2 vUV;',\n\n\t\t\t'uniform mat4 u_projectionMatrix;',\n\t\t\t'uniform mat4 u_viewMatrix;',\n\t\t\t'uniform float u_size;',\n\t\t\t'uniform float u_geometrySize;',\n\t\t\t'uniform sampler2D u_displacementMap;',\n\n\t\t\t'void main (void) {',\n\t\t\t\t'vec3 newPos = position + texture2D(u_displacementMap, uv).rgb * (u_geometrySize / u_size);',\n\t\t\t\t'vPos = newPos;',\n\t\t\t\t'vUV = uv;',\n\t\t\t\t'gl_Position = u_projectionMatrix * u_viewMatrix * vec4(newPos, 1.0);',\n\t\t\t'}'\n\t\t].join( '\\n' ),\n\t\tfragmentShader: [\n\t\t\t'precision highp float;',\n\n\t\t\t'varying vec3 vPos;',\n\t\t\t'varying vec2 vUV;',\n\n\t\t\t'uniform sampler2D u_displacementMap;',\n\t\t\t'uniform sampler2D u_normalMap;',\n\t\t\t'uniform vec3 u_cameraPosition;',\n\t\t\t'uniform vec3 u_oceanColor;',\n\t\t\t'uniform vec3 u_skyColor;',\n\t\t\t'uniform vec3 u_sunDirection;',\n\t\t\t'uniform float u_exposure;',\n\n\t\t\t'vec3 hdr (vec3 color, float exposure) {',\n\t\t\t\t'return 1.0 - exp(-color * exposure);',\n\t\t\t'}',\n\n\t\t\t'void main (void) {',\n\t\t\t\t'vec3 normal = texture2D(u_normalMap, vUV).rgb;',\n\n\t\t\t\t'vec3 view = normalize(u_cameraPosition - vPos);',\n\t\t\t\t'float fresnel = 0.02 + 0.98 * pow(1.0 - dot(normal, view), 5.0);',\n\t\t\t\t'vec3 sky = fresnel * u_skyColor;',\n\n\t\t\t\t'float diffuse = clamp(dot(normal, normalize(u_sunDirection)), 0.0, 1.0);',\n\t\t\t\t'vec3 water = (1.0 - fresnel) * u_oceanColor * u_skyColor * diffuse;',\n\n\t\t\t\t'vec3 color = sky + water;',\n\n\t\t\t\t'gl_FragColor = vec4(hdr(color, u_exposure), 1.0);',\n\t\t\t'}'\n\t\t].join( '\\n' )\n\t};\n\n}\n","module.exports = function( THREE ){\n\n\t/**\n\t * @author qiao / https://github.com/qiao\n\t * @author mrdoob / http://mrdoob.com\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author erich666 / http://erichaines.com\n\t */\n\n\t// This set of controls performs orbiting, dollying (zooming), and panning.\n\t// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n\t//\n\t//    Orbit - left mouse / touch: one finger move\n\t//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n\t//    Pan - right mouse, or arrow keys / touch: three finter swipe\n\n\tTHREE.OrbitControls = function ( object, domElement ) {\n\n\t\tthis.object = object;\n\n\t\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\n\t\t// Set to false to disable this control\n\t\tthis.enabled = true;\n\n\t\t// \"target\" sets the location of focus, where the object orbits around\n\t\tthis.target = new THREE.Vector3();\n\n\t\t// How far you can dolly in and out ( PerspectiveCamera only )\n\t\tthis.minDistance = 0;\n\t\tthis.maxDistance = Infinity;\n\n\t\t// How far you can zoom in and out ( OrthographicCamera only )\n\t\tthis.minZoom = 0;\n\t\tthis.maxZoom = Infinity;\n\n\t\t// How far you can orbit vertically, upper and lower limits.\n\t\t// Range is 0 to Math.PI radians.\n\t\tthis.minPolarAngle = 0; // radians\n\t\tthis.maxPolarAngle = Math.PI; // radians\n\n\t\t// How far you can orbit horizontally, upper and lower limits.\n\t\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\t\tthis.minAzimuthAngle = - Infinity; // radians\n\t\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t\t// Set to true to enable damping (inertia)\n\t\t// If damping is enabled, you must call controls.update() in your animation loop\n\t\tthis.enableDamping = false;\n\t\tthis.dampingFactor = 0.25;\n\n\t\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t\t// Set to false to disable zooming\n\t\tthis.enableZoom = true;\n\t\tthis.zoomSpeed = 1.0;\n\n\t\t// Set to false to disable rotating\n\t\tthis.enableRotate = true;\n\t\tthis.rotateSpeed = 1.0;\n\n\t\t// Set to false to disable panning\n\t\tthis.enablePan = true;\n\t\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t\t// Set to true to automatically rotate around the target\n\t\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\t\tthis.autoRotate = false;\n\t\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t\t// Set to false to disable use of the keys\n\t\tthis.enableKeys = true;\n\n\t\t// The four arrow keys\n\t\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t\t// Mouse buttons\n\t\tthis.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };\n\n\t\t// for reset\n\t\tthis.target0 = this.target.clone();\n\t\tthis.position0 = this.object.position.clone();\n\t\tthis.zoom0 = this.object.zoom;\n\n\t\t//\n\t\t// public methods\n\t\t//\n\n\t\tthis.getPolarAngle = function () {\n\n\t\t\treturn spherical.phi;\n\n\t\t};\n\n\t\tthis.getAzimuthalAngle = function () {\n\n\t\t\treturn spherical.theta;\n\n\t\t};\n\n\t\tthis.reset = function () {\n\n\t\t\tscope.target.copy( scope.target0 );\n\t\t\tscope.object.position.copy( scope.position0 );\n\t\t\tscope.object.zoom = scope.zoom0;\n\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\tscope.update();\n\n\t\t\tstate = STATE.NONE;\n\n\t\t};\n\n\t\t// this method is exposed, but perhaps it would be better if we can make it private...\n\t\tthis.update = function() {\n\n\t\t\tvar offset = new THREE.Vector3();\n\n\t\t\t// so camera.up is the orbit axis\n\t\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\t\tvar quatInverse = quat.clone().inverse();\n\n\t\t\tvar lastPosition = new THREE.Vector3();\n\t\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\t\treturn function () {\n\n\t\t\t\tvar position = scope.object.position;\n\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t\t// angle from z-axis around y-axis\n\t\t\t\tspherical.setFromVector3( offset );\n\n\t\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t\t}\n\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t\t// restrict theta to be between desired limits\n\t\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\n\t\t\t\t// restrict phi to be between desired limits\n\t\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\t\tspherical.makeSafe();\n\n\n\t\t\t\tspherical.radius *= scale;\n\n\t\t\t\t// restrict radius to be between desired limits\n\t\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t\t// move target to panned location\n\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t\tscale = 1;\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t\t// update condition is:\n\t\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\t\tif ( zoomChanged ||\n\t\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\t\tzoomChanged = false;\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t};\n\n\t\t}();\n\n\t\tthis.dispose = function() {\n\n\t\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\t\tscope.domElement.removeEventListener( 'mousewheel', onMouseWheel, false );\n\t\t\tscope.domElement.removeEventListener( 'MozMousePixelScroll', onMouseWheel, false ); // firefox\n\n\t\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\t\t\tdocument.removeEventListener( 'mouseout', onMouseUp, false );\n\n\t\t\twindow.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t\t};\n\n\t\t//\n\t\t// internals\n\t\t//\n\n\t\tvar scope = this;\n\n\t\tvar changeEvent = { type: 'change' };\n\t\tvar startEvent = { type: 'start' };\n\t\tvar endEvent = { type: 'end' };\n\n\t\tvar STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\n\t\tvar state = STATE.NONE;\n\n\t\tvar EPS = 0.000001;\n\n\t\t// current position in spherical coordinates\n\t\tvar spherical = new THREE.Spherical();\n\t\tvar sphericalDelta = new THREE.Spherical();\n\n\t\tvar scale = 1;\n\t\tvar panOffset = new THREE.Vector3();\n\t\tvar zoomChanged = false;\n\n\t\tvar rotateStart = new THREE.Vector2();\n\t\tvar rotateEnd = new THREE.Vector2();\n\t\tvar rotateDelta = new THREE.Vector2();\n\n\t\tvar panStart = new THREE.Vector2();\n\t\tvar panEnd = new THREE.Vector2();\n\t\tvar panDelta = new THREE.Vector2();\n\n\t\tvar dollyStart = new THREE.Vector2();\n\t\tvar dollyEnd = new THREE.Vector2();\n\t\tvar dollyDelta = new THREE.Vector2();\n\n\t\tfunction getAutoRotationAngle() {\n\n\t\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t\t}\n\n\t\tfunction getZoomScale() {\n\n\t\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t\t}\n\n\t\tfunction rotateLeft( angle ) {\n\n\t\t\tsphericalDelta.theta -= angle;\n\n\t\t}\n\n\t\tfunction rotateUp( angle ) {\n\n\t\t\tsphericalDelta.phi -= angle;\n\n\t\t}\n\n\t\tvar panLeft = function() {\n\n\t\t\tvar v = new THREE.Vector3();\n\n\t\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\t\tv.multiplyScalar( - distance );\n\n\t\t\t\tpanOffset.add( v );\n\n\t\t\t};\n\n\t\t}();\n\n\t\tvar panUp = function() {\n\n\t\t\tvar v = new THREE.Vector3();\n\n\t\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix\n\t\t\t\tv.multiplyScalar( distance );\n\n\t\t\t\tpanOffset.add( v );\n\n\t\t\t};\n\n\t\t}();\n\n\t\t// deltaX and deltaY are in pixels; right and down are positive\n\t\tvar pan = function() {\n\n\t\t\tvar offset = new THREE.Vector3();\n\n\t\t\treturn function( deltaX, deltaY ) {\n\n\t\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\t\t// perspective\n\t\t\t\t\tvar position = scope.object.position;\n\t\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\n\t\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\t\t// orthographic\n\t\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\t\tscope.enablePan = false;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}();\n\n\t\tfunction dollyIn( dollyScale ) {\n\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\tscale /= dollyScale;\n\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction dollyOut( dollyScale ) {\n\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\tscale *= dollyScale;\n\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\t\t// event callbacks - update the object state\n\t\t//\n\n\t\tfunction handleMouseDownRotate( event ) {\n\n\t\t\t//console.log( 'handleMouseDownRotate' );\n\n\t\t\trotateStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseDownDolly( event ) {\n\n\t\t\t//console.log( 'handleMouseDownDolly' );\n\n\t\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseDownPan( event ) {\n\n\t\t\t//console.log( 'handleMouseDownPan' );\n\n\t\t\tpanStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseMoveRotate( event ) {\n\n\t\t\t//console.log( 'handleMouseMoveRotate' );\n\n\t\t\trotateEnd.set( event.clientX, event.clientY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseMoveDolly( event ) {\n\n\t\t\t//console.log( 'handleMouseMoveDolly' );\n\n\t\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseMovePan( event ) {\n\n\t\t\t//console.log( 'handleMouseMovePan' );\n\n\t\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseUp( event ) {\n\n\t\t\t//console.log( 'handleMouseUp' );\n\n\t\t}\n\n\t\tfunction handleMouseWheel( event ) {\n\n\t\t\t//console.log( 'handleMouseWheel' );\n\n\t\t\tvar delta = 0;\n\n\t\t\tif ( event.wheelDelta !== undefined ) {\n\n\t\t\t\t// WebKit / Opera / Explorer 9\n\n\t\t\t\tdelta = event.wheelDelta;\n\n\t\t\t} else if ( event.detail !== undefined ) {\n\n\t\t\t\t// Firefox\n\n\t\t\t\tdelta = - event.detail;\n\n\t\t\t}\n\n\t\t\tif ( delta > 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t} else if ( delta < 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleKeyDown( event ) {\n\n\t\t\t//console.log( 'handleKeyDown' );\n\n\t\t\tswitch ( event.keyCode ) {\n\n\t\t\t\tcase scope.keys.UP:\n\t\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.LEFT:\n\t\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.RIGHT:\n\t\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction handleTouchStartRotate( event ) {\n\n\t\t\t//console.log( 'handleTouchStartRotate' );\n\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t}\n\n\t\tfunction handleTouchStartDolly( event ) {\n\n\t\t\t//console.log( 'handleTouchStartDolly' );\n\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyStart.set( 0, distance );\n\n\t\t}\n\n\t\tfunction handleTouchStartPan( event ) {\n\n\t\t\t//console.log( 'handleTouchStartPan' );\n\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t}\n\n\t\tfunction handleTouchMoveRotate( event ) {\n\n\t\t\t//console.log( 'handleTouchMoveRotate' );\n\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleTouchMoveDolly( event ) {\n\n\t\t\t//console.log( 'handleTouchMoveDolly' );\n\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyEnd.set( 0, distance );\n\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleTouchMovePan( event ) {\n\n\t\t\t//console.log( 'handleTouchMovePan' );\n\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleTouchEnd( event ) {\n\n\t\t\t//console.log( 'handleTouchEnd' );\n\n\t\t}\n\n\t\t//\n\t\t// event handlers - FSM: listen for events and reset state\n\t\t//\n\n\t\tfunction onMouseDown( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( event.button === scope.mouseButtons.ORBIT ) {\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t} else if ( event.button === scope.mouseButtons.ZOOM ) {\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t} else if ( event.button === scope.mouseButtons.PAN ) {\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\tstate = STATE.PAN;\n\n\t\t\t}\n\n\t\t\tif ( state !== STATE.NONE ) {\n\n\t\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\t\t\t\tdocument.addEventListener( 'mouseout', onMouseUp, false );\n\n\t\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onMouseMove( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( state === STATE.ROTATE ) {\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t} else if ( state === STATE.DOLLY ) {\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t} else if ( state === STATE.PAN ) {\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onMouseUp( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\thandleMouseUp( event );\n\n\t\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\t\t\tdocument.removeEventListener( 'mouseout', onMouseUp, false );\n\n\t\t\tscope.dispatchEvent( endEvent );\n\n\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tfunction onMouseWheel( event ) {\n\n\t\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\n\t\t\thandleMouseWheel( event );\n\n\t\t\tscope.dispatchEvent( startEvent ); // not sure why these are here...\n\t\t\tscope.dispatchEvent( endEvent );\n\n\t\t}\n\n\t\tfunction onKeyDown( event ) {\n\n\t\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\t\thandleKeyDown( event );\n\n\t\t}\n\n\t\tfunction onTouchStart( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tswitch ( event.touches.length ) {\n\n\t\t\t\tcase 1:\t// one-fingered touch: rotate\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\t// two-fingered touch: dolly\n\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\t\thandleTouchStartDolly( event );\n\n\t\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t\tif ( state !== STATE.NONE ) {\n\n\t\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onTouchMove( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\n\t\t\tswitch ( event.touches.length ) {\n\n\t\t\t\tcase 1: // one-fingered touch: rotate\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...\n\n\t\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2: // two-fingered touch: dolly\n\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...\n\n\t\t\t\t\thandleTouchMoveDolly( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return; // is this needed?...\n\n\t\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onTouchEnd( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\thandleTouchEnd( event );\n\n\t\t\tscope.dispatchEvent( endEvent );\n\n\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tfunction onContextMenu( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t}\n\n\t\t//\n\n\t\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\t\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.addEventListener( 'mousewheel', onMouseWheel, false );\n\t\tscope.domElement.addEventListener( 'MozMousePixelScroll', onMouseWheel, false ); // firefox\n\n\t\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\t\twindow.addEventListener( 'keydown', onKeyDown, false );\n\n\t\t// force an update at start\n\n\t\tthis.update();\n\n\t};\n\n\tTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\n\tTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n\n\tObject.defineProperties( THREE.OrbitControls.prototype, {\n\n\t\tcenter: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .center has been renamed to .target' );\n\t\t\t\treturn this.target;\n\n\t\t\t}\n\n\t\t},\n\n\t\t// backward compatibility\n\n\t\tnoZoom: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\t\treturn ! this.enableZoom;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\t\tthis.enableZoom = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tnoRotate: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\t\treturn ! this.enableRotate;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\t\tthis.enableRotate = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tnoPan: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\t\treturn ! this.enablePan;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\t\tthis.enablePan = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tnoKeys: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\t\treturn ! this.enableKeys;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\t\tthis.enableKeys = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tstaticMoving : {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\t\treturn ! this.enableDamping;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\t\tthis.enableDamping = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tdynamicDampingFactor : {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\t\treturn this.dampingFactor;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\t\tthis.dampingFactor = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n};","module.exports = function( THREE ){\n\t// Parallax Occlusion shaders from\n\t//    http://sunandblackcat.com/tipFullView.php?topicid=28\n\t// No tangent-space transforms logic based on\n\t//   http://mmikkelsen3d.blogspot.sk/2012/02/parallaxpoc-mapping-and-no-tangent.html\n\n\tTHREE.ParallaxShader = {\n\t\t// Ordered from fastest to best quality.\n\t\tmodes: {\n\t\t\tnone:  'NO_PARALLAX',\n\t\t\tbasic: 'USE_BASIC_PARALLAX',\n\t\t\tsteep: 'USE_STEEP_PARALLAX',\n\t\t\tocclusion: 'USE_OCLUSION_PARALLAX', // a.k.a. POM\n\t\t\trelief: 'USE_RELIEF_PARALLAX',\n\t\t},\n\n\t\tuniforms: {\n\t\t\t\"bumpMap\": { type: \"t\", value: null },\n\t\t\t\"map\": { type: \"t\", value: null },\n\t\t\t\"parallaxScale\": { type: \"f\", value: null },\n\t\t\t\"parallaxMinLayers\": { type: \"f\", value: null },\n\t\t\t\"parallaxMaxLayers\": { type: \"f\", value: null }\n\t\t},\n\n\t\tvertexShader: [\n\t\t\t\"varying vec2 vUv;\",\n\t\t\t\"varying vec3 vViewPosition;\",\n\t\t\t\"varying vec3 vNormal;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\t\t\"vViewPosition = -mvPosition.xyz;\",\n\t\t\t\t\"vNormal = normalize( normalMatrix * normal );\",\n\t\t\t\t\"gl_Position = projectionMatrix * mvPosition;\",\n\n\t\t\t\"}\"\n\n\t  ].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\t\t\t\"uniform sampler2D bumpMap;\",\n\t\t\t\"uniform sampler2D map;\",\n\n\t\t\t\"uniform float parallaxScale;\",\n\t\t\t\"uniform float parallaxMinLayers;\",\n\t\t\t\"uniform float parallaxMaxLayers;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\t\t\t\"varying vec3 vViewPosition;\",\n\t\t\t\"varying vec3 vNormal;\",\n\n\t\t\t\"#ifdef USE_BASIC_PARALLAX\",\n\n\t\t\t\t\"vec2 parallaxMap( in vec3 V ) {\",\n\n\t\t\t\t\t\"float initialHeight = texture2D( bumpMap, vUv ).r;\",\n\n\t\t\t\t\t// No Offset Limitting: messy, floating output at grazing angles.\n\t\t\t\t\t//\"vec2 texCoordOffset = parallaxScale * V.xy / V.z * initialHeight;\",\n\n\t\t\t\t\t// Offset Limiting\n\t\t\t\t\t\"vec2 texCoordOffset = parallaxScale * V.xy * initialHeight;\",\n\t\t\t\t\t\"return vUv - texCoordOffset;\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\"#else\",\n\n\t\t\t\t\"vec2 parallaxMap( in vec3 V ) {\",\n\n\t\t\t\t\t// Determine number of layers from angle between V and N\n\t\t\t\t\t\"float numLayers = mix( parallaxMaxLayers, parallaxMinLayers, abs( dot( vec3( 0.0, 0.0, 1.0 ), V ) ) );\",\n\n\t\t\t\t\t\"float layerHeight = 1.0 / numLayers;\",\n\t\t\t\t\t\"float currentLayerHeight = 0.0;\",\n\t\t\t\t\t// Shift of texture coordinates for each iteration\n\t\t\t\t\t\"vec2 dtex = parallaxScale * V.xy / V.z / numLayers;\",\n\n\t\t\t\t\t\"vec2 currentTextureCoords = vUv;\",\n\n\t\t\t\t\t\"float heightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;\",\n\n\t\t\t\t\t// while ( heightFromTexture > currentLayerHeight )\n\t\t\t\t\t// Infinite loops are not well supported. Do a \"large\" finite\n\t\t\t\t\t// loop, but not too large, as it slows down some compilers.\n\t\t\t\t\t\"for ( int i = 0; i < 30; i += 1 ) {\",\n\t\t\t\t\t\t\"if ( heightFromTexture <= currentLayerHeight ) {\",\n\t\t\t\t\t\t\t\"break;\",\n\t\t\t\t\t\t\"}\",\n\t\t\t\t\t\t\"currentLayerHeight += layerHeight;\",\n\t\t\t\t\t\t// Shift texture coordinates along vector V\n\t\t\t\t\t\t\"currentTextureCoords -= dtex;\",\n\t\t\t\t\t\t\"heightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;\",\n\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\"#ifdef USE_STEEP_PARALLAX\",\n\n\t\t\t\t\t\t\"return currentTextureCoords;\",\n\n\t\t\t\t\t\"#elif defined( USE_RELIEF_PARALLAX )\",\n\n\t\t\t\t\t\t\"vec2 deltaTexCoord = dtex / 2.0;\",\n\t\t\t\t\t\t\"float deltaHeight = layerHeight / 2.0;\",\n\n\t\t\t\t\t\t// Return to the mid point of previous layer\n\t\t\t\t\t\t\"currentTextureCoords += deltaTexCoord;\",\n\t\t\t\t\t\t\"currentLayerHeight -= deltaHeight;\",\n\n\t\t\t\t\t\t// Binary search to increase precision of Steep Parallax Mapping\n\t\t\t\t\t\t\"const int numSearches = 5;\",\n\t\t\t\t\t\t\"for ( int i = 0; i < numSearches; i += 1 ) {\",\n\n\t\t\t\t\t\t\t\"deltaTexCoord /= 2.0;\",\n\t\t\t\t\t\t\t\"deltaHeight /= 2.0;\",\n\t\t\t\t\t\t\t\"heightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;\",\n\t\t\t\t\t\t\t// Shift along or against vector V\n\t\t\t\t\t\t\t\"if( heightFromTexture > currentLayerHeight ) {\", // Below the surface\n\n\t\t\t\t\t\t\t\t\"currentTextureCoords -= deltaTexCoord;\",\n\t\t\t\t\t\t\t\t\"currentLayerHeight += deltaHeight;\",\n\n\t\t\t\t\t\t\t\"} else {\", // above the surface\n\n\t\t\t\t\t\t\t\t\"currentTextureCoords += deltaTexCoord;\",\n\t\t\t\t\t\t\t\t\"currentLayerHeight -= deltaHeight;\",\n\n\t\t\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\t\"}\",\n\t\t\t\t\t\t\"return currentTextureCoords;\",\n\n\t\t\t\t\t\"#elif defined( USE_OCLUSION_PARALLAX )\",\n\n\t\t\t\t\t\t\"vec2 prevTCoords = currentTextureCoords + dtex;\",\n\n\t\t\t\t\t\t// Heights for linear interpolation\n\t\t\t\t\t\t\"float nextH = heightFromTexture - currentLayerHeight;\",\n\t\t\t\t\t\t\"float prevH = texture2D( bumpMap, prevTCoords ).r - currentLayerHeight + layerHeight;\",\n\n\t\t\t\t\t\t// Proportions for linear interpolation\n\t\t\t\t\t\t\"float weight = nextH / ( nextH - prevH );\",\n\n\t\t\t\t\t\t// Interpolation of texture coordinates\n\t\t\t\t\t\t\"return prevTCoords * weight + currentTextureCoords * ( 1.0 - weight );\",\n\n\t\t\t\t\t\"#else\", // NO_PARALLAX\n\n\t\t\t\t\t\t\"return vUv;\",\n\n\t\t\t\t\t\"#endif\",\n\n\t\t\t\t\"}\",\n\t\t\t\"#endif\",\n\n\t\t\t\"vec2 perturbUv( vec3 surfPosition, vec3 surfNormal, vec3 viewPosition ) {\",\n\n\t \t\t\t\"vec2 texDx = dFdx( vUv );\",\n\t\t\t\t\"vec2 texDy = dFdy( vUv );\",\n\n\t\t\t\t\"vec3 vSigmaX = dFdx( surfPosition );\",\n\t\t\t\t\"vec3 vSigmaY = dFdy( surfPosition );\",\n\t\t\t\t\"vec3 vR1 = cross( vSigmaY, surfNormal );\",\n\t\t\t\t\"vec3 vR2 = cross( surfNormal, vSigmaX );\",\n\t\t\t\t\"float fDet = dot( vSigmaX, vR1 );\",\n\n\t\t\t\t\"vec2 vProjVscr = ( 1.0 / fDet ) * vec2( dot( vR1, viewPosition ), dot( vR2, viewPosition ) );\",\n\t\t\t\t\"vec3 vProjVtex;\",\n\t\t\t\t\"vProjVtex.xy = texDx * vProjVscr.x + texDy * vProjVscr.y;\",\n\t\t\t\t\"vProjVtex.z = dot( surfNormal, viewPosition );\",\n\n\t\t\t\t\"return parallaxMap( vProjVtex );\",\n\t\t\t\"}\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec2 mapUv = perturbUv( -vViewPosition, normalize( vNormal ), normalize( vViewPosition ) );\",\n\t\t\t\t\"gl_FragColor = texture2D( map, mapUv );\",\n\n\t\t\t\"}\",\n\n\t  ].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author julianwa / https://github.com/julianwa\n\t */\n\n\tTHREE.RenderableObject = function () {\n\n\t\tthis.id = 0;\n\n\t\tthis.object = null;\n\t\tthis.z = 0;\n\t\tthis.renderOrder = 0;\n\n\t};\n\n\t//\n\n\tTHREE.RenderableFace = function () {\n\n\t\tthis.id = 0;\n\n\t\tthis.v1 = new THREE.RenderableVertex();\n\t\tthis.v2 = new THREE.RenderableVertex();\n\t\tthis.v3 = new THREE.RenderableVertex();\n\n\t\tthis.normalModel = new THREE.Vector3();\n\n\t\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\t\tthis.vertexNormalsLength = 0;\n\n\t\tthis.color = new THREE.Color();\n\t\tthis.material = null;\n\t\tthis.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\n\t\tthis.z = 0;\n\t\tthis.renderOrder = 0;\n\n\t};\n\n\t//\n\n\tTHREE.RenderableVertex = function () {\n\n\t\tthis.position = new THREE.Vector3();\n\t\tthis.positionWorld = new THREE.Vector3();\n\t\tthis.positionScreen = new THREE.Vector4();\n\n\t\tthis.visible = true;\n\n\t};\n\n\tTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\n\n\t\tthis.positionWorld.copy( vertex.positionWorld );\n\t\tthis.positionScreen.copy( vertex.positionScreen );\n\n\t};\n\n\t//\n\n\tTHREE.RenderableLine = function () {\n\n\t\tthis.id = 0;\n\n\t\tthis.v1 = new THREE.RenderableVertex();\n\t\tthis.v2 = new THREE.RenderableVertex();\n\n\t\tthis.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\t\tthis.material = null;\n\n\t\tthis.z = 0;\n\t\tthis.renderOrder = 0;\n\n\t};\n\n\t//\n\n\tTHREE.RenderableSprite = function () {\n\n\t\tthis.id = 0;\n\n\t\tthis.object = null;\n\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t\tthis.z = 0;\n\n\t\tthis.rotation = 0;\n\t\tthis.scale = new THREE.Vector2();\n\n\t\tthis.material = null;\n\t\tthis.renderOrder = 0;\n\n\t};\n\n\t//\n\n\tTHREE.Projector = function () {\n\n\t\tvar _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\n\t\t_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\n\t\t_face, _faceCount, _facePool = [], _facePoolLength = 0,\n\t\t_line, _lineCount, _linePool = [], _linePoolLength = 0,\n\t\t_sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,\n\n\t\t_renderData = { objects: [], lights: [], elements: [] },\n\n\t\t_vector3 = new THREE.Vector3(),\n\t\t_vector4 = new THREE.Vector4(),\n\n\t\t_clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ),\n\t\t_boundingBox = new THREE.Box3(),\n\t\t_points3 = new Array( 3 ),\n\t\t_points4 = new Array( 4 ),\n\n\t\t_viewMatrix = new THREE.Matrix4(),\n\t\t_viewProjectionMatrix = new THREE.Matrix4(),\n\n\t\t_modelMatrix,\n\t\t_modelViewProjectionMatrix = new THREE.Matrix4(),\n\n\t\t_normalMatrix = new THREE.Matrix3(),\n\n\t\t_frustum = new THREE.Frustum(),\n\n\t\t_clippedVertex1PositionScreen = new THREE.Vector4(),\n\t\t_clippedVertex2PositionScreen = new THREE.Vector4();\n\n\t\t//\n\n\t\tthis.projectVector = function ( vector, camera ) {\n\n\t\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\t\tvector.project( camera );\n\n\t\t};\n\n\t\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\t\tvector.unproject( camera );\n\n\t\t};\n\n\t\tthis.pickingRay = function ( vector, camera ) {\n\n\t\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t\t};\n\n\t\t//\n\n\t\tvar RenderList = function () {\n\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\tvar object = null;\n\t\t\tvar material = null;\n\n\t\t\tvar normalMatrix = new THREE.Matrix3();\n\n\t\t\tfunction setObject( value ) {\n\n\t\t\t\tobject = value;\n\t\t\t\tmaterial = object.material;\n\n\t\t\t\tnormalMatrix.getNormalMatrix( object.matrixWorld );\n\n\t\t\t\tnormals.length = 0;\n\t\t\t\tuvs.length = 0;\n\n\t\t\t}\n\n\t\t\tfunction projectVertex( vertex ) {\n\n\t\t\t\tvar position = vertex.position;\n\t\t\t\tvar positionWorld = vertex.positionWorld;\n\t\t\t\tvar positionScreen = vertex.positionScreen;\n\n\t\t\t\tpositionWorld.copy( position ).applyMatrix4( _modelMatrix );\n\t\t\t\tpositionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\tvar invW = 1 / positionScreen.w;\n\n\t\t\t\tpositionScreen.x *= invW;\n\t\t\t\tpositionScreen.y *= invW;\n\t\t\t\tpositionScreen.z *= invW;\n\n\t\t\t\tvertex.visible = positionScreen.x >= - 1 && positionScreen.x <= 1 &&\n\t\t\t\t\t\t positionScreen.y >= - 1 && positionScreen.y <= 1 &&\n\t\t\t\t\t\t positionScreen.z >= - 1 && positionScreen.z <= 1;\n\n\t\t\t}\n\n\t\t\tfunction pushVertex( x, y, z ) {\n\n\t\t\t\t_vertex = getNextVertexInPool();\n\t\t\t\t_vertex.position.set( x, y, z );\n\n\t\t\t\tprojectVertex( _vertex );\n\n\t\t\t}\n\n\t\t\tfunction pushNormal( x, y, z ) {\n\n\t\t\t\tnormals.push( x, y, z );\n\n\t\t\t}\n\n\t\t\tfunction pushUv( x, y ) {\n\n\t\t\t\tuvs.push( x, y );\n\n\t\t\t}\n\n\t\t\tfunction checkTriangleVisibility( v1, v2, v3 ) {\n\n\t\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;\n\n\t\t\t\t_points3[ 0 ] = v1.positionScreen;\n\t\t\t\t_points3[ 1 ] = v2.positionScreen;\n\t\t\t\t_points3[ 2 ] = v3.positionScreen;\n\n\t\t\t\treturn _clipBox.intersectsBox( _boundingBox.setFromPoints( _points3 ) );\n\n\t\t\t}\n\n\t\t\tfunction checkBackfaceCulling( v1, v2, v3 ) {\n\n\t\t\t\treturn ( ( v3.positionScreen.x - v1.positionScreen.x ) *\n\t\t\t\t\t    ( v2.positionScreen.y - v1.positionScreen.y ) -\n\t\t\t\t\t    ( v3.positionScreen.y - v1.positionScreen.y ) *\n\t\t\t\t\t    ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\n\n\t\t\t}\n\n\t\t\tfunction pushLine( a, b ) {\n\n\t\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\t\tvar v2 = _vertexPool[ b ];\n\n\t\t\t\t_line = getNextLineInPool();\n\n\t\t\t\t_line.id = object.id;\n\t\t\t\t_line.v1.copy( v1 );\n\t\t\t\t_line.v2.copy( v2 );\n\t\t\t\t_line.z = ( v1.positionScreen.z + v2.positionScreen.z ) / 2;\n\t\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t\t_line.material = object.material;\n\n\t\t\t\t_renderData.elements.push( _line );\n\n\t\t\t}\n\n\t\t\tfunction pushTriangle( a, b, c ) {\n\n\t\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\t\tvar v2 = _vertexPool[ b ];\n\t\t\t\tvar v3 = _vertexPool[ c ];\n\n\t\t\t\tif ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;\n\n\t\t\t\tif ( material.side === THREE.DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {\n\n\t\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t_face.v3.copy( v3 );\n\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t\t// use first vertex normal as face normal\n\n\t\t\t\t\t_face.normalModel.fromArray( normals, a * 3 );\n\t\t\t\t\t_face.normalModel.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\tfor ( var i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\tvar normal = _face.vertexNormalsModel[ i ];\n\t\t\t\t\t\tnormal.fromArray( normals, arguments[ i ] * 3 );\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\t\tvar uv = _face.uvs[ i ];\n\t\t\t\t\t\tuv.fromArray( uvs, arguments[ i ] * 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_face.vertexNormalsLength = 3;\n\n\t\t\t\t\t_face.material = object.material;\n\n\t\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tsetObject: setObject,\n\t\t\t\tprojectVertex: projectVertex,\n\t\t\t\tcheckTriangleVisibility: checkTriangleVisibility,\n\t\t\t\tcheckBackfaceCulling: checkBackfaceCulling,\n\t\t\t\tpushVertex: pushVertex,\n\t\t\t\tpushNormal: pushNormal,\n\t\t\t\tpushUv: pushUv,\n\t\t\t\tpushLine: pushLine,\n\t\t\t\tpushTriangle: pushTriangle\n\t\t\t}\n\n\t\t};\n\n\t\tvar renderList = new RenderList();\n\n\t\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\n\n\t\t\t_faceCount = 0;\n\t\t\t_lineCount = 0;\n\t\t\t_spriteCount = 0;\n\n\t\t\t_renderData.elements.length = 0;\n\n\t\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t\t_viewMatrix.copy( camera.matrixWorldInverse.getInverse( camera.matrixWorld ) );\n\t\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\n\t\t\t_frustum.setFromMatrix( _viewProjectionMatrix );\n\n\t\t\t//\n\n\t\t\t_objectCount = 0;\n\n\t\t\t_renderData.objects.length = 0;\n\t\t\t_renderData.lights.length = 0;\n\n\t\t\tscene.traverseVisible( function ( object ) {\n\n\t\t\t\tif ( object instanceof THREE.Light ) {\n\n\t\t\t\t\t_renderData.lights.push( object );\n\n\t\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Sprite ) {\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( material.visible === false ) return;\n\n\t\t\t\t\tif ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {\n\n\t\t\t\t\t\t_object = getNextObjectInPool();\n\t\t\t\t\t\t_object.id = object.id;\n\t\t\t\t\t\t_object.object = object;\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t\t_vector3.applyProjection( _viewProjectionMatrix );\n\t\t\t\t\t\t_object.z = _vector3.z;\n\t\t\t\t\t\t_object.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t_renderData.objects.push( _object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tif ( sortObjects === true ) {\n\n\t\t\t\t_renderData.objects.sort( painterSort );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfor ( var o = 0, ol = _renderData.objects.length; o < ol; o ++ ) {\n\n\t\t\t\tvar object = _renderData.objects[ o ].object;\n\t\t\t\tvar geometry = object.geometry;\n\n\t\t\t\trenderList.setObject( object );\n\n\t\t\t\t_modelMatrix = object.matrixWorld;\n\n\t\t\t\t_vertexCount = 0;\n\n\t\t\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tif ( attributes.position === undefined ) continue;\n\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( attributes.normal !== undefined ) {\n\n\t\t\t\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = normals.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( attributes.uv !== undefined ) {\n\n\t\t\t\t\t\t\tvar uvs = attributes.uv.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = uvs.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushUv( uvs[ i ], uvs[ i + 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\t\t\t\t\tfor ( var o = 0; o < groups.length; o ++ ) {\n\n\t\t\t\t\t\t\t\t\tvar group = groups[ o ];\n\n\t\t\t\t\t\t\t\t\tfor ( var i = group.start, l = group.start + group.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\n\t\t\t\t\t\t_normalMatrix.getNormalMatrix( _modelMatrix );\n\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tvar isFaceMaterial = material instanceof THREE.MultiMaterial;\n\t\t\t\t\t\tvar objectMaterials = isFaceMaterial === true ? object.material : null;\n\n\t\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\t\tvar vertex = vertices[ v ];\n\n\t\t\t\t\t\t\t_vector3.copy( vertex );\n\n\t\t\t\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\t\tvar target = morphTargets[ t ];\n\t\t\t\t\t\t\t\t\tvar targetVertex = target.vertices[ v ];\n\n\t\t\t\t\t\t\t\t\t_vector3.x += ( targetVertex.x - vertex.x ) * influence;\n\t\t\t\t\t\t\t\t\t_vector3.y += ( targetVertex.y - vertex.y ) * influence;\n\t\t\t\t\t\t\t\t\t_vector3.z += ( targetVertex.z - vertex.z ) * influence;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\trenderList.pushVertex( _vector3.x, _vector3.y, _vector3.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\t\tvar face = faces[ f ];\n\n\t\t\t\t\t\t\tmaterial = isFaceMaterial === true\n\t\t\t\t\t\t\t\t ? objectMaterials.materials[ face.materialIndex ]\n\t\t\t\t\t\t\t\t : object.material;\n\n\t\t\t\t\t\t\tif ( material === undefined ) continue;\n\n\t\t\t\t\t\t\tvar side = material.side;\n\n\t\t\t\t\t\t\tvar v1 = _vertexPool[ face.a ];\n\t\t\t\t\t\t\tvar v2 = _vertexPool[ face.b ];\n\t\t\t\t\t\t\tvar v3 = _vertexPool[ face.c ];\n\n\t\t\t\t\t\t\tif ( renderList.checkTriangleVisibility( v1, v2, v3 ) === false ) continue;\n\n\t\t\t\t\t\t\tvar visible = renderList.checkBackfaceCulling( v1, v2, v3 );\n\n\t\t\t\t\t\t\tif ( side !== THREE.DoubleSide ) {\n\n\t\t\t\t\t\t\t\tif ( side === THREE.FrontSide && visible === false ) continue;\n\t\t\t\t\t\t\t\tif ( side === THREE.BackSide && visible === true ) continue;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t\t\t_face.v3.copy( v3 );\n\n\t\t\t\t\t\t\t_face.normalModel.copy( face.normal );\n\n\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t\t_face.normalModel.negate();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_face.normalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\t\tvar faceVertexNormals = face.vertexNormals;\n\n\t\t\t\t\t\t\tfor ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {\n\n\t\t\t\t\t\t\t\tvar normalModel = _face.vertexNormalsModel[ n ];\n\t\t\t\t\t\t\t\tnormalModel.copy( faceVertexNormals[ n ] );\n\n\t\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t\t\tnormalModel.negate();\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tnormalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_face.vertexNormalsLength = faceVertexNormals.length;\n\n\t\t\t\t\t\t\tvar vertexUvs = faceVertexUvs[ f ];\n\n\t\t\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\t\t\tfor ( var u = 0; u < 3; u ++ ) {\n\n\t\t\t\t\t\t\t\t\t_face.uvs[ u ].copy( vertexUvs[ u ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_face.color = face.color;\n\t\t\t\t\t\t\t_face.material = material;\n\n\t\t\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\t\tvar attributes = geometry.attributes;\n\n\t\t\t\t\t\tif ( attributes.position !== undefined ) {\n\n\t\t\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushLine( indices[ i ], indices[ i + 1 ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = ( positions.length / 3 ) - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushLine( i, i + 1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\n\t\t\t\t\t\tvar vertices = object.geometry.vertices;\n\n\t\t\t\t\t\tif ( vertices.length === 0 ) continue;\n\n\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\tv1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\t\tfor ( var v = 1, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\t\tv1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\t\tif ( ( v + 1 ) % step > 0 ) continue;\n\n\t\t\t\t\t\t\tv2 = _vertexPool[ _vertexCount - 2 ];\n\n\t\t\t\t\t\t\t_clippedVertex1PositionScreen.copy( v1.positionScreen );\n\t\t\t\t\t\t\t_clippedVertex2PositionScreen.copy( v2.positionScreen );\n\n\t\t\t\t\t\t\tif ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\n\n\t\t\t\t\t\t\t\t// Perform the perspective divide\n\t\t\t\t\t\t\t\t_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\n\t\t\t\t\t\t\t\t_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\n\n\t\t\t\t\t\t\t\t_line = getNextLineInPool();\n\n\t\t\t\t\t\t\t\t_line.id = object.id;\n\t\t\t\t\t\t\t\t_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\n\t\t\t\t\t\t\t\t_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\n\n\t\t\t\t\t\t\t\t_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\n\t\t\t\t\t\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t\t\t_line.material = object.material;\n\n\t\t\t\t\t\t\t\tif ( object.material.vertexColors === THREE.VertexColors ) {\n\n\t\t\t\t\t\t\t\t\t_line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );\n\t\t\t\t\t\t\t\t\t_line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t_renderData.elements.push( _line );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\t\t_vector4.set( _modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1 );\n\t\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\t\tvar invW = 1 / _vector4.w;\n\n\t\t\t\t\t_vector4.z *= invW;\n\n\t\t\t\t\tif ( _vector4.z >= - 1 && _vector4.z <= 1 ) {\n\n\t\t\t\t\t\t_sprite = getNextSpriteInPool();\n\t\t\t\t\t\t_sprite.id = object.id;\n\t\t\t\t\t\t_sprite.x = _vector4.x * invW;\n\t\t\t\t\t\t_sprite.y = _vector4.y * invW;\n\t\t\t\t\t\t_sprite.z = _vector4.z;\n\t\t\t\t\t\t_sprite.renderOrder = object.renderOrder;\n\t\t\t\t\t\t_sprite.object = object;\n\n\t\t\t\t\t\t_sprite.rotation = object.rotation;\n\n\t\t\t\t\t\t_sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[ 0 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 12 ] ) );\n\t\t\t\t\t\t_sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[ 5 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 13 ] ) );\n\n\t\t\t\t\t\t_sprite.material = object.material;\n\n\t\t\t\t\t\t_renderData.elements.push( _sprite );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( sortElements === true ) {\n\n\t\t\t\t_renderData.elements.sort( painterSort );\n\n\t\t\t}\n\n\t\t\treturn _renderData;\n\n\t\t};\n\n\t\t// Pools\n\n\t\tfunction getNextObjectInPool() {\n\n\t\t\tif ( _objectCount === _objectPoolLength ) {\n\n\t\t\t\tvar object = new THREE.RenderableObject();\n\t\t\t\t_objectPool.push( object );\n\t\t\t\t_objectPoolLength ++;\n\t\t\t\t_objectCount ++;\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t\treturn _objectPool[ _objectCount ++ ];\n\n\t\t}\n\n\t\tfunction getNextVertexInPool() {\n\n\t\t\tif ( _vertexCount === _vertexPoolLength ) {\n\n\t\t\t\tvar vertex = new THREE.RenderableVertex();\n\t\t\t\t_vertexPool.push( vertex );\n\t\t\t\t_vertexPoolLength ++;\n\t\t\t\t_vertexCount ++;\n\t\t\t\treturn vertex;\n\n\t\t\t}\n\n\t\t\treturn _vertexPool[ _vertexCount ++ ];\n\n\t\t}\n\n\t\tfunction getNextFaceInPool() {\n\n\t\t\tif ( _faceCount === _facePoolLength ) {\n\n\t\t\t\tvar face = new THREE.RenderableFace();\n\t\t\t\t_facePool.push( face );\n\t\t\t\t_facePoolLength ++;\n\t\t\t\t_faceCount ++;\n\t\t\t\treturn face;\n\n\t\t\t}\n\n\t\t\treturn _facePool[ _faceCount ++ ];\n\n\n\t\t}\n\n\t\tfunction getNextLineInPool() {\n\n\t\t\tif ( _lineCount === _linePoolLength ) {\n\n\t\t\t\tvar line = new THREE.RenderableLine();\n\t\t\t\t_linePool.push( line );\n\t\t\t\t_linePoolLength ++;\n\t\t\t\t_lineCount ++;\n\t\t\t\treturn line;\n\n\t\t\t}\n\n\t\t\treturn _linePool[ _lineCount ++ ];\n\n\t\t}\n\n\t\tfunction getNextSpriteInPool() {\n\n\t\t\tif ( _spriteCount === _spritePoolLength ) {\n\n\t\t\t\tvar sprite = new THREE.RenderableSprite();\n\t\t\t\t_spritePool.push( sprite );\n\t\t\t\t_spritePoolLength ++;\n\t\t\t\t_spriteCount ++;\n\t\t\t\treturn sprite;\n\n\t\t\t}\n\n\t\t\treturn _spritePool[ _spriteCount ++ ];\n\n\t\t}\n\n\t\t//\n\n\t\tfunction painterSort( a, b ) {\n\n\t\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t\t} else if ( a.z !== b.z ) {\n\n\t\t\t\treturn b.z - a.z;\n\n\t\t\t} else if ( a.id !== b.id ) {\n\n\t\t\t\treturn a.id - b.id;\n\n\t\t\t} else {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction clipLine( s1, s2 ) {\n\n\t\t\tvar alpha1 = 0, alpha2 = 1,\n\n\t\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\n\t\t\t// Z = -1 and Z = +1, respectively.\n\t\t\tbc1near =  s1.z + s1.w,\n\t\t\tbc2near =  s2.z + s2.w,\n\t\t\tbc1far =  - s1.z + s1.w,\n\t\t\tbc2far =  - s2.z + s2.w;\n\n\t\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\n\n\t\t\t\t// Both vertices lie entirely within all clip planes.\n\t\t\t\treturn true;\n\n\t\t\t} else if ( ( bc1near < 0 && bc2near < 0 ) || ( bc1far < 0 && bc2far < 0 ) ) {\n\n\t\t\t\t// Both vertices lie entirely outside one of the clip planes.\n\t\t\t\treturn false;\n\n\t\t\t} else {\n\n\t\t\t\t// The line segment spans at least one clip plane.\n\n\t\t\t\tif ( bc1near < 0 ) {\n\n\t\t\t\t\t// v1 lies outside the near plane, v2 inside\n\t\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t\t} else if ( bc2near < 0 ) {\n\n\t\t\t\t\t// v2 lies outside the near plane, v1 inside\n\t\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( bc1far < 0 ) {\n\n\t\t\t\t\t// v1 lies outside the far plane, v2 inside\n\t\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t\t} else if ( bc2far < 0 ) {\n\n\t\t\t\t\t// v2 lies outside the far plane, v2 inside\n\t\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( alpha2 < alpha1 ) {\n\n\t\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\n\t\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\n\t\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\n\t\t\t\t\treturn false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\n\t\t\t\t\ts1.lerp( s2, alpha1 );\n\t\t\t\t\ts2.lerp( s1, 1 - alpha2 );\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n};","module.exports = function( THREE ){\n\t/**\n\t * @author felixturner / http://airtight.cc/\n\t *\n\t * RGB Shift Shader\n\t * Shifts red and blue channels from center in opposite directions\n\t * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\n\t * by Tom Butterworth / http://kriss.cx/tom/\n\t *\n\t * amount: shift distance (1 is width of input)\n\t * angle: shift angle in radians\n\t */\n\n\tTHREE.RGBShiftShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\"amount\":   { type: \"f\", value: 0.005 },\n\t\t\t\"angle\":    { type: \"f\", value: 0.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform float amount;\",\n\t\t\t\"uniform float angle;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec2 offset = amount * vec2( cos(angle), sin(angle));\",\n\t\t\t\t\"vec4 cr = texture2D(tDiffuse, vUv + offset);\",\n\t\t\t\t\"vec4 cga = texture2D(tDiffuse, vUv);\",\n\t\t\t\t\"vec4 cb = texture2D(tDiffuse, vUv - offset);\",\n\t\t\t\t\"gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.RenderPass = function ( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\tthis.clearColor = clearColor;\n\t\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 1;\n\n\t\tthis.oldClearColor = new THREE.Color();\n\t\tthis.oldClearAlpha = 1;\n\n\t\tthis.enabled = true;\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t};\n\n\tTHREE.RenderPass.prototype = {\n\n\t\trender: function ( renderer, writeBuffer, readBuffer, delta ) {\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t\tif ( this.clearColor ) {\n\n\t\t\t\tthis.oldClearColor.copy( renderer.getClearColor() );\n\t\t\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\n\t\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t\t}\n\n\t\t\trenderer.render( this.scene, this.camera, readBuffer, this.clear );\n\n\t\t\tif ( this.clearColor ) {\n\n\t\t\t\trenderer.setClearColor( this.oldClearColor, this.oldClearAlpha );\n\n\t\t\t}\n\n\t\t\tthis.scene.overrideMaterial = null;\n\n\t\t}\n\n\t};\n\n};","module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Screen-space ambient occlusion shader\n\t * - ported from\n\t *   SSAO GLSL shader v1.2\n\t *   assembled by Martins Upitis (martinsh) (http://devlog-martinsh.blogspot.com)\n\t *   original technique is made by ArKano22 (http://www.gamedev.net/topic/550699-ssao-no-halo-artifacts/)\n\t * - modifications\n\t * - modified to use RGBA packed depth texture (use clear color 1,1,1,1 for depth pass)\n\t * - refactoring and optimizations\n\t */\n\n\tTHREE.SSAOShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\":     { type: \"t\", value: null },\n\t\t\t\"tDepth\":       { type: \"t\", value: null },\n\t\t\t\"size\":         { type: \"v2\", value: new THREE.Vector2( 512, 512 ) },\n\t\t\t\"cameraNear\":   { type: \"f\", value: 1 },\n\t\t\t\"cameraFar\":    { type: \"f\", value: 100 },\n\t\t\t\"onlyAO\":       { type: \"i\", value: 0 },\n\t\t\t\"aoClamp\":      { type: \"f\", value: 0.5 },\n\t\t\t\"lumInfluence\": { type: \"f\", value: 0.5 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float cameraNear;\",\n\t\t\t\"uniform float cameraFar;\",\n\n\t\t\t\"uniform bool onlyAO;\",      // use only ambient occlusion pass?\n\n\t\t\t\"uniform vec2 size;\",        // texture width, height\n\t\t\t\"uniform float aoClamp;\",    // depth clamp - reduces haloing at screen edges\n\n\t\t\t\"uniform float lumInfluence;\",  // how much luminance affects occlusion\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform sampler2D tDepth;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t// \"#define PI 3.14159265\",\n\t\t\t\"#define DL 2.399963229728653\",  // PI * ( 3.0 - sqrt( 5.0 ) )\n\t\t\t\"#define EULER 2.718281828459045\",\n\n\t\t\t// user variables\n\n\t\t\t\"const int samples = 8;\",     // ao sample count\n\t\t\t\"const float radius = 5.0;\",  // ao radius\n\n\t\t\t\"const bool useNoise = false;\",      // use noise instead of pattern for sample dithering\n\t\t\t\"const float noiseAmount = 0.0003;\", // dithering amount\n\n\t\t\t\"const float diffArea = 0.4;\",   // self-shadowing reduction\n\t\t\t\"const float gDisplace = 0.4;\",  // gauss bell center\n\n\n\t\t\t// RGBA depth\n\n\t\t\t\"float unpackDepth( const in vec4 rgba_depth ) {\",\n\n\t\t\t\t\"const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\",\n\t\t\t\t\"float depth = dot( rgba_depth, bit_shift );\",\n\t\t\t\t\"return depth;\",\n\n\t\t\t\"}\",\n\n\t\t\t// generating noise / pattern texture for dithering\n\n\t\t\t\"vec2 rand( const vec2 coord ) {\",\n\n\t\t\t\t\"vec2 noise;\",\n\n\t\t\t\t\"if ( useNoise ) {\",\n\n\t\t\t\t\t\"float nx = dot ( coord, vec2( 12.9898, 78.233 ) );\",\n\t\t\t\t\t\"float ny = dot ( coord, vec2( 12.9898, 78.233 ) * 2.0 );\",\n\n\t\t\t\t\t\"noise = clamp( fract ( 43758.5453 * sin( vec2( nx, ny ) ) ), 0.0, 1.0 );\",\n\n\t\t\t\t\"} else {\",\n\n\t\t\t\t\t\"float ff = fract( 1.0 - coord.s * ( size.x / 2.0 ) );\",\n\t\t\t\t\t\"float gg = fract( coord.t * ( size.y / 2.0 ) );\",\n\n\t\t\t\t\t\"noise = vec2( 0.25, 0.75 ) * vec2( ff ) + vec2( 0.75, 0.25 ) * gg;\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\t\"return ( noise * 2.0  - 1.0 ) * noiseAmount;\",\n\n\t\t\t\"}\",\n\n\t\t\t\"float readDepth( const in vec2 coord ) {\",\n\n\t\t\t\t\"float cameraFarPlusNear = cameraFar + cameraNear;\",\n\t\t\t\t\"float cameraFarMinusNear = cameraFar - cameraNear;\",\n\t\t\t\t\"float cameraCoef = 2.0 * cameraNear;\",\n\n\t\t\t\t// \"return ( 2.0 * cameraNear ) / ( cameraFar + cameraNear - unpackDepth( texture2D( tDepth, coord ) ) * ( cameraFar - cameraNear ) );\",\n\t\t\t\t\"return cameraCoef / ( cameraFarPlusNear - unpackDepth( texture2D( tDepth, coord ) ) * cameraFarMinusNear );\",\n\n\n\t\t\t\"}\",\n\n\t\t\t\"float compareDepths( const in float depth1, const in float depth2, inout int far ) {\",\n\n\t\t\t\t\"float garea = 2.0;\",                         // gauss bell width\n\t\t\t\t\"float diff = ( depth1 - depth2 ) * 100.0;\",  // depth difference (0-100)\n\n\t\t\t\t// reduce left bell width to avoid self-shadowing\n\n\t\t\t\t\"if ( diff < gDisplace ) {\",\n\n\t\t\t\t\t\"garea = diffArea;\",\n\n\t\t\t\t\"} else {\",\n\n\t\t\t\t\t\"far = 1;\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\t\"float dd = diff - gDisplace;\",\n\t\t\t\t\"float gauss = pow( EULER, -2.0 * dd * dd / ( garea * garea ) );\",\n\t\t\t\t\"return gauss;\",\n\n\t\t\t\"}\",\n\n\t\t\t\"float calcAO( float depth, float dw, float dh ) {\",\n\n\t\t\t\t\"float dd = radius - depth * radius;\",\n\t\t\t\t\"vec2 vv = vec2( dw, dh );\",\n\n\t\t\t\t\"vec2 coord1 = vUv + dd * vv;\",\n\t\t\t\t\"vec2 coord2 = vUv - dd * vv;\",\n\n\t\t\t\t\"float temp1 = 0.0;\",\n\t\t\t\t\"float temp2 = 0.0;\",\n\n\t\t\t\t\"int far = 0;\",\n\t\t\t\t\"temp1 = compareDepths( depth, readDepth( coord1 ), far );\",\n\n\t\t\t\t// DEPTH EXTRAPOLATION\n\n\t\t\t\t\"if ( far > 0 ) {\",\n\n\t\t\t\t\t\"temp2 = compareDepths( readDepth( coord2 ), depth, far );\",\n\t\t\t\t\t\"temp1 += ( 1.0 - temp1 ) * temp2;\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\t\"return temp1;\",\n\n\t\t\t\"}\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec2 noise = rand( vUv );\",\n\t\t\t\t\"float depth = readDepth( vUv );\",\n\n\t\t\t\t\"float tt = clamp( depth, aoClamp, 1.0 );\",\n\n\t\t\t\t\"float w = ( 1.0 / size.x )  / tt + ( noise.x * ( 1.0 - noise.x ) );\",\n\t\t\t\t\"float h = ( 1.0 / size.y ) / tt + ( noise.y * ( 1.0 - noise.y ) );\",\n\n\t\t\t\t\"float ao = 0.0;\",\n\n\t\t\t\t\"float dz = 1.0 / float( samples );\",\n\t\t\t\t\"float z = 1.0 - dz / 2.0;\",\n\t\t\t\t\"float l = 0.0;\",\n\n\t\t\t\t\"for ( int i = 0; i <= samples; i ++ ) {\",\n\n\t\t\t\t\t\"float r = sqrt( 1.0 - z );\",\n\n\t\t\t\t\t\"float pw = cos( l ) * r;\",\n\t\t\t\t\t\"float ph = sin( l ) * r;\",\n\t\t\t\t\t\"ao += calcAO( depth, pw * w, ph * h );\",\n\t\t\t\t\t\"z = z - dz;\",\n\t\t\t\t\t\"l = l + DL;\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\t\"ao /= float( samples );\",\n\t\t\t\t\"ao = 1.0 - ao;\",\n\n\t\t\t\t\"vec3 color = texture2D( tDiffuse, vUv ).rgb;\",\n\n\t\t\t\t\"vec3 lumcoeff = vec3( 0.299, 0.587, 0.114 );\",\n\t\t\t\t\"float lum = dot( color.rgb, lumcoeff );\",\n\t\t\t\t\"vec3 luminance = vec3( lum );\",\n\n\t\t\t\t\"vec3 final = vec3( color * mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );\",  // mix( color * ao, white, luminance )\n\n\t\t\t\t\"if ( onlyAO ) {\",\n\n\t\t\t\t\t\"final = vec3( mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );\",  // ambient occlusion only\n\n\t\t\t\t\"}\",\n\n\t\t\t\t\"gl_FragColor = vec4( final, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author zz85 / http://joshuakoo.com/\n\t */\n\n\tTHREE.SVGLoader = function ( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t};\n\n\tTHREE.SVGLoader.prototype = {\n\n\t\tconstructor: THREE.SVGLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar parser = new DOMParser();\n\n\t\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\t\tloader.load( url, function ( svgString ) {\n\n\t\t\t\tvar doc = parser.parseFromString( svgString, 'image/svg+xml' );  // application/xml\n\n\t\t\t\tonLoad( doc.documentElement );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t};\n\n};","module.exports = function( THREE ){\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.SavePass = function ( renderTarget ) {\n\n\t\tif ( THREE.CopyShader === undefined )\n\t\t\tconsole.error( \"THREE.SavePass relies on THREE.CopyShader\" );\n\n\t\tvar shader = THREE.CopyShader;\n\n\t\tthis.textureID = \"tDiffuse\";\n\n\t\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t\tthis.renderTarget = renderTarget;\n\n\t\tif ( this.renderTarget === undefined ) {\n\n\t\t\tthis.renderTargetParameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat, stencilBuffer: false };\n\t\t\tthis.renderTarget = new THREE.WebGLRenderTarget( window.innerWidth, window.innerHeight, this.renderTargetParameters );\n\n\t\t}\n\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = false;\n\t\tthis.clear = false;\n\n\n\t\tthis.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tthis.scene  = new THREE.Scene();\n\n\t\tthis.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );\n\t\tthis.scene.add( this.quad );\n\n\t};\n\n\tTHREE.SavePass.prototype = {\n\n\t\trender: function ( renderer, writeBuffer, readBuffer, delta ) {\n\n\t\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\t\tthis.uniforms[ this.textureID ].value = readBuffer;\n\n\t\t\t}\n\n\t\t\tthis.quad.material = this.material;\n\n\t\t\trenderer.render( this.scene, this.camera, this.renderTarget, this.clear );\n\n\t\t}\n\n\t};\n\n};\n","module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Sepia tone shader\n\t * based on glfx.js sepia shader\n\t * https://github.com/evanw/glfx.js\n\t */\n\n\tTHREE.SepiaShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\"amount\":   { type: \"f\", value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float amount;\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 color = texture2D( tDiffuse, vUv );\",\n\t\t\t\t\"vec3 c = color.rgb;\",\n\n\t\t\t\t\"color.r = dot( c, vec3( 1.0 - 0.607 * amount, 0.769 * amount, 0.189 * amount ) );\",\n\t\t\t\t\"color.g = dot( c, vec3( 0.349 * amount, 1.0 - 0.314 * amount, 0.168 * amount ) );\",\n\t\t\t\t\"color.b = dot( c, vec3( 0.272 * amount, 0.534 * amount, 1.0 - 0.869 * amount ) );\",\n\n\t\t\t\t\"gl_FragColor = vec4( min( vec3( 1.0 ), color.rgb ), color.a );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.ShaderPass = function ( shader, textureID ) {\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : \"tDiffuse\";\n\n\t\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new THREE.ShaderMaterial( {\n\n\t\t\tdefines: shader.defines || {},\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t\tthis.renderToScreen = false;\n\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = true;\n\t\tthis.clear = false;\n\n\n\t\tthis.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tthis.scene  = new THREE.Scene();\n\n\t\tthis.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );\n\t\tthis.scene.add( this.quad );\n\n\t};\n\n\tTHREE.ShaderPass.prototype = {\n\n\t\trender: function ( renderer, writeBuffer, readBuffer, delta ) {\n\n\t\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\t\tthis.uniforms[ this.textureID ].value = readBuffer;\n\n\t\t\t}\n\n\t\t\tthis.quad.material = this.material;\n\n\t\t\tif ( this.renderToScreen ) {\n\n\t\t\t\trenderer.render( this.scene, this.camera );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( this.scene, this.camera, writeBuffer, this.clear );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n};\n","module.exports = function( THREE ){\n\t/**\n\t * @author flimshaw / http://charliehoey.com\n\t *\n\t * Technicolor Shader\n\t * Simulates the look of the two-strip technicolor process popular in early 20th century films.\n\t * More historical info here: http://www.widescreenmuseum.com/oldcolor/technicolor1.htm\n\t * Demo here: http://charliehoey.com/technicolor_shader/shader_test.html\n\t */\n\n\tTHREE.TechnicolorShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );\",\n\t\t\t\t\"vec4 newTex = vec4(tex.r, (tex.g + tex.b) * .5, (tex.g + tex.b) * .5, 1.0);\",\n\n\t\t\t\t\"gl_FragColor = newTex;\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.TexturePass = function ( texture, opacity ) {\n\n\t\tif ( THREE.CopyShader === undefined )\n\t\t\tconsole.error( \"THREE.TexturePass relies on THREE.CopyShader\" );\n\n\t\tvar shader = THREE.CopyShader;\n\n\t\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.uniforms[ \"opacity\" ].value = ( opacity !== undefined ) ? opacity : 1.0;\n\t\tthis.uniforms[ \"tDiffuse\" ].value = texture;\n\n\t\tthis.material = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = false;\n\n\n\t\tthis.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tthis.scene  = new THREE.Scene();\n\n\t\tthis.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );\n\t\tthis.scene.add( this.quad );\n\n\t};\n\n\tTHREE.TexturePass.prototype = {\n\n\t\trender: function ( renderer, writeBuffer, readBuffer, delta ) {\n\n\t\t\tthis.quad.material = this.material;\n\n\t\t\trenderer.render( this.scene, this.camera, readBuffer );\n\n\t\t}\n\n\t};\n\n};","module.exports = function( THREE ){\n\t/**\n\t * @author miibond\n\t *\n\t * Full-screen tone-mapping shader based on http://www.graphics.cornell.edu/~jaf/publications/sig02_paper.pdf\n\t */\n\n\tTHREE.ToneMapShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\"averageLuminance\":  { type: \"f\", value: 1.0 },\n\t\t\t\"luminanceMap\":  { type: \"t\", value: null },\n\t\t\t\"maxLuminance\":  { type: \"f\", value: 16.0 },\n\t\t\t\"middleGrey\":  { type: \"f\", value: 0.6 }\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"uniform float middleGrey;\",\n\t\t\t\"uniform float maxLuminance;\",\n\t\t\t\"#ifdef ADAPTED_LUMINANCE\",\n\t\t\t\t\"uniform sampler2D luminanceMap;\",\n\t\t\t\"#else\",\n\t\t\t\t\"uniform float averageLuminance;\",\n\t\t\t\"#endif\",\n\t\t\t\n\t\t\t\"const vec3 LUM_CONVERT = vec3(0.299, 0.587, 0.114);\",\n\n\t\t\t\"vec3 ToneMap( vec3 vColor ) {\",\n\t\t\t\t\"#ifdef ADAPTED_LUMINANCE\",\n\t\t\t\t\t// Get the calculated average luminance \n\t\t\t\t\t\"float fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;\",\n\t\t\t\t\"#else\",\n\t\t\t\t\t\"float fLumAvg = averageLuminance;\",\n\t\t\t\t\"#endif\",\n\t\t\t\t\n\t\t\t\t// Calculate the luminance of the current pixel\n\t\t\t\t\"float fLumPixel = dot(vColor, LUM_CONVERT);\",\n\n\t\t\t\t// Apply the modified operator (Eq. 4)\n\t\t\t\t\"float fLumScaled = (fLumPixel * middleGrey) / fLumAvg;\",\n\n\t\t\t\t\"float fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);\",\n\t\t\t\t\"return fLumCompressed * vColor;\",\n\t\t\t\"}\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 texel = texture2D( tDiffuse, vUv );\",\n\t\t\t\t\n\t\t\t\t\"gl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Triangle blur shader\n\t * based on glfx.js triangle blur shader\n\t * https://github.com/evanw/glfx.js\n\t *\n\t * A basic blur filter, which convolves the image with a\n\t * pyramid filter. The pyramid filter is separable and is applied as two\n\t * perpendicular triangle filters.\n\t */\n\n\tTHREE.TriangleBlurShader = {\n\n\t\tuniforms : {\n\n\t\t\t\"texture\": { type: \"t\", value: null },\n\t\t\t\"delta\":   { type: \"v2\", value: new THREE.Vector2( 1, 1 ) }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"#define ITERATIONS 10.0\",\n\n\t\t\t\"uniform sampler2D texture;\",\n\t\t\t\"uniform vec2 delta;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"float random( vec3 scale, float seed ) {\",\n\n\t\t\t\t// use the fragment position for a different seed per-pixel\n\n\t\t\t\t\"return fract( sin( dot( gl_FragCoord.xyz + seed, scale ) ) * 43758.5453 + seed );\",\n\n\t\t\t\"}\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 color = vec4( 0.0 );\",\n\n\t\t\t\t\"float total = 0.0;\",\n\n\t\t\t\t// randomize the lookup values to hide the fixed number of samples\n\n\t\t\t\t\"float offset = random( vec3( 12.9898, 78.233, 151.7182 ), 0.0 );\",\n\n\t\t\t\t\"for ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {\",\n\n\t\t\t\t\t\"float percent = ( t + offset - 0.5 ) / ITERATIONS;\",\n\t\t\t\t\t\"float weight = 1.0 - abs( percent );\",\n\n\t\t\t\t\t\"color += texture2D( texture, vUv + delta * percent ) * weight;\",\n\t\t\t\t\t\"total += weight;\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\t\"gl_FragColor = color / total;\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Unpack RGBA depth shader\n\t * - show RGBA encoded depth as monochrome color\n\t */\n\n\tTHREE.UnpackDepthRGBAShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\"opacity\":  { type: \"f\", value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float opacity;\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t// RGBA depth\n\n\t\t\t\"float unpackDepth( const in vec4 rgba_depth ) {\",\n\n\t\t\t\t\"const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\",\n\t\t\t\t\"float depth = dot( rgba_depth, bit_shift );\",\n\t\t\t\t\"return depth;\",\n\n\t\t\t\"}\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"float depth = 1.0 - unpackDepth( texture2D( tDiffuse, vUv ) );\",\n\t\t\t\t\"gl_FragColor = opacity * vec4( vec3( depth ), 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\n\t * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\n\t *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\n\t *\n\t * - 9 samples per pass\n\t * - standard deviation 2.7\n\t * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n\t */\n\n\tTHREE.VerticalBlurShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\"v\":        { type: \"f\", value: 1.0 / 512.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform float v;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 sum = vec4( 0.0 );\",\n\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;\",\n\n\t\t\t\t\"gl_FragColor = sum;\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Simple fake tilt-shift effect, modulating two pass Gaussian blur (see above) by vertical position\n\t *\n\t * - 9 samples per pass\n\t * - standard deviation 2.7\n\t * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n\t * - \"r\" parameter control where \"focused\" horizontal line lies\n\t */\n\n\tTHREE.VerticalTiltShiftShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\"v\":        { type: \"f\", value: 1.0 / 512.0 },\n\t\t\t\"r\":        { type: \"f\", value: 0.35 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform float v;\",\n\t\t\t\"uniform float r;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 sum = vec4( 0.0 );\",\n\n\t\t\t\t\"float vv = v * abs( r - vUv.y );\",\n\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\",\n\t\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\",\n\n\t\t\t\t\"gl_FragColor = sum;\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","module.exports = function( THREE ){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Vignette shader\n\t * based on PaintEffect postprocess from ro.me\n\t * http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js\n\t */\n\n\tTHREE.VignetteShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\"offset\":   { type: \"f\", value: 1.0 },\n\t\t\t\"darkness\": { type: \"f\", value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vUv = uv;\",\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float offset;\",\n\t\t\t\"uniform float darkness;\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t// Eskil's vignette\n\n\t\t\t\t\"vec4 texel = texture2D( tDiffuse, vUv );\",\n\t\t\t\t\"vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );\",\n\t\t\t\t\"gl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );\",\n\n\t\t\t\t/*\n\t\t\t\t// alternative version from glfx.js\n\t\t\t\t// this one makes more \"dusty\" look (as opposed to \"burned\")\n\n\t\t\t\t\"vec4 color = texture2D( tDiffuse, vUv );\",\n\t\t\t\t\"float dist = distance( vUv, vec2( 0.5 ) );\",\n\t\t\t\t\"color.rgb *= smoothstep( 0.8, offset * 0.799, dist *( darkness + offset ) );\",\n\t\t\t\t\"gl_FragColor = color;\",\n\t\t\t\t*/\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n}\n","var superPropBase = require(\"./superPropBase\");\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    module.exports = _get = Reflect.get;\n  } else {\n    module.exports = _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nmodule.exports = _get;","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nmodule.exports = _superPropBase;","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar React = __importStar(require(\"react\"));\nvar fast_deep_equal_1 = __importDefault(require(\"fast-deep-equal\"));\nvar PropTypes = __importStar(require(\"prop-types\"));\nfunction normalizeHtml(str) {\n    return str && str.replace(/&nbsp;|\\u202F|\\u00A0/g, ' ');\n}\nfunction findLastTextNode(node) {\n    if (node.nodeType === Node.TEXT_NODE)\n        return node;\n    var children = node.childNodes;\n    for (var i = children.length - 1; i >= 0; i--) {\n        var textNode = findLastTextNode(children[i]);\n        if (textNode !== null)\n            return textNode;\n    }\n    return null;\n}\nfunction replaceCaret(el) {\n    // Place the caret at the end of the element\n    var target = findLastTextNode(el);\n    // do not move caret if element was not focused\n    var isTargetFocused = document.activeElement === el;\n    if (target !== null && target.nodeValue !== null && isTargetFocused) {\n        var sel = window.getSelection();\n        if (sel !== null) {\n            var range = document.createRange();\n            range.setStart(target, target.nodeValue.length);\n            range.collapse(true);\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n        if (el instanceof HTMLElement)\n            el.focus();\n    }\n}\n/**\n * A simple component for an html element with editable contents.\n */\nvar ContentEditable = /** @class */ (function (_super) {\n    __extends(ContentEditable, _super);\n    function ContentEditable() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.lastHtml = _this.props.html;\n        _this.el = typeof _this.props.innerRef === 'function' ? { current: null } : React.createRef();\n        _this.getEl = function () { return (_this.props.innerRef && typeof _this.props.innerRef !== 'function' ? _this.props.innerRef : _this.el).current; };\n        _this.emitChange = function (originalEvt) {\n            var el = _this.getEl();\n            if (!el)\n                return;\n            var html = el.innerHTML;\n            if (_this.props.onChange && html !== _this.lastHtml) {\n                // Clone event with Object.assign to avoid\n                // \"Cannot assign to read only property 'target' of object\"\n                var evt = Object.assign({}, originalEvt, {\n                    target: {\n                        value: html\n                    }\n                });\n                _this.props.onChange(evt);\n            }\n            _this.lastHtml = html;\n        };\n        return _this;\n    }\n    ContentEditable.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, tagName = _a.tagName, html = _a.html, innerRef = _a.innerRef, props = __rest(_a, [\"tagName\", \"html\", \"innerRef\"]);\n        return React.createElement(tagName || 'div', __assign({}, props, { ref: typeof innerRef === 'function' ? function (current) {\n                innerRef(current);\n                _this.el.current = current;\n            } : innerRef || this.el, onInput: this.emitChange, onBlur: this.props.onBlur || this.emitChange, onKeyUp: this.props.onKeyUp || this.emitChange, onKeyDown: this.props.onKeyDown || this.emitChange, contentEditable: !this.props.disabled, dangerouslySetInnerHTML: { __html: html } }), this.props.children);\n    };\n    ContentEditable.prototype.shouldComponentUpdate = function (nextProps) {\n        var props = this.props;\n        var el = this.getEl();\n        // We need not rerender if the change of props simply reflects the user's edits.\n        // Rerendering in this case would make the cursor/caret jump\n        // Rerender if there is no element yet... (somehow?)\n        if (!el)\n            return true;\n        // ...or if html really changed... (programmatically, not by user edit)\n        if (normalizeHtml(nextProps.html) !== normalizeHtml(el.innerHTML)) {\n            return true;\n        }\n        // Handle additional properties\n        return props.disabled !== nextProps.disabled ||\n            props.tagName !== nextProps.tagName ||\n            props.className !== nextProps.className ||\n            props.innerRef !== nextProps.innerRef ||\n            !fast_deep_equal_1.default(props.style, nextProps.style);\n    };\n    ContentEditable.prototype.componentDidUpdate = function () {\n        var el = this.getEl();\n        if (!el)\n            return;\n        // Perhaps React (whose VDOM gets outdated because we often prevent\n        // rerendering) did not update the DOM. So we update it manually now.\n        if (this.props.html !== el.innerHTML) {\n            el.innerHTML = this.lastHtml = this.props.html;\n        }\n        replaceCaret(el);\n    };\n    ContentEditable.propTypes = {\n        html: PropTypes.string.isRequired,\n        onChange: PropTypes.func,\n        disabled: PropTypes.bool,\n        tagName: PropTypes.string,\n        className: PropTypes.string,\n        style: PropTypes.object,\n        innerRef: PropTypes.oneOfType([\n            PropTypes.object,\n            PropTypes.func,\n        ])\n    };\n    return ContentEditable;\n}(React.Component));\nexports.default = ContentEditable;\n","'use strict';\n\nvar isArray = Array.isArray;\nvar keyList = Object.keys;\nvar hasProp = Object.prototype.hasOwnProperty;\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  var arrA = isArray(a)\n    , arrB = isArray(b)\n    , i\n    , length\n    , key;\n\n  if (arrA && arrB) {\n    length = a.length;\n    if (length != b.length) return false;\n    for (i = 0; i < length; i++)\n      if (!equal(a[i], b[i])) return false;\n    return true;\n  }\n\n  if (arrA != arrB) return false;\n\n  var dateA = a instanceof Date\n    , dateB = b instanceof Date;\n  if (dateA != dateB) return false;\n  if (dateA && dateB) return a.getTime() == b.getTime();\n\n  var regexpA = a instanceof RegExp\n    , regexpB = b instanceof RegExp;\n  if (regexpA != regexpB) return false;\n  if (regexpA && regexpB) return a.toString() == b.toString();\n\n  if (a instanceof Object && b instanceof Object) {\n    var keys = keyList(a);\n    length = keys.length;\n\n    if (length !== keyList(b).length)\n      return false;\n\n    for (i = 0; i < length; i++)\n      if (!hasProp.call(b, keys[i])) return false;\n\n    for (i = 0; i < length; i++) {\n      key = keys[i];\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  return false;\n};\n","module.exports = function() {\n\tthrow new Error(\"define cannot be used indirect\");\n};\n","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","(function( self ){\n\n\tvar THREE = require(\"./three.js\");\n\n\tmodule.exports = function( addons ){\n\n\t\tif( addons instanceof Array ){\n\n\t\t\tfor( var addonIndex = 0, length = addons.length; addonIndex < length; addonIndex++ ){\n\t\t\t\t\n\t\t\t\tvar addon = addons[addonIndex];\n\t\t\t\t\n\t\t\t\tif( addon instanceof Function ){\n\n\t\t\t\t\taddon(THREE);\n\n\t\t\t\t}\n\t\t\t\telse if( typeof addon === \"string\" ){\n\n\t\t\t\t\trequire(\"./addons/\" + addon + \".js\")(THREE);\n\n\t\t\t\t}\n\t\t\t\telse {\n\n\t\t\t\t\tthrow new Error(\"Invalid module type provided\");\n\n\t\t\t\t};\n\t\t\t\t\n\t\t\t};\n\n\t\t};\n\n\t\treturn THREE;\n\n\t};\n\n})(this || {});\n"],"sourceRoot":""}