{"version":3,"sources":["webpack:///./node_modules/snapsvg/dist/snap.svg.js"],"names":["__WEBPACK_LOCAL_MODULE_0__","__WEBPACK_AMD_DEFINE_RESULT__","current_event","stop","has","separator","comaseparator","numsort","events","firstDefined","lastDefined","objtos","Str","isArray","glob","module","exports","a","b","n","i","ii","this","length","Object","prototype","toString","String","Array","ar","call","eve","name","scope","l","oldstop","args","slice","arguments","listeners","z","indexed","queue","out","ce","push","zIndex","sort","apply","_events","item","items","k","j","jj","nes","names","split","e","es","concat","f","sep","replace","RegExp","on","exist","hasOwnProperty","event","attrs","nt","subname","cur","join","test","nts","off","unbind","key","splice","inodes","unshift","funcs","prune","once","f2","version","window","undefined","mina","requestID","animations","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","setTimeout","Date","getTime","idgen","idprefix","timer","now","sta","val","s","ds","dur","B","speed","spd","duration","stopit","id","update","pause","pdif","get","resume","frame","res","start","end","easing","set","timeStamp","len","A","anim","linear","status","time","getById","easeout","Math","pow","easein","easeinout","q","Q","sqrt","x","X","abs","y","Y","t","backin","backout","elastic","sin","PI","bounce","p","Snap","root","w","h","nodeType","wrap","is","Element","doc","querySelector","Paper","_","win","document","tokenRegex","objNotationRegex","toFloat","parseFloat","toInt","parseInt","math","mmax","max","mmin","min","E","round","objectToString","colourRegExp","commaSpaces","hsrg","hs","rg","pathCommand","tCommand","pathValues","ID","el","type","xlink","xmlns","hub","$","attr","createTextNode","text","createComment","substring","getAttributeNS","getAttribute","nodeValue","setAttributeNS","setAttribute","removeAttribute","createElementNS","o","toLowerCase","isFinite","cacher","postprocessor","newf","arg","cache","count","array","repush","shift","rad","deg","url","format","str","obj","all","quote","quotedName","isFunc","replacer","clone","constructor","angle","tan","cos","asin","num","acos","atan","atan2","x1","y1","x2","y2","x3","y3","len2","closestPoint","path","distance2","dx","dy","best","bestLength","scan","scanDistance","pathNode","node","pathLength","getTotalLength","precision","pathSegList","numberOfItems","bestDistance","Infinity","scanLength","getPointAtLength","before","after","beforeLength","afterLength","beforeDistance","afterDistance","distance","snapTo","values","value","tolerance","rem","getRGB","colour","indexOf","r","g","hex","error","rgbtoString","charAt","toHex","red","green","blue","opacity","rgb","match","hsb2rgb","hsl2rgb","hsb","hsl","toFixed","color","getElementsByTagName","style","defaultView","getComputedStyle","getPropertyValue","hsbtoString","hsltoString","prepareRGB","string","clr","packageRGB","rgb2hsl","rgb2hsb","v","R","G","C","V","L","M","m","parsePathString","pathString","pth","arr","paramCounts","c","u","data","params","parseTransformString","TString","getSomeSVG","ownerSVGElement","select","add2group","list","forEach","appendChild","children","childNodes","snap","svg","paper","tagName","nodeName","anims","transform","add","mask","pattern","symbol","method","Fragment","frag","make","parent","desc","defs","proto","ownerDocument","body","height","width","dom","contentDocument","svgTransform2string","tstr","rgTransform","transform2matrix","bbox","tdata","Matrix","bb","tlen","command","absolute","inver","invert","translate","rotate","scale","_unit2px","mgr","getW","getBBox","getH","nam","class","fill","removeChild","contains","compareDocumentPosition","getSomeDefs","parentNode","pdefs","query","selectAll","nodelist","querySelectorAll","setInterval","attributes","json","att","parse","createDocumentFragment","full","div","createElement","innerHTML","firstChild","fragment","ch","toJSON","jsonFiller","css","lastIndexOf","letter","cssAttr","alignment-baseline","baseline-shift","clip","clip-path","clip-rule","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cursor","direction","display","dominant-baseline","enable-background","fill-opacity","fill-rule","filter","flood-color","flood-opacity","font","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","glyph-orientation-horizontal","glyph-orientation-vertical","image-rendering","kerning","letter-spacing","lighting-color","marker","marker-end","marker-mid","marker-start","overflow","pointer-events","shape-rendering","stop-color","stop-opacity","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-anchor","text-decoration","text-rendering","unicode-bidi","visibility","word-spacing","writing-mode","toUpperCase","ajax","postData","req","XMLHttpRequest","pd","encodeURIComponent","open","setRequestHeader","onreadystatechange","readyState","send","load","responseText","getElementByPoint","canvas","elem","box","docElem","clientTop","clientLeft","top","left","target","elementFromPoint","opera","so","getBoundingClientRect","documentElement","pageYOffset","scrollTop","pageXOffset","scrollLeft","sr","createSVGRect","hits","getIntersectionList","plugin","elproto","unit2px","isWithoutTransform","getClientRects","removed","localMatrix","original","href","getElementById","pathfinder","deflt","bboxwt","realPath","matrix","map","propString","extractTransform","doReturn","papa","global","getCTM","local","ms","localString","toTransformString","globalMatrix","totalMatrix","diffMatrix","total","gradientTransform","patternTransform","append","it","appendTo","prepend","first","insertBefore","prependTo","nextSibling","insertAfter","remove","asPX","use","xlink:href","cloneNode","els","ids","uses","urltest","linktest","oldid","old","fs","fixids","toDefs","toPattern","patternUnits","viewBox","refX","refY","cx","cy","markerWidth","markerHeight","orient","eldata","chld","removeData","outerSVG","innerSVG","toDataURL","btoa","contents","unescape","from","to","Animation","animation","inAnim","_attrs","_callback","curStatus","animate","setter","eq","fkeys","tkeys","keys","equal","d","matrixproto","norm","normalize","mag","aNew","bNew","multLeft","cNew","eNew","me","skewX","skew","skewY","fromCharCode","offset","determinant","row","scalex","shear","scaley","isSimple","isSuperSimple","noRotation","shorter","clipIt","reURLValue","URL","fillStroke","grad","gradient","deurl","gradrg","setFontSize","fontSize","getFontSize","tokens","stops","seed","step","toAbsolute","txt","className","baseVal","vb","rx","ry","tp","textPath","tuner","chunk","tuned","getter","textExtract","chi","textContent","internal","rgNotSpace","addClass","clazz","finalValue","classes","curClasses","removeClass","pos","hasClass","toggleClass","flag","operators","+","-","/","*","reUnit","reAddon","getNumber","getUnit","unit","plus","evnt","atr","aUnit","op","isNaN","bplus","rect","circle","preload","onerror","src","img","cssText","onload","image","preserveAspectRatio","offsetWidth","offsetHeight","ellipse","group","vbx","vby","vbw","vbh","ptrn","vx","vy","vw","vh","line","polyline","points","polygon","Gstops","GaddStop","inserted","GgetBBox","GsetStops","addStop","gradientLinear","setStops","gradientRadial","fx","fy","gradientUnits","clear","next","p2s","paths","ps","sleep","r1","r2","r0","rectPath","pathClone","pathArray","getPointAtSegmentLength","p1x","p1y","c1x","c1y","c2x","c2y","p2x","p2y","bezlen","findDotsAtSegment","x4","y4","ll","t2","getTotLen","getLengthFactory","istotal","subpath","O","onlystart","point","sp","subpaths","path2curve","getSubpathsAtLength","t1","t13","t12","t3","mx","my","nx","ny","alpha","bezierBBox","curveDim","isPointInsideBBox","isBBoxIntersect","bbox1","bbox2","base3","p1","p2","p3","p4","z2","Tvalues","Cvalues","sum","ct","xbase","ybase","comb","intersect","denominator","px","py","px2","py2","interHelper","bez1","bez2","justCount","n1","n2","dots1","dots2","xy","di","di1","dj","dj1","ci","cj","interPathHelper","path1","path2","x1m","y1m","x2m","y2m","pi","pj","intr","kk","segment1","segment2","pathBBox","dim","xmin","ymin","ellipsePath","getPath","pathToAbsolute","pa0","pa","crz","dots","pop","catmullRom2bezier","l2c","q2c","ax","ay","x0","y0","b2ac","sqrtb2ac","tvalues","bounds","mt","jlen","curve","bx","by","qx","qy","attrs2","processPath","pcom","T","a2c","large_arc_flag","sweep_flag","recursive","_120","f1","rx2","ry2","df","f2old","x2old","y2old","c1","s1","c2","s2","hx","hy","m1","m2","m3","m4","newres","fixArc","pp","pcoms1","pcoms2","fixM","a1","a2","pfirst","seg","seg2","seglen","seg2len","crp","iLen","getSubpath","closest","inside","found","intersection","intersectionNumber","isPointInside","toRelative","lowerCase","rel","toCubic","pathi","Set","bindings","setproto","thisArg","each","begin","handler","cb","callbacker","bind","aname","unbound","index","insertion","tail","todel","arglen","exclude","getEmpty","getViewBox","getColour","Function","path2array","isNumeric","Number","tt1","tt2","maxlength","equaliseTransform","arr1","arr2","bUnit","supportsTouch","touchMap","mousedown","mousemove","mouseup","getScroll","preventTouch","originalEvent","preventDefault","stopTouch","stopPropagation","addEvent","fn","element","realName","scrollY","scrollX","targetTouches","olde","clientX","clientY","addEventListener","removeEventListener","drag","dragMove","dragi","touch","touches","identifier","_drag","move_scope","dragUp","unmousemove","unmouseup","end_scope","start_scope","eventName","hover","f_in","f_out","scope_in","scope_out","mouseover","mouseout","unhover","unmouseover","unmouseout","draggable","onmove","onstart","onend","origTransform","init","undrag","unmousedown","pproto","rgurl","filstr","filterUnits","blur","def","shadow","grayscale","amount","sepia","saturate","hueRotate","amount2","brightness","contrast","firstLetter","getAlign","way","align","saveColor","colors","A100","A200","A400","A700","mui","flat","pink","purple","deeppurple","indigo","lightblue","cyan","teal","lightgreen","lime","yellow","amber","orange","deeporange","brown","grey","bluegrey","turquoise","greensea","sunflower","emerland","nephritis","carrot","pumpkin","peterriver","belizehole","alizarin","pomegranate","amethyst","wisteria","clouds","silver","wetasphalt","midnightblue","concrete","asbestos","importMUIColors","factory"],"mappings":"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","file":"7.js","sourcesContent":["/*** IMPORTS FROM imports-loader ***/\n(function() {\nvar fix = module.exports=0;\n\n// Snap.svg 0.5.0\n//\n// Copyright (c) 2013 – 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// build: 2017-02-06\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// ┌────────────────────────────────────────────────────────────┐ \\\\\n// │ Eve 0.5.0 - JavaScript Events Library                      │ \\\\\n// ├────────────────────────────────────────────────────────────┤ \\\\\n// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n// └────────────────────────────────────────────────────────────┘ \\\\\n\n(function (glob) {\n    var version = \"0.5.0\",\n        has = \"hasOwnProperty\",\n        separator = /[\\.\\/]/,\n        comaseparator = /\\s*,\\s*/,\n        wildcard = \"*\",\n        fun = function () {},\n        numsort = function (a, b) {\n            return a - b;\n        },\n        current_event,\n        stop,\n        events = {n: {}},\n        firstDefined = function () {\n            for (var i = 0, ii = this.length; i < ii; i++) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        lastDefined = function () {\n            var i = this.length;\n            while (--i) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        objtos = Object.prototype.toString,\n        Str = String,\n        isArray = Array.isArray || function (ar) {\n            return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n        };\n    /*\\\n     * eve\n     [ method ]\n\n     * Fires event with given `name`, given scope and other parameters.\n\n     > Arguments\n\n     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n     - scope (object) context for the event handlers\n     - varargs (...) the rest of arguments will be sent to event handlers\n\n     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n    \\*/\n        eve = function (name, scope) {\n            var e = events,\n                oldstop = stop,\n                args = Array.prototype.slice.call(arguments, 2),\n                listeners = eve.listeners(name),\n                z = 0,\n                f = false,\n                l,\n                indexed = [],\n                queue = {},\n                out = [],\n                ce = current_event,\n                errors = [];\n            out.firstDefined = firstDefined;\n            out.lastDefined = lastDefined;\n            current_event = name;\n            stop = 0;\n            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n                indexed.push(listeners[i].zIndex);\n                if (listeners[i].zIndex < 0) {\n                    queue[listeners[i].zIndex] = listeners[i];\n                }\n            }\n            indexed.sort(numsort);\n            while (indexed[z] < 0) {\n                l = queue[indexed[z++]];\n                out.push(l.apply(scope, args));\n                if (stop) {\n                    stop = oldstop;\n                    return out;\n                }\n            }\n            for (i = 0; i < ii; i++) {\n                l = listeners[i];\n                if (\"zIndex\" in l) {\n                    if (l.zIndex == indexed[z]) {\n                        out.push(l.apply(scope, args));\n                        if (stop) {\n                            break;\n                        }\n                        do {\n                            z++;\n                            l = queue[indexed[z]];\n                            l && out.push(l.apply(scope, args));\n                            if (stop) {\n                                break;\n                            }\n                        } while (l)\n                    } else {\n                        queue[l.zIndex] = l;\n                    }\n                } else {\n                    out.push(l.apply(scope, args));\n                    if (stop) {\n                        break;\n                    }\n                }\n            }\n            stop = oldstop;\n            current_event = ce;\n            return out;\n        };\n        // Undocumented. Debug only.\n        eve._events = events;\n    /*\\\n     * eve.listeners\n     [ method ]\n\n     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n     > Arguments\n\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n     = (array) array of event handlers\n    \\*/\n    eve.listeners = function (name) {\n        var names = isArray(name) ? name : name.split(separator),\n            e = events,\n            item,\n            items,\n            k,\n            i,\n            ii,\n            j,\n            jj,\n            nes,\n            es = [e],\n            out = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            nes = [];\n            for (j = 0, jj = es.length; j < jj; j++) {\n                e = es[j].n;\n                items = [e[names[i]], e[wildcard]];\n                k = 2;\n                while (k--) {\n                    item = items[k];\n                    if (item) {\n                        nes.push(item);\n                        out = out.concat(item.f || []);\n                    }\n                }\n            }\n            es = nes;\n        }\n        return out;\n    };\n    /*\\\n     * eve.separator\n     [ method ]\n\n     * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n     * here. Be aware that if you pass a string longer than one character it will be treated as\n     * a list of characters.\n\n     - separator (string) new separator. Empty string resets to default: `.` or `/`.\n    \\*/\n    eve.separator = function (sep) {\n        if (sep) {\n            sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n            sep = \"[\" + sep + \"]\";\n            separator = new RegExp(sep);\n        } else {\n            separator = /[\\.\\/]/;\n        }\n    };\n    /*\\\n     * eve.on\n     [ method ]\n     **\n     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n     | eve.on(\"*.under.*\", f);\n     | eve(\"mouse.under.floor\"); // triggers f\n     * Use @eve to trigger the listener.\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     - name (array) if you don’t want to use separators, you can use array of strings\n     - f (function) event handler function\n     **\n     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n     > Example:\n     | eve.on(\"mouse\", eatIt)(2);\n     | eve.on(\"mouse\", scream);\n     | eve.on(\"mouse\", catchIt)(1);\n     * This will ensure that `catchIt` function will be called before `eatIt`.\n     *\n     * If you want to put your handler before non-indexed handlers, specify a negative value.\n     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n    \\*/\n    eve.on = function (name, f) {\n        if (typeof f != \"function\") {\n            return function () {};\n        }\n        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n        for (var i = 0, ii = names.length; i < ii; i++) {\n            (function (name) {\n                var names = isArray(name) ? name : Str(name).split(separator),\n                    e = events,\n                    exist;\n                for (var i = 0, ii = names.length; i < ii; i++) {\n                    e = e.n;\n                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n                }\n                e.f = e.f || [];\n                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n                    exist = true;\n                    break;\n                }\n                !exist && e.f.push(f);\n            }(names[i]));\n        }\n        return function (zIndex) {\n            if (+zIndex == +zIndex) {\n                f.zIndex = +zIndex;\n            }\n        };\n    };\n    /*\\\n     * eve.f\n     [ method ]\n     **\n     * Returns function that will fire given event with optional arguments.\n     * Arguments that will be passed to the result function will be also\n     * concated to the list of final arguments.\n     | el.onclick = eve.f(\"click\", 1, 2);\n     | eve.on(\"click\", function (a, b, c) {\n     |     console.log(a, b, c); // 1, 2, [event object]\n     | });\n     > Arguments\n     - event (string) event name\n     - varargs (…) and any other arguments\n     = (function) possible event handler function\n    \\*/\n    eve.f = function (event) {\n        var attrs = [].slice.call(arguments, 1);\n        return function () {\n            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n        };\n    };\n    /*\\\n     * eve.stop\n     [ method ]\n     **\n     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n    \\*/\n    eve.stop = function () {\n        stop = 1;\n    };\n    /*\\\n     * eve.nt\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     > Arguments\n     **\n     - subname (string) #optional subname of the event\n     **\n     = (string) name of the event, if `subname` is not specified\n     * or\n     = (boolean) `true`, if current event’s name contains `subname`\n    \\*/\n    eve.nt = function (subname) {\n        var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n        if (subname) {\n            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n        }\n        return cur;\n    };\n    /*\\\n     * eve.nts\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     **\n     = (array) names of the event\n    \\*/\n    eve.nts = function () {\n        return isArray(current_event) ? current_event : current_event.split(separator);\n    };\n    /*\\\n     * eve.off\n     [ method ]\n     **\n     * Removes given function from the list of event listeners assigned to given name.\n     * If no arguments specified all the events will be cleared.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n    \\*/\n    /*\\\n     * eve.unbind\n     [ method ]\n     **\n     * See @eve.off\n    \\*/\n    eve.off = eve.unbind = function (name, f) {\n        if (!name) {\n            eve._events = events = {n: {}};\n            return;\n        }\n        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n        if (names.length > 1) {\n            for (var i = 0, ii = names.length; i < ii; i++) {\n                eve.off(names[i], f);\n            }\n            return;\n        }\n        names = isArray(name) ? name : Str(name).split(separator);\n        var e,\n            key,\n            splice,\n            i, ii, j, jj,\n            cur = [events],\n            inodes = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            for (j = 0; j < cur.length; j += splice.length - 2) {\n                splice = [j, 1];\n                e = cur[j].n;\n                if (names[i] != wildcard) {\n                    if (e[names[i]]) {\n                        splice.push(e[names[i]]);\n                        inodes.unshift({\n                            n: e,\n                            name: names[i]\n                        });\n                    }\n                } else {\n                    for (key in e) if (e[has](key)) {\n                        splice.push(e[key]);\n                        inodes.unshift({\n                            n: e,\n                            name: key\n                        });\n                    }\n                }\n                cur.splice.apply(cur, splice);\n            }\n        }\n        for (i = 0, ii = cur.length; i < ii; i++) {\n            e = cur[i];\n            while (e.n) {\n                if (f) {\n                    if (e.f) {\n                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n                            e.f.splice(j, 1);\n                            break;\n                        }\n                        !e.f.length && delete e.f;\n                    }\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        var funcs = e.n[key].f;\n                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n                            funcs.splice(j, 1);\n                            break;\n                        }\n                        !funcs.length && delete e.n[key].f;\n                    }\n                } else {\n                    delete e.f;\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        delete e.n[key].f;\n                    }\n                }\n                e = e.n;\n            }\n        }\n        // prune inner nodes in path\n        prune: for (i = 0, ii = inodes.length; i < ii; i++) {\n            e = inodes[i];\n            for (key in e.n[e.name].f) {\n                // not empty (has listeners)\n                continue prune;\n            }\n            for (key in e.n[e.name].n) {\n                // not empty (has children)\n                continue prune;\n            }\n            // is empty\n            delete e.n[e.name];\n        }\n    };\n    /*\\\n     * eve.once\n     [ method ]\n     **\n     * Binds given event handler with a given name to only run once then unbind itself.\n     | eve.once(\"login\", f);\n     | eve(\"login\"); // triggers f\n     | eve(\"login\"); // no listeners\n     * Use @eve to trigger the listener.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) same return function as @eve.on\n    \\*/\n    eve.once = function (name, f) {\n        var f2 = function () {\n            eve.off(name, f2);\n            return f.apply(this, arguments);\n        };\n        return eve.on(name, f2);\n    };\n    /*\\\n     * eve.version\n     [ property (string) ]\n     **\n     * Current version of the library.\n    \\*/\n    eve.version = version;\n    eve.toString = function () {\n        return \"You are running Eve \" + version;\n    };\n    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : (typeof define === \"function\" && define.amd ? (define(\"eve\", [], function() { return eve; })) : (glob.eve = eve));\n})(this);\n\n(function (glob, factory) {\n    // AMD support\n    if (typeof define == \"function\" && define.amd) {\n        // Define as an anonymous module\n        define([\"eve\"], function (eve) {\n            return factory(glob, eve);\n        });\n    } else if (typeof exports != \"undefined\") {\n        // Next for Node.js or CommonJS\n        var eve = require(\"eve\");\n        module.exports = factory(glob, eve);\n    } else {\n        // Browser globals (glob is window)\n        // Snap adds itself to window\n        factory(glob, glob.eve);\n    }\n}(window || this, function (window, eve) {\n\n// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar mina = (function (eve) {\n    var animations = {},\n    requestAnimFrame = window.requestAnimationFrame       ||\n                       window.webkitRequestAnimationFrame ||\n                       window.mozRequestAnimationFrame    ||\n                       window.oRequestAnimationFrame      ||\n                       window.msRequestAnimationFrame     ||\n                       function (callback) {\n                           setTimeout(callback, 16, new Date().getTime());\n                           return true;\n                       },\n    requestID,\n    isArray = Array.isArray || function (a) {\n        return a instanceof Array ||\n            Object.prototype.toString.call(a) == \"[object Array]\";\n    },\n    idgen = 0,\n    idprefix = \"M\" + (+new Date).toString(36),\n    ID = function () {\n        return idprefix + (idgen++).toString(36);\n    },\n    diff = function (a, b, A, B) {\n        if (isArray(a)) {\n            res = [];\n            for (var i = 0, ii = a.length; i < ii; i++) {\n                res[i] = diff(a[i], b, A[i], B);\n            }\n            return res;\n        }\n        var dif = (A - a) / (B - b);\n        return function (bb) {\n            return a + dif * (bb - b);\n        };\n    },\n    timer = Date.now || function () {\n        return +new Date;\n    },\n    sta = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.s;\n        }\n        var ds = a.s - val;\n        a.b += a.dur * ds;\n        a.B += a.dur * ds;\n        a.s = val;\n    },\n    speed = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.spd;\n        }\n        a.spd = val;\n    },\n    duration = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.dur;\n        }\n        a.s = a.s * val / a.dur;\n        a.dur = val;\n    },\n    stopit = function () {\n        var a = this;\n        delete animations[a.id];\n        a.update();\n        eve(\"mina.stop.\" + a.id, a);\n    },\n    pause = function () {\n        var a = this;\n        if (a.pdif) {\n            return;\n        }\n        delete animations[a.id];\n        a.update();\n        a.pdif = a.get() - a.b;\n    },\n    resume = function () {\n        var a = this;\n        if (!a.pdif) {\n            return;\n        }\n        a.b = a.get() - a.pdif;\n        delete a.pdif;\n        animations[a.id] = a;\n        frame();\n    },\n    update = function () {\n        var a = this,\n            res;\n        if (isArray(a.start)) {\n            res = [];\n            for (var j = 0, jj = a.start.length; j < jj; j++) {\n                res[j] = +a.start[j] +\n                    (a.end[j] - a.start[j]) * a.easing(a.s);\n            }\n        } else {\n            res = +a.start + (a.end - a.start) * a.easing(a.s);\n        }\n        a.set(res);\n    },\n    frame = function (timeStamp) {\n        // Manual invokation?\n        if (!timeStamp) {\n            // Frame loop stopped?\n            if (!requestID) {\n                // Start frame loop...\n                requestID = requestAnimFrame(frame);\n            }\n            return;\n        }\n        var len = 0;\n        for (var i in animations) if (animations.hasOwnProperty(i)) {\n            var a = animations[i],\n                b = a.get(),\n                res;\n            len++;\n            a.s = (b - a.b) / (a.dur / a.spd);\n            if (a.s >= 1) {\n                delete animations[i];\n                a.s = 1;\n                len--;\n                (function (a) {\n                    setTimeout(function () {\n                        eve(\"mina.finish.\" + a.id, a);\n                    });\n                }(a));\n            }\n            a.update();\n        }\n        requestID = len ? requestAnimFrame(frame) : false;\n    },\n    /*\\\n     * mina\n     [ method ]\n     **\n     * Generic animation of numbers\n     **\n     - a (number) start _slave_ number\n     - A (number) end _slave_ number\n     - b (number) start _master_ number (start time in general case)\n     - B (number) end _master_ number (end time in general case)\n     - get (function) getter of _master_ number (see @mina.time)\n     - set (function) setter of _slave_ number\n     - easing (function) #optional easing function, default is @mina.linear\n     = (object) animation descriptor\n     o {\n     o         id (string) animation id,\n     o         start (number) start _slave_ number,\n     o         end (number) end _slave_ number,\n     o         b (number) start _master_ number,\n     o         s (number) animation status (0..1),\n     o         dur (number) animation duration,\n     o         spd (number) animation speed,\n     o         get (function) getter of _master_ number (see @mina.time),\n     o         set (function) setter of _slave_ number,\n     o         easing (function) easing function, default is @mina.linear,\n     o         status (function) status getter/setter,\n     o         speed (function) speed getter/setter,\n     o         duration (function) duration getter/setter,\n     o         stop (function) animation stopper\n     o         pause (function) pauses the animation\n     o         resume (function) resumes the animation\n     o         update (function) calles setter with the right value of the animation\n     o }\n    \\*/\n    mina = function (a, A, b, B, get, set, easing) {\n        var anim = {\n            id: ID(),\n            start: a,\n            end: A,\n            b: b,\n            s: 0,\n            dur: B - b,\n            spd: 1,\n            get: get,\n            set: set,\n            easing: easing || mina.linear,\n            status: sta,\n            speed: speed,\n            duration: duration,\n            stop: stopit,\n            pause: pause,\n            resume: resume,\n            update: update\n        };\n        animations[anim.id] = anim;\n        var len = 0, i;\n        for (i in animations) if (animations.hasOwnProperty(i)) {\n            len++;\n            if (len == 2) {\n                break;\n            }\n        }\n        len == 1 && frame();\n        return anim;\n    };\n    /*\\\n     * mina.time\n     [ method ]\n     **\n     * Returns the current time. Equivalent to:\n     | function () {\n     |     return (new Date).getTime();\n     | }\n    \\*/\n    mina.time = timer;\n    /*\\\n     * mina.getById\n     [ method ]\n     **\n     * Returns an animation by its id\n     - id (string) animation's id\n     = (object) See @mina\n    \\*/\n    mina.getById = function (id) {\n        return animations[id] || null;\n    };\n\n    /*\\\n     * mina.linear\n     [ method ]\n     **\n     * Default linear easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.linear = function (n) {\n        return n;\n    };\n    /*\\\n     * mina.easeout\n     [ method ]\n     **\n     * Easeout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeout = function (n) {\n        return Math.pow(n, 1.7);\n    };\n    /*\\\n     * mina.easein\n     [ method ]\n     **\n     * Easein easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easein = function (n) {\n        return Math.pow(n, .48);\n    };\n    /*\\\n     * mina.easeinout\n     [ method ]\n     **\n     * Easeinout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeinout = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        var q = .48 - n / 1.04,\n            Q = Math.sqrt(.1734 + q * q),\n            x = Q - q,\n            X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n            y = -Q - q,\n            Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n            t = X + Y + .5;\n        return (1 - t) * 3 * t * t + t * t * t;\n    };\n    /*\\\n     * mina.backin\n     [ method ]\n     **\n     * Backin easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backin = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        var s = 1.70158;\n        return n * n * ((s + 1) * n - s);\n    };\n    /*\\\n     * mina.backout\n     [ method ]\n     **\n     * Backout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backout = function (n) {\n        if (n == 0) {\n            return 0;\n        }\n        n = n - 1;\n        var s = 1.70158;\n        return n * n * ((s + 1) * n + s) + 1;\n    };\n    /*\\\n     * mina.elastic\n     [ method ]\n     **\n     * Elastic easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.elastic = function (n) {\n        if (n == !!n) {\n            return n;\n        }\n        return Math.pow(2, -10 * n) * Math.sin((n - .075) *\n            (2 * Math.PI) / .3) + 1;\n    };\n    /*\\\n     * mina.bounce\n     [ method ]\n     **\n     * Bounce easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.bounce = function (n) {\n        var s = 7.5625,\n            p = 2.75,\n            l;\n        if (n < 1 / p) {\n            l = s * n * n;\n        } else {\n            if (n < 2 / p) {\n                n -= 1.5 / p;\n                l = s * n * n + .75;\n            } else {\n                if (n < 2.5 / p) {\n                    n -= 2.25 / p;\n                    l = s * n * n + .9375;\n                } else {\n                    n -= 2.625 / p;\n                    l = s * n * n + .984375;\n                }\n            }\n        }\n        return l;\n    };\n    window.mina = mina;\n    return mina;\n})(typeof eve == \"undefined\" ? function () {} : eve);\n\n// Copyright (c) 2013 - 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar Snap = (function(root) {\nSnap.version = \"0.5.1\";\n/*\\\n * Snap\n [ method ]\n **\n * Creates a drawing surface or wraps existing SVG element.\n **\n - width (number|string) width of surface\n - height (number|string) height of surface\n * or\n - DOM (SVGElement) element to be wrapped into Snap structure\n * or\n - array (array) array of elements (will return set of elements)\n * or\n - query (string) CSS query selector\n = (object) @Element\n\\*/\nfunction Snap(w, h) {\n    if (w) {\n        if (w.nodeType) {\n            return wrap(w);\n        }\n        if (is(w, \"array\") && Snap.set) {\n            return Snap.set.apply(Snap, w);\n        }\n        if (w instanceof Element) {\n            return w;\n        }\n        if (h == null) {\n            // try {\n                w = glob.doc.querySelector(String(w));\n                return wrap(w);\n            // } catch (e) {\n                // return null;\n            // }\n        }\n    }\n    w = w == null ? \"100%\" : w;\n    h = h == null ? \"100%\" : h;\n    return new Paper(w, h);\n}\nSnap.toString = function () {\n    return \"Snap v\" + this.version;\n};\nSnap._ = {};\nvar glob = {\n    win: root.window,\n    doc: root.window.document\n};\nSnap._.glob = glob;\nvar has = \"hasOwnProperty\",\n    Str = String,\n    toFloat = parseFloat,\n    toInt = parseInt,\n    math = Math,\n    mmax = math.max,\n    mmin = math.min,\n    abs = math.abs,\n    pow = math.pow,\n    PI = math.PI,\n    round = math.round,\n    E = \"\",\n    S = \" \",\n    objectToString = Object.prototype.toString,\n    ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,\n    colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n    bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n    separator = Snap._.separator = /[,\\s]+/,\n    whitespace = /[\\s]/g,\n    commaSpaces = /[\\s]*,[\\s]*/,\n    hsrg = {hs: 1, rg: 1},\n    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\s]*,?[\\s]*/ig,\n    idgen = 0,\n    idprefix = \"S\" + (+new Date).toString(36),\n    ID = function (el) {\n        return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);\n    },\n    xlink = \"http://www.w3.org/1999/xlink\",\n    xmlns = \"http://www.w3.org/2000/svg\",\n    hub = {},\n    /*\\\n     * Snap.url\n     [ method ]\n     **\n     * Wraps path into `\"url('<path>')\"`.\n     - value (string) path\n     = (string) wrapped path\n    \\*/\n    URL = Snap.url = function (url) {\n        return \"url('#\" + url + \"')\";\n    };\n\nfunction $(el, attr) {\n    if (attr) {\n        if (el == \"#text\") {\n            el = glob.doc.createTextNode(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (el == \"#comment\") {\n            el = glob.doc.createComment(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (typeof el == \"string\") {\n            el = $(el);\n        }\n        if (typeof attr == \"string\") {\n            if (el.nodeType == 1) {\n                if (attr.substring(0, 6) == \"xlink:\") {\n                    return el.getAttributeNS(xlink, attr.substring(6));\n                }\n                if (attr.substring(0, 4) == \"xml:\") {\n                    return el.getAttributeNS(xmlns, attr.substring(4));\n                }\n                return el.getAttribute(attr);\n            } else if (attr == \"text\") {\n                return el.nodeValue;\n            } else {\n                return null;\n            }\n        }\n        if (el.nodeType == 1) {\n            for (var key in attr) if (attr[has](key)) {\n                var val = Str(attr[key]);\n                if (val) {\n                    if (key.substring(0, 6) == \"xlink:\") {\n                        el.setAttributeNS(xlink, key.substring(6), val);\n                    } else if (key.substring(0, 4) == \"xml:\") {\n                        el.setAttributeNS(xmlns, key.substring(4), val);\n                    } else {\n                        el.setAttribute(key, val);\n                    }\n                } else {\n                    el.removeAttribute(key);\n                }\n            }\n        } else if (\"text\" in attr) {\n            el.nodeValue = attr.text;\n        }\n    } else {\n        el = glob.doc.createElementNS(xmlns, el);\n    }\n    return el;\n}\nSnap._.$ = $;\nSnap._.id = ID;\nfunction getAttrs(el) {\n    var attrs = el.attributes,\n        name,\n        out = {};\n    for (var i = 0; i < attrs.length; i++) {\n        if (attrs[i].namespaceURI == xlink) {\n            name = \"xlink:\";\n        } else {\n            name = \"\";\n        }\n        name += attrs[i].name;\n        out[name] = attrs[i].textContent;\n    }\n    return out;\n}\nfunction is(o, type) {\n    type = Str.prototype.toLowerCase.call(type);\n    if (type == \"finite\") {\n        return isFinite(o);\n    }\n    if (type == \"array\" &&\n        (o instanceof Array || Array.isArray && Array.isArray(o))) {\n        return true;\n    }\n    return  type == \"null\" && o === null ||\n            type == typeof o && o !== null ||\n            type == \"object\" && o === Object(o) ||\n            objectToString.call(o).slice(8, -1).toLowerCase() == type;\n}\n/*\\\n * Snap.format\n [ method ]\n **\n * Replaces construction of type `{<name>}` to the corresponding argument\n **\n - token (string) string to format\n - json (object) object which properties are used as a replacement\n = (string) formatted string\n > Usage\n | // this draws a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n | paper.path(Snap.format(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n |     x: 10,\n |     y: 20,\n |     dim: {\n |         width: 40,\n |         height: 50,\n |         \"negative width\": -40\n |     }\n | }));\n\\*/\nSnap.format = (function () {\n    var tokenRegex = /\\{([^\\}]+)\\}/g,\n        objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n        replacer = function (all, key, obj) {\n            var res = obj;\n            key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n                name = name || quotedName;\n                if (res) {\n                    if (name in res) {\n                        res = res[name];\n                    }\n                    typeof res == \"function\" && isFunc && (res = res());\n                }\n            });\n            res = (res == null || res == obj ? all : res) + \"\";\n            return res;\n        };\n    return function (str, obj) {\n        return Str(str).replace(tokenRegex, function (all, key) {\n            return replacer(all, key, obj);\n        });\n    };\n})();\nfunction clone(obj) {\n    if (typeof obj == \"function\" || Object(obj) !== obj) {\n        return obj;\n    }\n    var res = new obj.constructor;\n    for (var key in obj) if (obj[has](key)) {\n        res[key] = clone(obj[key]);\n    }\n    return res;\n}\nSnap._.clone = clone;\nfunction repush(array, item) {\n    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n        return array.push(array.splice(i, 1)[0]);\n    }\n}\nfunction cacher(f, scope, postprocessor) {\n    function newf() {\n        var arg = Array.prototype.slice.call(arguments, 0),\n            args = arg.join(\"\\u2400\"),\n            cache = newf.cache = newf.cache || {},\n            count = newf.count = newf.count || [];\n        if (cache[has](args)) {\n            repush(count, args);\n            return postprocessor ? postprocessor(cache[args]) : cache[args];\n        }\n        count.length >= 1e3 && delete cache[count.shift()];\n        count.push(args);\n        cache[args] = f.apply(scope, arg);\n        return postprocessor ? postprocessor(cache[args]) : cache[args];\n    }\n    return newf;\n}\nSnap._.cacher = cacher;\nfunction angle(x1, y1, x2, y2, x3, y3) {\n    if (x3 == null) {\n        var x = x1 - x2,\n            y = y1 - y2;\n        if (!x && !y) {\n            return 0;\n        }\n        return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n    } else {\n        return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);\n    }\n}\nfunction rad(deg) {\n    return deg % 360 * PI / 180;\n}\nfunction deg(rad) {\n    return rad * 180 / PI % 360;\n}\nfunction x_y() {\n    return this.x + S + this.y;\n}\nfunction x_y_w_h() {\n    return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n}\n\n/*\\\n * Snap.rad\n [ method ]\n **\n * Transform angle to radians\n - deg (number) angle in degrees\n = (number) angle in radians\n\\*/\nSnap.rad = rad;\n/*\\\n * Snap.deg\n [ method ]\n **\n * Transform angle to degrees\n - rad (number) angle in radians\n = (number) angle in degrees\n\\*/\nSnap.deg = deg;\n/*\\\n * Snap.sin\n [ method ]\n **\n * Equivalent to `Math.sin()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) sin\n\\*/\nSnap.sin = function (angle) {\n    return math.sin(Snap.rad(angle));\n};\n/*\\\n * Snap.tan\n [ method ]\n **\n * Equivalent to `Math.tan()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) tan\n\\*/\nSnap.tan = function (angle) {\n    return math.tan(Snap.rad(angle));\n};\n/*\\\n * Snap.cos\n [ method ]\n **\n * Equivalent to `Math.cos()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) cos\n\\*/\nSnap.cos = function (angle) {\n    return math.cos(Snap.rad(angle));\n};\n/*\\\n * Snap.asin\n [ method ]\n **\n * Equivalent to `Math.asin()` only works with degrees, not radians.\n - num (number) value\n = (number) asin in degrees\n\\*/\nSnap.asin = function (num) {\n    return Snap.deg(math.asin(num));\n};\n/*\\\n * Snap.acos\n [ method ]\n **\n * Equivalent to `Math.acos()` only works with degrees, not radians.\n - num (number) value\n = (number) acos in degrees\n\\*/\nSnap.acos = function (num) {\n    return Snap.deg(math.acos(num));\n};\n/*\\\n * Snap.atan\n [ method ]\n **\n * Equivalent to `Math.atan()` only works with degrees, not radians.\n - num (number) value\n = (number) atan in degrees\n\\*/\nSnap.atan = function (num) {\n    return Snap.deg(math.atan(num));\n};\n/*\\\n * Snap.atan2\n [ method ]\n **\n * Equivalent to `Math.atan2()` only works with degrees, not radians.\n - num (number) value\n = (number) atan2 in degrees\n\\*/\nSnap.atan2 = function (num) {\n    return Snap.deg(math.atan2(num));\n};\n/*\\\n * Snap.angle\n [ method ]\n **\n * Returns an angle between two or three points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n - x3 (number) #optional x coord of third point\n - y3 (number) #optional y coord of third point\n = (number) angle in degrees\n\\*/\nSnap.angle = angle;\n/*\\\n * Snap.len\n [ method ]\n **\n * Returns distance between two points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len = function (x1, y1, x2, y2) {\n    return Math.sqrt(Snap.len2(x1, y1, x2, y2));\n};\n/*\\\n * Snap.len2\n [ method ]\n **\n * Returns squared distance between two points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len2 = function (x1, y1, x2, y2) {\n    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n};\n/*\\\n * Snap.closestPoint\n [ method ]\n **\n * Returns closest point to a given one on a given path.\n - path (Element) path element\n - x (number) x coord of a point\n - y (number) y coord of a point\n = (object) in format\n {\n    x (number) x coord of the point on the path\n    y (number) y coord of the point on the path\n    length (number) length of the path to the point\n    distance (number) distance from the given point to the path\n }\n\\*/\n// Copied from http://bl.ocks.org/mbostock/8027637\nSnap.closestPoint = function (path, x, y) {\n    function distance2(p) {\n        var dx = p.x - x,\n            dy = p.y - y;\n        return dx * dx + dy * dy;\n    }\n    var pathNode = path.node,\n        pathLength = pathNode.getTotalLength(),\n        precision = pathLength / pathNode.pathSegList.numberOfItems * .125,\n        best,\n        bestLength,\n        bestDistance = Infinity;\n\n    // linear scan for coarse approximation\n    for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n        if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n            best = scan;\n            bestLength = scanLength;\n            bestDistance = scanDistance;\n        }\n    }\n\n    // binary search for precise estimate\n    precision *= .5;\n    while (precision > .5) {\n        var before,\n            after,\n            beforeLength,\n            afterLength,\n            beforeDistance,\n            afterDistance;\n        if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n            best = before;\n            bestLength = beforeLength;\n            bestDistance = beforeDistance;\n        } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n            best = after;\n            bestLength = afterLength;\n            bestDistance = afterDistance;\n        } else {\n            precision *= .5;\n        }\n    }\n\n    best = {\n        x: best.x,\n        y: best.y,\n        length: bestLength,\n        distance: Math.sqrt(bestDistance)\n    };\n    return best;\n}\n/*\\\n * Snap.is\n [ method ]\n **\n * Handy replacement for the `typeof` operator\n - o (…) any object or primitive\n - type (string) name of the type, e.g., `string`, `function`, `number`, etc.\n = (boolean) `true` if given value is of given type\n\\*/\nSnap.is = is;\n/*\\\n * Snap.snapTo\n [ method ]\n **\n * Snaps given value to given grid\n - values (array|number) given array of values or step of the grid\n - value (number) value to adjust\n - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.\n = (number) adjusted value\n\\*/\nSnap.snapTo = function (values, value, tolerance) {\n    tolerance = is(tolerance, \"finite\") ? tolerance : 10;\n    if (is(values, \"array\")) {\n        var i = values.length;\n        while (i--) if (abs(values[i] - value) <= tolerance) {\n            return values[i];\n        }\n    } else {\n        values = +values;\n        var rem = value % values;\n        if (rem < tolerance) {\n            return value - rem;\n        }\n        if (rem > values - tolerance) {\n            return value - rem + values;\n        }\n    }\n    return value;\n};\n// Colour\n/*\\\n * Snap.getRGB\n [ method ]\n **\n * Parses color string as RGB object\n - color (string) color string in one of the following formats:\n # <ul>\n #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>\n #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>\n #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>\n #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>\n #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>\n #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li>\n #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>\n # </ul>\n * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) true if string can't be parsed\n o }\n\\*/\nSnap.getRGB = cacher(function (colour) {\n    if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    if (colour == \"none\") {\n        return {r: -1, g: -1, b: -1, hex: \"none\", toString: rgbtoString};\n    }\n    !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n    if (!colour) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    var res,\n        red,\n        green,\n        blue,\n        opacity,\n        t,\n        values,\n        rgb = colour.match(colourRegExp);\n    if (rgb) {\n        if (rgb[2]) {\n            blue = toInt(rgb[2].substring(5), 16);\n            green = toInt(rgb[2].substring(3, 5), 16);\n            red = toInt(rgb[2].substring(1, 3), 16);\n        }\n        if (rgb[3]) {\n            blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n            green = toInt((t = rgb[3].charAt(2)) + t, 16);\n            red = toInt((t = rgb[3].charAt(1)) + t, 16);\n        }\n        if (rgb[4]) {\n            values = rgb[4].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red *= 2.55);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green *= 2.55);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue *= 2.55);\n            rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n        }\n        if (rgb[5]) {\n            values = rgb[5].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsb2rgb(red, green, blue, opacity);\n        }\n        if (rgb[6]) {\n            values = rgb[6].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsl2rgb(red, green, blue, opacity);\n        }\n        red = mmin(math.round(red), 255);\n        green = mmin(math.round(green), 255);\n        blue = mmin(math.round(blue), 255);\n        opacity = mmin(mmax(opacity, 0), 1);\n        rgb = {r: red, g: green, b: blue, toString: rgbtoString};\n        rgb.hex = \"#\" + (16777216 | blue | green << 8 | red << 16).toString(16).slice(1);\n        rgb.opacity = is(opacity, \"finite\") ? opacity : 1;\n        return rgb;\n    }\n    return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n}, Snap);\n/*\\\n * Snap.hsb\n [ method ]\n **\n * Converts HSB values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - b (number) value or brightness\n = (string) hex representation of the color\n\\*/\nSnap.hsb = cacher(function (h, s, b) {\n    return Snap.hsb2rgb(h, s, b).hex;\n});\n/*\\\n * Snap.hsl\n [ method ]\n **\n * Converts HSL values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (string) hex representation of the color\n\\*/\nSnap.hsl = cacher(function (h, s, l) {\n    return Snap.hsl2rgb(h, s, l).hex;\n});\n/*\\\n * Snap.rgb\n [ method ]\n **\n * Converts RGB values to a hex representation of the color\n - r (number) red\n - g (number) green\n - b (number) blue\n = (string) hex representation of the color\n\\*/\nSnap.rgb = cacher(function (r, g, b, o) {\n    if (is(o, \"finite\")) {\n        var round = math.round;\n        return \"rgba(\" + [round(r), round(g), round(b), +o.toFixed(2)] + \")\";\n    }\n    return \"#\" + (16777216 | b | g << 8 | r << 16).toString(16).slice(1);\n});\nvar toHex = function (color) {\n    var i = glob.doc.getElementsByTagName(\"head\")[0] || glob.doc.getElementsByTagName(\"svg\")[0],\n        red = \"rgb(255, 0, 0)\";\n    toHex = cacher(function (color) {\n        if (color.toLowerCase() == \"red\") {\n            return red;\n        }\n        i.style.color = red;\n        i.style.color = color;\n        var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n        return out == red ? null : out;\n    });\n    return toHex(color);\n},\nhsbtoString = function () {\n    return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n},\nhsltoString = function () {\n    return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n},\nrgbtoString = function () {\n    return this.opacity == 1 || this.opacity == null ?\n            this.hex :\n            \"rgba(\" + [this.r, this.g, this.b, this.opacity] + \")\";\n},\nprepareRGB = function (r, g, b) {\n    if (g == null && is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n        b = r.b;\n        g = r.g;\n        r = r.r;\n    }\n    if (g == null && is(r, string)) {\n        var clr = Snap.getRGB(r);\n        r = clr.r;\n        g = clr.g;\n        b = clr.b;\n    }\n    if (r > 1 || g > 1 || b > 1) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n    }\n\n    return [r, g, b];\n},\npackageRGB = function (r, g, b, o) {\n    r = math.round(r * 255);\n    g = math.round(g * 255);\n    b = math.round(b * 255);\n    var rgb = {\n        r: r,\n        g: g,\n        b: b,\n        opacity: is(o, \"finite\") ? o : 1,\n        hex: Snap.rgb(r, g, b),\n        toString: rgbtoString\n    };\n    is(o, \"finite\") && (rgb.opacity = o);\n    return rgb;\n};\n/*\\\n * Snap.color\n [ method ]\n **\n * Parses the color string and returns an object featuring the color's component values\n - clr (string) color string in one of the supported formats (see @Snap.getRGB)\n = (object) Combined RGB/HSB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) `true` if string can't be parsed,\n o     h (number) hue,\n o     s (number) saturation,\n o     v (number) value (brightness),\n o     l (number) lightness\n o }\n\\*/\nSnap.color = function (clr) {\n    var rgb;\n    if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n        rgb = Snap.hsb2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n        rgb = Snap.hsl2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else {\n        if (is(clr, \"string\")) {\n            clr = Snap.getRGB(clr);\n        }\n        if (is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr && !(\"error\" in clr)) {\n            rgb = Snap.rgb2hsl(clr);\n            clr.h = rgb.h;\n            clr.s = rgb.s;\n            clr.l = rgb.l;\n            rgb = Snap.rgb2hsb(clr);\n            clr.v = rgb.b;\n        } else {\n            clr = {hex: \"none\"};\n            clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n            clr.error = 1;\n        }\n    }\n    clr.toString = rgbtoString;\n    return clr;\n};\n/*\\\n * Snap.hsb2rgb\n [ method ]\n **\n * Converts HSB values to an RGB object\n - h (number) hue\n - s (number) saturation\n - v (number) value or brightness\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsb2rgb = function (h, s, v, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n        v = h.b;\n        s = h.s;\n        o = h.o;\n        h = h.h;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = h % 360 / 60;\n    C = v * s;\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = v - C;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.hsl2rgb\n [ method ]\n **\n * Converts HSL values to an RGB object\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsl2rgb = function (h, s, l, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n        l = h.l;\n        s = h.s;\n        h = h.h;\n    }\n    if (h > 1 || s > 1 || l > 1) {\n        h /= 360;\n        s /= 100;\n        l /= 100;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = h % 360 / 60;\n    C = 2 * s * (l < .5 ? l : 1 - l);\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = l - C / 2;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.rgb2hsb\n [ method ]\n **\n * Converts RGB values to an HSB object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSB object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     b (number) brightness\n o }\n\\*/\nSnap.rgb2hsb = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, V, C;\n    V = mmax(r, g, b);\n    C = V - mmin(r, g, b);\n    H = C == 0 ? null :\n        V == r ? (g - b) / C :\n        V == g ? (b - r) / C + 2 :\n                 (r - g) / C + 4;\n    H = (H + 360) % 6 * 60 / 360;\n    S = C == 0 ? 0 : C / V;\n    return {h: H, s: S, b: V, toString: hsbtoString};\n};\n/*\\\n * Snap.rgb2hsl\n [ method ]\n **\n * Converts RGB values to an HSL object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSL object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     l (number) luminosity\n o }\n\\*/\nSnap.rgb2hsl = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, L, M, m, C;\n    M = mmax(r, g, b);\n    m = mmin(r, g, b);\n    C = M - m;\n    H = C == 0 ? null :\n        M == r ? (g - b) / C :\n        M == g ? (b - r) / C + 2 :\n                 (r - g) / C + 4;\n    H = (H + 360) % 6 * 60 / 360;\n    L = (M + m) / 2;\n    S = C == 0 ? 0 :\n         L < .5 ? C / (2 * L) :\n                  C / (2 - 2 * L);\n    return {h: H, s: S, l: L, toString: hsltoString};\n};\n\n// Transformations\n/*\\\n * Snap.parsePathString\n [ method ]\n **\n * Utility method\n **\n * Parses given path string into an array of arrays of path segments\n - pathString (string|array) path string or array of segments (in the last case it is returned straight away)\n = (array) array of segments\n\\*/\nSnap.parsePathString = function (pathString) {\n    if (!pathString) {\n        return null;\n    }\n    var pth = Snap.path(pathString);\n    if (pth.arr) {\n        return Snap.path.clone(pth.arr);\n    }\n\n    var paramCounts = {a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0},\n        data = [];\n    if (is(pathString, \"array\") && is(pathString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(pathString);\n    }\n    if (!data.length) {\n        Str(pathString).replace(pathCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            if (name == \"m\" && params.length > 2) {\n                data.push([b].concat(params.splice(0, 2)));\n                name = \"l\";\n                b = b == \"m\" ? \"l\" : \"L\";\n            }\n            if (name == \"o\" && params.length == 1) {\n                data.push([b, params[0]]);\n            }\n            if (name == \"r\") {\n                data.push([b].concat(params));\n            } else while (params.length >= paramCounts[name]) {\n                data.push([b].concat(params.splice(0, paramCounts[name])));\n                if (!paramCounts[name]) {\n                    break;\n                }\n            }\n        });\n    }\n    data.toString = Snap.path.toString;\n    pth.arr = Snap.path.clone(data);\n    return data;\n};\n/*\\\n * Snap.parseTransformString\n [ method ]\n **\n * Utility method\n **\n * Parses given transform string into an array of transformations\n - TString (string|array) transform string or array of transformations (in the last case it is returned straight away)\n = (array) array of transformations\n\\*/\nvar parseTransformString = Snap.parseTransformString = function (TString) {\n    if (!TString) {\n        return null;\n    }\n    var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n        data = [];\n    if (is(TString, \"array\") && is(TString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(TString);\n    }\n    if (!data.length) {\n        Str(TString).replace(tCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            data.push([b].concat(params));\n        });\n    }\n    data.toString = Snap.path.toString;\n    return data;\n};\nfunction svgTransform2string(tstr) {\n    var res = [];\n    tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {\n        params = params.split(/\\s*,\\s*|\\s+/);\n        if (name == \"rotate\" && params.length == 1) {\n            params.push(0, 0);\n        }\n        if (name == \"scale\") {\n            if (params.length > 2) {\n                params = params.slice(0, 2);\n            } else if (params.length == 2) {\n                params.push(0, 0);\n            }\n            if (params.length == 1) {\n                params.push(params[0], 0, 0);\n            }\n        }\n        if (name == \"skewX\") {\n            res.push([\"m\", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);\n        } else if (name == \"skewY\") {\n            res.push([\"m\", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);\n        } else {\n            res.push([name.charAt(0)].concat(params));\n        }\n        return all;\n    });\n    return res;\n}\nSnap._.svgTransform2string = svgTransform2string;\nSnap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;\nfunction transform2matrix(tstr, bbox) {\n    var tdata = parseTransformString(tstr),\n        m = new Snap.Matrix;\n    if (tdata) {\n        for (var i = 0, ii = tdata.length; i < ii; i++) {\n            var t = tdata[i],\n                tlen = t.length,\n                command = Str(t[0]).toLowerCase(),\n                absolute = t[0] != command,\n                inver = absolute ? m.invert() : 0,\n                x1,\n                y1,\n                x2,\n                y2,\n                bb;\n            if (command == \"t\" && tlen == 2){\n                m.translate(t[1], 0);\n            } else if (command == \"t\" && tlen == 3) {\n                if (absolute) {\n                    x1 = inver.x(0, 0);\n                    y1 = inver.y(0, 0);\n                    x2 = inver.x(t[1], t[2]);\n                    y2 = inver.y(t[1], t[2]);\n                    m.translate(x2 - x1, y2 - y1);\n                } else {\n                    m.translate(t[1], t[2]);\n                }\n            } else if (command == \"r\") {\n                if (tlen == 2) {\n                    bb = bb || bbox;\n                    m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.rotate(t[1], x2, y2);\n                    } else {\n                        m.rotate(t[1], t[2], t[3]);\n                    }\n                }\n            } else if (command == \"s\") {\n                if (tlen == 2 || tlen == 3) {\n                    bb = bb || bbox;\n                    m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.scale(t[1], t[1], x2, y2);\n                    } else {\n                        m.scale(t[1], t[1], t[2], t[3]);\n                    }\n                } else if (tlen == 5) {\n                    if (absolute) {\n                        x2 = inver.x(t[3], t[4]);\n                        y2 = inver.y(t[3], t[4]);\n                        m.scale(t[1], t[2], x2, y2);\n                    } else {\n                        m.scale(t[1], t[2], t[3], t[4]);\n                    }\n                }\n            } else if (command == \"m\" && tlen == 7) {\n                m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n            }\n        }\n    }\n    return m;\n}\nSnap._.transform2matrix = transform2matrix;\nSnap._unit2px = unit2px;\nvar contains = glob.doc.contains || glob.doc.compareDocumentPosition ?\n    function (a, b) {\n        var adown = a.nodeType == 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n            return a == bup || !!(bup && bup.nodeType == 1 && (\n                adown.contains ?\n                    adown.contains(bup) :\n                    a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16\n            ));\n    } :\n    function (a, b) {\n        if (b) {\n            while (b) {\n                b = b.parentNode;\n                if (b == a) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\nfunction getSomeDefs(el) {\n    var p = el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) ||\n            el.node.parentNode && wrap(el.node.parentNode) ||\n            Snap.select(\"svg\") ||\n            Snap(0, 0),\n        pdefs = p.select(\"defs\"),\n        defs  = pdefs == null ? false : pdefs.node;\n    if (!defs) {\n        defs = make(\"defs\", p.node).node;\n    }\n    return defs;\n}\nfunction getSomeSVG(el) {\n    return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select(\"svg\");\n}\nSnap._.getSomeDefs = getSomeDefs;\nSnap._.getSomeSVG = getSomeSVG;\nfunction unit2px(el, name, value) {\n    var svg = getSomeSVG(el).node,\n        out = {},\n        mgr = svg.querySelector(\".svg---mgr\");\n    if (!mgr) {\n        mgr = $(\"rect\");\n        $(mgr, {x: -9e9, y: -9e9, width: 10, height: 10, \"class\": \"svg---mgr\", fill: \"none\"});\n        svg.appendChild(mgr);\n    }\n    function getW(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {width: val});\n        try {\n            return mgr.getBBox().width;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function getH(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {height: val});\n        try {\n            return mgr.getBBox().height;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function set(nam, f) {\n        if (name == null) {\n            out[nam] = f(el.attr(nam) || 0);\n        } else if (nam == name) {\n            out = f(value == null ? el.attr(nam) || 0 : value);\n        }\n    }\n    switch (el.type) {\n        case \"rect\":\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        case \"image\":\n            set(\"width\", getW);\n            set(\"height\", getH);\n        case \"text\":\n            set(\"x\", getW);\n            set(\"y\", getH);\n        break;\n        case \"circle\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"r\", getW);\n        break;\n        case \"ellipse\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        break;\n        case \"line\":\n            set(\"x1\", getW);\n            set(\"x2\", getW);\n            set(\"y1\", getH);\n            set(\"y2\", getH);\n        break;\n        case \"marker\":\n            set(\"refX\", getW);\n            set(\"markerWidth\", getW);\n            set(\"refY\", getH);\n            set(\"markerHeight\", getH);\n        break;\n        case \"radialGradient\":\n            set(\"fx\", getW);\n            set(\"fy\", getH);\n        break;\n        case \"tspan\":\n            set(\"dx\", getW);\n            set(\"dy\", getH);\n        break;\n        default:\n            set(name, getW);\n    }\n    svg.removeChild(mgr);\n    return out;\n}\n/*\\\n * Snap.select\n [ method ]\n **\n * Wraps a DOM element specified by CSS selector as @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.select = function (query) {\n    query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n    return wrap(glob.doc.querySelector(query));\n};\n/*\\\n * Snap.selectAll\n [ method ]\n **\n * Wraps DOM elements specified by CSS selector as set or array of @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.selectAll = function (query) {\n    var nodelist = glob.doc.querySelectorAll(query),\n        set = (Snap.set || Array)();\n    for (var i = 0; i < nodelist.length; i++) {\n        set.push(wrap(nodelist[i]));\n    }\n    return set;\n};\n\nfunction add2group(list) {\n    if (!is(list, \"array\")) {\n        list = Array.prototype.slice.call(arguments, 0);\n    }\n    var i = 0,\n        j = 0,\n        node = this.node;\n    while (this[i]) delete this[i++];\n    for (i = 0; i < list.length; i++) {\n        if (list[i].type == \"set\") {\n            list[i].forEach(function (el) {\n                node.appendChild(el.node);\n            });\n        } else {\n            node.appendChild(list[i].node);\n        }\n    }\n    var children = node.childNodes;\n    for (i = 0; i < children.length; i++) {\n        this[j++] = wrap(children[i]);\n    }\n    return this;\n}\n// Hub garbage collector every 10s\nsetInterval(function () {\n    for (var key in hub) if (hub[has](key)) {\n        var el = hub[key],\n            node = el.node;\n        if (el.type != \"svg\" && !node.ownerSVGElement || el.type == \"svg\" && (!node.parentNode || \"ownerSVGElement\" in node.parentNode && !node.ownerSVGElement)) {\n            delete hub[key];\n        }\n    }\n}, 1e4);\nfunction Element(el) {\n    if (el.snap in hub) {\n        return hub[el.snap];\n    }\n    var svg;\n    try {\n        svg = el.ownerSVGElement;\n    } catch(e) {}\n    /*\\\n     * Element.node\n     [ property (object) ]\n     **\n     * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n     > Usage\n     | // draw a circle at coordinate 10,10 with radius of 10\n     | var c = paper.circle(10, 10, 10);\n     | c.node.onclick = function () {\n     |     c.attr(\"fill\", \"red\");\n     | };\n    \\*/\n    this.node = el;\n    if (svg) {\n        this.paper = new Paper(svg);\n    }\n    /*\\\n     * Element.type\n     [ property (string) ]\n     **\n     * SVG tag name of the given element.\n    \\*/\n    this.type = el.tagName || el.nodeName;\n    var id = this.id = ID(this);\n    this.anims = {};\n    this._ = {\n        transform: []\n    };\n    el.snap = id;\n    hub[id] = this;\n    if (this.type == \"g\") {\n        this.add = add2group;\n    }\n    if (this.type in {g: 1, mask: 1, pattern: 1, symbol: 1}) {\n        for (var method in Paper.prototype) if (Paper.prototype[has](method)) {\n            this[method] = Paper.prototype[method];\n        }\n    }\n}\n   /*\\\n     * Element.attr\n     [ method ]\n     **\n     * Gets or sets given attributes of the element.\n     **\n     - params (object) contains key-value pairs of attributes you want to set\n     * or\n     - param (string) name of the attribute\n     = (Element) the current element\n     * or\n     = (string) value of attribute\n     > Usage\n     | el.attr({\n     |     fill: \"#fc0\",\n     |     stroke: \"#000\",\n     |     strokeWidth: 2, // CamelCase...\n     |     \"fill-opacity\": 0.5, // or dash-separated names\n     |     width: \"*=2\" // prefixed values\n     | });\n     | console.log(el.attr(\"fill\")); // #fc0\n     * Prefixed values in format `\"+=10\"` supported. All four operations\n     * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`\n     * and `-`: `\"+=2em\"`.\n    \\*/\n    Element.prototype.attr = function (params, value) {\n        var el = this,\n            node = el.node;\n        if (!params) {\n            if (node.nodeType != 1) {\n                return {\n                    text: node.nodeValue\n                };\n            }\n            var attr = node.attributes,\n                out = {};\n            for (var i = 0, ii = attr.length; i < ii; i++) {\n                out[attr[i].nodeName] = attr[i].nodeValue;\n            }\n            return out;\n        }\n        if (is(params, \"string\")) {\n            if (arguments.length > 1) {\n                var json = {};\n                json[params] = value;\n                params = json;\n            } else {\n                return eve(\"snap.util.getattr.\" + params, el).firstDefined();\n            }\n        }\n        for (var att in params) {\n            if (params[has](att)) {\n                eve(\"snap.util.attr.\" + att, el, params[att]);\n            }\n        }\n        return el;\n    };\n/*\\\n * Snap.parse\n [ method ]\n **\n * Parses SVG fragment and converts it into a @Fragment\n **\n - svg (string) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.parse = function (svg) {\n    var f = glob.doc.createDocumentFragment(),\n        full = true,\n        div = glob.doc.createElement(\"div\");\n    svg = Str(svg);\n    if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {\n        svg = \"<svg>\" + svg + \"</svg>\";\n        full = false;\n    }\n    div.innerHTML = svg;\n    svg = div.getElementsByTagName(\"svg\")[0];\n    if (svg) {\n        if (full) {\n            f = svg;\n        } else {\n            while (svg.firstChild) {\n                f.appendChild(svg.firstChild);\n            }\n        }\n    }\n    return new Fragment(f);\n};\nfunction Fragment(frag) {\n    this.node = frag;\n}\n/*\\\n * Snap.fragment\n [ method ]\n **\n * Creates a DOM fragment from a given list of elements or strings\n **\n - varargs (…) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.fragment = function () {\n    var args = Array.prototype.slice.call(arguments, 0),\n        f = glob.doc.createDocumentFragment();\n    for (var i = 0, ii = args.length; i < ii; i++) {\n        var item = args[i];\n        if (item.node && item.node.nodeType) {\n            f.appendChild(item.node);\n        }\n        if (item.nodeType) {\n            f.appendChild(item);\n        }\n        if (typeof item == \"string\") {\n            f.appendChild(Snap.parse(item).node);\n        }\n    }\n    return new Fragment(f);\n};\n\nfunction make(name, parent) {\n    var res = $(name);\n    parent.appendChild(res);\n    var el = wrap(res);\n    return el;\n}\nfunction Paper(w, h) {\n    var res,\n        desc,\n        defs,\n        proto = Paper.prototype;\n    if (w && w.tagName && w.tagName.toLowerCase() == \"svg\") {\n        if (w.snap in hub) {\n            return hub[w.snap];\n        }\n        var doc = w.ownerDocument;\n        res = new Element(w);\n        desc = w.getElementsByTagName(\"desc\")[0];\n        defs = w.getElementsByTagName(\"defs\")[0];\n        if (!desc) {\n            desc = $(\"desc\");\n            desc.appendChild(doc.createTextNode(\"Created with Snap\"));\n            res.node.appendChild(desc);\n        }\n        if (!defs) {\n            defs = $(\"defs\");\n            res.node.appendChild(defs);\n        }\n        res.defs = defs;\n        for (var key in proto) if (proto[has](key)) {\n            res[key] = proto[key];\n        }\n        res.paper = res.root = res;\n    } else {\n        res = make(\"svg\", glob.doc.body);\n        $(res.node, {\n            height: h,\n            version: 1.1,\n            width: w,\n            xmlns: xmlns\n        });\n    }\n    return res;\n}\nfunction wrap(dom) {\n    if (!dom) {\n        return dom;\n    }\n    if (dom instanceof Element || dom instanceof Fragment) {\n        return dom;\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"svg\") {\n        return new Paper(dom);\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"object\" && dom.type == \"image/svg+xml\") {\n        return new Paper(dom.contentDocument.getElementsByTagName(\"svg\")[0]);\n    }\n    return new Element(dom);\n}\n\nSnap._.make = make;\nSnap._.wrap = wrap;\n/*\\\n * Paper.el\n [ method ]\n **\n * Creates an element on paper with a given name and no attributes\n **\n - name (string) tag name\n - attr (object) attributes\n = (Element) the current element\n > Usage\n | var c = paper.circle(10, 10, 10); // is the same as...\n | var c = paper.el(\"circle\").attr({\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n | // and the same as\n | var c = paper.el(\"circle\", {\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n\\*/\nPaper.prototype.el = function (name, attr) {\n    var el = make(name, this.node);\n    attr && el.attr(attr);\n    return el;\n};\n/*\\\n * Element.children\n [ method ]\n **\n * Returns array of all the children of the element.\n = (array) array of Elements\n\\*/\nElement.prototype.children = function () {\n    var out = [],\n        ch = this.node.childNodes;\n    for (var i = 0, ii = ch.length; i < ii; i++) {\n        out[i] = Snap(ch[i]);\n    }\n    return out;\n};\nfunction jsonFiller(root, o) {\n    for (var i = 0, ii = root.length; i < ii; i++) {\n        var item = {\n                type: root[i].type,\n                attr: root[i].attr()\n            },\n            children = root[i].children();\n        o.push(item);\n        if (children.length) {\n            jsonFiller(children, item.childNodes = []);\n        }\n    }\n}\n/*\\\n * Element.toJSON\n [ method ]\n **\n * Returns object representation of the given element and all its children.\n = (object) in format\n o {\n o     type (string) this.type,\n o     attr (object) attributes map,\n o     childNodes (array) optional array of children in the same format\n o }\n\\*/\nElement.prototype.toJSON = function () {\n    var out = [];\n    jsonFiller([this], out);\n    return out[0];\n};\n// default\neve.on(\"snap.util.getattr\", function () {\n    var att = eve.nt();\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    var css = att.replace(/[A-Z]/g, function (letter) {\n        return \"-\" + letter.toLowerCase();\n    });\n    if (cssAttr[has](css)) {\n        return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);\n    } else {\n        return $(this.node, att);\n    }\n});\nvar cssAttr = {\n    \"alignment-baseline\": 0,\n    \"baseline-shift\": 0,\n    \"clip\": 0,\n    \"clip-path\": 0,\n    \"clip-rule\": 0,\n    \"color\": 0,\n    \"color-interpolation\": 0,\n    \"color-interpolation-filters\": 0,\n    \"color-profile\": 0,\n    \"color-rendering\": 0,\n    \"cursor\": 0,\n    \"direction\": 0,\n    \"display\": 0,\n    \"dominant-baseline\": 0,\n    \"enable-background\": 0,\n    \"fill\": 0,\n    \"fill-opacity\": 0,\n    \"fill-rule\": 0,\n    \"filter\": 0,\n    \"flood-color\": 0,\n    \"flood-opacity\": 0,\n    \"font\": 0,\n    \"font-family\": 0,\n    \"font-size\": 0,\n    \"font-size-adjust\": 0,\n    \"font-stretch\": 0,\n    \"font-style\": 0,\n    \"font-variant\": 0,\n    \"font-weight\": 0,\n    \"glyph-orientation-horizontal\": 0,\n    \"glyph-orientation-vertical\": 0,\n    \"image-rendering\": 0,\n    \"kerning\": 0,\n    \"letter-spacing\": 0,\n    \"lighting-color\": 0,\n    \"marker\": 0,\n    \"marker-end\": 0,\n    \"marker-mid\": 0,\n    \"marker-start\": 0,\n    \"mask\": 0,\n    \"opacity\": 0,\n    \"overflow\": 0,\n    \"pointer-events\": 0,\n    \"shape-rendering\": 0,\n    \"stop-color\": 0,\n    \"stop-opacity\": 0,\n    \"stroke\": 0,\n    \"stroke-dasharray\": 0,\n    \"stroke-dashoffset\": 0,\n    \"stroke-linecap\": 0,\n    \"stroke-linejoin\": 0,\n    \"stroke-miterlimit\": 0,\n    \"stroke-opacity\": 0,\n    \"stroke-width\": 0,\n    \"text-anchor\": 0,\n    \"text-decoration\": 0,\n    \"text-rendering\": 0,\n    \"unicode-bidi\": 0,\n    \"visibility\": 0,\n    \"word-spacing\": 0,\n    \"writing-mode\": 0\n};\n\neve.on(\"snap.util.attr\", function (value) {\n    var att = eve.nt(),\n        attr = {};\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    attr[att] = value;\n    var style = att.replace(/-(\\w)/gi, function (all, letter) {\n            return letter.toUpperCase();\n        }),\n        css = att.replace(/[A-Z]/g, function (letter) {\n            return \"-\" + letter.toLowerCase();\n        });\n    if (cssAttr[has](css)) {\n        this.node.style[style] = value == null ? E : value;\n    } else {\n        $(this.node, attr);\n    }\n});\n(function (proto) {}(Paper.prototype));\n\n// simple ajax\n/*\\\n * Snap.ajax\n [ method ]\n **\n * Simple implementation of Ajax\n **\n - url (string) URL\n - postData (object|string) data for post request\n - callback (function) callback\n - scope (object) #optional scope of callback\n * or\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n = (XMLHttpRequest) the XMLHttpRequest object, just in case\n\\*/\nSnap.ajax = function (url, postData, callback, scope){\n    var req = new XMLHttpRequest,\n        id = ID();\n    if (req) {\n        if (is(postData, \"function\")) {\n            scope = callback;\n            callback = postData;\n            postData = null;\n        } else if (is(postData, \"object\")) {\n            var pd = [];\n            for (var key in postData) if (postData.hasOwnProperty(key)) {\n                pd.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(postData[key]));\n            }\n            postData = pd.join(\"&\");\n        }\n        req.open(postData ? \"POST\" : \"GET\", url, true);\n        if (postData) {\n            req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        }\n        if (callback) {\n            eve.once(\"snap.ajax.\" + id + \".0\", callback);\n            eve.once(\"snap.ajax.\" + id + \".200\", callback);\n            eve.once(\"snap.ajax.\" + id + \".304\", callback);\n        }\n        req.onreadystatechange = function() {\n            if (req.readyState != 4) return;\n            eve(\"snap.ajax.\" + id + \".\" + req.status, scope, req);\n        };\n        if (req.readyState == 4) {\n            return req;\n        }\n        req.send(postData);\n        return req;\n    }\n};\n/*\\\n * Snap.load\n [ method ]\n **\n * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)\n **\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n\\*/\nSnap.load = function (url, callback, scope) {\n    Snap.ajax(url, function (req) {\n        var f = Snap.parse(req.responseText);\n        scope ? callback.call(scope, f) : callback(f);\n    });\n};\nvar getOffset = function (elem) {\n    var box = elem.getBoundingClientRect(),\n        doc = elem.ownerDocument,\n        body = doc.body,\n        docElem = doc.documentElement,\n        clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n        top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n        left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n    return {\n        y: top,\n        x: left\n    };\n};\n/*\\\n * Snap.getElementByPoint\n [ method ]\n **\n * Returns you topmost element under given point.\n **\n = (object) Snap element object\n - x (number) x coordinate from the top left corner of the window\n - y (number) y coordinate from the top left corner of the window\n > Usage\n | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\\*/\nSnap.getElementByPoint = function (x, y) {\n    var paper = this,\n        svg = paper.canvas,\n        target = glob.doc.elementFromPoint(x, y);\n    if (glob.win.opera && target.tagName == \"svg\") {\n        var so = getOffset(target),\n            sr = target.createSVGRect();\n        sr.x = x - so.x;\n        sr.y = y - so.y;\n        sr.width = sr.height = 1;\n        var hits = target.getIntersectionList(sr, null);\n        if (hits.length) {\n            target = hits[hits.length - 1];\n        }\n    }\n    if (!target) {\n        return null;\n    }\n    return wrap(target);\n};\n/*\\\n * Snap.plugin\n [ method ]\n **\n * Let you write plugins. You pass in a function with five arguments, like this:\n | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {\n |     Snap.newmethod = function () {};\n |     Element.prototype.newmethod = function () {};\n |     Paper.prototype.newmethod = function () {};\n | });\n * Inside the function you have access to all main objects (and their\n * prototypes). This allow you to extend anything you want.\n **\n - f (function) your plugin body\n\\*/\nSnap.plugin = function (f) {\n    f(Snap, Element, Paper, glob, Fragment);\n};\nglob.win.Snap = Snap;\nreturn Snap;\n}(window || this));\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        unit2px = Snap._unit2px,\n        $ = Snap._.$,\n        make = Snap._.make,\n        getSomeDefs = Snap._.getSomeDefs,\n        has = \"hasOwnProperty\",\n        wrap = Snap._.wrap;\n    /*\\\n     * Element.getBBox\n     [ method ]\n     **\n     * Returns the bounding box descriptor for the given element\n     **\n     = (object) bounding box descriptor:\n     o {\n     o     cx: (number) x of the center,\n     o     cy: (number) x of the center,\n     o     h: (number) height,\n     o     height: (number) height,\n     o     path: (string) path command for the box,\n     o     r0: (number) radius of a circle that fully encloses the box,\n     o     r1: (number) radius of the smallest circle that can be enclosed,\n     o     r2: (number) radius of the largest circle that can be enclosed,\n     o     vb: (string) box as a viewbox command,\n     o     w: (number) width,\n     o     width: (number) width,\n     o     x2: (number) x of the right side,\n     o     x: (number) x of the left side,\n     o     y2: (number) y of the bottom edge,\n     o     y: (number) y of the top edge\n     o }\n    \\*/\n    elproto.getBBox = function (isWithoutTransform) {\n        if (this.type == \"tspan\") {\n            return Snap._.box(this.node.getClientRects().item(0));\n        }\n        if (!Snap.Matrix || !Snap.path) {\n            return this.node.getBBox();\n        }\n        var el = this,\n            m = new Snap.Matrix;\n        if (el.removed) {\n            return Snap._.box();\n        }\n        while (el.type == \"use\") {\n            if (!isWithoutTransform) {\n                m = m.add(el.transform().localMatrix.translate(el.attr(\"x\") || 0, el.attr(\"y\") || 0));\n            }\n            if (el.original) {\n                el = el.original;\n            } else {\n                var href = el.attr(\"xlink:href\");\n                el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf(\"#\") + 1));\n            }\n        }\n        var _ = el._,\n            pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;\n        try {\n            if (isWithoutTransform) {\n                _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n                return Snap._.box(_.bboxwt);\n            } else {\n                el.realPath = pathfinder(el);\n                el.matrix = el.transform().localMatrix;\n                _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));\n                return Snap._.box(_.bbox);\n            }\n        } catch (e) {\n            // Firefox doesn’t give you bbox of hidden element\n            return Snap._.box();\n        }\n    };\n    var propString = function () {\n        return this.string;\n    };\n    function extractTransform(el, tstr) {\n        if (tstr == null) {\n            var doReturn = true;\n            if (el.type == \"linearGradient\" || el.type == \"radialGradient\") {\n                tstr = el.node.getAttribute(\"gradientTransform\");\n            } else if (el.type == \"pattern\") {\n                tstr = el.node.getAttribute(\"patternTransform\");\n            } else {\n                tstr = el.node.getAttribute(\"transform\");\n            }\n            if (!tstr) {\n                return new Snap.Matrix;\n            }\n            tstr = Snap._.svgTransform2string(tstr);\n        } else {\n            if (!Snap._.rgTransform.test(tstr)) {\n                tstr = Snap._.svgTransform2string(tstr);\n            } else {\n                tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || \"\");\n            }\n            if (is(tstr, \"array\")) {\n                tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);\n            }\n            el._.transform = tstr;\n        }\n        var m = Snap._.transform2matrix(tstr, el.getBBox(1));\n        if (doReturn) {\n            return m;\n        } else {\n            el.matrix = m;\n        }\n    }\n    /*\\\n     * Element.transform\n     [ method ]\n     **\n     * Gets or sets transformation of the element\n     **\n     - tstr (string) transform string in Snap or SVG format\n     = (Element) the current element\n     * or\n     = (object) transformation descriptor:\n     o {\n     o     string (string) transform string,\n     o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,\n     o     localMatrix (Matrix) matrix of transformations applied only to the element,\n     o     diffMatrix (Matrix) matrix of difference between global and local transformations,\n     o     global (string) global transformation as string,\n     o     local (string) local transformation as string,\n     o     toString (function) returns `string` property\n     o }\n    \\*/\n    elproto.transform = function (tstr) {\n        var _ = this._;\n        if (tstr == null) {\n            var papa = this,\n                global = new Snap.Matrix(this.node.getCTM()),\n                local = extractTransform(this),\n                ms = [local],\n                m = new Snap.Matrix,\n                i,\n                localString = local.toTransformString(),\n                string = Str(local) == Str(this.matrix) ?\n                            Str(_.transform) : localString;\n            while (papa.type != \"svg\" && (papa = papa.parent())) {\n                ms.push(extractTransform(papa));\n            }\n            i = ms.length;\n            while (i--) {\n                m.add(ms[i]);\n            }\n            return {\n                string: string,\n                globalMatrix: global,\n                totalMatrix: m,\n                localMatrix: local,\n                diffMatrix: global.clone().add(local.invert()),\n                global: global.toTransformString(),\n                total: m.toTransformString(),\n                local: localString,\n                toString: propString\n            };\n        }\n        if (tstr instanceof Snap.Matrix) {\n            this.matrix = tstr;\n            this._.transform = tstr.toTransformString();\n        } else {\n            extractTransform(this, tstr);\n        }\n\n        if (this.node) {\n            if (this.type == \"linearGradient\" || this.type == \"radialGradient\") {\n                $(this.node, {gradientTransform: this.matrix});\n            } else if (this.type == \"pattern\") {\n                $(this.node, {patternTransform: this.matrix});\n            } else {\n                $(this.node, {transform: this.matrix});\n            }\n        }\n\n        return this;\n    };\n    /*\\\n     * Element.parent\n     [ method ]\n     **\n     * Returns the element's parent\n     **\n     = (Element) the parent element\n    \\*/\n    elproto.parent = function () {\n        return wrap(this.node.parentNode);\n    };\n    /*\\\n     * Element.append\n     [ method ]\n     **\n     * Appends the given element to current one\n     **\n     - el (Element|Set) element to append\n     = (Element) the parent element\n    \\*/\n    /*\\\n     * Element.add\n     [ method ]\n     **\n     * See @Element.append\n    \\*/\n    elproto.append = elproto.add = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this;\n                el.forEach(function (el) {\n                    it.add(el);\n                });\n                return this;\n            }\n            el = wrap(el);\n            this.node.appendChild(el.node);\n            el.paper = this.paper;\n        }\n        return this;\n    };\n    /*\\\n     * Element.appendTo\n     [ method ]\n     **\n     * Appends the current element to the given one\n     **\n     - el (Element) parent element to append to\n     = (Element) the child element\n    \\*/\n    elproto.appendTo = function (el) {\n        if (el) {\n            el = wrap(el);\n            el.append(this);\n        }\n        return this;\n    };\n    /*\\\n     * Element.prepend\n     [ method ]\n     **\n     * Prepends the given element to the current one\n     **\n     - el (Element) element to prepend\n     = (Element) the parent element\n    \\*/\n    elproto.prepend = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this,\n                    first;\n                el.forEach(function (el) {\n                    if (first) {\n                        first.after(el);\n                    } else {\n                        it.prepend(el);\n                    }\n                    first = el;\n                });\n                return this;\n            }\n            el = wrap(el);\n            var parent = el.parent();\n            this.node.insertBefore(el.node, this.node.firstChild);\n            this.add && this.add();\n            el.paper = this.paper;\n            this.parent() && this.parent().add();\n            parent && parent.add();\n        }\n        return this;\n    };\n    /*\\\n     * Element.prependTo\n     [ method ]\n     **\n     * Prepends the current element to the given one\n     **\n     - el (Element) parent element to prepend to\n     = (Element) the child element\n    \\*/\n    elproto.prependTo = function (el) {\n        el = wrap(el);\n        el.prepend(this);\n        return this;\n    };\n    /*\\\n     * Element.before\n     [ method ]\n     **\n     * Inserts given element before the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.before = function (el) {\n        if (el.type == \"set\") {\n            var it = this;\n            el.forEach(function (el) {\n                var parent = el.parent();\n                it.node.parentNode.insertBefore(el.node, it.node);\n                parent && parent.add();\n            });\n            this.parent().add();\n            return this;\n        }\n        el = wrap(el);\n        var parent = el.parent();\n        this.node.parentNode.insertBefore(el.node, this.node);\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.after\n     [ method ]\n     **\n     * Inserts given element after the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.after = function (el) {\n        el = wrap(el);\n        var parent = el.parent();\n        if (this.node.nextSibling) {\n            this.node.parentNode.insertBefore(el.node, this.node.nextSibling);\n        } else {\n            this.node.parentNode.appendChild(el.node);\n        }\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.insertBefore\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertBefore = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.insertAfter\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertAfter = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node.nextSibling);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.remove\n     [ method ]\n     **\n     * Removes element from the DOM\n     = (Element) the detached element\n    \\*/\n    elproto.remove = function () {\n        var parent = this.parent();\n        this.node.parentNode && this.node.parentNode.removeChild(this.node);\n        delete this.paper;\n        this.removed = true;\n        parent && parent.add();\n        return this;\n    };\n    /*\\\n     * Element.select\n     [ method ]\n     **\n     * Gathers the nested @Element matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Element) result of query selection\n    \\*/\n    elproto.select = function (query) {\n        return wrap(this.node.querySelector(query));\n    };\n    /*\\\n     * Element.selectAll\n     [ method ]\n     **\n     * Gathers nested @Element objects matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Set|array) result of query selection\n    \\*/\n    elproto.selectAll = function (query) {\n        var nodelist = this.node.querySelectorAll(query),\n            set = (Snap.set || Array)();\n        for (var i = 0; i < nodelist.length; i++) {\n            set.push(wrap(nodelist[i]));\n        }\n        return set;\n    };\n    /*\\\n     * Element.asPX\n     [ method ]\n     **\n     * Returns given attribute of the element as a `px` value (not %, em, etc.)\n     **\n     - attr (string) attribute name\n     - value (string) #optional attribute value\n     = (Element) result of query selection\n    \\*/\n    elproto.asPX = function (attr, value) {\n        if (value == null) {\n            value = this.attr(attr);\n        }\n        return +unit2px(this, attr, value);\n    };\n    // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.\n    /*\\\n     * Element.use\n     [ method ]\n     **\n     * Creates a `<use>` element linked to the current element\n     **\n     = (Element) the `<use>` element\n    \\*/\n    elproto.use = function () {\n        var use,\n            id = this.node.id;\n        if (!id) {\n            id = this.id;\n            $(this.node, {\n                id: id\n            });\n        }\n        if (this.type == \"linearGradient\" || this.type == \"radialGradient\" ||\n            this.type == \"pattern\") {\n            use = make(this.type, this.node.parentNode);\n        } else {\n            use = make(\"use\", this.node.parentNode);\n        }\n        $(use.node, {\n            \"xlink:href\": \"#\" + id\n        });\n        use.original = this;\n        return use;\n    };\n    function fixids(el) {\n        var els = el.selectAll(\"*\"),\n            it,\n            url = /^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,\n            ids = [],\n            uses = {};\n        function urltest(it, name) {\n            var val = $(it.node, name);\n            val = val && val.match(url);\n            val = val && val[2];\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    var attr = {};\n                    attr[name] = Snap.url(id);\n                    $(it.node, attr);\n                });\n            }\n        }\n        function linktest(it) {\n            var val = $(it.node, \"xlink:href\");\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    it.attr(\"xlink:href\", \"#\" + id);\n                });\n            }\n        }\n        for (var i = 0, ii = els.length; i < ii; i++) {\n            it = els[i];\n            urltest(it, \"fill\");\n            urltest(it, \"stroke\");\n            urltest(it, \"filter\");\n            urltest(it, \"mask\");\n            urltest(it, \"clip-path\");\n            linktest(it);\n            var oldid = $(it.node, \"id\");\n            if (oldid) {\n                $(it.node, {id: it.id});\n                ids.push({\n                    old: oldid,\n                    id: it.id\n                });\n            }\n        }\n        for (i = 0, ii = ids.length; i < ii; i++) {\n            var fs = uses[ids[i].old];\n            if (fs) {\n                for (var j = 0, jj = fs.length; j < jj; j++) {\n                    fs[j](ids[i].id);\n                }\n            }\n        }\n    }\n    /*\\\n     * Element.clone\n     [ method ]\n     **\n     * Creates a clone of the element and inserts it after the element\n     **\n     = (Element) the clone\n    \\*/\n    elproto.clone = function () {\n        var clone = wrap(this.node.cloneNode(true));\n        if ($(clone.node, \"id\")) {\n            $(clone.node, {id: clone.id});\n        }\n        fixids(clone);\n        clone.insertAfter(this);\n        return clone;\n    };\n    /*\\\n     * Element.toDefs\n     [ method ]\n     **\n     * Moves element to the shared `<defs>` area\n     **\n     = (Element) the element\n    \\*/\n    elproto.toDefs = function () {\n        var defs = getSomeDefs(this);\n        defs.appendChild(this.node);\n        return this;\n    };\n    /*\\\n     * Element.toPattern\n     [ method ]\n     **\n     * Creates a `<pattern>` element from the current element\n     **\n     * To create a pattern you have to specify the pattern rect:\n     - x (string|number)\n     - y (string|number)\n     - width (string|number)\n     - height (string|number)\n     = (Element) the `<pattern>` element\n     * You can use pattern later on as an argument for `fill` attribute:\n     | var p = paper.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\n     |         fill: \"none\",\n     |         stroke: \"#bada55\",\n     |         strokeWidth: 5\n     |     }).pattern(0, 0, 10, 10),\n     |     c = paper.circle(200, 200, 100);\n     | c.attr({\n     |     fill: p\n     | });\n    \\*/\n    elproto.pattern = elproto.toPattern = function (x, y, width, height) {\n        var p = make(\"pattern\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        $(p.node, {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            patternUnits: \"userSpaceOnUse\",\n            id: p.id,\n            viewBox: [x, y, width, height].join(\" \")\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n// SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n// SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?\n    /*\\\n     * Element.marker\n     [ method ]\n     **\n     * Creates a `<marker>` element from the current element\n     **\n     * To create a marker you have to specify the bounding rect and reference point:\n     - x (number)\n     - y (number)\n     - width (number)\n     - height (number)\n     - refX (number)\n     - refY (number)\n     = (Element) the `<marker>` element\n     * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n    \\*/\n    // TODO add usage for markers\n    elproto.marker = function (x, y, width, height, refX, refY) {\n        var p = make(\"marker\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            refX = x.refX || x.cx;\n            refY = x.refY || x.cy;\n            x = x.x;\n        }\n        $(p.node, {\n            viewBox: [x, y, width, height].join(\" \"),\n            markerWidth: width,\n            markerHeight: height,\n            orient: \"auto\",\n            refX: refX || 0,\n            refY: refY || 0,\n            id: p.id\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n    var eldata = {};\n    /*\\\n     * Element.data\n     [ method ]\n     **\n     * Adds or retrieves given value associated with given key. (Don’t confuse\n     * with `data-` attributes)\n     *\n     * See also @Element.removeData\n     - key (string) key to store data\n     - value (any) #optional value to store\n     = (object) @Element\n     * or, if value is not specified:\n     = (any) value\n     > Usage\n     | for (var i = 0, i < 5, i++) {\n     |     paper.circle(10 + 15 * i, 10, 10)\n     |          .attr({fill: \"#000\"})\n     |          .data(\"i\", i)\n     |          .click(function () {\n     |             alert(this.data(\"i\"));\n     |          });\n     | }\n    \\*/\n    elproto.data = function (key, value) {\n        var data = eldata[this.id] = eldata[this.id] || {};\n        if (arguments.length == 0){\n            eve(\"snap.data.get.\" + this.id, this, data, null);\n            return data;\n        }\n        if (arguments.length == 1) {\n            if (Snap.is(key, \"object\")) {\n                for (var i in key) if (key[has](i)) {\n                    this.data(i, key[i]);\n                }\n                return this;\n            }\n            eve(\"snap.data.get.\" + this.id, this, data[key], key);\n            return data[key];\n        }\n        data[key] = value;\n        eve(\"snap.data.set.\" + this.id, this, value, key);\n        return this;\n    };\n    /*\\\n     * Element.removeData\n     [ method ]\n     **\n     * Removes value associated with an element by given key.\n     * If key is not provided, removes all the data of the element.\n     - key (string) #optional key\n     = (object) @Element\n    \\*/\n    elproto.removeData = function (key) {\n        if (key == null) {\n            eldata[this.id] = {};\n        } else {\n            eldata[this.id] && delete eldata[this.id][key];\n        }\n        return this;\n    };\n    /*\\\n     * Element.outerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element, equivalent to HTML's `outerHTML`.\n     *\n     * See also @Element.innerSVG\n     = (string) SVG code for the element\n    \\*/\n    /*\\\n     * Element.toString\n     [ method ]\n     **\n     * See @Element.outerSVG\n    \\*/\n    elproto.outerSVG = elproto.toString = toString(1);\n    /*\\\n     * Element.innerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`\n     = (string) SVG code for the element\n    \\*/\n    elproto.innerSVG = toString();\n    function toString(type) {\n        return function () {\n            var res = type ? \"<\" + this.type : \"\",\n                attr = this.node.attributes,\n                chld = this.node.childNodes;\n            if (type) {\n                for (var i = 0, ii = attr.length; i < ii; i++) {\n                    res += \" \" + attr[i].name + '=\"' +\n                            attr[i].value.replace(/\"/g, '\\\\\"') + '\"';\n                }\n            }\n            if (chld.length) {\n                type && (res += \">\");\n                for (i = 0, ii = chld.length; i < ii; i++) {\n                    if (chld[i].nodeType == 3) {\n                        res += chld[i].nodeValue;\n                    } else if (chld[i].nodeType == 1) {\n                        res += wrap(chld[i]).toString();\n                    }\n                }\n                type && (res += \"</\" + this.type + \">\");\n            } else {\n                type && (res += \"/>\");\n            }\n            return res;\n        };\n    }\n    elproto.toDataURL = function () {\n        if (window && window.btoa) {\n            var bb = this.getBBox(),\n                svg = Snap.format('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewBox=\"{x} {y} {width} {height}\">{contents}</svg>', {\n                x: +bb.x.toFixed(3),\n                y: +bb.y.toFixed(3),\n                width: +bb.width.toFixed(3),\n                height: +bb.height.toFixed(3),\n                contents: this.outerSVG()\n            });\n            return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svg)));\n        }\n    };\n    /*\\\n     * Fragment.select\n     [ method ]\n     **\n     * See @Element.select\n    \\*/\n    Fragment.prototype.select = elproto.select;\n    /*\\\n     * Fragment.selectAll\n     [ method ]\n     **\n     * See @Element.selectAll\n    \\*/\n    Fragment.prototype.selectAll = elproto.selectAll;\n});\n\n// Copyright (c) 2016 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        has = \"hasOwnProperty\";\n    function slice(from, to, f) {\n        return function (arr) {\n            var res = arr.slice(from, to);\n            if (res.length == 1) {\n                res = res[0];\n            }\n            return f ? f(res) : res;\n        };\n    }\n    var Animation = function (attr, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        this.attr = attr;\n        this.dur = ms;\n        easing && (this.easing = easing);\n        callback && (this.callback = callback);\n    };\n    Snap._.Animation = Animation;\n    /*\\\n     * Snap.animation\n     [ method ]\n     **\n     * Creates an animation object\n     **\n     - attr (object) attributes of final destination\n     - duration (number) duration of the animation, in milliseconds\n     - easing (function) #optional one of easing functions of @mina or custom one\n     - callback (function) #optional callback function that fires when animation ends\n     = (object) animation object\n    \\*/\n    Snap.animation = function (attr, ms, easing, callback) {\n        return new Animation(attr, ms, easing, callback);\n    };\n    /*\\\n     * Element.inAnim\n     [ method ]\n     **\n     * Returns a set of animations that may be able to manipulate the current element\n     **\n     = (object) in format:\n     o {\n     o     anim (object) animation object,\n     o     mina (object) @mina object,\n     o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n    \\*/\n    elproto.inAnim = function () {\n        var el = this,\n            res = [];\n        for (var id in el.anims) if (el.anims[has](id)) {\n            (function (a) {\n                res.push({\n                    anim: new Animation(a._attrs, a.dur, a.easing, a._callback),\n                    mina: a,\n                    curStatus: a.status(),\n                    status: function (val) {\n                        return a.status(val);\n                    },\n                    stop: function () {\n                        a.stop();\n                    }\n                });\n            }(el.anims[id]));\n        }\n        return res;\n    };\n    /*\\\n     * Snap.animate\n     [ method ]\n     **\n     * Runs generic animation of one number into another with a caring function\n     **\n     - from (number|array) number or array of numbers\n     - to (number|array) number or array of numbers\n     - setter (function) caring function that accepts one number argument\n     - duration (number) duration, in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function to execute when animation ends\n     = (object) animation object in @mina format\n     o {\n     o     id (string) animation id, consider it read-only,\n     o     duration (function) gets or sets the duration of the animation,\n     o     easing (function) easing,\n     o     speed (function) gets or sets the speed of the animation,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n     | var rect = Snap().rect(0, 0, 10, 10);\n     | Snap.animate(0, 10, function (val) {\n     |     rect.attr({\n     |         x: val\n     |     });\n     | }, 1000);\n     | // in given context is equivalent to\n     | rect.animate({x: 10}, 1000);\n    \\*/\n    Snap.animate = function (from, to, setter, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        var now = mina.time(),\n            anim = mina(from, to, now, now + ms, mina.time, setter, easing);\n        callback && eve.once(\"mina.finish.\" + anim.id, callback);\n        return anim;\n    };\n    /*\\\n     * Element.stop\n     [ method ]\n     **\n     * Stops all the animations for the current element\n     **\n     = (Element) the current element\n    \\*/\n    elproto.stop = function () {\n        var anims = this.inAnim();\n        for (var i = 0, ii = anims.length; i < ii; i++) {\n            anims[i].stop();\n        }\n        return this;\n    };\n    /*\\\n     * Element.animate\n     [ method ]\n     **\n     * Animates the given attributes of the element\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     = (Element) the current element\n    \\*/\n    elproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = attrs.dur;\n            attrs = attrs.attr;\n        }\n        var fkeys = [], tkeys = [], keys = {}, from, to, f, eq,\n            el = this;\n        for (var key in attrs) if (attrs[has](key)) {\n            if (el.equal) {\n                eq = el.equal(key, Str(attrs[key]));\n                from = eq.from;\n                to = eq.to;\n                f = eq.f;\n            } else {\n                from = +el.attr(key);\n                to = +attrs[key];\n            }\n            var len = is(from, \"array\") ? from.length : 1;\n            keys[key] = slice(fkeys.length, fkeys.length + len, f);\n            fkeys = fkeys.concat(from);\n            tkeys = tkeys.concat(to);\n        }\n        var now = mina.time(),\n            anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {\n                var attr = {};\n                for (var key in keys) if (keys[has](key)) {\n                    attr[key] = keys[key](val);\n                }\n                el.attr(attr);\n            }, easing);\n        el.anims[anim.id] = anim;\n        anim._attrs = attrs;\n        anim._callback = callback;\n        eve(\"snap.animcreated.\" + el.id, anim);\n        eve.once(\"mina.finish.\" + anim.id, function () {\n            eve.off(\"mina.*.\" + anim.id);\n            delete el.anims[anim.id];\n            callback && callback.call(el);\n        });\n        eve.once(\"mina.stop.\" + anim.id, function () {\n            eve.off(\"mina.*.\" + anim.id);\n            delete el.anims[anim.id];\n        });\n        return el;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var objectToString = Object.prototype.toString,\n        Str = String,\n        math = Math,\n        E = \"\";\n    function Matrix(a, b, c, d, e, f) {\n        if (b == null && objectToString.call(a) == \"[object SVGMatrix]\") {\n            this.a = a.a;\n            this.b = a.b;\n            this.c = a.c;\n            this.d = a.d;\n            this.e = a.e;\n            this.f = a.f;\n            return;\n        }\n        if (a != null) {\n            this.a = +a;\n            this.b = +b;\n            this.c = +c;\n            this.d = +d;\n            this.e = +e;\n            this.f = +f;\n        } else {\n            this.a = 1;\n            this.b = 0;\n            this.c = 0;\n            this.d = 1;\n            this.e = 0;\n            this.f = 0;\n        }\n    }\n    (function (matrixproto) {\n        /*\\\n         * Matrix.add\n         [ method ]\n         **\n         * Adds the given matrix to existing one\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        matrixproto.add = function (a, b, c, d, e, f) {\n            if (a && a instanceof Matrix) {\n                return this.add(a.a, a.b, a.c, a.d, a.e, a.f);\n            }\n            var aNew = a * this.a + b * this.c,\n                bNew = a * this.b + b * this.d;\n            this.e += e * this.a + f * this.c;\n            this.f += e * this.b + f * this.d;\n            this.c = c * this.a + d * this.c;\n            this.d = c * this.b + d * this.d;\n\n            this.a = aNew;\n            this.b = bNew;\n            return this;\n        };\n        /*\\\n         * Matrix.multLeft\n         [ method ]\n         **\n         * Multiplies a passed affine transform to the left: M * this.\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        Matrix.prototype.multLeft = function (a, b, c, d, e, f) {\n            if (a && a instanceof Matrix) {\n                return this.multLeft(a.a, a.b, a.c, a.d, a.e, a.f);\n            }\n            var aNew = a * this.a + c * this.b,\n                cNew = a * this.c + c * this.d,\n                eNew = a * this.e + c * this.f + e;\n            this.b = b * this.a + d * this.b;\n            this.d = b * this.c + d * this.d;\n            this.f = b * this.e + d * this.f + f;\n\n            this.a = aNew;\n            this.c = cNew;\n            this.e = eNew;\n            return this;\n        };\n        /*\\\n         * Matrix.invert\n         [ method ]\n         **\n         * Returns an inverted version of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.invert = function () {\n            var me = this,\n                x = me.a * me.d - me.b * me.c;\n            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n        };\n        /*\\\n         * Matrix.clone\n         [ method ]\n         **\n         * Returns a copy of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.clone = function () {\n            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n        };\n        /*\\\n         * Matrix.translate\n         [ method ]\n         **\n         * Translate the matrix\n         - x (number) horizontal offset distance\n         - y (number) vertical offset distance\n        \\*/\n        matrixproto.translate = function (x, y) {\n            this.e += x * this.a + y * this.c;\n            this.f += x * this.b + y * this.d;\n            return this;\n        };\n        /*\\\n         * Matrix.scale\n         [ method ]\n         **\n         * Scales the matrix\n         - x (number) amount to be scaled, with `1` resulting in no change\n         - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)\n         - cx (number) #optional horizontal origin point from which to scale\n         - cy (number) #optional vertical origin point from which to scale\n         * Default cx, cy is the middle point of the element.\n        \\*/\n        matrixproto.scale = function (x, y, cx, cy) {\n            y == null && (y = x);\n            (cx || cy) && this.translate(cx, cy);\n            this.a *= x;\n            this.b *= x;\n            this.c *= y;\n            this.d *= y;\n            (cx || cy) && this.translate(-cx, -cy);\n            return this;\n        };\n        /*\\\n         * Matrix.rotate\n         [ method ]\n         **\n         * Rotates the matrix\n         - a (number) angle of rotation, in degrees\n         - x (number) horizontal origin point from which to rotate\n         - y (number) vertical origin point from which to rotate\n        \\*/\n        matrixproto.rotate = function (a, x, y) {\n            a = Snap.rad(a);\n            x = x || 0;\n            y = y || 0;\n            var cos = +math.cos(a).toFixed(9),\n                sin = +math.sin(a).toFixed(9);\n            this.add(cos, sin, -sin, cos, x, y);\n            return this.add(1, 0, 0, 1, -x, -y);\n        };\n        /*\\\n         * Matrix.skewX\n         [ method ]\n         **\n         * Skews the matrix along the x-axis\n         - x (number) Angle to skew along the x-axis (in degrees).\n        \\*/\n        matrixproto.skewX = function (x) {\n            return this.skew(x, 0);\n        };\n        /*\\\n         * Matrix.skewY\n         [ method ]\n         **\n         * Skews the matrix along the y-axis\n         - y (number) Angle to skew along the y-axis (in degrees).\n        \\*/\n        matrixproto.skewY = function (y) {\n            return this.skew(0, y);\n        };\n        /*\\\n         * Matrix.skew\n         [ method ]\n         **\n         * Skews the matrix\n         - y (number) Angle to skew along the y-axis (in degrees).\n         - x (number) Angle to skew along the x-axis (in degrees).\n        \\*/\n        matrixproto.skew = function (x, y) {\n            x = x || 0;\n            y = y || 0;\n            x = Snap.rad(x);\n            y = Snap.rad(y);\n            var c = math.tan(x).toFixed(9);\n            var b = math.tan(y).toFixed(9);\n            return this.add(1, b, c, 1, 0, 0);\n        };\n        /*\\\n         * Matrix.x\n         [ method ]\n         **\n         * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n         - x (number)\n         - y (number)\n         = (number) x\n        \\*/\n        matrixproto.x = function (x, y) {\n            return x * this.a + y * this.c + this.e;\n        };\n        /*\\\n         * Matrix.y\n         [ method ]\n         **\n         * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n         - x (number)\n         - y (number)\n         = (number) y\n        \\*/\n        matrixproto.y = function (x, y) {\n            return x * this.b + y * this.d + this.f;\n        };\n        matrixproto.get = function (i) {\n            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n        };\n        matrixproto.toString = function () {\n            return \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\";\n        };\n        matrixproto.offset = function () {\n            return [this.e.toFixed(4), this.f.toFixed(4)];\n        };\n        function norm(a) {\n            return a[0] * a[0] + a[1] * a[1];\n        }\n        function normalize(a) {\n            var mag = math.sqrt(norm(a));\n            a[0] && (a[0] /= mag);\n            a[1] && (a[1] /= mag);\n        }\n        /*\\\n         * Matrix.determinant\n         [ method ]\n         **\n         * Finds determinant of the given matrix.\n         = (number) determinant\n        \\*/\n        matrixproto.determinant = function () {\n            return this.a * this.d - this.b * this.c;\n        };\n        /*\\\n         * Matrix.split\n         [ method ]\n         **\n         * Splits matrix into primitive transformations\n         = (object) in format:\n         o dx (number) translation by x\n         o dy (number) translation by y\n         o scalex (number) scale by x\n         o scaley (number) scale by y\n         o shear (number) shear\n         o rotate (number) rotation in deg\n         o isSimple (boolean) could it be represented via simple transformations\n        \\*/\n        matrixproto.split = function () {\n            var out = {};\n            // translation\n            out.dx = this.e;\n            out.dy = this.f;\n\n            // scale and shear\n            var row = [[this.a, this.b], [this.c, this.d]];\n            out.scalex = math.sqrt(norm(row[0]));\n            normalize(row[0]);\n\n            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n            out.scaley = math.sqrt(norm(row[1]));\n            normalize(row[1]);\n            out.shear /= out.scaley;\n\n            if (this.determinant() < 0) {\n                out.scalex = -out.scalex;\n            }\n\n            // rotation\n            var sin = row[0][1],\n                cos = row[1][1];\n            if (cos < 0) {\n                out.rotate = Snap.deg(math.acos(cos));\n                if (sin < 0) {\n                    out.rotate = 360 - out.rotate;\n                }\n            } else {\n                out.rotate = Snap.deg(math.asin(sin));\n            }\n\n            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n            return out;\n        };\n        /*\\\n         * Matrix.toTransformString\n         [ method ]\n         **\n         * Returns transform string that represents given matrix\n         = (string) transform string\n        \\*/\n        matrixproto.toTransformString = function (shorter) {\n            var s = shorter || this.split();\n            if (!+s.shear.toFixed(9)) {\n                s.scalex = +s.scalex.toFixed(4);\n                s.scaley = +s.scaley.toFixed(4);\n                s.rotate = +s.rotate.toFixed(4);\n                return  (s.dx || s.dy ? \"t\" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) +\n                        (s.rotate ? \"r\" + [+s.rotate.toFixed(4), 0, 0] : E) +\n                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E);\n            } else {\n                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n            }\n        };\n    })(Matrix.prototype);\n    /*\\\n     * Snap.Matrix\n     [ method ]\n     **\n     * Matrix constructor, extend on your own risk.\n     * To create matrices use @Snap.matrix.\n    \\*/\n    Snap.Matrix = Matrix;\n    /*\\\n     * Snap.matrix\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns a matrix based on the given parameters\n     - a (number)\n     - b (number)\n     - c (number)\n     - d (number)\n     - e (number)\n     - f (number)\n     * or\n     - svgMatrix (SVGMatrix)\n     = (object) @Matrix\n    \\*/\n    Snap.matrix = function (a, b, c, d, e, f) {\n        return new Matrix(a, b, c, d, e, f);\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var has = \"hasOwnProperty\",\n        make = Snap._.make,\n        wrap = Snap._.wrap,\n        is = Snap.is,\n        getSomeDefs = Snap._.getSomeDefs,\n        reURLValue = /^url\\((['\"]?)([^)]+)\\1\\)$/,\n        $ = Snap._.$,\n        URL = Snap.url,\n        Str = String,\n        separator = Snap._.separator,\n        E = \"\";\n    /*\\\n     * Snap.deurl\n     [ method ]\n     **\n     * Unwraps path from `\"url(<path>)\"`.\n     - value (string) url path\n     = (string) unwrapped path\n    \\*/\n    Snap.deurl = function (value) {\n        var res = String(value).match(reURLValue);\n        return res ? res[2] : value;\n    }\n    // Attributes event handlers\n    eve.on(\"snap.util.attr.mask\", function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value.type == \"mask\") {\n                var mask = value;\n            } else {\n                mask = make(\"mask\", getSomeDefs(this));\n                mask.node.appendChild(value.node);\n            }\n            !mask.node.id && $(mask.node, {\n                id: mask.id\n            });\n            $(this.node, {\n                mask: URL(mask.id)\n            });\n        }\n    });\n    (function (clipIt) {\n        eve.on(\"snap.util.attr.clip\", clipIt);\n        eve.on(\"snap.util.attr.clip-path\", clipIt);\n        eve.on(\"snap.util.attr.clipPath\", clipIt);\n    }(function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            var clip,\n                node = value.node;\n            while (node) {\n                if (node.nodeName === \"clipPath\") {\n                    clip = new Element(node);\n                    break;\n                }\n                if (node.nodeName === \"svg\") {\n                    clip = undefined;\n                    break;\n                }\n                node = node.parentNode;\n            }\n            if (!clip) {\n                clip = make(\"clipPath\", getSomeDefs(this));\n                clip.node.appendChild(value.node);\n                !clip.node.id && $(clip.node, {\n                    id: clip.id\n                });\n            }\n            $(this.node, {\n                \"clip-path\": URL(clip.node.id || clip.id)\n            });\n        }\n    }));\n    function fillStroke(name) {\n        return function (value) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1 &&\n                (value.node.firstChild.tagName == \"radialGradient\" ||\n                value.node.firstChild.tagName == \"linearGradient\" ||\n                value.node.firstChild.tagName == \"pattern\")) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value instanceof Element) {\n                if (value.type == \"radialGradient\" || value.type == \"linearGradient\"\n                   || value.type == \"pattern\") {\n                    if (!value.node.id) {\n                        $(value.node, {\n                            id: value.id\n                        });\n                    }\n                    var fill = URL(value.node.id);\n                } else {\n                    fill = value.attr(name);\n                }\n            } else {\n                fill = Snap.color(value);\n                if (fill.error) {\n                    var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);\n                    if (grad) {\n                        if (!grad.node.id) {\n                            $(grad.node, {\n                                id: grad.id\n                            });\n                        }\n                        fill = URL(grad.node.id);\n                    } else {\n                        fill = value;\n                    }\n                } else {\n                    fill = Str(fill);\n                }\n            }\n            var attrs = {};\n            attrs[name] = fill;\n            $(this.node, attrs);\n            this.node.style[name] = E;\n        };\n    }\n    eve.on(\"snap.util.attr.fill\", fillStroke(\"fill\"));\n    eve.on(\"snap.util.attr.stroke\", fillStroke(\"stroke\"));\n    var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;\n    eve.on(\"snap.util.grad.parse\", function parseGrad(string) {\n        string = Str(string);\n        var tokens = string.match(gradrg);\n        if (!tokens) {\n            return null;\n        }\n        var type = tokens[1],\n            params = tokens[2],\n            stops = tokens[3];\n        params = params.split(/\\s*,\\s*/).map(function (el) {\n            return +el == el ? +el : el;\n        });\n        if (params.length == 1 && params[0] == 0) {\n            params = [];\n        }\n        stops = stops.split(\"-\");\n        stops = stops.map(function (el) {\n            el = el.split(\":\");\n            var out = {\n                color: el[0]\n            };\n            if (el[1]) {\n                out.offset = parseFloat(el[1]);\n            }\n            return out;\n        });\n        var len = stops.length,\n            start = 0,\n            j = 0;\n        function seed(i, end) {\n            var step = (end - start) / (i - j);\n            for (var k = j; k < i; k++) {\n                stops[k].offset = +(+start + step * (k - j)).toFixed(2);\n            }\n            j = i;\n            start = end;\n        }\n        len--;\n        for (var i = 0; i < len; i++) if (\"offset\" in stops[i]) {\n            seed(i, stops[i].offset);\n        }\n        stops[len].offset = stops[len].offset || 100;\n        seed(len, stops[len].offset);\n        return {\n            type: type,\n            params: params,\n            stops: stops\n        };\n    });\n\n    eve.on(\"snap.util.attr.d\", function (value) {\n        eve.stop();\n        if (is(value, \"array\") && is(value[0], \"array\")) {\n            value = Snap.path.toString.call(value);\n        }\n        value = Str(value);\n        if (value.match(/[ruo]/i)) {\n            value = Snap.path.toAbsolute(value);\n        }\n        $(this.node, {d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.#text\", function (value) {\n        eve.stop();\n        value = Str(value);\n        var txt = glob.doc.createTextNode(value);\n        while (this.node.firstChild) {\n            this.node.removeChild(this.node.firstChild);\n        }\n        this.node.appendChild(txt);\n    })(-1);\n    eve.on(\"snap.util.attr.path\", function (value) {\n        eve.stop();\n        this.attr({d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.class\", function (value) {\n        eve.stop();\n        this.node.className.baseVal = value;\n    })(-1);\n    eve.on(\"snap.util.attr.viewBox\", function (value) {\n        var vb;\n        if (is(value, \"object\") && \"x\" in value) {\n            vb = [value.x, value.y, value.width, value.height].join(\" \");\n        } else if (is(value, \"array\")) {\n            vb = value.join(\" \");\n        } else {\n            vb = value;\n        }\n        $(this.node, {\n            viewBox: vb\n        });\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.transform\", function (value) {\n        this.transform(value);\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.r\", function (value) {\n        if (this.type == \"rect\") {\n            eve.stop();\n            $(this.node, {\n                rx: value,\n                ry: value\n            });\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.textpath\", function (value) {\n        eve.stop();\n        if (this.type == \"text\") {\n            var id, tp, node;\n            if (!value && this.textPath) {\n                tp = this.textPath;\n                while (tp.node.firstChild) {\n                    this.node.appendChild(tp.node.firstChild);\n                }\n                tp.remove();\n                delete this.textPath;\n                return;\n            }\n            if (is(value, \"string\")) {\n                var defs = getSomeDefs(this),\n                    path = wrap(defs.parentNode).path(value);\n                defs.appendChild(path.node);\n                id = path.id;\n                path.attr({id: id});\n            } else {\n                value = wrap(value);\n                if (value instanceof Element) {\n                    id = value.attr(\"id\");\n                    if (!id) {\n                        id = value.id;\n                        value.attr({id: id});\n                    }\n                }\n            }\n            if (id) {\n                tp = this.textPath;\n                node = this.node;\n                if (tp) {\n                    tp.attr({\"xlink:href\": \"#\" + id});\n                } else {\n                    tp = $(\"textPath\", {\n                        \"xlink:href\": \"#\" + id\n                    });\n                    while (node.firstChild) {\n                        tp.appendChild(node.firstChild);\n                    }\n                    node.appendChild(tp);\n                    this.textPath = wrap(tp);\n                }\n            }\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.text\", function (value) {\n        if (this.type == \"text\") {\n            var i = 0,\n                node = this.node,\n                tuner = function (chunk) {\n                    var out = $(\"tspan\");\n                    if (is(chunk, \"array\")) {\n                        for (var i = 0; i < chunk.length; i++) {\n                            out.appendChild(tuner(chunk[i]));\n                        }\n                    } else {\n                        out.appendChild(glob.doc.createTextNode(chunk));\n                    }\n                    out.normalize && out.normalize();\n                    return out;\n                };\n            while (node.firstChild) {\n                node.removeChild(node.firstChild);\n            }\n            var tuned = tuner(value);\n            while (tuned.firstChild) {\n                node.appendChild(tuned.firstChild);\n            }\n        }\n        eve.stop();\n    })(-1);\n    function setFontSize(value) {\n        eve.stop();\n        if (value == +value) {\n            value += \"px\";\n        }\n        this.node.style.fontSize = value;\n    }\n    eve.on(\"snap.util.attr.fontSize\", setFontSize)(-1);\n    eve.on(\"snap.util.attr.font-size\", setFontSize)(-1);\n\n\n    eve.on(\"snap.util.getattr.transform\", function () {\n        eve.stop();\n        return this.transform();\n    })(-1);\n    eve.on(\"snap.util.getattr.textpath\", function () {\n        eve.stop();\n        return this.textPath;\n    })(-1);\n    // Markers\n    (function () {\n        function getter(end) {\n            return function () {\n                eve.stop();\n                var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue(\"marker-\" + end);\n                if (style == \"none\") {\n                    return style;\n                } else {\n                    return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));\n                }\n            };\n        }\n        function setter(end) {\n            return function (value) {\n                eve.stop();\n                var name = \"marker\" + end.charAt(0).toUpperCase() + end.substring(1);\n                if (value == \"\" || !value) {\n                    this.node.style[name] = \"none\";\n                    return;\n                }\n                if (value.type == \"marker\") {\n                    var id = value.node.id;\n                    if (!id) {\n                        $(value.node, {id: value.id});\n                    }\n                    this.node.style[name] = URL(id);\n                    return;\n                }\n            };\n        }\n        eve.on(\"snap.util.getattr.marker-end\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.markerEnd\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.marker-start\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.markerStart\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.marker-mid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.getattr.markerMid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.marker-end\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.markerEnd\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.marker-start\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.markerStart\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.marker-mid\", setter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.markerMid\", setter(\"mid\"))(-1);\n    }());\n    eve.on(\"snap.util.getattr.r\", function () {\n        if (this.type == \"rect\" && $(this.node, \"rx\") == $(this.node, \"ry\")) {\n            eve.stop();\n            return $(this.node, \"rx\");\n        }\n    })(-1);\n    function textExtract(node) {\n        var out = [];\n        var children = node.childNodes;\n        for (var i = 0, ii = children.length; i < ii; i++) {\n            var chi = children[i];\n            if (chi.nodeType == 3) {\n                out.push(chi.nodeValue);\n            }\n            if (chi.tagName == \"tspan\") {\n                if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {\n                    out.push(chi.firstChild.nodeValue);\n                } else {\n                    out.push(textExtract(chi));\n                }\n            }\n        }\n        return out;\n    }\n    eve.on(\"snap.util.getattr.text\", function () {\n        if (this.type == \"text\" || this.type == \"tspan\") {\n            eve.stop();\n            var out = textExtract(this.node);\n            return out.length == 1 ? out[0] : out;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.#text\", function () {\n        return this.node.textContent;\n    })(-1);\n    eve.on(\"snap.util.getattr.fill\", function (internal) {\n        if (internal) {\n            return;\n        }\n        eve.stop();\n        var value = eve(\"snap.util.getattr.fill\", this, true).firstDefined();\n        return Snap(Snap.deurl(value)) || value;\n    })(-1);\n    eve.on(\"snap.util.getattr.stroke\", function (internal) {\n        if (internal) {\n            return;\n        }\n        eve.stop();\n        var value = eve(\"snap.util.getattr.stroke\", this, true).firstDefined();\n        return Snap(Snap.deurl(value)) || value;\n    })(-1);\n    eve.on(\"snap.util.getattr.viewBox\", function () {\n        eve.stop();\n        var vb = $(this.node, \"viewBox\");\n        if (vb) {\n            vb = vb.split(separator);\n            return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.points\", function () {\n        var p = $(this.node, \"points\");\n        eve.stop();\n        if (p) {\n            return p.split(separator);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.path\", function () {\n        var p = $(this.node, \"d\");\n        eve.stop();\n        return p;\n    })(-1);\n    eve.on(\"snap.util.getattr.class\", function () {\n        return this.node.className.baseVal;\n    })(-1);\n    function getFontSize() {\n        eve.stop();\n        return this.node.style.fontSize;\n    }\n    eve.on(\"snap.util.getattr.fontSize\", getFontSize)(-1);\n    eve.on(\"snap.util.getattr.font-size\", getFontSize)(-1);\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var rgNotSpace = /\\S+/g,\n        rgBadSpace = /[\\t\\r\\n\\f]/g,\n        rgTrim = /(^\\s+|\\s+$)/g,\n        Str = String,\n        elproto = Element.prototype;\n    /*\\\n     * Element.addClass\n     [ method ]\n     **\n     * Adds given class name or list of class names to the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.addClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n\n        if (classes.length) {\n            j = 0;\n            while (clazz = classes[j++]) {\n                pos = curClasses.indexOf(clazz);\n                if (!~pos) {\n                    curClasses.push(clazz);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.removeClass\n     [ method ]\n     **\n     * Removes given class name or list of class names from the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.removeClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        if (curClasses.length) {\n            j = 0;\n            while (clazz = classes[j++]) {\n                pos = curClasses.indexOf(clazz);\n                if (~pos) {\n                    curClasses.splice(pos, 1);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.hasClass\n     [ method ]\n     **\n     * Checks if the element has a given class name in the list of class names applied to it.\n     - value (string) class name\n     **\n     = (boolean) `true` if the element has given class\n    \\*/\n    elproto.hasClass = function (value) {\n        var elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [];\n        return !!~curClasses.indexOf(value);\n    };\n    /*\\\n     * Element.toggleClass\n     [ method ]\n     **\n     * Add or remove one or more classes from the element, depending on either\n     * the class’s presence or the value of the `flag` argument.\n     - value (string) class name or space separated list of class names\n     - flag (boolean) value to determine whether the class should be added or removed\n     **\n     = (Element) original element.\n    \\*/\n    elproto.toggleClass = function (value, flag) {\n        if (flag != null) {\n            if (flag) {\n                return this.addClass(value);\n            } else {\n                return this.removeClass(value);\n            }\n        }\n        var classes = (value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        j = 0;\n        while (clazz = classes[j++]) {\n            pos = curClasses.indexOf(clazz);\n            if (~pos) {\n                curClasses.splice(pos, 1);\n            } else {\n                curClasses.push(clazz);\n            }\n        }\n\n        finalValue = curClasses.join(\" \");\n        if (className != finalValue) {\n            elem.className.baseVal = finalValue;\n        }\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var operators = {\n            \"+\": function (x, y) {\n                    return x + y;\n                },\n            \"-\": function (x, y) {\n                    return x - y;\n                },\n            \"/\": function (x, y) {\n                    return x / y;\n                },\n            \"*\": function (x, y) {\n                    return x * y;\n                }\n        },\n        Str = String,\n        reUnit = /[a-z]+$/i,\n        reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    eve.on(\"snap.util.attr\", function (val) {\n        var plus = Str(val).match(reAddon);\n        if (plus) {\n            var evnt = eve.nt(),\n                name = evnt.substring(evnt.lastIndexOf(\".\") + 1),\n                a = this.attr(name),\n                atr = {};\n            eve.stop();\n            var unit = plus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[plus[1]];\n            if (aUnit && aUnit == unit) {\n                val = op(parseFloat(a), +plus[2]);\n            } else {\n                a = this.asPX(name);\n                val = op(this.asPX(name), this.asPX(name, plus[2] + unit));\n            }\n            if (isNaN(a) || isNaN(val)) {\n                return;\n            }\n            atr[name] = val;\n            this.attr(atr);\n        }\n    })(-10);\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this,\n            bplus = Str(b).match(reAddon);\n        if (bplus) {\n            eve.stop();\n            var unit = bplus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[bplus[1]];\n            if (aUnit && aUnit == unit) {\n                return {\n                    from: parseFloat(a),\n                    to: op(parseFloat(a), +bplus[2]),\n                    f: getUnit(aUnit)\n                };\n            } else {\n                a = this.asPX(name);\n                return {\n                    from: a,\n                    to: op(a, this.asPX(name, bplus[2] + unit)),\n                    f: getNumber\n                };\n            }\n        }\n    })(-10);\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var proto = Paper.prototype,\n        is = Snap.is;\n    /*\\\n     * Paper.rect\n     [ method ]\n     *\n     * Draws a rectangle\n     **\n     - x (number) x coordinate of the top left corner\n     - y (number) y coordinate of the top left corner\n     - width (number) width\n     - height (number) height\n     - rx (number) #optional horizontal radius for rounded corners, default is 0\n     - ry (number) #optional vertical radius for rounded corners, default is rx or 0\n     = (object) the `rect` element\n     **\n     > Usage\n     | // regular rectangle\n     | var c = paper.rect(10, 10, 50, 50);\n     | // rectangle with rounded corners\n     | var c = paper.rect(40, 40, 50, 50, 10);\n    \\*/\n    proto.rect = function (x, y, w, h, rx, ry) {\n        var attr;\n        if (ry == null) {\n            ry = rx;\n        }\n        if (is(x, \"object\") && x == \"[object Object]\") {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                width: w,\n                height: h\n            };\n            if (rx != null) {\n                attr.rx = rx;\n                attr.ry = ry;\n            }\n        }\n        return this.el(\"rect\", attr);\n    };\n    /*\\\n     * Paper.circle\n     [ method ]\n     **\n     * Draws a circle\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - r (number) radius\n     = (object) the `circle` element\n     **\n     > Usage\n     | var c = paper.circle(50, 50, 40);\n    \\*/\n    proto.circle = function (cx, cy, r) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr = {\n                cx: cx,\n                cy: cy,\n                r: r\n            };\n        }\n        return this.el(\"circle\", attr);\n    };\n\n    var preload = (function () {\n        function onerror() {\n            this.parentNode.removeChild(this);\n        }\n        return function (src, f) {\n            var img = glob.doc.createElement(\"img\"),\n                body = glob.doc.body;\n            img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n            img.onload = function () {\n                f.call(img);\n                img.onload = img.onerror = null;\n                body.removeChild(img);\n            };\n            img.onerror = onerror;\n            body.appendChild(img);\n            img.src = src;\n        };\n    }());\n\n    /*\\\n     * Paper.image\n     [ method ]\n     **\n     * Places an image on the surface\n     **\n     - src (string) URI of the source image\n     - x (number) x offset position\n     - y (number) y offset position\n     - width (number) width of the image\n     - height (number) height of the image\n     = (object) the `image` element\n     * or\n     = (object) Snap element object with type `image`\n     **\n     > Usage\n     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n    \\*/\n    proto.image = function (src, x, y, width, height) {\n        var el = this.el(\"image\");\n        if (is(src, \"object\") && \"src\" in src) {\n            el.attr(src);\n        } else if (src != null) {\n            var set = {\n                \"xlink:href\": src,\n                preserveAspectRatio: \"none\"\n            };\n            if (x != null && y != null) {\n                set.x = x;\n                set.y = y;\n            }\n            if (width != null && height != null) {\n                set.width = width;\n                set.height = height;\n            } else {\n                preload(src, function () {\n                    Snap._.$(el.node, {\n                        width: this.offsetWidth,\n                        height: this.offsetHeight\n                    });\n                });\n            }\n            Snap._.$(el.node, set);\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ellipse\n     [ method ]\n     **\n     * Draws an ellipse\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - rx (number) horizontal radius\n     - ry (number) vertical radius\n     = (object) the `ellipse` element\n     **\n     > Usage\n     | var c = paper.ellipse(50, 50, 40, 20);\n    \\*/\n    proto.ellipse = function (cx, cy, rx, ry) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr ={\n                cx: cx,\n                cy: cy,\n                rx: rx,\n                ry: ry\n            };\n        }\n        return this.el(\"ellipse\", attr);\n    };\n    // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n    /*\\\n     * Paper.path\n     [ method ]\n     **\n     * Creates a `<path>` element using the given string as the path's definition\n     - pathString (string) #optional path string in SVG format\n     * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example:\n     | \"M10,20L30,40\"\n     * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n     *\n     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a> or <a href=\"https://developer.mozilla.org/en/SVG/Tutorial/Paths\">article about path strings at MDN</a>.</p>\n     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n     * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.\n     * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n     > Usage\n     | var c = paper.path(\"M10 10L90 90\");\n     | // draw a diagonal line:\n     | // move to 10,10, line to 90,90\n    \\*/\n    proto.path = function (d) {\n        var attr;\n        if (is(d, \"object\") && !is(d, \"array\")) {\n            attr = d;\n        } else if (d) {\n            attr = {d: d};\n        }\n        return this.el(\"path\", attr);\n    };\n    /*\\\n     * Paper.g\n     [ method ]\n     **\n     * Creates a group element\n     **\n     - varargs (…) #optional elements to nest within the group\n     = (object) the `g` element\n     **\n     > Usage\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g(c2, c1); // note that the order of elements is different\n     * or\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g();\n     | g.add(c2, c1);\n    \\*/\n    /*\\\n     * Paper.group\n     [ method ]\n     **\n     * See @Paper.g\n    \\*/\n    proto.group = proto.g = function (first) {\n        var attr,\n            el = this.el(\"g\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.svg\n     [ method ]\n     **\n     * Creates a nested SVG element.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `svg` element\n     **\n    \\*/\n    proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {\n        var attrs = {};\n        if (is(x, \"object\") && y == null) {\n            attrs = x;\n        } else {\n            if (x != null) {\n                attrs.x = x;\n            }\n            if (y != null) {\n                attrs.y = y;\n            }\n            if (width != null) {\n                attrs.width = width;\n            }\n            if (height != null) {\n                attrs.height = height;\n            }\n            if (vbx != null && vby != null && vbw != null && vbh != null) {\n                attrs.viewBox = [vbx, vby, vbw, vbh];\n            }\n        }\n        return this.el(\"svg\", attrs);\n    };\n    /*\\\n     * Paper.mask\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a mask.\n     **\n     = (object) the `mask` element\n     **\n    \\*/\n    proto.mask = function (first) {\n        var attr,\n            el = this.el(\"mask\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ptrn\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a pattern.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `pattern` element\n     **\n    \\*/\n    proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {\n        if (is(x, \"object\")) {\n            var attr = x;\n        } else {\n            attr = {patternUnits: \"userSpaceOnUse\"};\n            if (x) {\n                attr.x = x;\n            }\n            if (y) {\n                attr.y = y;\n            }\n            if (width != null) {\n                attr.width = width;\n            }\n            if (height != null) {\n                attr.height = height;\n            }\n            if (vx != null && vy != null && vw != null && vh != null) {\n                attr.viewBox = [vx, vy, vw, vh];\n            } else {\n                attr.viewBox = [x || 0, y || 0, width || 0, height || 0];\n            }\n        }\n        return this.el(\"pattern\", attr);\n    };\n    /*\\\n     * Paper.use\n     [ method ]\n     **\n     * Creates a <use> element.\n     - id (string) @optional id of element to link\n     * or\n     - id (Element) @optional element to link\n     **\n     = (object) the `use` element\n     **\n    \\*/\n    proto.use = function (id) {\n        if (id != null) {\n            if (id instanceof Element) {\n                if (!id.attr(\"id\")) {\n                    id.attr({id: Snap._.id(id)});\n                }\n                id = id.attr(\"id\");\n            }\n            if (String(id).charAt() == \"#\") {\n                id = id.substring(1);\n            }\n            return this.el(\"use\", {\"xlink:href\": \"#\" + id});\n        } else {\n            return Element.prototype.use.call(this);\n        }\n    };\n    /*\\\n     * Paper.symbol\n     [ method ]\n     **\n     * Creates a <symbol> element.\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     = (object) the `symbol` element\n     **\n    \\*/\n    proto.symbol = function (vx, vy, vw, vh) {\n        var attr = {};\n        if (vx != null && vy != null && vw != null && vh != null) {\n            attr.viewBox = [vx, vy, vw, vh];\n        }\n\n        return this.el(\"symbol\", attr);\n    };\n    /*\\\n     * Paper.text\n     [ method ]\n     **\n     * Draws a text string\n     **\n     - x (number) x coordinate position\n     - y (number) y coordinate position\n     - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements\n     = (object) the `text` element\n     **\n     > Usage\n     | var t1 = paper.text(50, 50, \"Snap\");\n     | var t2 = paper.text(50, 50, [\"S\",\"n\",\"a\",\"p\"]);\n     | // Text path usage\n     | t1.attr({textpath: \"M10,10L100,100\"});\n     | // or\n     | var pth = paper.path(\"M10,10L100,100\");\n     | t1.attr({textpath: pth});\n    \\*/\n    proto.text = function (x, y, text) {\n        var attr = {};\n        if (is(x, \"object\")) {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                text: text || \"\"\n            };\n        }\n        return this.el(\"text\", attr);\n    };\n    /*\\\n     * Paper.line\n     [ method ]\n     **\n     * Draws a line\n     **\n     - x1 (number) x coordinate position of the start\n     - y1 (number) y coordinate position of the start\n     - x2 (number) x coordinate position of the end\n     - y2 (number) y coordinate position of the end\n     = (object) the `line` element\n     **\n     > Usage\n     | var t1 = paper.line(50, 50, 100, 100);\n    \\*/\n    proto.line = function (x1, y1, x2, y2) {\n        var attr = {};\n        if (is(x1, \"object\")) {\n            attr = x1;\n        } else if (x1 != null) {\n            attr = {\n                x1: x1,\n                x2: x2,\n                y1: y1,\n                y2: y2\n            };\n        }\n        return this.el(\"line\", attr);\n    };\n    /*\\\n     * Paper.polyline\n     [ method ]\n     **\n     * Draws a polyline\n     **\n     - points (array) array of points\n     * or\n     - varargs (…) points\n     = (object) the `polyline` element\n     **\n     > Usage\n     | var p1 = paper.polyline([10, 10, 100, 100]);\n     | var p2 = paper.polyline(10, 10, 100, 100);\n    \\*/\n    proto.polyline = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polyline\", attr);\n    };\n    /*\\\n     * Paper.polygon\n     [ method ]\n     **\n     * Draws a polygon. See @Paper.polyline\n    \\*/\n    proto.polygon = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polygon\", attr);\n    };\n    // gradients\n    (function () {\n        var $ = Snap._.$;\n        // gradients' helpers\n        /*\\\n         * Element.stops\n         [ method ]\n         **\n         * Only for gradients!\n         * Returns array of gradient stops elements.\n         = (array) the stops array.\n        \\*/\n        function Gstops() {\n            return this.selectAll(\"stop\");\n        }\n        /*\\\n         * Element.addStop\n         [ method ]\n         **\n         * Only for gradients!\n         * Adds another stop to the gradient.\n         - color (string) stops color\n         - offset (number) stops offset 0..100\n         = (object) gradient element\n        \\*/\n        function GaddStop(color, offset) {\n            var stop = $(\"stop\"),\n                attr = {\n                    offset: +offset + \"%\"\n                };\n            color = Snap.color(color);\n            attr[\"stop-color\"] = color.hex;\n            if (color.opacity < 1) {\n                attr[\"stop-opacity\"] = color.opacity;\n            }\n            $(stop, attr);\n            var stops = this.stops(),\n                inserted;\n            for (var i = 0; i < stops.length; i++) {\n                var stopOffset = parseFloat(stops[i].attr(\"offset\"));\n                if (stopOffset > offset) {\n                    this.node.insertBefore(stop, stops[i].node);\n                    inserted = true;\n                    break;\n                }\n            }\n            if (!inserted) {\n                this.node.appendChild(stop);\n            }\n            return this;\n        }\n        function GgetBBox() {\n            if (this.type == \"linearGradient\") {\n                var x1 = $(this.node, \"x1\") || 0,\n                    x2 = $(this.node, \"x2\") || 1,\n                    y1 = $(this.node, \"y1\") || 0,\n                    y2 = $(this.node, \"y2\") || 0;\n                return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));\n            } else {\n                var cx = this.node.cx || .5,\n                    cy = this.node.cy || .5,\n                    r = this.node.r || 0;\n                return Snap._.box(cx - r, cy - r, r * 2, r * 2);\n            }\n        }\n        /*\\\n         * Element.setStops\n         [ method ]\n         **\n         * Only for gradients!\n         * Updates stops of the gradient based on passed gradient descriptor. See @Ppaer.gradient\n         - str (string) gradient descriptor part after `()`.\n         = (object) gradient element\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         | g.setStops(\"#fff-#000-#f00-#fc0\");\n        \\*/\n        function GsetStops(str) {\n            var grad = str,\n                stops = this.stops();\n            if (typeof str == \"string\") {\n                grad = eve(\"snap.util.grad.parse\", null, \"l(0,0,0,1)\" + str).firstDefined().stops;\n            }\n            if (!Snap.is(grad, \"array\")) {\n                return;\n            }\n            for (var i = 0; i < stops.length; i++) {\n                if (grad[i]) {\n                    var color = Snap.color(grad[i].color),\n                        attr = {\"offset\": grad[i].offset + \"%\"};\n                    attr[\"stop-color\"] = color.hex;\n                    if (color.opacity < 1) {\n                        attr[\"stop-opacity\"] = color.opacity;\n                    }\n                    stops[i].attr(attr);\n                } else {\n                    stops[i].remove();\n                }\n            }\n            for (i = stops.length; i < grad.length; i++) {\n                this.addStop(grad[i].color, grad[i].offset);\n            }\n            return this;\n        }\n        function gradient(defs, str) {\n            var grad = eve(\"snap.util.grad.parse\", null, str).firstDefined(),\n                el;\n            if (!grad) {\n                return null;\n            }\n            grad.params.unshift(defs);\n            if (grad.type.toLowerCase() == \"l\") {\n                el = gradientLinear.apply(0, grad.params);\n            } else {\n                el = gradientRadial.apply(0, grad.params);\n            }\n            if (grad.type != grad.type.toLowerCase()) {\n                $(el.node, {\n                    gradientUnits: \"userSpaceOnUse\"\n                });\n            }\n            var stops = grad.stops,\n                len = stops.length;\n            for (var i = 0; i < len; i++) {\n                var stop = stops[i];\n                el.addStop(stop.color, stop.offset);\n            }\n            return el;\n        }\n        function gradientLinear(defs, x1, y1, x2, y2) {\n            var el = Snap._.make(\"linearGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            el.setStops = GsetStops;\n            if (x1 != null) {\n                $(el.node, {\n                    x1: x1,\n                    y1: y1,\n                    x2: x2,\n                    y2: y2\n                });\n            }\n            return el;\n        }\n        function gradientRadial(defs, cx, cy, r, fx, fy) {\n            var el = Snap._.make(\"radialGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            if (cx != null) {\n                $(el.node, {\n                    cx: cx,\n                    cy: cy,\n                    r: r\n                });\n            }\n            if (fx != null && fy != null) {\n                $(el.node, {\n                    fx: fx,\n                    fy: fy\n                });\n            }\n            return el;\n        }\n        /*\\\n         * Paper.gradient\n         [ method ]\n         **\n         * Creates a gradient element\n         **\n         - gradient (string) gradient descriptor\n         > Gradient Descriptor\n         * The gradient descriptor is an expression formatted as\n         * follows: `<type>(<coords>)<colors>`.  The `<type>` can be\n         * either linear or radial.  The uppercase `L` or `R` letters\n         * indicate absolute coordinates offset from the SVG surface.\n         * Lowercase `l` or `r` letters indicate coordinates\n         * calculated relative to the element to which the gradient is\n         * applied.  Coordinates specify a linear gradient vector as\n         * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,\n         * `r` and optional `fx`, `fy` specifying a focal point away\n         * from the center of the circle. Specify `<colors>` as a list\n         * of dash-separated CSS color values.  Each color may be\n         * followed by a custom offset value, separated with a colon\n         * character.\n         > Examples\n         * Linear gradient, relative from top-left corner to bottom-right\n         * corner, from black through red to white:\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         * Linear gradient, absolute from (0, 0) to (100, 100), from black\n         * through red at 25% to white:\n         | var g = paper.gradient(\"L(0, 0, 100, 100)#000-#f00:25-#fff\");\n         * Radial gradient, relative from the center of the element with radius\n         * half the width, from black to white:\n         | var g = paper.gradient(\"r(0.5, 0.5, 0.5)#000-#fff\");\n         * To apply the gradient:\n         | paper.circle(50, 50, 40).attr({\n         |     fill: g\n         | });\n         = (object) the `gradient` element\n        \\*/\n        proto.gradient = function (str) {\n            return gradient(this.defs, str);\n        };\n        proto.gradientLinear = function (x1, y1, x2, y2) {\n            return gradientLinear(this.defs, x1, y1, x2, y2);\n        };\n        proto.gradientRadial = function (cx, cy, r, fx, fy) {\n            return gradientRadial(this.defs, cx, cy, r, fx, fy);\n        };\n        /*\\\n         * Paper.toString\n         [ method ]\n         **\n         * Returns SVG code for the @Paper\n         = (string) SVG code for the @Paper\n        \\*/\n        proto.toString = function () {\n            var doc = this.node.ownerDocument,\n                f = doc.createDocumentFragment(),\n                d = doc.createElement(\"div\"),\n                svg = this.node.cloneNode(true),\n                res;\n            f.appendChild(d);\n            d.appendChild(svg);\n            Snap._.$(svg, {xmlns: \"http://www.w3.org/2000/svg\"});\n            res = d.innerHTML;\n            f.removeChild(f.firstChild);\n            return res;\n        };\n        /*\\\n         * Paper.toDataURL\n         [ method ]\n         **\n         * Returns SVG code for the @Paper as Data URI string.\n         = (string) Data URI string\n        \\*/\n        proto.toDataURL = function () {\n            if (window && window.btoa) {\n                return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(this)));\n            }\n        };\n        /*\\\n         * Paper.clear\n         [ method ]\n         **\n         * Removes all child nodes of the paper, except <defs>.\n        \\*/\n        proto.clear = function () {\n            var node = this.node.firstChild,\n                next;\n            while (node) {\n                next = node.nextSibling;\n                if (node.tagName != \"defs\") {\n                    node.parentNode.removeChild(node);\n                } else {\n                    proto.clear.call({node: node});\n                }\n                node = next;\n            }\n        };\n    }());\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        clone = Snap._.clone,\n        has = \"hasOwnProperty\",\n        p2s = /,?([a-z]),?/gi,\n        toFloat = parseFloat,\n        math = Math,\n        PI = math.PI,\n        mmin = math.min,\n        mmax = math.max,\n        pow = math.pow,\n        abs = math.abs;\n    function paths(ps) {\n        var p = paths.ps = paths.ps || {};\n        if (p[ps]) {\n            p[ps].sleep = 100;\n        } else {\n            p[ps] = {\n                sleep: 100\n            };\n        }\n        setTimeout(function () {\n            for (var key in p) if (p[has](key) && key != ps) {\n                p[key].sleep--;\n                !p[key].sleep && delete p[key];\n            }\n        });\n        return p[ps];\n    }\n    function box(x, y, width, height) {\n        if (x == null) {\n            x = y = width = height = 0;\n        }\n        if (y == null) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        return {\n            x: x,\n            y: y,\n            width: width,\n            w: width,\n            height: height,\n            h: height,\n            x2: x + width,\n            y2: y + height,\n            cx: x + width / 2,\n            cy: y + height / 2,\n            r1: math.min(width, height) / 2,\n            r2: math.max(width, height) / 2,\n            r0: math.sqrt(width * width + height * height) / 2,\n            path: rectPath(x, y, width, height),\n            vb: [x, y, width, height].join(\" \")\n        };\n    }\n    function toString() {\n        return this.join(\",\").replace(p2s, \"$1\");\n    }\n    function pathClone(pathArray) {\n        var res = clone(pathArray);\n        res.toString = toString;\n        return res;\n    }\n    function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n        if (length == null) {\n            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n        } else {\n            return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y,\n                getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n        }\n    }\n    function getLengthFactory(istotal, subpath) {\n        function O(val) {\n            return +(+val).toFixed(3);\n        }\n        return Snap._.cacher(function (path, length, onlystart) {\n            if (path instanceof Element) {\n                path = path.attr(\"d\");\n            }\n            path = path2curve(path);\n            var x, y, p, l, sp = \"\", subpaths = {}, point,\n                len = 0;\n            for (var i = 0, ii = path.length; i < ii; i++) {\n                p = path[i];\n                if (p[0] == \"M\") {\n                    x = +p[1];\n                    y = +p[2];\n                } else {\n                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                    if (len + l > length) {\n                        if (subpath && !subpaths.start) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            sp += [\n                                \"C\" + O(point.start.x),\n                                O(point.start.y),\n                                O(point.m.x),\n                                O(point.m.y),\n                                O(point.x),\n                                O(point.y)\n                            ];\n                            if (onlystart) {return sp;}\n                            subpaths.start = sp;\n                            sp = [\n                                \"M\" + O(point.x),\n                                O(point.y) + \"C\" + O(point.n.x),\n                                O(point.n.y),\n                                O(point.end.x),\n                                O(point.end.y),\n                                O(p[5]),\n                                O(p[6])\n                            ].join();\n                            len += l;\n                            x = +p[5];\n                            y = +p[6];\n                            continue;\n                        }\n                        if (!istotal && !subpath) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            return point;\n                        }\n                    }\n                    len += l;\n                    x = +p[5];\n                    y = +p[6];\n                }\n                sp += p.shift() + p;\n            }\n            subpaths.end = sp;\n            point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n            return point;\n        }, null, Snap._.clone);\n    }\n    var getTotalLength = getLengthFactory(1),\n        getPointAtLength = getLengthFactory(),\n        getSubpathsAtLength = getLengthFactory(0, 1);\n    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t,\n            t13 = pow(t1, 3),\n            t12 = pow(t1, 2),\n            t2 = t * t,\n            t3 = t2 * t,\n            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n            ax = t1 * p1x + t * c1x,\n            ay = t1 * p1y + t * c1y,\n            cx = t1 * c2x + t * p2x,\n            cy = t1 * c2y + t * p2y,\n            alpha = 90 - math.atan2(mx - nx, my - ny) * 180 / PI;\n        // (mx > nx || my < ny) && (alpha += 180);\n        return {\n            x: x,\n            y: y,\n            m: {x: mx, y: my},\n            n: {x: nx, y: ny},\n            start: {x: ax, y: ay},\n            end: {x: cx, y: cy},\n            alpha: alpha\n        };\n    }\n    function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n        if (!Snap.is(p1x, \"array\")) {\n            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n        }\n        var bbox = curveDim.apply(null, p1x);\n        return box(\n            bbox.min.x,\n            bbox.min.y,\n            bbox.max.x - bbox.min.x,\n            bbox.max.y - bbox.min.y\n        );\n    }\n    function isPointInsideBBox(bbox, x, y) {\n        return  x >= bbox.x &&\n                x <= bbox.x + bbox.width &&\n                y >= bbox.y &&\n                y <= bbox.y + bbox.height;\n    }\n    function isBBoxIntersect(bbox1, bbox2) {\n        bbox1 = box(bbox1);\n        bbox2 = box(bbox2);\n        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n                || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n                || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n    }\n    function base3(t, p1, p2, p3, p4) {\n        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n        return t * t2 - 3 * p1 + 3 * p2;\n    }\n    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n        if (z == null) {\n            z = 1;\n        }\n        z = z > 1 ? 1 : z < 0 ? 0 : z;\n        var z2 = z / 2,\n            n = 12,\n            Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n            sum = 0;\n        for (var i = 0; i < n; i++) {\n            var ct = z2 * Tvalues[i] + z2,\n                xbase = base3(ct, x1, x2, x3, x4),\n                ybase = base3(ct, y1, y2, y3, y4),\n                comb = xbase * xbase + ybase * ybase;\n            sum += Cvalues[i] * math.sqrt(comb);\n        }\n        return z2 * sum;\n    }\n    function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n            return;\n        }\n        var t = 1,\n            step = t / 2,\n            t2 = t - step,\n            l,\n            e = .01;\n        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        while (abs(l - ll) > e) {\n            step /= 2;\n            t2 += (l < ll ? 1 : -1) * step;\n            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        }\n        return t2;\n    }\n    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n        if (\n            mmax(x1, x2) < mmin(x3, x4) ||\n            mmin(x1, x2) > mmax(x3, x4) ||\n            mmax(y1, y2) < mmin(y3, y4) ||\n            mmin(y1, y2) > mmax(y3, y4)\n        ) {\n            return;\n        }\n        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n        if (!denominator) {\n            return;\n        }\n        var px = nx / denominator,\n            py = ny / denominator,\n            px2 = +px.toFixed(2),\n            py2 = +py.toFixed(2);\n        if (\n            px2 < +mmin(x1, x2).toFixed(2) ||\n            px2 > +mmax(x1, x2).toFixed(2) ||\n            px2 < +mmin(x3, x4).toFixed(2) ||\n            px2 > +mmax(x3, x4).toFixed(2) ||\n            py2 < +mmin(y1, y2).toFixed(2) ||\n            py2 > +mmax(y1, y2).toFixed(2) ||\n            py2 < +mmin(y3, y4).toFixed(2) ||\n            py2 > +mmax(y3, y4).toFixed(2)\n        ) {\n            return;\n        }\n        return {x: px, y: py};\n    }\n    function inter(bez1, bez2) {\n        return interHelper(bez1, bez2);\n    }\n    function interCount(bez1, bez2) {\n        return interHelper(bez1, bez2, 1);\n    }\n    function interHelper(bez1, bez2, justCount) {\n        var bbox1 = bezierBBox(bez1),\n            bbox2 = bezierBBox(bez2);\n        if (!isBBoxIntersect(bbox1, bbox2)) {\n            return justCount ? 0 : [];\n        }\n        var l1 = bezlen.apply(0, bez1),\n            l2 = bezlen.apply(0, bez2),\n            n1 = ~~(l1 / 8),\n            n2 = ~~(l2 / 8),\n            dots1 = [],\n            dots2 = [],\n            xy = {},\n            res = justCount ? 0 : [];\n        for (var i = 0; i < n1 + 1; i++) {\n            var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n            dots1.push({x: p.x, y: p.y, t: i / n1});\n        }\n        for (i = 0; i < n2 + 1; i++) {\n            p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n            dots2.push({x: p.x, y: p.y, t: i / n2});\n        }\n        for (i = 0; i < n1; i++) {\n            for (var j = 0; j < n2; j++) {\n                var di = dots1[i],\n                    di1 = dots1[i + 1],\n                    dj = dots2[j],\n                    dj1 = dots2[j + 1],\n                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n                if (is) {\n                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n                        continue;\n                    }\n                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n                    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n                        if (justCount) {\n                            res++;\n                        } else {\n                            res.push({\n                                x: is.x,\n                                y: is.y,\n                                t1: t1,\n                                t2: t2\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function pathIntersection(path1, path2) {\n        return interPathHelper(path1, path2);\n    }\n    function pathIntersectionNumber(path1, path2) {\n        return interPathHelper(path1, path2, 1);\n    }\n    function interPathHelper(path1, path2, justCount) {\n        path1 = path2curve(path1);\n        path2 = path2curve(path2);\n        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n            res = justCount ? 0 : [];\n        for (var i = 0, ii = path1.length; i < ii; i++) {\n            var pi = path1[i];\n            if (pi[0] == \"M\") {\n                x1 = x1m = pi[1];\n                y1 = y1m = pi[2];\n            } else {\n                if (pi[0] == \"C\") {\n                    bez1 = [x1, y1].concat(pi.slice(1));\n                    x1 = bez1[6];\n                    y1 = bez1[7];\n                } else {\n                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n                    x1 = x1m;\n                    y1 = y1m;\n                }\n                for (var j = 0, jj = path2.length; j < jj; j++) {\n                    var pj = path2[j];\n                    if (pj[0] == \"M\") {\n                        x2 = x2m = pj[1];\n                        y2 = y2m = pj[2];\n                    } else {\n                        if (pj[0] == \"C\") {\n                            bez2 = [x2, y2].concat(pj.slice(1));\n                            x2 = bez2[6];\n                            y2 = bez2[7];\n                        } else {\n                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n                            x2 = x2m;\n                            y2 = y2m;\n                        }\n                        var intr = interHelper(bez1, bez2, justCount);\n                        if (justCount) {\n                            res += intr;\n                        } else {\n                            for (var k = 0, kk = intr.length; k < kk; k++) {\n                                intr[k].segment1 = i;\n                                intr[k].segment2 = j;\n                                intr[k].bez1 = bez1;\n                                intr[k].bez2 = bez2;\n                            }\n                            res = res.concat(intr);\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function isPointInsidePath(path, x, y) {\n        var bbox = pathBBox(path);\n        return isPointInsideBBox(bbox, x, y) &&\n               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n    }\n    function pathBBox(path) {\n        var pth = paths(path);\n        if (pth.bbox) {\n            return clone(pth.bbox);\n        }\n        if (!path) {\n            return box();\n        }\n        path = path2curve(path);\n        var x = 0,\n            y = 0,\n            X = [],\n            Y = [],\n            p;\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            p = path[i];\n            if (p[0] == \"M\") {\n                x = p[1];\n                y = p[2];\n                X.push(x);\n                Y.push(y);\n            } else {\n                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                X = X.concat(dim.min.x, dim.max.x);\n                Y = Y.concat(dim.min.y, dim.max.y);\n                x = p[5];\n                y = p[6];\n            }\n        }\n        var xmin = mmin.apply(0, X),\n            ymin = mmin.apply(0, Y),\n            xmax = mmax.apply(0, X),\n            ymax = mmax.apply(0, Y),\n            bb = box(xmin, ymin, xmax - xmin, ymax - ymin);\n        pth.bbox = clone(bb);\n        return bb;\n    }\n    function rectPath(x, y, w, h, r) {\n        if (r) {\n            return [\n                [\"M\", +x + +r, y],\n                [\"l\", w - r * 2, 0],\n                [\"a\", r, r, 0, 0, 1, r, r],\n                [\"l\", 0, h - r * 2],\n                [\"a\", r, r, 0, 0, 1, -r, r],\n                [\"l\", r * 2 - w, 0],\n                [\"a\", r, r, 0, 0, 1, -r, -r],\n                [\"l\", 0, r * 2 - h],\n                [\"a\", r, r, 0, 0, 1, r, -r],\n                [\"z\"]\n            ];\n        }\n        var res = [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n        res.toString = toString;\n        return res;\n    }\n    function ellipsePath(x, y, rx, ry, a) {\n        if (a == null && ry == null) {\n            ry = rx;\n        }\n        x = +x;\n        y = +y;\n        rx = +rx;\n        ry = +ry;\n        if (a != null) {\n            var rad = Math.PI / 180,\n                x1 = x + rx * Math.cos(-ry * rad),\n                x2 = x + rx * Math.cos(-a * rad),\n                y1 = y + rx * Math.sin(-ry * rad),\n                y2 = y + rx * Math.sin(-a * rad),\n                res = [[\"M\", x1, y1], [\"A\", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n        } else {\n            res = [\n                [\"M\", x, y],\n                [\"m\", 0, -ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry],\n                [\"z\"]\n            ];\n        }\n        res.toString = toString;\n        return res;\n    }\n    var unit2px = Snap._unit2px,\n        getPath = {\n        path: function (el) {\n            return el.attr(\"path\");\n        },\n        circle: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx, attr.cy, attr.r);\n        },\n        ellipse: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);\n        },\n        rect: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);\n        },\n        image: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);\n        },\n        line: function (el) {\n            return \"M\" + [el.attr(\"x1\") || 0, el.attr(\"y1\") || 0, el.attr(\"x2\"), el.attr(\"y2\")];\n        },\n        polyline: function (el) {\n            return \"M\" + el.attr(\"points\");\n        },\n        polygon: function (el) {\n            return \"M\" + el.attr(\"points\") + \"z\";\n        },\n        deflt: function (el) {\n            var bbox = el.node.getBBox();\n            return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n        }\n    };\n    function pathToRelative(pathArray) {\n        var pth = paths(pathArray),\n            lowerCase = String.prototype.toLowerCase;\n        if (pth.rel) {\n            return pathClone(pth.rel);\n        }\n        if (!Snap.is(pathArray, \"array\") || !Snap.is(pathArray && pathArray[0], \"array\")) {\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0;\n        if (pathArray[0][0] == \"M\") {\n            x = pathArray[0][1];\n            y = pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res.push([\"M\", x, y]);\n        }\n        for (var i = start, ii = pathArray.length; i < ii; i++) {\n            var r = res[i] = [],\n                pa = pathArray[i];\n            if (pa[0] != lowerCase.call(pa[0])) {\n                r[0] = lowerCase.call(pa[0]);\n                switch (r[0]) {\n                    case \"a\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +(pa[6] - x).toFixed(3);\n                        r[7] = +(pa[7] - y).toFixed(3);\n                        break;\n                    case \"v\":\n                        r[1] = +(pa[1] - y).toFixed(3);\n                        break;\n                    case \"m\":\n                        mx = pa[1];\n                        my = pa[2];\n                    default:\n                        for (var j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +(pa[j] - (j % 2 ? x : y)).toFixed(3);\n                        }\n                }\n            } else {\n                r = res[i] = [];\n                if (pa[0] == \"m\") {\n                    mx = pa[1] + x;\n                    my = pa[2] + y;\n                }\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    res[i][k] = pa[k];\n                }\n            }\n            var len = res[i].length;\n            switch (res[i][0]) {\n                case \"z\":\n                    x = mx;\n                    y = my;\n                    break;\n                case \"h\":\n                    x += +res[i][len - 1];\n                    break;\n                case \"v\":\n                    y += +res[i][len - 1];\n                    break;\n                default:\n                    x += +res[i][len - 2];\n                    y += +res[i][len - 1];\n            }\n        }\n        res.toString = toString;\n        pth.rel = pathClone(res);\n        return res;\n    }\n    function pathToAbsolute(pathArray) {\n        var pth = paths(pathArray);\n        if (pth.abs) {\n            return pathClone(pth.abs);\n        }\n        if (!is(pathArray, \"array\") || !is(pathArray && pathArray[0], \"array\")) { // rough assumption\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        if (!pathArray || !pathArray.length) {\n            return [[\"M\", 0, 0]];\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0,\n            pa0;\n        if (pathArray[0][0] == \"M\") {\n            x = +pathArray[0][1];\n            y = +pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res[0] = [\"M\", x, y];\n        }\n        var crz = pathArray.length == 3 &&\n            pathArray[0][0] == \"M\" &&\n            pathArray[1][0].toUpperCase() == \"R\" &&\n            pathArray[2][0].toUpperCase() == \"Z\";\n        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n            res.push(r = []);\n            pa = pathArray[i];\n            pa0 = pa[0];\n            if (pa0 != pa0.toUpperCase()) {\n                r[0] = pa0.toUpperCase();\n                switch (r[0]) {\n                    case \"A\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +pa[6] + x;\n                        r[7] = +pa[7] + y;\n                        break;\n                    case \"V\":\n                        r[1] = +pa[1] + y;\n                        break;\n                    case \"H\":\n                        r[1] = +pa[1] + x;\n                        break;\n                    case \"R\":\n                        var dots = [x, y].concat(pa.slice(1));\n                        for (var j = 2, jj = dots.length; j < jj; j++) {\n                            dots[j] = +dots[j] + x;\n                            dots[++j] = +dots[j] + y;\n                        }\n                        res.pop();\n                        res = res.concat(catmullRom2bezier(dots, crz));\n                        break;\n                    case \"O\":\n                        res.pop();\n                        dots = ellipsePath(x, y, pa[1], pa[2]);\n                        dots.push(dots[0]);\n                        res = res.concat(dots);\n                        break;\n                    case \"U\":\n                        res.pop();\n                        res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                        r = [\"U\"].concat(res[res.length - 1].slice(-2));\n                        break;\n                    case \"M\":\n                        mx = +pa[1] + x;\n                        my = +pa[2] + y;\n                    default:\n                        for (j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +pa[j] + (j % 2 ? x : y);\n                        }\n                }\n            } else if (pa0 == \"R\") {\n                dots = [x, y].concat(pa.slice(1));\n                res.pop();\n                res = res.concat(catmullRom2bezier(dots, crz));\n                r = [\"R\"].concat(pa.slice(-2));\n            } else if (pa0 == \"O\") {\n                res.pop();\n                dots = ellipsePath(x, y, pa[1], pa[2]);\n                dots.push(dots[0]);\n                res = res.concat(dots);\n            } else if (pa0 == \"U\") {\n                res.pop();\n                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                r = [\"U\"].concat(res[res.length - 1].slice(-2));\n            } else {\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    r[k] = pa[k];\n                }\n            }\n            pa0 = pa0.toUpperCase();\n            if (pa0 != \"O\") {\n                switch (r[0]) {\n                    case \"Z\":\n                        x = +mx;\n                        y = +my;\n                        break;\n                    case \"H\":\n                        x = r[1];\n                        break;\n                    case \"V\":\n                        y = r[1];\n                        break;\n                    case \"M\":\n                        mx = r[r.length - 2];\n                        my = r[r.length - 1];\n                    default:\n                        x = r[r.length - 2];\n                        y = r[r.length - 1];\n                }\n            }\n        }\n        res.toString = toString;\n        pth.abs = pathClone(res);\n        return res;\n    }\n    function l2c(x1, y1, x2, y2) {\n        return [x1, y1, x2, y2, x2, y2];\n    }\n    function q2c(x1, y1, ax, ay, x2, y2) {\n        var _13 = 1 / 3,\n            _23 = 2 / 3;\n        return [\n                _13 * x1 + _23 * ax,\n                _13 * y1 + _23 * ay,\n                _13 * x2 + _23 * ax,\n                _13 * y2 + _23 * ay,\n                x2,\n                y2\n            ];\n    }\n    function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n        // for more information of where this math came from visit:\n        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n        var _120 = PI * 120 / 180,\n            rad = PI / 180 * (+angle || 0),\n            res = [],\n            xy,\n            rotate = Snap._.cacher(function (x, y, rad) {\n                var X = x * math.cos(rad) - y * math.sin(rad),\n                    Y = x * math.sin(rad) + y * math.cos(rad);\n                return {x: X, y: Y};\n            });\n        if (!rx || !ry) {\n            return [x1, y1, x2, y2, x2, y2];\n        }\n        if (!recursive) {\n            xy = rotate(x1, y1, -rad);\n            x1 = xy.x;\n            y1 = xy.y;\n            xy = rotate(x2, y2, -rad);\n            x2 = xy.x;\n            y2 = xy.y;\n            var cos = math.cos(PI / 180 * angle),\n                sin = math.sin(PI / 180 * angle),\n                x = (x1 - x2) / 2,\n                y = (y1 - y2) / 2;\n            var h = x * x / (rx * rx) + y * y / (ry * ry);\n            if (h > 1) {\n                h = math.sqrt(h);\n                rx = h * rx;\n                ry = h * ry;\n            }\n            var rx2 = rx * rx,\n                ry2 = ry * ry,\n                k = (large_arc_flag == sweep_flag ? -1 : 1) *\n                    math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n                cx = k * rx * y / ry + (x1 + x2) / 2,\n                cy = k * -ry * x / rx + (y1 + y2) / 2,\n                f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n                f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n            f1 = x1 < cx ? PI - f1 : f1;\n            f2 = x2 < cx ? PI - f2 : f2;\n            f1 < 0 && (f1 = PI * 2 + f1);\n            f2 < 0 && (f2 = PI * 2 + f2);\n            if (sweep_flag && f1 > f2) {\n                f1 = f1 - PI * 2;\n            }\n            if (!sweep_flag && f2 > f1) {\n                f2 = f2 - PI * 2;\n            }\n        } else {\n            f1 = recursive[0];\n            f2 = recursive[1];\n            cx = recursive[2];\n            cy = recursive[3];\n        }\n        var df = f2 - f1;\n        if (abs(df) > _120) {\n            var f2old = f2,\n                x2old = x2,\n                y2old = y2;\n            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n            x2 = cx + rx * math.cos(f2);\n            y2 = cy + ry * math.sin(f2);\n            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n        }\n        df = f2 - f1;\n        var c1 = math.cos(f1),\n            s1 = math.sin(f1),\n            c2 = math.cos(f2),\n            s2 = math.sin(f2),\n            t = math.tan(df / 4),\n            hx = 4 / 3 * rx * t,\n            hy = 4 / 3 * ry * t,\n            m1 = [x1, y1],\n            m2 = [x1 + hx * s1, y1 - hy * c1],\n            m3 = [x2 + hx * s2, y2 - hy * c2],\n            m4 = [x2, y2];\n        m2[0] = 2 * m1[0] - m2[0];\n        m2[1] = 2 * m1[1] - m2[1];\n        if (recursive) {\n            return [m2, m3, m4].concat(res);\n        } else {\n            res = [m2, m3, m4].concat(res).join().split(\",\");\n            var newres = [];\n            for (var i = 0, ii = res.length; i < ii; i++) {\n                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n            }\n            return newres;\n        }\n    }\n    function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t;\n        return {\n            x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n            y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n        };\n    }\n\n    // Returns bounding box of cubic bezier curve.\n    // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    // Original version: NISHIO Hirokazu\n    // Modifications: https://github.com/timo22345\n    function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {\n        var tvalues = [],\n            bounds = [[], []],\n            a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n        for (var i = 0; i < 2; ++i) {\n            if (i == 0) {\n                b = 6 * x0 - 12 * x1 + 6 * x2;\n                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n                c = 3 * x1 - 3 * x0;\n            } else {\n                b = 6 * y0 - 12 * y1 + 6 * y2;\n                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n                c = 3 * y1 - 3 * y0;\n            }\n            if (abs(a) < 1e-12) {\n                if (abs(b) < 1e-12) {\n                    continue;\n                }\n                t = -c / b;\n                if (0 < t && t < 1) {\n                    tvalues.push(t);\n                }\n                continue;\n            }\n            b2ac = b * b - 4 * c * a;\n            sqrtb2ac = math.sqrt(b2ac);\n            if (b2ac < 0) {\n                continue;\n            }\n            t1 = (-b + sqrtb2ac) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n                tvalues.push(t1);\n            }\n            t2 = (-b - sqrtb2ac) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n                tvalues.push(t2);\n            }\n        }\n\n        var x, y, j = tvalues.length,\n            jlen = j,\n            mt;\n        while (j--) {\n            t = tvalues[j];\n            mt = 1 - t;\n            bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n            bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n        }\n\n        bounds[0][jlen] = x0;\n        bounds[1][jlen] = y0;\n        bounds[0][jlen + 1] = x3;\n        bounds[1][jlen + 1] = y3;\n        bounds[0].length = bounds[1].length = jlen + 2;\n\n\n        return {\n          min: {x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1])},\n          max: {x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1])}\n        };\n    }\n\n    function path2curve(path, path2) {\n        var pth = !path2 && paths(path);\n        if (!path2 && pth.curve) {\n            return pathClone(pth.curve);\n        }\n        var p = pathToAbsolute(path),\n            p2 = path2 && pathToAbsolute(path2),\n            attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            processPath = function (path, d, pcom) {\n                var nx, ny;\n                if (!path) {\n                    return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n                }\n                !(path[0] in {T: 1, Q: 1}) && (d.qx = d.qy = null);\n                switch (path[0]) {\n                    case \"M\":\n                        d.X = path[1];\n                        d.Y = path[2];\n                        break;\n                    case \"A\":\n                        path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n                        break;\n                    case \"S\":\n                        if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n                            nx = d.x * 2 - d.bx;          // And reflect the previous\n                            ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n                        }\n                        else {                            // or some else or nothing\n                            nx = d.x;\n                            ny = d.y;\n                        }\n                        path = [\"C\", nx, ny].concat(path.slice(1));\n                        break;\n                    case \"T\":\n                        if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n                            d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n                            d.qy = d.y * 2 - d.qy;        // to case \"S\".\n                        }\n                        else {                            // or something else or nothing\n                            d.qx = d.x;\n                            d.qy = d.y;\n                        }\n                        path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n                        break;\n                    case \"Q\":\n                        d.qx = path[1];\n                        d.qy = path[2];\n                        path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n                        break;\n                    case \"L\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));\n                        break;\n                    case \"H\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));\n                        break;\n                    case \"V\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));\n                        break;\n                    case \"Z\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));\n                        break;\n                }\n                return path;\n            },\n            fixArc = function (pp, i) {\n                if (pp[i].length > 7) {\n                    pp[i].shift();\n                    var pi = pp[i];\n                    while (pi.length) {\n                        pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n                        p2 && (pcoms2[i] = \"A\"); // the same as above\n                        pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));\n                    }\n                    pp.splice(i, 1);\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            fixM = function (path1, path2, a1, a2, i) {\n                if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n                    path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n                    a1.bx = 0;\n                    a1.by = 0;\n                    a1.x = path1[i][1];\n                    a1.y = path1[i][2];\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            pcoms1 = [], // path commands of original path p\n            pcoms2 = [], // path commands of original path p2\n            pfirst = \"\", // temporary holder for original path command\n            pcom = \"\"; // holder for previous path command of original path\n        for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n            p[i] && (pfirst = p[i][0]); // save current path command\n\n            if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n            {\n                pcoms1[i] = pfirst; // Save current path command\n                i && ( pcom = pcoms1[i - 1]); // Get previous path command pcom\n            }\n            p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n            if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n            // which may produce multiple C:s\n            // so we have to make sure that C is also C in original path\n\n            fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n            if (p2) { // the same procedures is done to p2\n                p2[i] && (pfirst = p2[i][0]);\n                if (pfirst != \"C\") {\n                    pcoms2[i] = pfirst;\n                    i && (pcom = pcoms2[i - 1]);\n                }\n                p2[i] = processPath(p2[i], attrs2, pcom);\n\n                if (pcoms2[i] != \"A\" && pfirst == \"C\") {\n                    pcoms2[i] = \"C\";\n                }\n\n                fixArc(p2, i);\n            }\n            fixM(p, p2, attrs, attrs2, i);\n            fixM(p2, p, attrs2, attrs, i);\n            var seg = p[i],\n                seg2 = p2 && p2[i],\n                seglen = seg.length,\n                seg2len = p2 && seg2.length;\n            attrs.x = seg[seglen - 2];\n            attrs.y = seg[seglen - 1];\n            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n            attrs2.x = p2 && seg2[seg2len - 2];\n            attrs2.y = p2 && seg2[seg2len - 1];\n        }\n        if (!p2) {\n            pth.curve = pathClone(p);\n        }\n        return p2 ? [p, p2] : p;\n    }\n    function mapPath(path, matrix) {\n        if (!matrix) {\n            return path;\n        }\n        var x, y, i, j, ii, jj, pathi;\n        path = path2curve(path);\n        for (i = 0, ii = path.length; i < ii; i++) {\n            pathi = path[i];\n            for (j = 1, jj = pathi.length; j < jj; j += 2) {\n                x = matrix.x(pathi[j], pathi[j + 1]);\n                y = matrix.y(pathi[j], pathi[j + 1]);\n                pathi[j] = x;\n                pathi[j + 1] = y;\n            }\n        }\n        return path;\n    }\n\n    // http://schepers.cc/getting-to-the-point\n    function catmullRom2bezier(crp, z) {\n        var d = [];\n        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n            var p = [\n                        {x: +crp[i - 2], y: +crp[i - 1]},\n                        {x: +crp[i],     y: +crp[i + 1]},\n                        {x: +crp[i + 2], y: +crp[i + 3]},\n                        {x: +crp[i + 4], y: +crp[i + 5]}\n                    ];\n            if (z) {\n                if (!i) {\n                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n                } else if (iLen - 4 == i) {\n                    p[3] = {x: +crp[0], y: +crp[1]};\n                } else if (iLen - 2 == i) {\n                    p[2] = {x: +crp[0], y: +crp[1]};\n                    p[3] = {x: +crp[2], y: +crp[3]};\n                }\n            } else {\n                if (iLen - 4 == i) {\n                    p[3] = p[2];\n                } else if (!i) {\n                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n                }\n            }\n            d.push([\"C\",\n                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n                  p[2].x,\n                  p[2].y\n            ]);\n        }\n\n        return d;\n    }\n\n    // export\n    Snap.path = paths;\n\n    /*\\\n     * Snap.path.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the given path in pixels\n     **\n     - path (string) SVG path string\n     **\n     = (number) length\n    \\*/\n    Snap.path.getTotalLength = getTotalLength;\n    /*\\\n     * Snap.path.getPointAtLength\n     [ method ]\n     **\n     * Returns the coordinates of the point located at the given length along the given path\n     **\n     - path (string) SVG path string\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    Snap.path.getPointAtLength = getPointAtLength;\n    /*\\\n     * Snap.path.getSubpath\n     [ method ]\n     **\n     * Returns the subpath of a given path between given start and end lengths\n     **\n     - path (string) SVG path string\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    Snap.path.getSubpath = function (path, from, to) {\n        if (this.getTotalLength(path) - to < 1e-6) {\n            return getSubpathsAtLength(path, from).end;\n        }\n        var a = getSubpathsAtLength(path, to, 1);\n        return from ? getSubpathsAtLength(a, from).end : a;\n    };\n    /*\\\n     * Element.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the path in pixels (only works for `path` elements)\n     = (number) length\n    \\*/\n    elproto.getTotalLength = function () {\n        if (this.node.getTotalLength) {\n            return this.node.getTotalLength();\n        }\n    };\n    // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?\n    /*\\\n     * Element.getPointAtLength\n     [ method ]\n     **\n     * Returns coordinates of the point located at the given length on the given path (only works for `path` elements)\n     **\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    elproto.getPointAtLength = function (length) {\n        return getPointAtLength(this.attr(\"d\"), length);\n    };\n    // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n    /*\\\n     * Element.getSubpath\n     [ method ]\n     **\n     * Returns subpath of a given element from given start and end lengths (only works for `path` elements)\n     **\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    elproto.getSubpath = function (from, to) {\n        return Snap.path.getSubpath(this.attr(\"d\"), from, to);\n    };\n    Snap._.box = box;\n    /*\\\n     * Snap.path.findDotsAtSegment\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds dot coordinates on the given cubic beziér curve at the given t\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     - t (number) position on the curve (0..1)\n     = (object) point information in format:\n     o {\n     o     x: (number) x coordinate of the point,\n     o     y: (number) y coordinate of the point,\n     o     m: {\n     o         x: (number) x coordinate of the left anchor,\n     o         y: (number) y coordinate of the left anchor\n     o     },\n     o     n: {\n     o         x: (number) x coordinate of the right anchor,\n     o         y: (number) y coordinate of the right anchor\n     o     },\n     o     start: {\n     o         x: (number) x coordinate of the start of the curve,\n     o         y: (number) y coordinate of the start of the curve\n     o     },\n     o     end: {\n     o         x: (number) x coordinate of the end of the curve,\n     o         y: (number) y coordinate of the end of the curve\n     o     },\n     o     alpha: (number) angle of the curve derivative at the point\n     o }\n    \\*/\n    Snap.path.findDotsAtSegment = findDotsAtSegment;\n    /*\\\n     * Snap.path.bezierBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given cubic beziér curve\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     * or\n     - bez (array) array of six points for beziér curve\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.bezierBBox = bezierBBox;\n    /*\\\n     * Snap.path.isPointInsideBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside bounding box\n     - bbox (string) bounding box\n     - x (string) x coordinate of the point\n     - y (string) y coordinate of the point\n     = (boolean) `true` if point is inside\n    \\*/\n    Snap.path.isPointInsideBBox = isPointInsideBBox;\n    Snap.closest = function (x, y, X, Y) {\n        var r = 100,\n            b = box(x - r / 2, y - r / 2, r, r),\n            inside = [],\n            getter = X[0].hasOwnProperty(\"x\") ? function (i) {\n                return {\n                    x: X[i].x,\n                    y: X[i].y\n                };\n            } : function (i) {\n                return {\n                    x: X[i],\n                    y: Y[i]\n                };\n            },\n            found = 0;\n        while (r <= 1e6 && !found) {\n            for (var i = 0, ii = X.length; i < ii; i++) {\n                var xy = getter(i);\n                if (isPointInsideBBox(b, xy.x, xy.y)) {\n                    found++;\n                    inside.push(xy);\n                    break;\n                }\n            }\n            if (!found) {\n                r *= 2;\n                b = box(x - r / 2, y - r / 2, r, r)\n            }\n        }\n        if (r == 1e6) {\n            return;\n        }\n        var len = Infinity,\n            res;\n        for (i = 0, ii = inside.length; i < ii; i++) {\n            var l = Snap.len(x, y, inside[i].x, inside[i].y);\n            if (len > l) {\n                len = l;\n                inside[i].len = l;\n                res = inside[i];\n            }\n        }\n        return res;\n    };\n    /*\\\n     * Snap.path.isBBoxIntersect\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if two bounding boxes intersect\n     - bbox1 (string) first bounding box\n     - bbox2 (string) second bounding box\n     = (boolean) `true` if bounding boxes intersect\n    \\*/\n    Snap.path.isBBoxIntersect = isBBoxIntersect;\n    /*\\\n     * Snap.path.intersection\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds intersections of two paths\n     - path1 (string) path string\n     - path2 (string) path string\n     = (array) dots of intersection\n     o [\n     o     {\n     o         x: (number) x coordinate of the point,\n     o         y: (number) y coordinate of the point,\n     o         t1: (number) t value for segment of path1,\n     o         t2: (number) t value for segment of path2,\n     o         segment1: (number) order number for segment of path1,\n     o         segment2: (number) order number for segment of path2,\n     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,\n     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n     o     }\n     o ]\n    \\*/\n    Snap.path.intersection = pathIntersection;\n    Snap.path.intersectionNumber = pathIntersectionNumber;\n    /*\\\n     * Snap.path.isPointInside\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside a given closed path.\n     *\n     * Note: fill mode doesn’t affect the result of this method.\n     - path (string) path string\n     - x (number) x of the point\n     - y (number) y of the point\n     = (boolean) `true` if point is inside the path\n    \\*/\n    Snap.path.isPointInside = isPointInsidePath;\n    /*\\\n     * Snap.path.getBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given path\n     - path (string) path string\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.getBBox = pathBBox;\n    Snap.path.get = getPath;\n    /*\\\n     * Snap.path.toRelative\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into relative values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toRelative = pathToRelative;\n    /*\\\n     * Snap.path.toAbsolute\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into absolute values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toAbsolute = pathToAbsolute;\n    /*\\\n     * Snap.path.toCubic\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path to a new path where all segments are cubic beziér curves\n     - pathString (string|array) path string or array of segments\n     = (array) array of segments\n    \\*/\n    Snap.path.toCubic = path2curve;\n    /*\\\n     * Snap.path.map\n     [ method ]\n     **\n     * Transform the path string with the given matrix\n     - path (string) path string\n     - matrix (object) see @Matrix\n     = (string) transformed path string\n    \\*/\n    Snap.path.map = mapPath;\n    Snap.path.toString = toString;\n    Snap.path.clone = pathClone;\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var mmax = Math.max,\n        mmin = Math.min;\n\n    // Set\n    var Set = function (items) {\n        this.items = [];\n\tthis.bindings = {};\n        this.length = 0;\n        this.type = \"set\";\n        if (items) {\n            for (var i = 0, ii = items.length; i < ii; i++) {\n                if (items[i]) {\n                    this[this.items.length] = this.items[this.items.length] = items[i];\n                    this.length++;\n                }\n            }\n        }\n    },\n    setproto = Set.prototype;\n    /*\\\n     * Set.push\n     [ method ]\n     **\n     * Adds each argument to the current set\n     = (object) original element\n    \\*/\n    setproto.push = function () {\n        var item,\n            len;\n        for (var i = 0, ii = arguments.length; i < ii; i++) {\n            item = arguments[i];\n            if (item) {\n                len = this.items.length;\n                this[len] = this.items[len] = item;\n                this.length++;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.pop\n     [ method ]\n     **\n     * Removes last element and returns it\n     = (object) element\n    \\*/\n    setproto.pop = function () {\n        this.length && delete this[this.length--];\n        return this.items.pop();\n    };\n    /*\\\n     * Set.forEach\n     [ method ]\n     **\n     * Executes given function for each element in the set\n     *\n     * If the function returns `false`, the loop stops running.\n     **\n     - callback (function) function to run\n     - thisArg (object) context object for the callback\n     = (object) Set object\n    \\*/\n    setproto.forEach = function (callback, thisArg) {\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            if (callback.call(thisArg, this.items[i], i) === false) {\n                return this;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.animate\n     [ method ]\n     **\n     * Animates each element in set in sync.\n     *\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     * or\n     - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n     > Usage\n     | // animate all elements in set to radius 10\n     | set.animate({r: 10}, 500, mina.easein);\n     | // or\n     | // animate first element to radius 10, but second to radius 20 and in different time\n     | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);\n     = (Element) the current element\n    \\*/\n    setproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Snap._.Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = easing.dur;\n            attrs = attrs.attr;\n        }\n        var args = arguments;\n        if (Snap.is(attrs, \"array\") && Snap.is(args[args.length - 1], \"array\")) {\n            var each = true;\n        }\n        var begin,\n            handler = function () {\n                if (begin) {\n                    this.b = begin;\n                } else {\n                    begin = this.b;\n                }\n            },\n            cb = 0,\n            set = this,\n            callbacker = callback && function () {\n                if (++cb == set.length) {\n                    callback.call(this);\n                }\n            };\n        return this.forEach(function (el, i) {\n            eve.once(\"snap.animcreated.\" + el.id, handler);\n            if (each) {\n                args[i] && el.animate.apply(el, args[i]);\n            } else {\n                el.animate(attrs, ms, easing, callbacker);\n            }\n        });\n    };\n    /*\\\n     * Set.remove\n     [ method ]\n     **\n     * Removes all children of the set.\n     *\n     = (object) Set object\n    \\*/\n    setproto.remove = function () {\n        while (this.length) {\n            this.pop().remove();\n        }\n        return this;\n    };\n    /*\\\n     * Set.bind\n     [ method ]\n     **\n     * Specifies how to handle a specific attribute when applied\n     * to a set.\n     *\n     **\n     - attr (string) attribute name\n     - callback (function) function to run\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     - eattr (string) attribute on the element to bind the attribute to\n     = (object) Set object\n    \\*/\n    setproto.bind = function (attr, a, b) {\n        var data = {};\n        if (typeof a == \"function\") {\n            this.bindings[attr] = a;\n        } else {\n            var aname = b || attr;\n            this.bindings[attr] = function (v) {\n                data[aname] = v;\n                a.attr(data);\n            };\n        }\n        return this;\n    };\n    /*\\\n     * Set.attr\n     [ method ]\n     **\n     * Equivalent of @Element.attr.\n     = (object) Set object\n    \\*/\n    setproto.attr = function (value) {\n        var unbound = {};\n        for (var k in value) {\n            if (this.bindings[k]) {\n                this.bindings[k](value[k]);\n            } else {\n                unbound[k] = value[k];\n            }\n        }\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            this.items[i].attr(unbound);\n        }\n        return this;\n    };\n    /*\\\n     * Set.clear\n     [ method ]\n     **\n     * Removes all elements from the set\n    \\*/\n    setproto.clear = function () {\n        while (this.length) {\n            this.pop();\n        }\n    };\n    /*\\\n     * Set.splice\n     [ method ]\n     **\n     * Removes range of elements from the set\n     **\n     - index (number) position of the deletion\n     - count (number) number of element to remove\n     - insertion… (object) #optional elements to insert\n     = (object) set elements that were deleted\n    \\*/\n    setproto.splice = function (index, count, insertion) {\n        index = index < 0 ? mmax(this.length + index, 0) : index;\n        count = mmax(0, mmin(this.length - index, count));\n        var tail = [],\n            todel = [],\n            args = [],\n            i;\n        for (i = 2; i < arguments.length; i++) {\n            args.push(arguments[i]);\n        }\n        for (i = 0; i < count; i++) {\n            todel.push(this[index + i]);\n        }\n        for (; i < this.length - index; i++) {\n            tail.push(this[index + i]);\n        }\n        var arglen = args.length;\n        for (i = 0; i < arglen + tail.length; i++) {\n            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n        }\n        i = this.items.length = this.length -= count - arglen;\n        while (this[i]) {\n            delete this[i++];\n        }\n        return new Set(todel);\n    };\n    /*\\\n     * Set.exclude\n     [ method ]\n     **\n     * Removes given element from the set\n     **\n     - element (object) element to remove\n     = (boolean) `true` if object was found and removed from the set\n    \\*/\n    setproto.exclude = function (el) {\n        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n            this.splice(i, 1);\n            return true;\n        }\n        return false;\n    };\n    /*\\\n     * Set.insertAfter\n     [ method ]\n     **\n     * Inserts set elements after given element.\n     **\n     - element (object) set will be inserted after this element\n     = (object) Set object\n    \\*/\n    setproto.insertAfter = function (el) {\n        var i = this.items.length;\n        while (i--) {\n            this.items[i].insertAfter(el);\n        }\n        return this;\n    };\n    /*\\\n     * Set.getBBox\n     [ method ]\n     **\n     * Union of all bboxes of the set. See @Element.getBBox.\n     = (object) bounding box descriptor. See @Element.getBBox.\n    \\*/\n    setproto.getBBox = function () {\n        var x = [],\n            y = [],\n            x2 = [],\n            y2 = [];\n        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n            var box = this.items[i].getBBox();\n            x.push(box.x);\n            y.push(box.y);\n            x2.push(box.x + box.width);\n            y2.push(box.y + box.height);\n        }\n        x = mmin.apply(0, x);\n        y = mmin.apply(0, y);\n        x2 = mmax.apply(0, x2);\n        y2 = mmax.apply(0, y2);\n        return {\n            x: x,\n            y: y,\n            x2: x2,\n            y2: y2,\n            width: x2 - x,\n            height: y2 - y,\n            cx: x + (x2 - x) / 2,\n            cy: y + (y2 - y) / 2\n        };\n    };\n    /*\\\n     * Set.insertAfter\n     [ method ]\n     **\n     * Creates a clone of the set.\n     **\n     = (object) New Set object\n    \\*/\n    setproto.clone = function (s) {\n        s = new Set;\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            s.push(this.items[i].clone());\n        }\n        return s;\n    };\n    setproto.toString = function () {\n        return \"Snap\\u2018s set\";\n    };\n    setproto.type = \"set\";\n    // export\n    /*\\\n     * Snap.Set\n     [ property ]\n     **\n     * Set constructor.\n    \\*/\n    Snap.Set = Set;\n    /*\\\n     * Snap.set\n     [ method ]\n     **\n     * Creates a set and fills it with list of arguments.\n     **\n     = (object) New Set object\n     | var r = paper.rect(0, 0, 10, 10),\n     |     s1 = Snap.set(), // empty set\n     |     s2 = Snap.set(r, paper.circle(100, 100, 20)); // prefilled set\n    \\*/\n    Snap.set = function () {\n        var set = new Set;\n        if (arguments.length) {\n            set.push.apply(set, Array.prototype.slice.call(arguments, 0));\n        }\n        return set;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var names = {},\n        reUnit = /[%a-z]+$/i,\n        Str = String;\n    names.stroke = names.fill = \"colour\";\n    function getEmpty(item) {\n        var l = item[0];\n        switch (l.toLowerCase()) {\n            case \"t\": return [l, 0, 0];\n            case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n            case \"r\": if (item.length == 4) {\n                return [l, 0, item[2], item[3]];\n            } else {\n                return [l, 0];\n            }\n            case \"s\": if (item.length == 5) {\n                return [l, 1, 1, item[3], item[4]];\n            } else if (item.length == 3) {\n                return [l, 1, 1];\n            } else {\n                return [l, 1];\n            }\n        }\n    }\n    function equaliseTransform(t1, t2, getBBox) {\n        t1 = t1 || new Snap.Matrix;\n        t2 = t2 || new Snap.Matrix;\n        t1 = Snap.parseTransformString(t1.toTransformString()) || [];\n        t2 = Snap.parseTransformString(t2.toTransformString()) || [];\n        var maxlength = Math.max(t1.length, t2.length),\n            from = [],\n            to = [],\n            i = 0, j, jj,\n            tt1, tt2;\n        for (; i < maxlength; i++) {\n            tt1 = t1[i] || getEmpty(t2[i]);\n            tt2 = t2[i] || getEmpty(tt1);\n            if (tt1[0] != tt2[0] ||\n                tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3]) ||\n                tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4])\n                ) {\n                    t1 = Snap._.transform2matrix(t1, getBBox());\n                    t2 = Snap._.transform2matrix(t2, getBBox());\n                    from = [[\"m\", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];\n                    to = [[\"m\", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];\n                    break;\n            }\n            from[i] = [];\n            to[i] = [];\n            for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {\n                j in tt1 && (from[i][j] = tt1[j]);\n                j in tt2 && (to[i][j] = tt2[j]);\n            }\n        }\n        return {\n            from: path2array(from),\n            to: path2array(to),\n            f: getPath(from)\n        };\n    }\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    function getViewBox(val) {\n        return val.join(\" \");\n    }\n    function getColour(clr) {\n        return Snap.rgb(clr[0], clr[1], clr[2], clr[3]);\n    }\n    function getPath(path) {\n        var k = 0, i, ii, j, jj, out, a, b = [];\n        for (i = 0, ii = path.length; i < ii; i++) {\n            out = \"[\";\n            a = ['\"' + path[i][0] + '\"'];\n            for (j = 1, jj = path[i].length; j < jj; j++) {\n                a[j] = \"val[\" + k++ + \"]\";\n            }\n            out += a + \"]\";\n            b[i] = out;\n        }\n        return Function(\"val\", \"return Snap.path.toString.call([\" + b + \"])\");\n    }\n    function path2array(path) {\n        var out = [];\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            for (var j = 1, jj = path[i].length; j < jj; j++) {\n                out.push(path[i][j]);\n            }\n        }\n        return out;\n    }\n    function isNumeric(obj) {\n        return isFinite(obj);\n    }\n    function arrayEqual(arr1, arr2) {\n        if (!Snap.is(arr1, \"array\") || !Snap.is(arr2, \"array\")) {\n            return false;\n        }\n        return arr1.toString() == arr2.toString();\n    }\n    Element.prototype.equal = function (name, b) {\n        return eve(\"snap.util.equal\", this, name, b).firstDefined();\n    };\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this;\n        if (names[name] == \"colour\") {\n            A = Snap.color(a);\n            B = Snap.color(b);\n            return {\n                from: [A.r, A.g, A.b, A.opacity],\n                to: [B.r, B.g, B.b, B.opacity],\n                f: getColour\n            };\n        }\n        if (name == \"viewBox\") {\n            A = this.attr(name).vb.split(\" \").map(Number);\n            B = b.split(\" \").map(Number);\n            return {\n                from: A,\n                to: B,\n                f: getViewBox\n            };\n        }\n        if (name == \"transform\" || name == \"gradientTransform\" || name == \"patternTransform\") {\n            if (typeof b == \"string\") {\n                b = Str(b).replace(/\\.{3}|\\u2026/g, a);\n            }\n            a = this.matrix;\n            if (!Snap._.rgTransform.test(b)) {\n                b = Snap._.transform2matrix(Snap._.svgTransform2string(b), this.getBBox());\n            } else {\n                b = Snap._.transform2matrix(b, this.getBBox());\n            }\n            return equaliseTransform(a, b, function () {\n                return el.getBBox(1);\n            });\n        }\n        if (name == \"d\" || name == \"path\") {\n            A = Snap.path.toCubic(a, b);\n            return {\n                from: path2array(A[0]),\n                to: path2array(A[1]),\n                f: getPath(A[0])\n            };\n        }\n        if (name == \"points\") {\n            A = Str(a).split(Snap._.separator);\n            B = Str(b).split(Snap._.separator);\n            return {\n                from: A,\n                to: B,\n                f: function (val) { return val; }\n            };\n        }\n        if (isNumeric(a) && isNumeric(b)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getNumber\n            };\n        }\n        var aUnit = a.match(reUnit),\n            bUnit = Str(b).match(reUnit);\n        if (aUnit && arrayEqual(aUnit, bUnit)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getUnit(aUnit)\n            };\n        } else {\n            return {\n                from: this.asPX(name),\n                to: this.asPX(name, b),\n                f: getNumber\n            };\n        }\n    });\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n    has = \"hasOwnProperty\",\n    supportsTouch = \"createTouch\" in glob.doc,\n    events = [\n        \"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\",\n        \"mouseover\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\",\n        \"touchcancel\"\n    ],\n    touchMap = {\n        mousedown: \"touchstart\",\n        mousemove: \"touchmove\",\n        mouseup: \"touchend\"\n    },\n    getScroll = function (xy, el) {\n        var name = xy == \"y\" ? \"scrollTop\" : \"scrollLeft\",\n            doc = el && el.node ? el.node.ownerDocument : glob.doc;\n        return doc[name in doc.documentElement ? \"documentElement\" : \"body\"][name];\n    },\n    preventDefault = function () {\n        this.returnValue = false;\n    },\n    preventTouch = function () {\n        return this.originalEvent.preventDefault();\n    },\n    stopPropagation = function () {\n        this.cancelBubble = true;\n    },\n    stopTouch = function () {\n        return this.originalEvent.stopPropagation();\n    },\n    addEvent = function (obj, type, fn, element) {\n        var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,\n            f = function (e) {\n                var scrollY = getScroll(\"y\", element),\n                    scrollX = getScroll(\"x\", element);\n                if (supportsTouch && touchMap[has](type)) {\n                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {\n                            var olde = e;\n                            e = e.targetTouches[i];\n                            e.originalEvent = olde;\n                            e.preventDefault = preventTouch;\n                            e.stopPropagation = stopTouch;\n                            break;\n                        }\n                    }\n                }\n                var x = e.clientX + scrollX,\n                    y = e.clientY + scrollY;\n                return fn.call(element, e, x, y);\n            };\n\n        if (type !== realName) {\n            obj.addEventListener(type, f, false);\n        }\n\n        obj.addEventListener(realName, f, false);\n\n        return function () {\n            if (type !== realName) {\n                obj.removeEventListener(type, f, false);\n            }\n\n            obj.removeEventListener(realName, f, false);\n            return true;\n        };\n    },\n    drag = [],\n    dragMove = function (e) {\n        var x = e.clientX,\n            y = e.clientY,\n            scrollY = getScroll(\"y\"),\n            scrollX = getScroll(\"x\"),\n            dragi,\n            j = drag.length;\n        while (j--) {\n            dragi = drag[j];\n            if (supportsTouch) {\n                var i = e.touches && e.touches.length,\n                    touch;\n                while (i--) {\n                    touch = e.touches[i];\n                    if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {\n                        x = touch.clientX;\n                        y = touch.clientY;\n                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n                        break;\n                    }\n                }\n            } else {\n                e.preventDefault();\n            }\n            var node = dragi.el.node,\n                o,\n                next = node.nextSibling,\n                parent = node.parentNode,\n                display = node.style.display;\n            // glob.win.opera && parent.removeChild(node);\n            // node.style.display = \"none\";\n            // o = dragi.el.paper.getElementByPoint(x, y);\n            // node.style.display = display;\n            // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n            // o && eve(\"snap.drag.over.\" + dragi.el.id, dragi.el, o);\n            x += scrollX;\n            y += scrollY;\n            eve(\"snap.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n        }\n    },\n    dragUp = function (e) {\n        Snap.unmousemove(dragMove).unmouseup(dragUp);\n        var i = drag.length,\n            dragi;\n        while (i--) {\n            dragi = drag[i];\n            dragi.el._drag = {};\n            eve(\"snap.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n            eve.off(\"snap.drag.*.\" + dragi.el.id);\n        }\n        drag = [];\n    };\n    /*\\\n     * Element.click\n     [ method ]\n     **\n     * Adds a click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unclick\n     [ method ]\n     **\n     * Removes a click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.dblclick\n     [ method ]\n     **\n     * Adds a double click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.undblclick\n     [ method ]\n     **\n     * Removes a double click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousedown\n     [ method ]\n     **\n     * Adds a mousedown event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousedown\n     [ method ]\n     **\n     * Removes a mousedown event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousemove\n     [ method ]\n     **\n     * Adds a mousemove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousemove\n     [ method ]\n     **\n     * Removes a mousemove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseout\n     [ method ]\n     **\n     * Adds a mouseout event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseout\n     [ method ]\n     **\n     * Removes a mouseout event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseover\n     [ method ]\n     **\n     * Adds a mouseover event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseover\n     [ method ]\n     **\n     * Removes a mouseover event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseup\n     [ method ]\n     **\n     * Adds a mouseup event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseup\n     [ method ]\n     **\n     * Removes a mouseup event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchstart\n     [ method ]\n     **\n     * Adds a touchstart event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchstart\n     [ method ]\n     **\n     * Removes a touchstart event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchmove\n     [ method ]\n     **\n     * Adds a touchmove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchmove\n     [ method ]\n     **\n     * Removes a touchmove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchend\n     [ method ]\n     **\n     * Adds a touchend event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchend\n     [ method ]\n     **\n     * Removes a touchend event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchcancel\n     [ method ]\n     **\n     * Adds a touchcancel event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchcancel\n     [ method ]\n     **\n     * Removes a touchcancel event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    for (var i = events.length; i--;) {\n        (function (eventName) {\n            Snap[eventName] = elproto[eventName] = function (fn, scope) {\n                if (Snap.is(fn, \"function\")) {\n                    this.events = this.events || [];\n                    this.events.push({\n                        name: eventName,\n                        f: fn,\n                        unbind: addEvent(this.node || document, eventName, fn, scope || this)\n                    });\n                } else {\n                    for (var i = 0, ii = this.events.length; i < ii; i++) if (this.events[i].name == eventName) {\n                        try {\n                            this.events[i].f.call(this);\n                        } catch (e) {}\n                    }\n                }\n                return this;\n            };\n            Snap[\"un\" + eventName] =\n            elproto[\"un\" + eventName] = function (fn) {\n                var events = this.events || [],\n                    l = events.length;\n                while (l--) if (events[l].name == eventName &&\n                               (events[l].f == fn || !fn)) {\n                    events[l].unbind();\n                    events.splice(l, 1);\n                    !events.length && delete this.events;\n                    return this;\n                }\n                return this;\n            };\n        })(events[i]);\n    }\n    /*\\\n     * Element.hover\n     [ method ]\n     **\n     * Adds hover event handlers to the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     - icontext (object) #optional context for hover in handler\n     - ocontext (object) #optional context for hover out handler\n     = (object) @Element\n    \\*/\n    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n    };\n    /*\\\n     * Element.unhover\n     [ method ]\n     **\n     * Removes hover event handlers from the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     = (object) @Element\n    \\*/\n    elproto.unhover = function (f_in, f_out) {\n        return this.unmouseover(f_in).unmouseout(f_out);\n    };\n    var draggable = [];\n    // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.\n    // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?\n    // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.\n    // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?\n    /*\\\n     * Element.drag\n     [ method ]\n     **\n     * Adds event handlers for an element's drag gesture\n     **\n     - onmove (function) handler for moving\n     - onstart (function) handler for drag start\n     - onend (function) handler for drag end\n     - mcontext (object) #optional context for moving handler\n     - scontext (object) #optional context for drag start handler\n     - econtext (object) #optional context for drag end handler\n     * Additionaly following `drag` events are triggered: `drag.start.<id>` on start, \n     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element \n     * `drag.over.<id>` fires as well.\n     *\n     * Start event and start handler are called in specified context or in context of the element with following parameters:\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * Move event and move handler are called in specified context or in context of the element with following parameters:\n     o dx (number) shift by x from the start point\n     o dy (number) shift by y from the start point\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * End event and end handler are called in specified context or in context of the element with following parameters:\n     o event (object) DOM event object\n     = (object) @Element\n    \\*/\n    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n        var el = this;\n        if (!arguments.length) {\n            var origTransform;\n            return el.drag(function (dx, dy) {\n                this.attr({\n                    transform: origTransform + (origTransform ? \"T\" : \"t\") + [dx, dy]\n                });\n            }, function () {\n                origTransform = this.transform().local;\n            });\n        }\n        function start(e, x, y) {\n            (e.originalEvent || e).preventDefault();\n            el._drag.x = x;\n            el._drag.y = y;\n            el._drag.id = e.identifier;\n            !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);\n            drag.push({el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n            onstart && eve.on(\"snap.drag.start.\" + el.id, onstart);\n            onmove && eve.on(\"snap.drag.move.\" + el.id, onmove);\n            onend && eve.on(\"snap.drag.end.\" + el.id, onend);\n            eve(\"snap.drag.start.\" + el.id, start_scope || move_scope || el, x, y, e);\n        }\n        function init(e, x, y) {\n            eve(\"snap.draginit.\" + el.id, el, e, x, y);\n        }\n        eve.on(\"snap.draginit.\" + el.id, start);\n        el._drag = {};\n        draggable.push({el: el, start: start, init: init});\n        el.mousedown(init);\n        return el;\n    };\n    /*\n     * Element.onDragOver\n     [ method ]\n     **\n     * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id)\n     - f (function) handler for event, first argument would be the element you are dragging over\n    \\*/\n    // elproto.onDragOver = function (f) {\n    //     f ? eve.on(\"snap.drag.over.\" + this.id, f) : eve.unbind(\"snap.drag.over.\" + this.id);\n    // };\n    /*\\\n     * Element.undrag\n     [ method ]\n     **\n     * Removes all drag event handlers from the given element\n    \\*/\n    elproto.undrag = function () {\n        var i = draggable.length;\n        while (i--) if (draggable[i].el == this) {\n            this.unmousedown(draggable[i].init);\n            draggable.splice(i, 1);\n            eve.unbind(\"snap.drag.*.\" + this.id);\n            eve.unbind(\"snap.draginit.\" + this.id);\n        }\n        !draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        pproto = Paper.prototype,\n        rgurl = /^\\s*url\\((.+)\\)/,\n        Str = String,\n        $ = Snap._.$;\n    Snap.filter = {};\n    /*\\\n     * Paper.filter\n     [ method ]\n     **\n     * Creates a `<filter>` element\n     **\n     - filstr (string) SVG fragment of filter provided as a string\n     = (object) @Element\n     * Note: It is recommended to use filters embedded into the page inside an empty SVG element.\n     > Usage\n     | var f = paper.filter('<feGaussianBlur stdDeviation=\"2\"/>'),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    pproto.filter = function (filstr) {\n        var paper = this;\n        if (paper.type != \"svg\") {\n            paper = paper.paper;\n        }\n        var f = Snap.parse(Str(filstr)),\n            id = Snap._.id(),\n            width = paper.node.offsetWidth,\n            height = paper.node.offsetHeight,\n            filter = $(\"filter\");\n        $(filter, {\n            id: id,\n            filterUnits: \"userSpaceOnUse\"\n        });\n        filter.appendChild(f.node);\n        paper.defs.appendChild(filter);\n        return new Element(filter);\n    };\n\n    eve.on(\"snap.util.getattr.filter\", function () {\n        eve.stop();\n        var p = $(this.node, \"filter\");\n        if (p) {\n            var match = Str(p).match(rgurl);\n            return match && Snap.select(match[1]);\n        }\n    });\n    eve.on(\"snap.util.attr.filter\", function (value) {\n        if (value instanceof Element && value.type == \"filter\") {\n            eve.stop();\n            var id = value.node.id;\n            if (!id) {\n                $(value.node, {id: value.id});\n                id = value.id;\n            }\n            $(this.node, {\n                filter: Snap.url(id)\n            });\n        }\n        if (!value || value == \"none\") {\n            eve.stop();\n            this.node.removeAttribute(\"filter\");\n        }\n    });\n    /*\\\n     * Snap.filter.blur\n     [ method ]\n     **\n     * Returns an SVG markup string for the blur filter\n     **\n     - x (number) amount of horizontal blur, in pixels\n     - y (number) #optional amount of vertical blur, in pixels\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.blur(5, 10)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.blur = function (x, y) {\n        if (x == null) {\n            x = 2;\n        }\n        var def = y == null ? x : [x, y];\n        return Snap.format('\\<feGaussianBlur stdDeviation=\"{def}\"/>', {\n            def: def\n        });\n    };\n    Snap.filter.blur.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.shadow\n     [ method ]\n     **\n     * Returns an SVG markup string for the shadow filter\n     **\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - blur (number) #optional amount of blur\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * which makes blur default to `4`. Or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - opacity (number) #optional `0..1` opacity of the shadow\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.shadow(0, 2, .3)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.shadow = function (dx, dy, blur, color, opacity) {\n        if (opacity == null) {\n            if (color == null) {\n                opacity = blur;\n                blur = 4;\n                color = \"#000\";\n            } else {\n                opacity = color;\n                color = blur;\n                blur = 4;\n            }\n        }\n        if (blur == null) {\n            blur = 4;\n        }\n        if (opacity == null) {\n            opacity = 1;\n        }\n        if (dx == null) {\n            dx = 0;\n            dy = 2;\n        }\n        if (dy == null) {\n            dy = dx;\n        }\n        color = Snap.color(color);\n        return Snap.format('<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"{blur}\"/><feOffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"/><feFlood flood-color=\"{color}\"/><feComposite in2=\"offsetblur\" operator=\"in\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\"{opacity}\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge>', {\n            color: color,\n            dx: dx,\n            dy: dy,\n            blur: blur,\n            opacity: opacity\n        });\n    };\n    Snap.filter.shadow.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.grayscale\n     [ method ]\n     **\n     * Returns an SVG markup string for the grayscale filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.grayscale = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\"/>', {\n            a: 0.2126 + 0.7874 * (1 - amount),\n            b: 0.7152 - 0.7152 * (1 - amount),\n            c: 0.0722 - 0.0722 * (1 - amount),\n            d: 0.2126 - 0.2126 * (1 - amount),\n            e: 0.7152 + 0.2848 * (1 - amount),\n            f: 0.0722 - 0.0722 * (1 - amount),\n            g: 0.2126 - 0.2126 * (1 - amount),\n            h: 0.0722 + 0.9278 * (1 - amount)\n        });\n    };\n    Snap.filter.grayscale.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.sepia\n     [ method ]\n     **\n     * Returns an SVG markup string for the sepia filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.sepia = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\"/>', {\n            a: 0.393 + 0.607 * (1 - amount),\n            b: 0.769 - 0.769 * (1 - amount),\n            c: 0.189 - 0.189 * (1 - amount),\n            d: 0.349 - 0.349 * (1 - amount),\n            e: 0.686 + 0.314 * (1 - amount),\n            f: 0.168 - 0.168 * (1 - amount),\n            g: 0.272 - 0.272 * (1 - amount),\n            h: 0.534 - 0.534 * (1 - amount),\n            i: 0.131 + 0.869 * (1 - amount)\n        });\n    };\n    Snap.filter.sepia.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.saturate\n     [ method ]\n     **\n     * Returns an SVG markup string for the saturate filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.saturate = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"saturate\" values=\"{amount}\"/>', {\n            amount: 1 - amount\n        });\n    };\n    Snap.filter.saturate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.hueRotate\n     [ method ]\n     **\n     * Returns an SVG markup string for the hue-rotate filter\n     **\n     - angle (number) angle of rotation\n     = (string) filter representation\n    \\*/\n    Snap.filter.hueRotate = function (angle) {\n        angle = angle || 0;\n        return Snap.format('<feColorMatrix type=\"hueRotate\" values=\"{angle}\"/>', {\n            angle: angle\n        });\n    };\n    Snap.filter.hueRotate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.invert\n     [ method ]\n     **\n     * Returns an SVG markup string for the invert filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.invert = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n//        <feColorMatrix type=\"matrix\" values=\"-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0\" color-interpolation-filters=\"sRGB\"/>\n        return Snap.format('<feComponentTransfer><feFuncR type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncG type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncB type=\"table\" tableValues=\"{amount} {amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: 1 - amount\n        });\n    };\n    Snap.filter.invert.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.brightness\n     [ method ]\n     **\n     * Returns an SVG markup string for the brightness filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.brightness = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\"/><feFuncG type=\"linear\" slope=\"{amount}\"/><feFuncB type=\"linear\" slope=\"{amount}\"/></feComponentTransfer>', {\n            amount: amount\n        });\n    };\n    Snap.filter.brightness.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.contrast\n     [ method ]\n     **\n     * Returns an SVG markup string for the contrast filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.contrast = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncG type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncB type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: .5 - amount / 2\n        });\n    };\n    Snap.filter.contrast.toString = function () {\n        return this();\n    };\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var box = Snap._.box,\n        is = Snap.is,\n        firstLetter = /^[^a-z]*([tbmlrc])/i,\n        toString = function () {\n            return \"T\" + this.dx + \",\" + this.dy;\n        };\n    /*\\\n     * Element.getAlign\n     [ method ]\n     **\n     * Returns shift needed to align the element relatively to given element.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string\n     > Usage\n     | el.transform(el.getAlign(el2, \"top\"));\n     * or\n     | var dy = el.getAlign(el2, \"top\").dy;\n    \\*/\n    Element.prototype.getAlign = function (el, way) {\n        if (way == null && is(el, \"string\")) {\n            way = el;\n            el = null;\n        }\n        el = el || this.paper;\n        var bx = el.getBBox ? el.getBBox() : box(el),\n            bb = this.getBBox(),\n            out = {};\n        way = way && way.match(firstLetter);\n        way = way ? way[1].toLowerCase() : \"c\";\n        switch (way) {\n            case \"t\":\n                out.dx = 0;\n                out.dy = bx.y - bb.y;\n            break;\n            case \"b\":\n                out.dx = 0;\n                out.dy = bx.y2 - bb.y2;\n            break;\n            case \"m\":\n                out.dx = 0;\n                out.dy = bx.cy - bb.cy;\n            break;\n            case \"l\":\n                out.dx = bx.x - bb.x;\n                out.dy = 0;\n            break;\n            case \"r\":\n                out.dx = bx.x2 - bb.x2;\n                out.dy = 0;\n            break;\n            default:\n                out.dx = bx.cx - bb.cx;\n                out.dy = 0;\n            break;\n        }\n        out.toString = toString;\n        return out;\n    };\n    /*\\\n     * Element.align\n     [ method ]\n     **\n     * Aligns the element relatively to given one via transformation.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object) this element\n     > Usage\n     | el.align(el2, \"top\");\n     * or\n     | el.align(\"middle\");\n    \\*/\n    Element.prototype.align = function (el, way) {\n        return this.transform(\"...\" + this.getAlign(el, way));\n    };\n});\n\n// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    // Colours are from https://www.materialui.co\n    var red         = \"#ffebee#ffcdd2#ef9a9a#e57373#ef5350#f44336#e53935#d32f2f#c62828#b71c1c#ff8a80#ff5252#ff1744#d50000\",\n        pink        = \"#FCE4EC#F8BBD0#F48FB1#F06292#EC407A#E91E63#D81B60#C2185B#AD1457#880E4F#FF80AB#FF4081#F50057#C51162\",\n        purple      = \"#F3E5F5#E1BEE7#CE93D8#BA68C8#AB47BC#9C27B0#8E24AA#7B1FA2#6A1B9A#4A148C#EA80FC#E040FB#D500F9#AA00FF\",\n        deeppurple  = \"#EDE7F6#D1C4E9#B39DDB#9575CD#7E57C2#673AB7#5E35B1#512DA8#4527A0#311B92#B388FF#7C4DFF#651FFF#6200EA\",\n        indigo      = \"#E8EAF6#C5CAE9#9FA8DA#7986CB#5C6BC0#3F51B5#3949AB#303F9F#283593#1A237E#8C9EFF#536DFE#3D5AFE#304FFE\",\n        blue        = \"#E3F2FD#BBDEFB#90CAF9#64B5F6#64B5F6#2196F3#1E88E5#1976D2#1565C0#0D47A1#82B1FF#448AFF#2979FF#2962FF\",\n        lightblue   = \"#E1F5FE#B3E5FC#81D4FA#4FC3F7#29B6F6#03A9F4#039BE5#0288D1#0277BD#01579B#80D8FF#40C4FF#00B0FF#0091EA\",\n        cyan        = \"#E0F7FA#B2EBF2#80DEEA#4DD0E1#26C6DA#00BCD4#00ACC1#0097A7#00838F#006064#84FFFF#18FFFF#00E5FF#00B8D4\",\n        teal        = \"#E0F2F1#B2DFDB#80CBC4#4DB6AC#26A69A#009688#00897B#00796B#00695C#004D40#A7FFEB#64FFDA#1DE9B6#00BFA5\",\n        green       = \"#E8F5E9#C8E6C9#A5D6A7#81C784#66BB6A#4CAF50#43A047#388E3C#2E7D32#1B5E20#B9F6CA#69F0AE#00E676#00C853\",\n        lightgreen  = \"#F1F8E9#DCEDC8#C5E1A5#AED581#9CCC65#8BC34A#7CB342#689F38#558B2F#33691E#CCFF90#B2FF59#76FF03#64DD17\",\n        lime        = \"#F9FBE7#F0F4C3#E6EE9C#DCE775#D4E157#CDDC39#C0CA33#AFB42B#9E9D24#827717#F4FF81#EEFF41#C6FF00#AEEA00\",\n        yellow      = \"#FFFDE7#FFF9C4#FFF59D#FFF176#FFEE58#FFEB3B#FDD835#FBC02D#F9A825#F57F17#FFFF8D#FFFF00#FFEA00#FFD600\",\n        amber       = \"#FFF8E1#FFECB3#FFE082#FFD54F#FFCA28#FFC107#FFB300#FFA000#FF8F00#FF6F00#FFE57F#FFD740#FFC400#FFAB00\",\n        orange      = \"#FFF3E0#FFE0B2#FFCC80#FFB74D#FFA726#FF9800#FB8C00#F57C00#EF6C00#E65100#FFD180#FFAB40#FF9100#FF6D00\",\n        deeporange  = \"#FBE9E7#FFCCBC#FFAB91#FF8A65#FF7043#FF5722#F4511E#E64A19#D84315#BF360C#FF9E80#FF6E40#FF3D00#DD2C00\",\n        brown       = \"#EFEBE9#D7CCC8#BCAAA4#A1887F#8D6E63#795548#6D4C41#5D4037#4E342E#3E2723\",\n        grey        = \"#FAFAFA#F5F5F5#EEEEEE#E0E0E0#BDBDBD#9E9E9E#757575#616161#424242#212121\",\n        bluegrey    = \"#ECEFF1#CFD8DC#B0BEC5#90A4AE#78909C#607D8B#546E7A#455A64#37474F#263238\";\n    /*\\\n     * Snap.mui\n     [ property ]\n     **\n     * Contain Material UI colours.\n     | Snap().rect(0, 0, 10, 10).attr({fill: Snap.mui.deeppurple, stroke: Snap.mui.amber[600]});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.mui = {};\n    /*\\\n     * Snap.flat\n     [ property ]\n     **\n     * Contain Flat UI colours.\n     | Snap().rect(0, 0, 10, 10).attr({fill: Snap.flat.carrot, stroke: Snap.flat.wetasphalt});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.flat = {};\n    function saveColor(colors) {\n        colors = colors.split(/(?=#)/);\n        var color = new String(colors[5]);\n        color[50] = colors[0];\n        color[100] = colors[1];\n        color[200] = colors[2];\n        color[300] = colors[3];\n        color[400] = colors[4];\n        color[500] = colors[5];\n        color[600] = colors[6];\n        color[700] = colors[7];\n        color[800] = colors[8];\n        color[900] = colors[9];\n        if (colors[10]) {\n            color.A100 = colors[10];\n            color.A200 = colors[11];\n            color.A400 = colors[12];\n            color.A700 = colors[13];\n        }\n        return color;\n    }\n    Snap.mui.red = saveColor(red);\n    Snap.mui.pink = saveColor(pink);\n    Snap.mui.purple = saveColor(purple);\n    Snap.mui.deeppurple = saveColor(deeppurple);\n    Snap.mui.indigo = saveColor(indigo);\n    Snap.mui.blue = saveColor(blue);\n    Snap.mui.lightblue = saveColor(lightblue);\n    Snap.mui.cyan = saveColor(cyan);\n    Snap.mui.teal = saveColor(teal);\n    Snap.mui.green = saveColor(green);\n    Snap.mui.lightgreen = saveColor(lightgreen);\n    Snap.mui.lime = saveColor(lime);\n    Snap.mui.yellow = saveColor(yellow);\n    Snap.mui.amber = saveColor(amber);\n    Snap.mui.orange = saveColor(orange);\n    Snap.mui.deeporange = saveColor(deeporange);\n    Snap.mui.brown = saveColor(brown);\n    Snap.mui.grey = saveColor(grey);\n    Snap.mui.bluegrey = saveColor(bluegrey);\n    Snap.flat.turquoise = \"#1abc9c\";\n    Snap.flat.greensea = \"#16a085\";\n    Snap.flat.sunflower = \"#f1c40f\";\n    Snap.flat.orange = \"#f39c12\";\n    Snap.flat.emerland = \"#2ecc71\";\n    Snap.flat.nephritis = \"#27ae60\";\n    Snap.flat.carrot = \"#e67e22\";\n    Snap.flat.pumpkin = \"#d35400\";\n    Snap.flat.peterriver = \"#3498db\";\n    Snap.flat.belizehole = \"#2980b9\";\n    Snap.flat.alizarin = \"#e74c3c\";\n    Snap.flat.pomegranate = \"#c0392b\";\n    Snap.flat.amethyst = \"#9b59b6\";\n    Snap.flat.wisteria = \"#8e44ad\";\n    Snap.flat.clouds = \"#ecf0f1\";\n    Snap.flat.silver = \"#bdc3c7\";\n    Snap.flat.wetasphalt = \"#34495e\";\n    Snap.flat.midnightblue = \"#2c3e50\";\n    Snap.flat.concrete = \"#95a5a6\";\n    Snap.flat.asbestos = \"#7f8c8d\";\n    /*\\\n     * Snap.importMUIColors\n     [ method ]\n     **\n     * Imports Material UI colours into global object.\n     | Snap.importMUIColors();\n     | Snap().rect(0, 0, 10, 10).attr({fill: deeppurple, stroke: amber[600]});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.importMUIColors = function () {\n        for (var color in Snap.mui) {\n            if (Snap.mui.hasOwnProperty(color)) {\n                window[color] = Snap.mui[color];\n            }\n        }\n    };\n});\n\nreturn Snap;\n}));\n}.call(window));"],"sourceRoot":""}